
Project 12 - BMX160-Nucleo64.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08005a78  08005a78  00015a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b90  08005b90  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08005b90  08005b90  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b90  08005b90  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b90  08005b90  00015b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b94  08005b94  00015b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  20000060  08005bf8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  08005bf8  00020408  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013a1f  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000296c  00000000  00000000  00033aea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  00036458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d96  00000000  00000000  00037588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015de9  00000000  00000000  0003831e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001662c  00000000  00000000  0004e107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000873ef  00000000  00000000  00064733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004354  00000000  00000000  000ebb24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000efe78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005a60 	.word	0x08005a60

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08005a60 	.word	0x08005a60

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <i2c_write>:

uint8_t BMI160_WRITE_ADDRESS = 0x68 << 1;
uint8_t BMI160_READ_ADDRESS = (0x68 << 1) + 1;

//BMI160 low level functions
void i2c_write(I2C_HandleTypeDef* handle, uint8_t address, uint8_t reg_address, uint8_t data) {
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b087      	sub	sp, #28
 8000248:	af02      	add	r7, sp, #8
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	000c      	movs	r4, r1
 800024e:	0010      	movs	r0, r2
 8000250:	0019      	movs	r1, r3
 8000252:	1cfb      	adds	r3, r7, #3
 8000254:	1c22      	adds	r2, r4, #0
 8000256:	701a      	strb	r2, [r3, #0]
 8000258:	1cbb      	adds	r3, r7, #2
 800025a:	1c02      	adds	r2, r0, #0
 800025c:	701a      	strb	r2, [r3, #0]
 800025e:	1c7b      	adds	r3, r7, #1
 8000260:	1c0a      	adds	r2, r1, #0
 8000262:	701a      	strb	r2, [r3, #0]
    uint8_t buffer[2];
    buffer[0] = reg_address;
 8000264:	200c      	movs	r0, #12
 8000266:	183b      	adds	r3, r7, r0
 8000268:	1cba      	adds	r2, r7, #2
 800026a:	7812      	ldrb	r2, [r2, #0]
 800026c:	701a      	strb	r2, [r3, #0]
    buffer[1] = data;
 800026e:	183b      	adds	r3, r7, r0
 8000270:	1c7a      	adds	r2, r7, #1
 8000272:	7812      	ldrb	r2, [r2, #0]
 8000274:	705a      	strb	r2, [r3, #1]

    HAL_I2C_Master_Transmit(handle, address, buffer, 2, HAL_MAX_DELAY);
 8000276:	1cfb      	adds	r3, r7, #3
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	b299      	uxth	r1, r3
 800027c:	183a      	adds	r2, r7, r0
 800027e:	6878      	ldr	r0, [r7, #4]
 8000280:	2301      	movs	r3, #1
 8000282:	425b      	negs	r3, r3
 8000284:	9300      	str	r3, [sp, #0]
 8000286:	2302      	movs	r3, #2
 8000288:	f001 fb60 	bl	800194c <HAL_I2C_Master_Transmit>
}
 800028c:	46c0      	nop			; (mov r8, r8)
 800028e:	46bd      	mov	sp, r7
 8000290:	b005      	add	sp, #20
 8000292:	bd90      	pop	{r4, r7, pc}

08000294 <i2c_read>:

void i2c_read(I2C_HandleTypeDef* handle, uint8_t address, uint8_t reg_address, uint8_t *data, uint8_t length) {
 8000294:	b590      	push	{r4, r7, lr}
 8000296:	b089      	sub	sp, #36	; 0x24
 8000298:	af04      	add	r7, sp, #16
 800029a:	60f8      	str	r0, [r7, #12]
 800029c:	0008      	movs	r0, r1
 800029e:	0011      	movs	r1, r2
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	240b      	movs	r4, #11
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	1c02      	adds	r2, r0, #0
 80002a8:	701a      	strb	r2, [r3, #0]
 80002aa:	200a      	movs	r0, #10
 80002ac:	183b      	adds	r3, r7, r0
 80002ae:	1c0a      	adds	r2, r1, #0
 80002b0:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Read(handle, address, reg_address, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 80002b2:	193b      	adds	r3, r7, r4
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	b299      	uxth	r1, r3
 80002b8:	183b      	adds	r3, r7, r0
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	b29c      	uxth	r4, r3
 80002be:	2320      	movs	r3, #32
 80002c0:	18fb      	adds	r3, r7, r3
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	b29b      	uxth	r3, r3
 80002c6:	68f8      	ldr	r0, [r7, #12]
 80002c8:	2201      	movs	r2, #1
 80002ca:	4252      	negs	r2, r2
 80002cc:	9202      	str	r2, [sp, #8]
 80002ce:	9301      	str	r3, [sp, #4]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	2301      	movs	r3, #1
 80002d6:	0022      	movs	r2, r4
 80002d8:	f001 fc62 	bl	8001ba0 <HAL_I2C_Mem_Read>
}
 80002dc:	46c0      	nop			; (mov r8, r8)
 80002de:	46bd      	mov	sp, r7
 80002e0:	b005      	add	sp, #20
 80002e2:	bd90      	pop	{r4, r7, pc}

080002e4 <BMI160_Check>:

//BMI160 user functions

//Check connection
uint8_t BMI160_Check(I2C_HandleTypeDef* handle){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(handle, BMI160_WRITE_ADDRESS, 1, 10) && HAL_I2C_IsDeviceReady(handle, BMI160_READ_ADDRESS, 1, 10);
 80002ec:	4b12      	ldr	r3, [pc, #72]	; (8000338 <BMI160_Check+0x54>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	b299      	uxth	r1, r3
 80002f2:	6878      	ldr	r0, [r7, #4]
 80002f4:	230a      	movs	r3, #10
 80002f6:	2201      	movs	r2, #1
 80002f8:	f001 fd86 	bl	8001e08 <HAL_I2C_IsDeviceReady>
 80002fc:	1e03      	subs	r3, r0, #0
 80002fe:	d00b      	beq.n	8000318 <BMI160_Check+0x34>
 8000300:	4b0e      	ldr	r3, [pc, #56]	; (800033c <BMI160_Check+0x58>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	b299      	uxth	r1, r3
 8000306:	6878      	ldr	r0, [r7, #4]
 8000308:	230a      	movs	r3, #10
 800030a:	2201      	movs	r2, #1
 800030c:	f001 fd7c 	bl	8001e08 <HAL_I2C_IsDeviceReady>
 8000310:	1e03      	subs	r3, r0, #0
 8000312:	d001      	beq.n	8000318 <BMI160_Check+0x34>
 8000314:	2201      	movs	r2, #1
 8000316:	e000      	b.n	800031a <BMI160_Check+0x36>
 8000318:	2200      	movs	r2, #0
 800031a:	210f      	movs	r1, #15
 800031c:	187b      	adds	r3, r7, r1
 800031e:	701a      	strb	r2, [r3, #0]

	if (status == HAL_OK){
 8000320:	187b      	adds	r3, r7, r1
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d101      	bne.n	800032c <BMI160_Check+0x48>
		return HAL_OK;
 8000328:	2300      	movs	r3, #0
 800032a:	e000      	b.n	800032e <BMI160_Check+0x4a>
	}
	else {
		return HAL_ERROR;
 800032c:	2301      	movs	r3, #1
	}
}
 800032e:	0018      	movs	r0, r3
 8000330:	46bd      	mov	sp, r7
 8000332:	b004      	add	sp, #16
 8000334:	bd80      	pop	{r7, pc}
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	20000000 	.word	0x20000000
 800033c:	20000001 	.word	0x20000001

08000340 <BMI160_write_uint8>:

//Write
void BMI160_write_uint8(I2C_HandleTypeDef* handle, uint8_t reg_address, uint8_t data) {
 8000340:	b590      	push	{r4, r7, lr}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	0008      	movs	r0, r1
 800034a:	0011      	movs	r1, r2
 800034c:	1cfb      	adds	r3, r7, #3
 800034e:	1c02      	adds	r2, r0, #0
 8000350:	701a      	strb	r2, [r3, #0]
 8000352:	1cbb      	adds	r3, r7, #2
 8000354:	1c0a      	adds	r2, r1, #0
 8000356:	701a      	strb	r2, [r3, #0]
    i2c_write(handle, BMI160_WRITE_ADDRESS, reg_address, data);
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <BMI160_write_uint8+0x34>)
 800035a:	7819      	ldrb	r1, [r3, #0]
 800035c:	1cbb      	adds	r3, r7, #2
 800035e:	781c      	ldrb	r4, [r3, #0]
 8000360:	1cfb      	adds	r3, r7, #3
 8000362:	781a      	ldrb	r2, [r3, #0]
 8000364:	6878      	ldr	r0, [r7, #4]
 8000366:	0023      	movs	r3, r4
 8000368:	f7ff ff6c 	bl	8000244 <i2c_write>
}
 800036c:	46c0      	nop			; (mov r8, r8)
 800036e:	46bd      	mov	sp, r7
 8000370:	b003      	add	sp, #12
 8000372:	bd90      	pop	{r4, r7, pc}
 8000374:	20000000 	.word	0x20000000

08000378 <BMI160_read_uint8>:

//Read
uint8_t BMI160_read_uint8(I2C_HandleTypeDef* handle, uint8_t reg_address) {
 8000378:	b5b0      	push	{r4, r5, r7, lr}
 800037a:	b086      	sub	sp, #24
 800037c:	af02      	add	r7, sp, #8
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	000a      	movs	r2, r1
 8000382:	1cfb      	adds	r3, r7, #3
 8000384:	701a      	strb	r2, [r3, #0]
    uint8_t data;
    i2c_read(handle, BMI160_READ_ADDRESS, reg_address, &data, 1);
 8000386:	4b09      	ldr	r3, [pc, #36]	; (80003ac <BMI160_read_uint8+0x34>)
 8000388:	7819      	ldrb	r1, [r3, #0]
 800038a:	250f      	movs	r5, #15
 800038c:	197c      	adds	r4, r7, r5
 800038e:	1cfb      	adds	r3, r7, #3
 8000390:	781a      	ldrb	r2, [r3, #0]
 8000392:	6878      	ldr	r0, [r7, #4]
 8000394:	2301      	movs	r3, #1
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	0023      	movs	r3, r4
 800039a:	f7ff ff7b 	bl	8000294 <i2c_read>
    return data;
 800039e:	197b      	adds	r3, r7, r5
 80003a0:	781b      	ldrb	r3, [r3, #0]
}
 80003a2:	0018      	movs	r0, r3
 80003a4:	46bd      	mov	sp, r7
 80003a6:	b004      	add	sp, #16
 80003a8:	bdb0      	pop	{r4, r5, r7, pc}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	20000001 	.word	0x20000001

080003b0 <BMI160_read_int16>:

int16_t BMI160_read_int16(I2C_HandleTypeDef* handle, uint8_t reg_address) {
 80003b0:	b590      	push	{r4, r7, lr}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	000a      	movs	r2, r1
 80003ba:	1cfb      	adds	r3, r7, #3
 80003bc:	701a      	strb	r2, [r3, #0]
    uint8_t data[2];
    data[0] = BMI160_read_uint8(handle, reg_address);
 80003be:	1cfb      	adds	r3, r7, #3
 80003c0:	781a      	ldrb	r2, [r3, #0]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	0011      	movs	r1, r2
 80003c6:	0018      	movs	r0, r3
 80003c8:	f7ff ffd6 	bl	8000378 <BMI160_read_uint8>
 80003cc:	0003      	movs	r3, r0
 80003ce:	001a      	movs	r2, r3
 80003d0:	240c      	movs	r4, #12
 80003d2:	193b      	adds	r3, r7, r4
 80003d4:	701a      	strb	r2, [r3, #0]
    data[1] = BMI160_read_uint8(handle, reg_address + 1);
 80003d6:	1cfb      	adds	r3, r7, #3
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	3301      	adds	r3, #1
 80003dc:	b2da      	uxtb	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	0011      	movs	r1, r2
 80003e2:	0018      	movs	r0, r3
 80003e4:	f7ff ffc8 	bl	8000378 <BMI160_read_uint8>
 80003e8:	0003      	movs	r3, r0
 80003ea:	001a      	movs	r2, r3
 80003ec:	193b      	adds	r3, r7, r4
 80003ee:	705a      	strb	r2, [r3, #1]

    // Combine the two 8-bit values into a 16-bit signed integer
    int16_t result = (int16_t)((data[1] << 8) | data[0]);
 80003f0:	193b      	adds	r3, r7, r4
 80003f2:	785b      	ldrb	r3, [r3, #1]
 80003f4:	021b      	lsls	r3, r3, #8
 80003f6:	b219      	sxth	r1, r3
 80003f8:	193b      	adds	r3, r7, r4
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	b21a      	sxth	r2, r3
 80003fe:	200e      	movs	r0, #14
 8000400:	183b      	adds	r3, r7, r0
 8000402:	430a      	orrs	r2, r1
 8000404:	801a      	strh	r2, [r3, #0]

    return result;
 8000406:	183b      	adds	r3, r7, r0
 8000408:	2200      	movs	r2, #0
 800040a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800040c:	0018      	movs	r0, r3
 800040e:	46bd      	mov	sp, r7
 8000410:	b005      	add	sp, #20
 8000412:	bd90      	pop	{r4, r7, pc}

08000414 <BMI160_Init>:
	uint64_t result = (uint64_t)((uint64_t)data[2] << 16) | ((uint64_t)data[1] << 8) | data[0];

	return result;
}

void BMI160_Init(I2C_HandleTypeDef* handle){
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
	//System power up
	HAL_Delay(1);
 800041c:	2001      	movs	r0, #1
 800041e:	f000 fe43 	bl	80010a8 <HAL_Delay>

	//Accelerometer
	BMI160_write_uint8(handle, BMI160_COMMAND_REG_ADDR, BMI160_ACCEL_NORMAL_MODE);
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	2211      	movs	r2, #17
 8000426:	217e      	movs	r1, #126	; 0x7e
 8000428:	0018      	movs	r0, r3
 800042a:	f7ff ff89 	bl	8000340 <BMI160_write_uint8>
	HAL_Delay(5);
 800042e:	2005      	movs	r0, #5
 8000430:	f000 fe3a 	bl	80010a8 <HAL_Delay>

	//Gyro
	BMI160_write_uint8(handle, BMI160_COMMAND_REG_ADDR, BMI160_GYRO_NORMAL_MODE);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2215      	movs	r2, #21
 8000438:	217e      	movs	r1, #126	; 0x7e
 800043a:	0018      	movs	r0, r3
 800043c:	f7ff ff80 	bl	8000340 <BMI160_write_uint8>
	HAL_Delay(100);
 8000440:	2064      	movs	r0, #100	; 0x64
 8000442:	f000 fe31 	bl	80010a8 <HAL_Delay>
}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	b002      	add	sp, #8
 800044c:	bd80      	pop	{r7, pc}
	...

08000450 <getEmptyGimbalIndex>:
	}

	return -1;
}

int8_t getEmptyGimbalIndex(){
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < MAX_GIMBAL_NUM; i++){
 8000456:	1dfb      	adds	r3, r7, #7
 8000458:	2200      	movs	r2, #0
 800045a:	701a      	strb	r2, [r3, #0]
 800045c:	e00e      	b.n	800047c <getEmptyGimbalIndex+0x2c>
		if (gimbal_symbols[i] == 0){
 800045e:	1dfb      	adds	r3, r7, #7
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	4a0b      	ldr	r2, [pc, #44]	; (8000490 <getEmptyGimbalIndex+0x40>)
 8000464:	5cd3      	ldrb	r3, [r2, r3]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d103      	bne.n	8000472 <getEmptyGimbalIndex+0x22>
			return i;
 800046a:	1dfb      	adds	r3, r7, #7
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	b25b      	sxtb	r3, r3
 8000470:	e00a      	b.n	8000488 <getEmptyGimbalIndex+0x38>
	for (uint8_t i = 0; i < MAX_GIMBAL_NUM; i++){
 8000472:	1dfb      	adds	r3, r7, #7
 8000474:	781a      	ldrb	r2, [r3, #0]
 8000476:	1dfb      	adds	r3, r7, #7
 8000478:	3201      	adds	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
 800047c:	1dfb      	adds	r3, r7, #7
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b1d      	cmp	r3, #29
 8000482:	d9ec      	bls.n	800045e <getEmptyGimbalIndex+0xe>
		}
	}

	return -1;
 8000484:	2301      	movs	r3, #1
 8000486:	425b      	negs	r3, r3
}
 8000488:	0018      	movs	r0, r3
 800048a:	46bd      	mov	sp, r7
 800048c:	b002      	add	sp, #8
 800048e:	bd80      	pop	{r7, pc}
 8000490:	2000007c 	.word	0x2000007c

08000494 <initGimbals>:

	return  (uint32_t) ( ((float)(value - prev_min) / (float)(prev_max - prev_min)) * (float)(after_max - after_min) + (float) after_min);
}

//========== USER FUNCTIONS
void initGimbals(){
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < MAX_GIMBAL_NUM; i++){
 800049a:	1dfb      	adds	r3, r7, #7
 800049c:	2200      	movs	r2, #0
 800049e:	701a      	strb	r2, [r3, #0]
 80004a0:	e014      	b.n	80004cc <initGimbals+0x38>
		gimbal_symbols[i] = 0;
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	4a0e      	ldr	r2, [pc, #56]	; (80004e0 <initGimbals+0x4c>)
 80004a8:	2100      	movs	r1, #0
 80004aa:	54d1      	strb	r1, [r2, r3]
		gimbal_positions[i] = 0;
 80004ac:	1dfb      	adds	r3, r7, #7
 80004ae:	781a      	ldrb	r2, [r3, #0]
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <initGimbals+0x50>)
 80004b2:	0092      	lsls	r2, r2, #2
 80004b4:	2100      	movs	r1, #0
 80004b6:	50d1      	str	r1, [r2, r3]
		gimbal_types[i] = 0;
 80004b8:	1dfb      	adds	r3, r7, #7
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	4a0a      	ldr	r2, [pc, #40]	; (80004e8 <initGimbals+0x54>)
 80004be:	2100      	movs	r1, #0
 80004c0:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < MAX_GIMBAL_NUM; i++){
 80004c2:	1dfb      	adds	r3, r7, #7
 80004c4:	781a      	ldrb	r2, [r3, #0]
 80004c6:	1dfb      	adds	r3, r7, #7
 80004c8:	3201      	adds	r2, #1
 80004ca:	701a      	strb	r2, [r3, #0]
 80004cc:	1dfb      	adds	r3, r7, #7
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b1d      	cmp	r3, #29
 80004d2:	d9e6      	bls.n	80004a2 <initGimbals+0xe>
	}
}
 80004d4:	46c0      	nop			; (mov r8, r8)
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b002      	add	sp, #8
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	2000007c 	.word	0x2000007c
 80004e4:	2000009c 	.word	0x2000009c
 80004e8:	20000114 	.word	0x20000114

080004ec <registerGimbal>:

void registerGimbal(char symbol, uint8_t type){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	0002      	movs	r2, r0
 80004f4:	1dfb      	adds	r3, r7, #7
 80004f6:	701a      	strb	r2, [r3, #0]
 80004f8:	1dbb      	adds	r3, r7, #6
 80004fa:	1c0a      	adds	r2, r1, #0
 80004fc:	701a      	strb	r2, [r3, #0]
	//Find empty slot
	uint8_t emptyIndex = getEmptyGimbalIndex(); if (emptyIndex == -1) {return;}
 80004fe:	f7ff ffa7 	bl	8000450 <getEmptyGimbalIndex>
 8000502:	0003      	movs	r3, r0
 8000504:	001a      	movs	r2, r3
 8000506:	200f      	movs	r0, #15
 8000508:	183b      	adds	r3, r7, r0
 800050a:	701a      	strb	r2, [r3, #0]

	//Assign gimbal
	gimbal_symbols[emptyIndex] = symbol;
 800050c:	183b      	adds	r3, r7, r0
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	4a0e      	ldr	r2, [pc, #56]	; (800054c <registerGimbal+0x60>)
 8000512:	1df9      	adds	r1, r7, #7
 8000514:	7809      	ldrb	r1, [r1, #0]
 8000516:	54d1      	strb	r1, [r2, r3]
	gimbal_positions[emptyIndex] = 600;
 8000518:	183b      	adds	r3, r7, r0
 800051a:	781a      	ldrb	r2, [r3, #0]
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <registerGimbal+0x64>)
 800051e:	0092      	lsls	r2, r2, #2
 8000520:	2196      	movs	r1, #150	; 0x96
 8000522:	0089      	lsls	r1, r1, #2
 8000524:	50d1      	str	r1, [r2, r3]

	//Assign type
	if (type == ABSOLUTE_GIMBAL || type == PUSH_GIMBAL){
 8000526:	1dbb      	adds	r3, r7, #6
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d003      	beq.n	8000536 <registerGimbal+0x4a>
 800052e:	1dbb      	adds	r3, r7, #6
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d106      	bne.n	8000544 <registerGimbal+0x58>
		gimbal_types[emptyIndex] = type;
 8000536:	230f      	movs	r3, #15
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4a05      	ldr	r2, [pc, #20]	; (8000554 <registerGimbal+0x68>)
 800053e:	1db9      	adds	r1, r7, #6
 8000540:	7809      	ldrb	r1, [r1, #0]
 8000542:	54d1      	strb	r1, [r2, r3]
	}
}
 8000544:	46bd      	mov	sp, r7
 8000546:	b004      	add	sp, #16
 8000548:	bd80      	pop	{r7, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	2000007c 	.word	0x2000007c
 8000550:	2000009c 	.word	0x2000009c
 8000554:	20000114 	.word	0x20000114

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055a:	46c6      	mov	lr, r8
 800055c:	b500      	push	{lr}
 800055e:	b0a4      	sub	sp, #144	; 0x90
 8000560:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fd24 	bl	8000fae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f8f5 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 fac1 	bl	8000af0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800056e:	f000 f935 	bl	80007dc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000572:	f000 fa89 	bl	8000a88 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000576:	f000 f9a1 	bl	80008bc <MX_TIM1_Init>
  MX_TIM3_Init();
 800057a:	f000 f9fb 	bl	8000974 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  uint8_t connection_established = 0;
 800057e:	2377      	movs	r3, #119	; 0x77
 8000580:	18fb      	adds	r3, r7, r3
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]

	// Start timer
	HAL_TIM_Base_Start(&htim1);
 8000586:	4b6c      	ldr	r3, [pc, #432]	; (8000738 <main+0x1e0>)
 8000588:	0018      	movs	r0, r3
 800058a:	f002 fd1b 	bl	8002fc4 <HAL_TIM_Base_Start>

	uint16_t timer_prev;
	uint16_t timer_current;

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800058e:	4b6b      	ldr	r3, [pc, #428]	; (800073c <main+0x1e4>)
 8000590:	2100      	movs	r1, #0
 8000592:	0018      	movs	r0, r3
 8000594:	f002 fdbc 	bl	8003110 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000598:	4b68      	ldr	r3, [pc, #416]	; (800073c <main+0x1e4>)
 800059a:	2104      	movs	r1, #4
 800059c:	0018      	movs	r0, r3
 800059e:	f002 fdb7 	bl	8003110 <HAL_TIM_PWM_Start>

	initGimbals();
 80005a2:	f7ff ff77 	bl	8000494 <initGimbals>

	registerGimbal('X', ABSOLUTE_GIMBAL);
 80005a6:	2100      	movs	r1, #0
 80005a8:	2058      	movs	r0, #88	; 0x58
 80005aa:	f7ff ff9f 	bl	80004ec <registerGimbal>
	registerGimbal('Y', ABSOLUTE_GIMBAL);
 80005ae:	2100      	movs	r1, #0
 80005b0:	2059      	movs	r0, #89	; 0x59
 80005b2:	f7ff ff9b 	bl	80004ec <registerGimbal>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive(&huart2, Rx_data, 2, 10);
 80005b6:	4962      	ldr	r1, [pc, #392]	; (8000740 <main+0x1e8>)
 80005b8:	4862      	ldr	r0, [pc, #392]	; (8000744 <main+0x1ec>)
 80005ba:	230a      	movs	r3, #10
 80005bc:	2202      	movs	r2, #2
 80005be:	f003 fd79 	bl	80040b4 <HAL_UART_Receive>
	      TIM3->CCR1 = 200 + (uint32_t) Rx_data[0];
 80005c2:	4b5f      	ldr	r3, [pc, #380]	; (8000740 <main+0x1e8>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	001a      	movs	r2, r3
 80005c8:	4b5f      	ldr	r3, [pc, #380]	; (8000748 <main+0x1f0>)
 80005ca:	32c8      	adds	r2, #200	; 0xc8
 80005cc:	635a      	str	r2, [r3, #52]	; 0x34
	      TIM3->CCR2 = 200 + (uint32_t) Rx_data[1];
 80005ce:	4b5c      	ldr	r3, [pc, #368]	; (8000740 <main+0x1e8>)
 80005d0:	785b      	ldrb	r3, [r3, #1]
 80005d2:	001a      	movs	r2, r3
 80005d4:	4b5c      	ldr	r3, [pc, #368]	; (8000748 <main+0x1f0>)
 80005d6:	32c8      	adds	r2, #200	; 0xc8
 80005d8:	639a      	str	r2, [r3, #56]	; 0x38

	      // Check connection
	  	if (connection_established == 0 && BMI160_Check(&hi2c1) == HAL_OK) { // Connect
 80005da:	2477      	movs	r4, #119	; 0x77
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d119      	bne.n	8000618 <main+0xc0>
 80005e4:	4b59      	ldr	r3, [pc, #356]	; (800074c <main+0x1f4>)
 80005e6:	0018      	movs	r0, r3
 80005e8:	f7ff fe7c 	bl	80002e4 <BMI160_Check>
 80005ec:	1e03      	subs	r3, r0, #0
 80005ee:	d113      	bne.n	8000618 <main+0xc0>
	  		BMI160_Init(&hi2c1);
 80005f0:	4b56      	ldr	r3, [pc, #344]	; (800074c <main+0x1f4>)
 80005f2:	0018      	movs	r0, r3
 80005f4:	f7ff ff0e 	bl	8000414 <BMI160_Init>
	  		connection_established = 1;
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]

	  		//Restart timer
	  		timer_prev = __HAL_TIM_GET_COUNTER(&htim1);
 80005fe:	4b4e      	ldr	r3, [pc, #312]	; (8000738 <main+0x1e0>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000604:	2374      	movs	r3, #116	; 0x74
 8000606:	18fb      	adds	r3, r7, r3
 8000608:	801a      	strh	r2, [r3, #0]
	  		timer_current = __HAL_TIM_GET_COUNTER(&htim1);
 800060a:	4b4b      	ldr	r3, [pc, #300]	; (8000738 <main+0x1e0>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000610:	2372      	movs	r3, #114	; 0x72
 8000612:	18fb      	adds	r3, r7, r3
 8000614:	801a      	strh	r2, [r3, #0]
 8000616:	e00d      	b.n	8000634 <main+0xdc>
	  	} else if (connection_established == 1 && BMI160_Check(&hi2c1) != HAL_OK) { // Disconnect
 8000618:	2477      	movs	r4, #119	; 0x77
 800061a:	193b      	adds	r3, r7, r4
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d108      	bne.n	8000634 <main+0xdc>
 8000622:	4b4a      	ldr	r3, [pc, #296]	; (800074c <main+0x1f4>)
 8000624:	0018      	movs	r0, r3
 8000626:	f7ff fe5d 	bl	80002e4 <BMI160_Check>
 800062a:	1e03      	subs	r3, r0, #0
 800062c:	d002      	beq.n	8000634 <main+0xdc>
	  		connection_established = 0;
 800062e:	193b      	adds	r3, r7, r4
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
	  	}

	  	if (connection_established == 1) { // Run code
 8000634:	2377      	movs	r3, #119	; 0x77
 8000636:	18fb      	adds	r3, r7, r3
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d177      	bne.n	800072e <main+0x1d6>
	  		int16_t GyroX = BMI160_read_int16(&hi2c1, BMI160_GYRO_DATA_ADDR);
 800063e:	2570      	movs	r5, #112	; 0x70
 8000640:	197c      	adds	r4, r7, r5
 8000642:	4b42      	ldr	r3, [pc, #264]	; (800074c <main+0x1f4>)
 8000644:	210c      	movs	r1, #12
 8000646:	0018      	movs	r0, r3
 8000648:	f7ff feb2 	bl	80003b0 <BMI160_read_int16>
 800064c:	0003      	movs	r3, r0
 800064e:	8023      	strh	r3, [r4, #0]
	  		int16_t GyroY = BMI160_read_int16(&hi2c1, BMI160_GYRO_DATA_ADDR + 2);
 8000650:	266e      	movs	r6, #110	; 0x6e
 8000652:	19bc      	adds	r4, r7, r6
 8000654:	4b3d      	ldr	r3, [pc, #244]	; (800074c <main+0x1f4>)
 8000656:	210e      	movs	r1, #14
 8000658:	0018      	movs	r0, r3
 800065a:	f7ff fea9 	bl	80003b0 <BMI160_read_int16>
 800065e:	0003      	movs	r3, r0
 8000660:	8023      	strh	r3, [r4, #0]
	  		int16_t GyroZ = BMI160_read_int16(&hi2c1, BMI160_GYRO_DATA_ADDR + 4);
 8000662:	236c      	movs	r3, #108	; 0x6c
 8000664:	18fc      	adds	r4, r7, r3
 8000666:	4b39      	ldr	r3, [pc, #228]	; (800074c <main+0x1f4>)
 8000668:	2110      	movs	r1, #16
 800066a:	0018      	movs	r0, r3
 800066c:	f7ff fea0 	bl	80003b0 <BMI160_read_int16>
 8000670:	0003      	movs	r3, r0
 8000672:	8023      	strh	r3, [r4, #0]

	  		int16_t AccX = BMI160_read_int16(&hi2c1, BMI160_ACCEL_DATA_ADDR);
 8000674:	226a      	movs	r2, #106	; 0x6a
 8000676:	18bc      	adds	r4, r7, r2
 8000678:	4b34      	ldr	r3, [pc, #208]	; (800074c <main+0x1f4>)
 800067a:	2112      	movs	r1, #18
 800067c:	0018      	movs	r0, r3
 800067e:	f7ff fe97 	bl	80003b0 <BMI160_read_int16>
 8000682:	0003      	movs	r3, r0
 8000684:	8023      	strh	r3, [r4, #0]
	  		int16_t AccY = BMI160_read_int16(&hi2c1, BMI160_ACCEL_DATA_ADDR + 2);
 8000686:	2168      	movs	r1, #104	; 0x68
 8000688:	187c      	adds	r4, r7, r1
 800068a:	4b30      	ldr	r3, [pc, #192]	; (800074c <main+0x1f4>)
 800068c:	2114      	movs	r1, #20
 800068e:	0018      	movs	r0, r3
 8000690:	f7ff fe8e 	bl	80003b0 <BMI160_read_int16>
 8000694:	0003      	movs	r3, r0
 8000696:	8023      	strh	r3, [r4, #0]
	  		int16_t AccZ = BMI160_read_int16(&hi2c1, BMI160_ACCEL_DATA_ADDR + 4);
 8000698:	2066      	movs	r0, #102	; 0x66
 800069a:	183c      	adds	r4, r7, r0
 800069c:	4b2b      	ldr	r3, [pc, #172]	; (800074c <main+0x1f4>)
 800069e:	2116      	movs	r1, #22
 80006a0:	0018      	movs	r0, r3
 80006a2:	f7ff fe85 	bl	80003b0 <BMI160_read_int16>
 80006a6:	0003      	movs	r3, r0
 80006a8:	8023      	strh	r3, [r4, #0]

	  		timer_current = __HAL_TIM_GET_COUNTER(&htim1);
 80006aa:	4b23      	ldr	r3, [pc, #140]	; (8000738 <main+0x1e0>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006b0:	2472      	movs	r4, #114	; 0x72
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	801a      	strh	r2, [r3, #0]

	  		char str[100];
	  		sprintf(str, "%d|%d|%d|%d|%d|%d|%d?", GyroX, GyroY, GyroZ, AccX, AccY, AccZ, timer_current - timer_prev);
 80006b6:	197b      	adds	r3, r7, r5
 80006b8:	2500      	movs	r5, #0
 80006ba:	5f5d      	ldrsh	r5, [r3, r5]
 80006bc:	46ac      	mov	ip, r5
 80006be:	19bb      	adds	r3, r7, r6
 80006c0:	2600      	movs	r6, #0
 80006c2:	5f9d      	ldrsh	r5, [r3, r6]
 80006c4:	46a8      	mov	r8, r5
 80006c6:	236c      	movs	r3, #108	; 0x6c
 80006c8:	18fb      	adds	r3, r7, r3
 80006ca:	2500      	movs	r5, #0
 80006cc:	5f5b      	ldrsh	r3, [r3, r5]
 80006ce:	226a      	movs	r2, #106	; 0x6a
 80006d0:	18ba      	adds	r2, r7, r2
 80006d2:	2500      	movs	r5, #0
 80006d4:	5f52      	ldrsh	r2, [r2, r5]
 80006d6:	2168      	movs	r1, #104	; 0x68
 80006d8:	1879      	adds	r1, r7, r1
 80006da:	2500      	movs	r5, #0
 80006dc:	5f49      	ldrsh	r1, [r1, r5]
 80006de:	2066      	movs	r0, #102	; 0x66
 80006e0:	1838      	adds	r0, r7, r0
 80006e2:	2500      	movs	r5, #0
 80006e4:	5f40      	ldrsh	r0, [r0, r5]
 80006e6:	193c      	adds	r4, r7, r4
 80006e8:	8825      	ldrh	r5, [r4, #0]
 80006ea:	2474      	movs	r4, #116	; 0x74
 80006ec:	193c      	adds	r4, r7, r4
 80006ee:	8824      	ldrh	r4, [r4, #0]
 80006f0:	1b2c      	subs	r4, r5, r4
 80006f2:	4e17      	ldr	r6, [pc, #92]	; (8000750 <main+0x1f8>)
 80006f4:	003d      	movs	r5, r7
 80006f6:	9404      	str	r4, [sp, #16]
 80006f8:	9003      	str	r0, [sp, #12]
 80006fa:	9102      	str	r1, [sp, #8]
 80006fc:	9201      	str	r2, [sp, #4]
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	4643      	mov	r3, r8
 8000702:	4662      	mov	r2, ip
 8000704:	0031      	movs	r1, r6
 8000706:	0028      	movs	r0, r5
 8000708:	f004 fd04 	bl	8005114 <siprintf>
	  		HAL_UART_Transmit(&huart2, &str, strlen(str), 10);
 800070c:	003b      	movs	r3, r7
 800070e:	0018      	movs	r0, r3
 8000710:	f7ff fcfa 	bl	8000108 <strlen>
 8000714:	0003      	movs	r3, r0
 8000716:	b29a      	uxth	r2, r3
 8000718:	0039      	movs	r1, r7
 800071a:	480a      	ldr	r0, [pc, #40]	; (8000744 <main+0x1ec>)
 800071c:	230a      	movs	r3, #10
 800071e:	f003 fc25 	bl	8003f6c <HAL_UART_Transmit>

	  		timer_prev = __HAL_TIM_GET_COUNTER(&htim1);
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <main+0x1e0>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000728:	2474      	movs	r4, #116	; 0x74
 800072a:	193b      	adds	r3, r7, r4
 800072c:	801a      	strh	r2, [r3, #0]
	  	}

	  	HAL_Delay(PROGRAM_DELAY); //Delay
 800072e:	2014      	movs	r0, #20
 8000730:	f000 fcba 	bl	80010a8 <HAL_Delay>
	  HAL_UART_Receive(&huart2, Rx_data, 2, 10);
 8000734:	e73f      	b.n	80005b6 <main+0x5e>
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	20000188 	.word	0x20000188
 800073c:	200001d4 	.word	0x200001d4
 8000740:	200002b4 	.word	0x200002b4
 8000744:	20000220 	.word	0x20000220
 8000748:	40000400 	.word	0x40000400
 800074c:	20000134 	.word	0x20000134
 8000750:	08005a78 	.word	0x08005a78

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b08d      	sub	sp, #52	; 0x34
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	2414      	movs	r4, #20
 800075c:	193b      	adds	r3, r7, r4
 800075e:	0018      	movs	r0, r3
 8000760:	231c      	movs	r3, #28
 8000762:	001a      	movs	r2, r3
 8000764:	2100      	movs	r1, #0
 8000766:	f004 fcf5 	bl	8005154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076a:	003b      	movs	r3, r7
 800076c:	0018      	movs	r0, r3
 800076e:	2314      	movs	r3, #20
 8000770:	001a      	movs	r2, r3
 8000772:	2100      	movs	r1, #0
 8000774:	f004 fcee 	bl	8005154 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000778:	193b      	adds	r3, r7, r4
 800077a:	2202      	movs	r2, #2
 800077c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077e:	193b      	adds	r3, r7, r4
 8000780:	2280      	movs	r2, #128	; 0x80
 8000782:	0052      	lsls	r2, r2, #1
 8000784:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2240      	movs	r2, #64	; 0x40
 8000790:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	193b      	adds	r3, r7, r4
 8000794:	0018      	movs	r0, r3
 8000796:	f001 ff7f 	bl	8002698 <HAL_RCC_OscConfig>
 800079a:	1e03      	subs	r3, r0, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800079e:	f000 fa1f 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a2:	003b      	movs	r3, r7
 80007a4:	2207      	movs	r2, #7
 80007a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007a8:	003b      	movs	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007ae:	003b      	movs	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007b4:	003b      	movs	r3, r7
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007ba:	003b      	movs	r3, r7
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007c0:	003b      	movs	r3, r7
 80007c2:	2101      	movs	r1, #1
 80007c4:	0018      	movs	r0, r3
 80007c6:	f002 f94b 	bl	8002a60 <HAL_RCC_ClockConfig>
 80007ca:	1e03      	subs	r3, r0, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80007ce:	f000 fa07 	bl	8000be0 <Error_Handler>
  }
}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b00d      	add	sp, #52	; 0x34
 80007d8:	bd90      	pop	{r4, r7, pc}
	...

080007dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	0018      	movs	r0, r3
 80007e6:	2314      	movs	r3, #20
 80007e8:	001a      	movs	r2, r3
 80007ea:	2100      	movs	r1, #0
 80007ec:	f004 fcb2 	bl	8005154 <memset>
	  __HAL_RCC_GPIOB_CLK_ENABLE(); // Enable the GPIO port clock (Assuming the pins are on GPIOB)
 80007f0:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <MX_I2C1_Init+0xcc>)
 80007f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007f4:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <MX_I2C1_Init+0xcc>)
 80007f6:	2102      	movs	r1, #2
 80007f8:	430a      	orrs	r2, r1
 80007fa:	635a      	str	r2, [r3, #52]	; 0x34
 80007fc:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <MX_I2C1_Init+0xcc>)
 80007fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000800:	2202      	movs	r2, #2
 8000802:	4013      	ands	r3, r2
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10; // Pins used for I2C
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	22c0      	movs	r2, #192	; 0xc0
 800080c:	00d2      	lsls	r2, r2, #3
 800080e:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;         // Alternate function open-drain mode
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2212      	movs	r2, #18
 8000814:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;             // Enable pull-up resistors
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2201      	movs	r2, #1
 800081a:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;   // Adjust as needed
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2202      	movs	r2, #2
 8000820:	60da      	str	r2, [r3, #12]
	  GPIO_InitStruct.Alternate = GPIO_AF7_I2C1;      // Specify I2C alternate function
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2207      	movs	r2, #7
 8000826:	611a      	str	r2, [r3, #16]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	4a20      	ldr	r2, [pc, #128]	; (80008ac <MX_I2C1_Init+0xd0>)
 800082c:	0019      	movs	r1, r3
 800082e:	0010      	movs	r0, r2
 8000830:	f000 fe18 	bl	8001464 <HAL_GPIO_Init>

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000834:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <MX_I2C1_Init+0xd4>)
 8000836:	4a1f      	ldr	r2, [pc, #124]	; (80008b4 <MX_I2C1_Init+0xd8>)
 8000838:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800083a:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <MX_I2C1_Init+0xd4>)
 800083c:	4a1e      	ldr	r2, [pc, #120]	; (80008b8 <MX_I2C1_Init+0xdc>)
 800083e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000840:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_I2C1_Init+0xd4>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_I2C1_Init+0xd4>)
 8000848:	2201      	movs	r2, #1
 800084a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <MX_I2C1_Init+0xd4>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_I2C1_Init+0xd4>)
 8000854:	2200      	movs	r2, #0
 8000856:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000858:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <MX_I2C1_Init+0xd4>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_I2C1_Init+0xd4>)
 8000860:	2200      	movs	r2, #0
 8000862:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_I2C1_Init+0xd4>)
 8000866:	2200      	movs	r2, #0
 8000868:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_I2C1_Init+0xd4>)
 800086c:	0018      	movs	r0, r3
 800086e:	f000 ffc7 	bl	8001800 <HAL_I2C_Init>
 8000872:	1e03      	subs	r3, r0, #0
 8000874:	d001      	beq.n	800087a <MX_I2C1_Init+0x9e>
  {
    Error_Handler();
 8000876:	f000 f9b3 	bl	8000be0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <MX_I2C1_Init+0xd4>)
 800087c:	2100      	movs	r1, #0
 800087e:	0018      	movs	r0, r3
 8000880:	f001 fe72 	bl	8002568 <HAL_I2CEx_ConfigAnalogFilter>
 8000884:	1e03      	subs	r3, r0, #0
 8000886:	d001      	beq.n	800088c <MX_I2C1_Init+0xb0>
  {
    Error_Handler();
 8000888:	f000 f9aa 	bl	8000be0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_I2C1_Init+0xd4>)
 800088e:	2100      	movs	r1, #0
 8000890:	0018      	movs	r0, r3
 8000892:	f001 feb5 	bl	8002600 <HAL_I2CEx_ConfigDigitalFilter>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d001      	beq.n	800089e <MX_I2C1_Init+0xc2>
  {
    Error_Handler();
 800089a:	f000 f9a1 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b006      	add	sp, #24
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	40021000 	.word	0x40021000
 80008ac:	50000400 	.word	0x50000400
 80008b0:	20000134 	.word	0x20000134
 80008b4:	40005400 	.word	0x40005400
 80008b8:	20303e5d 	.word	0x20303e5d

080008bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c2:	2310      	movs	r3, #16
 80008c4:	18fb      	adds	r3, r7, r3
 80008c6:	0018      	movs	r0, r3
 80008c8:	2310      	movs	r3, #16
 80008ca:	001a      	movs	r2, r3
 80008cc:	2100      	movs	r1, #0
 80008ce:	f004 fc41 	bl	8005154 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	0018      	movs	r0, r3
 80008d6:	230c      	movs	r3, #12
 80008d8:	001a      	movs	r2, r3
 80008da:	2100      	movs	r1, #0
 80008dc:	f004 fc3a 	bl	8005154 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008e0:	4b21      	ldr	r3, [pc, #132]	; (8000968 <MX_TIM1_Init+0xac>)
 80008e2:	4a22      	ldr	r2, [pc, #136]	; (800096c <MX_TIM1_Init+0xb0>)
 80008e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008e6:	4b20      	ldr	r3, [pc, #128]	; (8000968 <MX_TIM1_Init+0xac>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ec:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <MX_TIM1_Init+0xac>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008f2:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <MX_TIM1_Init+0xac>)
 80008f4:	4a1e      	ldr	r2, [pc, #120]	; (8000970 <MX_TIM1_Init+0xb4>)
 80008f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <MX_TIM1_Init+0xac>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_TIM1_Init+0xac>)
 8000900:	2200      	movs	r2, #0
 8000902:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <MX_TIM1_Init+0xac>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_TIM1_Init+0xac>)
 800090c:	0018      	movs	r0, r3
 800090e:	f002 fb01 	bl	8002f14 <HAL_TIM_Base_Init>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d001      	beq.n	800091a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000916:	f000 f963 	bl	8000be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800091a:	2110      	movs	r1, #16
 800091c:	187b      	adds	r3, r7, r1
 800091e:	2280      	movs	r2, #128	; 0x80
 8000920:	0152      	lsls	r2, r2, #5
 8000922:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000924:	187a      	adds	r2, r7, r1
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <MX_TIM1_Init+0xac>)
 8000928:	0011      	movs	r1, r2
 800092a:	0018      	movs	r0, r3
 800092c:	f002 fdc8 	bl	80034c0 <HAL_TIM_ConfigClockSource>
 8000930:	1e03      	subs	r3, r0, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000934:	f000 f954 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800094a:	1d3a      	adds	r2, r7, #4
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_TIM1_Init+0xac>)
 800094e:	0011      	movs	r1, r2
 8000950:	0018      	movs	r0, r3
 8000952:	f003 fa53 	bl	8003dfc <HAL_TIMEx_MasterConfigSynchronization>
 8000956:	1e03      	subs	r3, r0, #0
 8000958:	d001      	beq.n	800095e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800095a:	f000 f941 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b008      	add	sp, #32
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	20000188 	.word	0x20000188
 800096c:	40012c00 	.word	0x40012c00
 8000970:	0000ffff 	.word	0x0000ffff

08000974 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08e      	sub	sp, #56	; 0x38
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097a:	2328      	movs	r3, #40	; 0x28
 800097c:	18fb      	adds	r3, r7, r3
 800097e:	0018      	movs	r0, r3
 8000980:	2310      	movs	r3, #16
 8000982:	001a      	movs	r2, r3
 8000984:	2100      	movs	r1, #0
 8000986:	f004 fbe5 	bl	8005154 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800098a:	231c      	movs	r3, #28
 800098c:	18fb      	adds	r3, r7, r3
 800098e:	0018      	movs	r0, r3
 8000990:	230c      	movs	r3, #12
 8000992:	001a      	movs	r2, r3
 8000994:	2100      	movs	r1, #0
 8000996:	f004 fbdd 	bl	8005154 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800099a:	003b      	movs	r3, r7
 800099c:	0018      	movs	r0, r3
 800099e:	231c      	movs	r3, #28
 80009a0:	001a      	movs	r2, r3
 80009a2:	2100      	movs	r1, #0
 80009a4:	f004 fbd6 	bl	8005154 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009a8:	4b34      	ldr	r3, [pc, #208]	; (8000a7c <MX_TIM3_Init+0x108>)
 80009aa:	4a35      	ldr	r2, [pc, #212]	; (8000a80 <MX_TIM3_Init+0x10c>)
 80009ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 120-1;
 80009ae:	4b33      	ldr	r3, [pc, #204]	; (8000a7c <MX_TIM3_Init+0x108>)
 80009b0:	2277      	movs	r2, #119	; 0x77
 80009b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b4:	4b31      	ldr	r3, [pc, #196]	; (8000a7c <MX_TIM3_Init+0x108>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80009ba:	4b30      	ldr	r3, [pc, #192]	; (8000a7c <MX_TIM3_Init+0x108>)
 80009bc:	4a31      	ldr	r2, [pc, #196]	; (8000a84 <MX_TIM3_Init+0x110>)
 80009be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c0:	4b2e      	ldr	r3, [pc, #184]	; (8000a7c <MX_TIM3_Init+0x108>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c6:	4b2d      	ldr	r3, [pc, #180]	; (8000a7c <MX_TIM3_Init+0x108>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009cc:	4b2b      	ldr	r3, [pc, #172]	; (8000a7c <MX_TIM3_Init+0x108>)
 80009ce:	0018      	movs	r0, r3
 80009d0:	f002 faa0 	bl	8002f14 <HAL_TIM_Base_Init>
 80009d4:	1e03      	subs	r3, r0, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80009d8:	f000 f902 	bl	8000be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009dc:	2128      	movs	r1, #40	; 0x28
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2280      	movs	r2, #128	; 0x80
 80009e2:	0152      	lsls	r2, r2, #5
 80009e4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009e6:	187a      	adds	r2, r7, r1
 80009e8:	4b24      	ldr	r3, [pc, #144]	; (8000a7c <MX_TIM3_Init+0x108>)
 80009ea:	0011      	movs	r1, r2
 80009ec:	0018      	movs	r0, r3
 80009ee:	f002 fd67 	bl	80034c0 <HAL_TIM_ConfigClockSource>
 80009f2:	1e03      	subs	r3, r0, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80009f6:	f000 f8f3 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009fa:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <MX_TIM3_Init+0x108>)
 80009fc:	0018      	movs	r0, r3
 80009fe:	f002 fb27 	bl	8003050 <HAL_TIM_PWM_Init>
 8000a02:	1e03      	subs	r3, r0, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000a06:	f000 f8eb 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0a:	211c      	movs	r1, #28
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a18:	187a      	adds	r2, r7, r1
 8000a1a:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <MX_TIM3_Init+0x108>)
 8000a1c:	0011      	movs	r1, r2
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f003 f9ec 	bl	8003dfc <HAL_TIMEx_MasterConfigSynchronization>
 8000a24:	1e03      	subs	r3, r0, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000a28:	f000 f8da 	bl	8000be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a2c:	003b      	movs	r3, r7
 8000a2e:	2260      	movs	r2, #96	; 0x60
 8000a30:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a32:	003b      	movs	r3, r7
 8000a34:	2200      	movs	r2, #0
 8000a36:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a38:	003b      	movs	r3, r7
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a44:	0039      	movs	r1, r7
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <MX_TIM3_Init+0x108>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f002 fc38 	bl	80032c0 <HAL_TIM_PWM_ConfigChannel>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000a54:	f000 f8c4 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a58:	0039      	movs	r1, r7
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <MX_TIM3_Init+0x108>)
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f002 fc2e 	bl	80032c0 <HAL_TIM_PWM_ConfigChannel>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8000a68:	f000 f8ba 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <MX_TIM3_Init+0x108>)
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f000 f976 	bl	8000d60 <HAL_TIM_MspPostInit>

}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b00e      	add	sp, #56	; 0x38
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200001d4 	.word	0x200001d4
 8000a80:	40000400 	.word	0x40000400
 8000a84:	000003e7 	.word	0x000003e7

08000a88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <MX_USART2_UART_Init+0x60>)
 8000a8e:	4a17      	ldr	r2, [pc, #92]	; (8000aec <MX_USART2_UART_Init+0x64>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_USART2_UART_Init+0x60>)
 8000a94:	22e1      	movs	r2, #225	; 0xe1
 8000a96:	0252      	lsls	r2, r2, #9
 8000a98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <MX_USART2_UART_Init+0x60>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_USART2_UART_Init+0x60>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <MX_USART2_UART_Init+0x60>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_USART2_UART_Init+0x60>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <MX_USART2_UART_Init+0x60>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_USART2_UART_Init+0x60>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <MX_USART2_UART_Init+0x60>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_USART2_UART_Init+0x60>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <MX_USART2_UART_Init+0x60>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <MX_USART2_UART_Init+0x60>)
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f003 f9f4 	bl	8003ec0 <HAL_UART_Init>
 8000ad8:	1e03      	subs	r3, r0, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000adc:	f000 f880 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	20000220 	.word	0x20000220
 8000aec:	40004400 	.word	0x40004400

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b590      	push	{r4, r7, lr}
 8000af2:	b08b      	sub	sp, #44	; 0x2c
 8000af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	2414      	movs	r4, #20
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	0018      	movs	r0, r3
 8000afc:	2314      	movs	r3, #20
 8000afe:	001a      	movs	r2, r3
 8000b00:	2100      	movs	r1, #0
 8000b02:	f004 fb27 	bl	8005154 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	4b33      	ldr	r3, [pc, #204]	; (8000bd4 <MX_GPIO_Init+0xe4>)
 8000b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b0a:	4b32      	ldr	r3, [pc, #200]	; (8000bd4 <MX_GPIO_Init+0xe4>)
 8000b0c:	2104      	movs	r1, #4
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	635a      	str	r2, [r3, #52]	; 0x34
 8000b12:	4b30      	ldr	r3, [pc, #192]	; (8000bd4 <MX_GPIO_Init+0xe4>)
 8000b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b16:	2204      	movs	r2, #4
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b1e:	4b2d      	ldr	r3, [pc, #180]	; (8000bd4 <MX_GPIO_Init+0xe4>)
 8000b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b22:	4b2c      	ldr	r3, [pc, #176]	; (8000bd4 <MX_GPIO_Init+0xe4>)
 8000b24:	2120      	movs	r1, #32
 8000b26:	430a      	orrs	r2, r1
 8000b28:	635a      	str	r2, [r3, #52]	; 0x34
 8000b2a:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <MX_GPIO_Init+0xe4>)
 8000b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b2e:	2220      	movs	r2, #32
 8000b30:	4013      	ands	r3, r2
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <MX_GPIO_Init+0xe4>)
 8000b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b3a:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <MX_GPIO_Init+0xe4>)
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	635a      	str	r2, [r3, #52]	; 0x34
 8000b42:	4b24      	ldr	r3, [pc, #144]	; (8000bd4 <MX_GPIO_Init+0xe4>)
 8000b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b46:	2201      	movs	r2, #1
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <MX_GPIO_Init+0xe4>)
 8000b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b52:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <MX_GPIO_Init+0xe4>)
 8000b54:	2102      	movs	r1, #2
 8000b56:	430a      	orrs	r2, r1
 8000b58:	635a      	str	r2, [r3, #52]	; 0x34
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <MX_GPIO_Init+0xe4>)
 8000b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b5e:	2202      	movs	r2, #2
 8000b60:	4013      	ands	r3, r2
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 8000b66:	23a0      	movs	r3, #160	; 0xa0
 8000b68:	05db      	lsls	r3, r3, #23
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2120      	movs	r1, #32
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f000 fdea 	bl	8001748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8000b74:	193b      	adds	r3, r7, r4
 8000b76:	2280      	movs	r2, #128	; 0x80
 8000b78:	0192      	lsls	r2, r2, #6
 8000b7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b7c:	193b      	adds	r3, r7, r4
 8000b7e:	4a16      	ldr	r2, [pc, #88]	; (8000bd8 <MX_GPIO_Init+0xe8>)
 8000b80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	193b      	adds	r3, r7, r4
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8000b88:	193b      	adds	r3, r7, r4
 8000b8a:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <MX_GPIO_Init+0xec>)
 8000b8c:	0019      	movs	r1, r3
 8000b8e:	0010      	movs	r0, r2
 8000b90:	f000 fc68 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 8000b94:	0021      	movs	r1, r4
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	2220      	movs	r2, #32
 8000b9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	2203      	movs	r2, #3
 8000bac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8000bae:	187a      	adds	r2, r7, r1
 8000bb0:	23a0      	movs	r3, #160	; 0xa0
 8000bb2:	05db      	lsls	r3, r3, #23
 8000bb4:	0011      	movs	r1, r2
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f000 fc54 	bl	8001464 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	2007      	movs	r0, #7
 8000bc2:	f000 fb41 	bl	8001248 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000bc6:	2007      	movs	r0, #7
 8000bc8:	f000 fb53 	bl	8001272 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b00b      	add	sp, #44	; 0x2c
 8000bd2:	bd90      	pop	{r4, r7, pc}
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	10110000 	.word	0x10110000
 8000bdc:	50000800 	.word	0x50000800

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <Error_Handler+0x8>
	...

08000bec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <HAL_MspInit+0x44>)
 8000bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <HAL_MspInit+0x44>)
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	641a      	str	r2, [r3, #64]	; 0x40
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <HAL_MspInit+0x44>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	2201      	movs	r2, #1
 8000c04:	4013      	ands	r3, r2
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <HAL_MspInit+0x44>)
 8000c0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <HAL_MspInit+0x44>)
 8000c10:	2180      	movs	r1, #128	; 0x80
 8000c12:	0549      	lsls	r1, r1, #21
 8000c14:	430a      	orrs	r2, r1
 8000c16:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <HAL_MspInit+0x44>)
 8000c1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	055b      	lsls	r3, r3, #21
 8000c20:	4013      	ands	r3, r2
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b002      	add	sp, #8
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	40021000 	.word	0x40021000

08000c34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b091      	sub	sp, #68	; 0x44
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	232c      	movs	r3, #44	; 0x2c
 8000c3e:	18fb      	adds	r3, r7, r3
 8000c40:	0018      	movs	r0, r3
 8000c42:	2314      	movs	r3, #20
 8000c44:	001a      	movs	r2, r3
 8000c46:	2100      	movs	r1, #0
 8000c48:	f004 fa84 	bl	8005154 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c4c:	2410      	movs	r4, #16
 8000c4e:	193b      	adds	r3, r7, r4
 8000c50:	0018      	movs	r0, r3
 8000c52:	231c      	movs	r3, #28
 8000c54:	001a      	movs	r2, r3
 8000c56:	2100      	movs	r1, #0
 8000c58:	f004 fa7c 	bl	8005154 <memset>
  if(hi2c->Instance==I2C1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a22      	ldr	r2, [pc, #136]	; (8000cec <HAL_I2C_MspInit+0xb8>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d13e      	bne.n	8000ce4 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c66:	193b      	adds	r3, r7, r4
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	0018      	movs	r0, r3
 8000c76:	f002 f85f 	bl	8002d38 <HAL_RCCEx_PeriphCLKConfig>
 8000c7a:	1e03      	subs	r3, r0, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c7e:	f7ff ffaf 	bl	8000be0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <HAL_I2C_MspInit+0xbc>)
 8000c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <HAL_I2C_MspInit+0xbc>)
 8000c88:	2102      	movs	r1, #2
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <HAL_I2C_MspInit+0xbc>)
 8000c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c92:	2202      	movs	r2, #2
 8000c94:	4013      	ands	r3, r2
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c9a:	212c      	movs	r1, #44	; 0x2c
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	22c0      	movs	r2, #192	; 0xc0
 8000ca0:	0092      	lsls	r2, r2, #2
 8000ca2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	2212      	movs	r2, #18
 8000ca8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	2206      	movs	r2, #6
 8000cba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <HAL_I2C_MspInit+0xc0>)
 8000cc0:	0019      	movs	r1, r3
 8000cc2:	0010      	movs	r0, r2
 8000cc4:	f000 fbce 	bl	8001464 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <HAL_I2C_MspInit+0xbc>)
 8000cca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_I2C_MspInit+0xbc>)
 8000cce:	2180      	movs	r1, #128	; 0x80
 8000cd0:	0389      	lsls	r1, r1, #14
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_I2C_MspInit+0xbc>)
 8000cd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cda:	2380      	movs	r3, #128	; 0x80
 8000cdc:	039b      	lsls	r3, r3, #14
 8000cde:	4013      	ands	r3, r2
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b011      	add	sp, #68	; 0x44
 8000cea:	bd90      	pop	{r4, r7, pc}
 8000cec:	40005400 	.word	0x40005400
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	50000400 	.word	0x50000400

08000cf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a13      	ldr	r2, [pc, #76]	; (8000d54 <HAL_TIM_Base_MspInit+0x5c>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d10e      	bne.n	8000d28 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <HAL_TIM_Base_MspInit+0x60>)
 8000d0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d0e:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_TIM_Base_MspInit+0x60>)
 8000d10:	2180      	movs	r1, #128	; 0x80
 8000d12:	0109      	lsls	r1, r1, #4
 8000d14:	430a      	orrs	r2, r1
 8000d16:	641a      	str	r2, [r3, #64]	; 0x40
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <HAL_TIM_Base_MspInit+0x60>)
 8000d1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d1c:	2380      	movs	r3, #128	; 0x80
 8000d1e:	011b      	lsls	r3, r3, #4
 8000d20:	4013      	ands	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d26:	e010      	b.n	8000d4a <HAL_TIM_Base_MspInit+0x52>
  else if(htim_base->Instance==TIM3)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <HAL_TIM_Base_MspInit+0x64>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d10b      	bne.n	8000d4a <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_TIM_Base_MspInit+0x60>)
 8000d34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_TIM_Base_MspInit+0x60>)
 8000d38:	2102      	movs	r1, #2
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_TIM_Base_MspInit+0x60>)
 8000d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d42:	2202      	movs	r2, #2
 8000d44:	4013      	ands	r3, r2
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b004      	add	sp, #16
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	40012c00 	.word	0x40012c00
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40000400 	.word	0x40000400

08000d60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b089      	sub	sp, #36	; 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	240c      	movs	r4, #12
 8000d6a:	193b      	adds	r3, r7, r4
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	2314      	movs	r3, #20
 8000d70:	001a      	movs	r2, r3
 8000d72:	2100      	movs	r1, #0
 8000d74:	f004 f9ee 	bl	8005154 <memset>
  if(htim->Instance==TIM3)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <HAL_TIM_MspPostInit+0x70>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d122      	bne.n	8000dc8 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <HAL_TIM_MspPostInit+0x74>)
 8000d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <HAL_TIM_MspPostInit+0x74>)
 8000d88:	2101      	movs	r1, #1
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <HAL_TIM_MspPostInit+0x74>)
 8000d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d92:	2201      	movs	r2, #1
 8000d94:	4013      	ands	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d9a:	0021      	movs	r1, r4
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	22c0      	movs	r2, #192	; 0xc0
 8000da0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2202      	movs	r2, #2
 8000da6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2201      	movs	r2, #1
 8000db8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	187a      	adds	r2, r7, r1
 8000dbc:	23a0      	movs	r3, #160	; 0xa0
 8000dbe:	05db      	lsls	r3, r3, #23
 8000dc0:	0011      	movs	r1, r2
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f000 fb4e 	bl	8001464 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b009      	add	sp, #36	; 0x24
 8000dce:	bd90      	pop	{r4, r7, pc}
 8000dd0:	40000400 	.word	0x40000400
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd8:	b590      	push	{r4, r7, lr}
 8000dda:	b08b      	sub	sp, #44	; 0x2c
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	2414      	movs	r4, #20
 8000de2:	193b      	adds	r3, r7, r4
 8000de4:	0018      	movs	r0, r3
 8000de6:	2314      	movs	r3, #20
 8000de8:	001a      	movs	r2, r3
 8000dea:	2100      	movs	r1, #0
 8000dec:	f004 f9b2 	bl	8005154 <memset>
  if(huart->Instance==USART2)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a1f      	ldr	r2, [pc, #124]	; (8000e74 <HAL_UART_MspInit+0x9c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d138      	bne.n	8000e6c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dfa:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <HAL_UART_MspInit+0xa0>)
 8000dfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dfe:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <HAL_UART_MspInit+0xa0>)
 8000e00:	2180      	movs	r1, #128	; 0x80
 8000e02:	0289      	lsls	r1, r1, #10
 8000e04:	430a      	orrs	r2, r1
 8000e06:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e08:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <HAL_UART_MspInit+0xa0>)
 8000e0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	029b      	lsls	r3, r3, #10
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <HAL_UART_MspInit+0xa0>)
 8000e18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <HAL_UART_MspInit+0xa0>)
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	635a      	str	r2, [r3, #52]	; 0x34
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <HAL_UART_MspInit+0xa0>)
 8000e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e26:	2201      	movs	r2, #1
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e2e:	0021      	movs	r1, r4
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	220c      	movs	r2, #12
 8000e34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	187b      	adds	r3, r7, r1
 8000e38:	2202      	movs	r2, #2
 8000e3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	187b      	adds	r3, r7, r1
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	187a      	adds	r2, r7, r1
 8000e50:	23a0      	movs	r3, #160	; 0xa0
 8000e52:	05db      	lsls	r3, r3, #23
 8000e54:	0011      	movs	r1, r2
 8000e56:	0018      	movs	r0, r3
 8000e58:	f000 fb04 	bl	8001464 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	201c      	movs	r0, #28
 8000e62:	f000 f9f1 	bl	8001248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e66:	201c      	movs	r0, #28
 8000e68:	f000 fa03 	bl	8001272 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e6c:	46c0      	nop			; (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b00b      	add	sp, #44	; 0x2c
 8000e72:	bd90      	pop	{r4, r7, pc}
 8000e74:	40004400 	.word	0x40004400
 8000e78:	40021000 	.word	0x40021000

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <NMI_Handler+0x4>

08000e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <HardFault_Handler+0x4>

08000e88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e8c:	46c0      	nop			; (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea0:	f000 f8e6 	bl	8001070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea4:	46c0      	nop			; (mov r8, r8)
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 8000eae:	2380      	movs	r3, #128	; 0x80
 8000eb0:	019b      	lsls	r3, r3, #6
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f000 fc66 	bl	8001784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <USART2_IRQHandler+0x14>)
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f003 f9da 	bl	8004280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ecc:	46c0      	nop			; (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	20000220 	.word	0x20000220

08000ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee0:	4a14      	ldr	r2, [pc, #80]	; (8000f34 <_sbrk+0x5c>)
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <_sbrk+0x60>)
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eec:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d102      	bne.n	8000efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <_sbrk+0x64>)
 8000ef6:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <_sbrk+0x68>)
 8000ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	18d3      	adds	r3, r2, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d207      	bcs.n	8000f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f08:	f004 f92c 	bl	8005164 <__errno>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	220c      	movs	r2, #12
 8000f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f12:	2301      	movs	r3, #1
 8000f14:	425b      	negs	r3, r3
 8000f16:	e009      	b.n	8000f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f1e:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	18d2      	adds	r2, r2, r3
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <_sbrk+0x64>)
 8000f28:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
}
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b006      	add	sp, #24
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20003000 	.word	0x20003000
 8000f38:	00000400 	.word	0x00000400
 8000f3c:	200002b8 	.word	0x200002b8
 8000f40:	20000408 	.word	0x20000408

08000f44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <SystemInit+0x14>)
 8000f4a:	2280      	movs	r2, #128	; 0x80
 8000f4c:	0512      	lsls	r2, r2, #20
 8000f4e:	609a      	str	r2, [r3, #8]
#endif
}
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f5c:	480d      	ldr	r0, [pc, #52]	; (8000f94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f5e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f60:	f7ff fff0 	bl	8000f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f64:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f66:	e003      	b.n	8000f70 <LoopCopyDataInit>

08000f68 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000f6a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f6c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f6e:	3104      	adds	r1, #4

08000f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f70:	480a      	ldr	r0, [pc, #40]	; (8000f9c <LoopForever+0xa>)
  ldr r3, =_edata
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <LoopForever+0xe>)
  adds r2, r0, r1
 8000f74:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f76:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f78:	d3f6      	bcc.n	8000f68 <CopyDataInit>
  ldr r2, =_sbss
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <LoopForever+0x12>)
  b LoopFillZerobss
 8000f7c:	e002      	b.n	8000f84 <LoopFillZerobss>

08000f7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000f80:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f82:	3204      	adds	r2, #4

08000f84 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <LoopForever+0x16>)
  cmp r2, r3
 8000f86:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f88:	d3f9      	bcc.n	8000f7e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000f8a:	f004 f8f1 	bl	8005170 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f8e:	f7ff fae3 	bl	8000558 <main>

08000f92 <LoopForever>:

LoopForever:
    b LoopForever
 8000f92:	e7fe      	b.n	8000f92 <LoopForever>
  ldr   r0, =_estack
 8000f94:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000f98:	08005b98 	.word	0x08005b98
  ldr r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000fa0:	20000060 	.word	0x20000060
  ldr r2, =_sbss
 8000fa4:	20000060 	.word	0x20000060
  ldr r3, = _ebss
 8000fa8:	20000408 	.word	0x20000408

08000fac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC1_IRQHandler>

08000fae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fb4:	1dfb      	adds	r3, r7, #7
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fba:	2003      	movs	r0, #3
 8000fbc:	f000 f80e 	bl	8000fdc <HAL_InitTick>
 8000fc0:	1e03      	subs	r3, r0, #0
 8000fc2:	d003      	beq.n	8000fcc <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000fc4:	1dfb      	adds	r3, r7, #7
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	e001      	b.n	8000fd0 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fcc:	f7ff fe0e 	bl	8000bec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fd0:	1dfb      	adds	r3, r7, #7
 8000fd2:	781b      	ldrb	r3, [r3, #0]
}
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b002      	add	sp, #8
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	18fb      	adds	r3, r7, r3
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <HAL_InitTick+0x88>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d02b      	beq.n	800104c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <HAL_InitTick+0x8c>)
 8000ff6:	681c      	ldr	r4, [r3, #0]
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <HAL_InitTick+0x88>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	0019      	movs	r1, r3
 8000ffe:	23fa      	movs	r3, #250	; 0xfa
 8001000:	0098      	lsls	r0, r3, #2
 8001002:	f7ff f893 	bl	800012c <__udivsi3>
 8001006:	0003      	movs	r3, r0
 8001008:	0019      	movs	r1, r3
 800100a:	0020      	movs	r0, r4
 800100c:	f7ff f88e 	bl	800012c <__udivsi3>
 8001010:	0003      	movs	r3, r0
 8001012:	0018      	movs	r0, r3
 8001014:	f000 f93d 	bl	8001292 <HAL_SYSTICK_Config>
 8001018:	1e03      	subs	r3, r0, #0
 800101a:	d112      	bne.n	8001042 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b03      	cmp	r3, #3
 8001020:	d80a      	bhi.n	8001038 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	2301      	movs	r3, #1
 8001026:	425b      	negs	r3, r3
 8001028:	2200      	movs	r2, #0
 800102a:	0018      	movs	r0, r3
 800102c:	f000 f90c 	bl	8001248 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <HAL_InitTick+0x90>)
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	e00d      	b.n	8001054 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001038:	230f      	movs	r3, #15
 800103a:	18fb      	adds	r3, r7, r3
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	e008      	b.n	8001054 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001042:	230f      	movs	r3, #15
 8001044:	18fb      	adds	r3, r7, r3
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
 800104a:	e003      	b.n	8001054 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800104c:	230f      	movs	r3, #15
 800104e:	18fb      	adds	r3, r7, r3
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001054:	230f      	movs	r3, #15
 8001056:	18fb      	adds	r3, r7, r3
 8001058:	781b      	ldrb	r3, [r3, #0]
}
 800105a:	0018      	movs	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	b005      	add	sp, #20
 8001060:	bd90      	pop	{r4, r7, pc}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	2000000c 	.word	0x2000000c
 8001068:	20000004 	.word	0x20000004
 800106c:	20000008 	.word	0x20000008

08001070 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <HAL_IncTick+0x1c>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	001a      	movs	r2, r3
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <HAL_IncTick+0x20>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	18d2      	adds	r2, r2, r3
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <HAL_IncTick+0x20>)
 8001082:	601a      	str	r2, [r3, #0]
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	2000000c 	.word	0x2000000c
 8001090:	200002bc 	.word	0x200002bc

08001094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  return uwTick;
 8001098:	4b02      	ldr	r3, [pc, #8]	; (80010a4 <HAL_GetTick+0x10>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	0018      	movs	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	200002bc 	.word	0x200002bc

080010a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b0:	f7ff fff0 	bl	8001094 <HAL_GetTick>
 80010b4:	0003      	movs	r3, r0
 80010b6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3301      	adds	r3, #1
 80010c0:	d005      	beq.n	80010ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_Delay+0x44>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	001a      	movs	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	189b      	adds	r3, r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	f7ff ffe0 	bl	8001094 <HAL_GetTick>
 80010d4:	0002      	movs	r2, r0
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d8f7      	bhi.n	80010d0 <HAL_Delay+0x28>
  {
  }
}
 80010e0:	46c0      	nop			; (mov r8, r8)
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b004      	add	sp, #16
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	2000000c 	.word	0x2000000c

080010f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	0002      	movs	r2, r0
 80010f8:	1dfb      	adds	r3, r7, #7
 80010fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b7f      	cmp	r3, #127	; 0x7f
 8001102:	d809      	bhi.n	8001118 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	001a      	movs	r2, r3
 800110a:	231f      	movs	r3, #31
 800110c:	401a      	ands	r2, r3
 800110e:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_EnableIRQ+0x30>)
 8001110:	2101      	movs	r1, #1
 8001112:	4091      	lsls	r1, r2
 8001114:	000a      	movs	r2, r1
 8001116:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001118:	46c0      	nop			; (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	b002      	add	sp, #8
 800111e:	bd80      	pop	{r7, pc}
 8001120:	e000e100 	.word	0xe000e100

08001124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	0002      	movs	r2, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b7f      	cmp	r3, #127	; 0x7f
 8001138:	d828      	bhi.n	800118c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800113a:	4a2f      	ldr	r2, [pc, #188]	; (80011f8 <__NVIC_SetPriority+0xd4>)
 800113c:	1dfb      	adds	r3, r7, #7
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b25b      	sxtb	r3, r3
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	33c0      	adds	r3, #192	; 0xc0
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	589b      	ldr	r3, [r3, r2]
 800114a:	1dfa      	adds	r2, r7, #7
 800114c:	7812      	ldrb	r2, [r2, #0]
 800114e:	0011      	movs	r1, r2
 8001150:	2203      	movs	r2, #3
 8001152:	400a      	ands	r2, r1
 8001154:	00d2      	lsls	r2, r2, #3
 8001156:	21ff      	movs	r1, #255	; 0xff
 8001158:	4091      	lsls	r1, r2
 800115a:	000a      	movs	r2, r1
 800115c:	43d2      	mvns	r2, r2
 800115e:	401a      	ands	r2, r3
 8001160:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	019b      	lsls	r3, r3, #6
 8001166:	22ff      	movs	r2, #255	; 0xff
 8001168:	401a      	ands	r2, r3
 800116a:	1dfb      	adds	r3, r7, #7
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	0018      	movs	r0, r3
 8001170:	2303      	movs	r3, #3
 8001172:	4003      	ands	r3, r0
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001178:	481f      	ldr	r0, [pc, #124]	; (80011f8 <__NVIC_SetPriority+0xd4>)
 800117a:	1dfb      	adds	r3, r7, #7
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b25b      	sxtb	r3, r3
 8001180:	089b      	lsrs	r3, r3, #2
 8001182:	430a      	orrs	r2, r1
 8001184:	33c0      	adds	r3, #192	; 0xc0
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800118a:	e031      	b.n	80011f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800118c:	4a1b      	ldr	r2, [pc, #108]	; (80011fc <__NVIC_SetPriority+0xd8>)
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	0019      	movs	r1, r3
 8001194:	230f      	movs	r3, #15
 8001196:	400b      	ands	r3, r1
 8001198:	3b08      	subs	r3, #8
 800119a:	089b      	lsrs	r3, r3, #2
 800119c:	3306      	adds	r3, #6
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	18d3      	adds	r3, r2, r3
 80011a2:	3304      	adds	r3, #4
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	1dfa      	adds	r2, r7, #7
 80011a8:	7812      	ldrb	r2, [r2, #0]
 80011aa:	0011      	movs	r1, r2
 80011ac:	2203      	movs	r2, #3
 80011ae:	400a      	ands	r2, r1
 80011b0:	00d2      	lsls	r2, r2, #3
 80011b2:	21ff      	movs	r1, #255	; 0xff
 80011b4:	4091      	lsls	r1, r2
 80011b6:	000a      	movs	r2, r1
 80011b8:	43d2      	mvns	r2, r2
 80011ba:	401a      	ands	r2, r3
 80011bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	019b      	lsls	r3, r3, #6
 80011c2:	22ff      	movs	r2, #255	; 0xff
 80011c4:	401a      	ands	r2, r3
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	0018      	movs	r0, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	4003      	ands	r3, r0
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011d4:	4809      	ldr	r0, [pc, #36]	; (80011fc <__NVIC_SetPriority+0xd8>)
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	001c      	movs	r4, r3
 80011dc:	230f      	movs	r3, #15
 80011de:	4023      	ands	r3, r4
 80011e0:	3b08      	subs	r3, #8
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	430a      	orrs	r2, r1
 80011e6:	3306      	adds	r3, #6
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	18c3      	adds	r3, r0, r3
 80011ec:	3304      	adds	r3, #4
 80011ee:	601a      	str	r2, [r3, #0]
}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b003      	add	sp, #12
 80011f6:	bd90      	pop	{r4, r7, pc}
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	1e5a      	subs	r2, r3, #1
 800120c:	2380      	movs	r3, #128	; 0x80
 800120e:	045b      	lsls	r3, r3, #17
 8001210:	429a      	cmp	r2, r3
 8001212:	d301      	bcc.n	8001218 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001214:	2301      	movs	r3, #1
 8001216:	e010      	b.n	800123a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <SysTick_Config+0x44>)
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	3a01      	subs	r2, #1
 800121e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001220:	2301      	movs	r3, #1
 8001222:	425b      	negs	r3, r3
 8001224:	2103      	movs	r1, #3
 8001226:	0018      	movs	r0, r3
 8001228:	f7ff ff7c 	bl	8001124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SysTick_Config+0x44>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001232:	4b04      	ldr	r3, [pc, #16]	; (8001244 <SysTick_Config+0x44>)
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001238:	2300      	movs	r3, #0
}
 800123a:	0018      	movs	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	b002      	add	sp, #8
 8001240:	bd80      	pop	{r7, pc}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	e000e010 	.word	0xe000e010

08001248 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	210f      	movs	r1, #15
 8001254:	187b      	adds	r3, r7, r1
 8001256:	1c02      	adds	r2, r0, #0
 8001258:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	187b      	adds	r3, r7, r1
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b25b      	sxtb	r3, r3
 8001262:	0011      	movs	r1, r2
 8001264:	0018      	movs	r0, r3
 8001266:	f7ff ff5d 	bl	8001124 <__NVIC_SetPriority>
}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	b004      	add	sp, #16
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	0002      	movs	r2, r0
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800127e:	1dfb      	adds	r3, r7, #7
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b25b      	sxtb	r3, r3
 8001284:	0018      	movs	r0, r3
 8001286:	f7ff ff33 	bl	80010f0 <__NVIC_EnableIRQ>
}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	46bd      	mov	sp, r7
 800128e:	b002      	add	sp, #8
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	0018      	movs	r0, r3
 800129e:	f7ff ffaf 	bl	8001200 <SysTick_Config>
 80012a2:	0003      	movs	r3, r0
}
 80012a4:	0018      	movs	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b002      	add	sp, #8
 80012aa:	bd80      	pop	{r7, pc}

080012ac <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e050      	b.n	8001360 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2225      	movs	r2, #37	; 0x25
 80012c2:	5c9b      	ldrb	r3, [r3, r2]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d008      	beq.n	80012dc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2204      	movs	r2, #4
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2224      	movs	r2, #36	; 0x24
 80012d4:	2100      	movs	r1, #0
 80012d6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e041      	b.n	8001360 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	210e      	movs	r1, #14
 80012e8:	438a      	bics	r2, r1
 80012ea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	491c      	ldr	r1, [pc, #112]	; (8001368 <HAL_DMA_Abort+0xbc>)
 80012f8:	400a      	ands	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2101      	movs	r1, #1
 8001308:	438a      	bics	r2, r1
 800130a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 800130c:	4b17      	ldr	r3, [pc, #92]	; (800136c <HAL_DMA_Abort+0xc0>)
 800130e:	6859      	ldr	r1, [r3, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	221c      	movs	r2, #28
 8001316:	4013      	ands	r3, r2
 8001318:	2201      	movs	r2, #1
 800131a:	409a      	lsls	r2, r3
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <HAL_DMA_Abort+0xc0>)
 800131e:	430a      	orrs	r2, r1
 8001320:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800132a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00c      	beq.n	800134e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800133e:	490a      	ldr	r1, [pc, #40]	; (8001368 <HAL_DMA_Abort+0xbc>)
 8001340:	400a      	ands	r2, r1
 8001342:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800134c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2225      	movs	r2, #37	; 0x25
 8001352:	2101      	movs	r1, #1
 8001354:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2224      	movs	r2, #36	; 0x24
 800135a:	2100      	movs	r1, #0
 800135c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800135e:	2300      	movs	r3, #0
}
 8001360:	0018      	movs	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	b002      	add	sp, #8
 8001366:	bd80      	pop	{r7, pc}
 8001368:	fffffeff 	.word	0xfffffeff
 800136c:	40020000 	.word	0x40020000

08001370 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001378:	230f      	movs	r3, #15
 800137a:	18fb      	adds	r3, r7, r3
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2224      	movs	r2, #36	; 0x24
 8001384:	2100      	movs	r1, #0
 8001386:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2224      	movs	r2, #36	; 0x24
 800138c:	5c9b      	ldrb	r3, [r3, r2]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d101      	bne.n	8001396 <HAL_DMA_Abort_IT+0x26>
 8001392:	2302      	movs	r3, #2
 8001394:	e05e      	b.n	8001454 <HAL_DMA_Abort_IT+0xe4>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2224      	movs	r2, #36	; 0x24
 800139a:	2101      	movs	r1, #1
 800139c:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2225      	movs	r2, #37	; 0x25
 80013a2:	5c9b      	ldrb	r3, [r3, r2]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d007      	beq.n	80013ba <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2204      	movs	r2, #4
 80013ae:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80013b0:	230f      	movs	r3, #15
 80013b2:	18fb      	adds	r3, r7, r3
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
 80013b8:	e049      	b.n	800144e <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	210e      	movs	r1, #14
 80013c6:	438a      	bics	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2101      	movs	r1, #1
 80013d6:	438a      	bics	r2, r1
 80013d8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e4:	491d      	ldr	r1, [pc, #116]	; (800145c <HAL_DMA_Abort_IT+0xec>)
 80013e6:	400a      	ands	r2, r1
 80013e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80013ea:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <HAL_DMA_Abort_IT+0xf0>)
 80013ec:	6859      	ldr	r1, [r3, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	221c      	movs	r2, #28
 80013f4:	4013      	ands	r3, r2
 80013f6:	2201      	movs	r2, #1
 80013f8:	409a      	lsls	r2, r3
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <HAL_DMA_Abort_IT+0xf0>)
 80013fc:	430a      	orrs	r2, r1
 80013fe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001408:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00c      	beq.n	800142c <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800141c:	490f      	ldr	r1, [pc, #60]	; (800145c <HAL_DMA_Abort_IT+0xec>)
 800141e:	400a      	ands	r2, r1
 8001420:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800142a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2225      	movs	r2, #37	; 0x25
 8001430:	2101      	movs	r1, #1
 8001432:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2224      	movs	r2, #36	; 0x24
 8001438:	2100      	movs	r1, #0
 800143a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001440:	2b00      	cmp	r3, #0
 8001442:	d004      	beq.n	800144e <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	0010      	movs	r0, r2
 800144c:	4798      	blx	r3
    }
  }
  return status;
 800144e:	230f      	movs	r3, #15
 8001450:	18fb      	adds	r3, r7, r3
 8001452:	781b      	ldrb	r3, [r3, #0]
}
 8001454:	0018      	movs	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	b004      	add	sp, #16
 800145a:	bd80      	pop	{r7, pc}
 800145c:	fffffeff 	.word	0xfffffeff
 8001460:	40020000 	.word	0x40020000

08001464 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001472:	e153      	b.n	800171c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2101      	movs	r1, #1
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4091      	lsls	r1, r2
 800147e:	000a      	movs	r2, r1
 8001480:	4013      	ands	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d100      	bne.n	800148c <HAL_GPIO_Init+0x28>
 800148a:	e144      	b.n	8001716 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b02      	cmp	r3, #2
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x38>
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b12      	cmp	r3, #18
 800149a:	d125      	bne.n	80014e8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	08da      	lsrs	r2, r3, #3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3208      	adds	r2, #8
 80014a4:	0092      	lsls	r2, r2, #2
 80014a6:	58d3      	ldr	r3, [r2, r3]
 80014a8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	2207      	movs	r2, #7
 80014ae:	4013      	ands	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	220f      	movs	r2, #15
 80014b4:	409a      	lsls	r2, r3
 80014b6:	0013      	movs	r3, r2
 80014b8:	43da      	mvns	r2, r3
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	4013      	ands	r3, r2
 80014be:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	220f      	movs	r2, #15
 80014c6:	401a      	ands	r2, r3
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	2107      	movs	r1, #7
 80014cc:	400b      	ands	r3, r1
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	409a      	lsls	r2, r3
 80014d2:	0013      	movs	r3, r2
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	08da      	lsrs	r2, r3, #3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3208      	adds	r2, #8
 80014e2:	0092      	lsls	r2, r2, #2
 80014e4:	6979      	ldr	r1, [r7, #20]
 80014e6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	2203      	movs	r2, #3
 80014f4:	409a      	lsls	r2, r3
 80014f6:	0013      	movs	r3, r2
 80014f8:	43da      	mvns	r2, r3
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	4013      	ands	r3, r2
 80014fe:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2203      	movs	r2, #3
 8001506:	401a      	ands	r2, r3
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	409a      	lsls	r2, r3
 800150e:	0013      	movs	r3, r2
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	4313      	orrs	r3, r2
 8001514:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d00b      	beq.n	800153c <HAL_GPIO_Init+0xd8>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d007      	beq.n	800153c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001530:	2b11      	cmp	r3, #17
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b12      	cmp	r3, #18
 800153a:	d130      	bne.n	800159e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	2203      	movs	r2, #3
 8001548:	409a      	lsls	r2, r3
 800154a:	0013      	movs	r3, r2
 800154c:	43da      	mvns	r2, r3
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	4013      	ands	r3, r2
 8001552:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	409a      	lsls	r2, r3
 800155e:	0013      	movs	r3, r2
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	4313      	orrs	r3, r2
 8001564:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001572:	2201      	movs	r2, #1
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	409a      	lsls	r2, r3
 8001578:	0013      	movs	r3, r2
 800157a:	43da      	mvns	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	4013      	ands	r3, r2
 8001580:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	2201      	movs	r2, #1
 800158a:	401a      	ands	r2, r3
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	409a      	lsls	r2, r3
 8001590:	0013      	movs	r3, r2
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	4313      	orrs	r3, r2
 8001596:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d017      	beq.n	80015d6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	2203      	movs	r2, #3
 80015b2:	409a      	lsls	r2, r3
 80015b4:	0013      	movs	r3, r2
 80015b6:	43da      	mvns	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	4013      	ands	r3, r2
 80015bc:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	409a      	lsls	r2, r3
 80015c8:	0013      	movs	r3, r2
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	055b      	lsls	r3, r3, #21
 80015de:	4013      	ands	r3, r2
 80015e0:	d100      	bne.n	80015e4 <HAL_GPIO_Init+0x180>
 80015e2:	e098      	b.n	8001716 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80015e4:	4a53      	ldr	r2, [pc, #332]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	3318      	adds	r3, #24
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	589b      	ldr	r3, [r3, r2]
 80015f0:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	2203      	movs	r2, #3
 80015f6:	4013      	ands	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	220f      	movs	r2, #15
 80015fc:	409a      	lsls	r2, r3
 80015fe:	0013      	movs	r3, r2
 8001600:	43da      	mvns	r2, r3
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	4013      	ands	r3, r2
 8001606:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	23a0      	movs	r3, #160	; 0xa0
 800160c:	05db      	lsls	r3, r3, #23
 800160e:	429a      	cmp	r2, r3
 8001610:	d019      	beq.n	8001646 <HAL_GPIO_Init+0x1e2>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a48      	ldr	r2, [pc, #288]	; (8001738 <HAL_GPIO_Init+0x2d4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d013      	beq.n	8001642 <HAL_GPIO_Init+0x1de>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a47      	ldr	r2, [pc, #284]	; (800173c <HAL_GPIO_Init+0x2d8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d00d      	beq.n	800163e <HAL_GPIO_Init+0x1da>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a46      	ldr	r2, [pc, #280]	; (8001740 <HAL_GPIO_Init+0x2dc>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d007      	beq.n	800163a <HAL_GPIO_Init+0x1d6>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a45      	ldr	r2, [pc, #276]	; (8001744 <HAL_GPIO_Init+0x2e0>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d101      	bne.n	8001636 <HAL_GPIO_Init+0x1d2>
 8001632:	2305      	movs	r3, #5
 8001634:	e008      	b.n	8001648 <HAL_GPIO_Init+0x1e4>
 8001636:	2306      	movs	r3, #6
 8001638:	e006      	b.n	8001648 <HAL_GPIO_Init+0x1e4>
 800163a:	2303      	movs	r3, #3
 800163c:	e004      	b.n	8001648 <HAL_GPIO_Init+0x1e4>
 800163e:	2302      	movs	r3, #2
 8001640:	e002      	b.n	8001648 <HAL_GPIO_Init+0x1e4>
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <HAL_GPIO_Init+0x1e4>
 8001646:	2300      	movs	r3, #0
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	2103      	movs	r1, #3
 800164c:	400a      	ands	r2, r1
 800164e:	00d2      	lsls	r2, r2, #3
 8001650:	4093      	lsls	r3, r2
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	4313      	orrs	r3, r2
 8001656:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001658:	4936      	ldr	r1, [pc, #216]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	089b      	lsrs	r3, r3, #2
 800165e:	3318      	adds	r3, #24
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001666:	4a33      	ldr	r2, [pc, #204]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	58d3      	ldr	r3, [r2, r3]
 800166c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	43da      	mvns	r2, r3
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	4013      	ands	r3, r2
 8001676:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	025b      	lsls	r3, r3, #9
 8001680:	4013      	ands	r3, r2
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4313      	orrs	r3, r2
 800168a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800168c:	4929      	ldr	r1, [pc, #164]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 800168e:	2280      	movs	r2, #128	; 0x80
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001694:	4a27      	ldr	r2, [pc, #156]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 8001696:	2384      	movs	r3, #132	; 0x84
 8001698:	58d3      	ldr	r3, [r2, r3]
 800169a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	43da      	mvns	r2, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	4013      	ands	r3, r2
 80016a4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	2380      	movs	r3, #128	; 0x80
 80016ac:	029b      	lsls	r3, r3, #10
 80016ae:	4013      	ands	r3, r2
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80016ba:	491e      	ldr	r1, [pc, #120]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016bc:	2284      	movs	r2, #132	; 0x84
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80016c2:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	43da      	mvns	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	4013      	ands	r3, r2
 80016d0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	035b      	lsls	r3, r3, #13
 80016da:	4013      	ands	r3, r2
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80016e6:	4b13      	ldr	r3, [pc, #76]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	43da      	mvns	r2, r3
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	4013      	ands	r3, r2
 80016fa:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	039b      	lsls	r3, r3, #14
 8001704:	4013      	ands	r3, r2
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4313      	orrs	r3, r2
 800170e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	3301      	adds	r3, #1
 800171a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	40da      	lsrs	r2, r3
 8001724:	1e13      	subs	r3, r2, #0
 8001726:	d000      	beq.n	800172a <HAL_GPIO_Init+0x2c6>
 8001728:	e6a4      	b.n	8001474 <HAL_GPIO_Init+0x10>
  }
}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	46c0      	nop			; (mov r8, r8)
 800172e:	46bd      	mov	sp, r7
 8001730:	b006      	add	sp, #24
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40021800 	.word	0x40021800
 8001738:	50000400 	.word	0x50000400
 800173c:	50000800 	.word	0x50000800
 8001740:	50000c00 	.word	0x50000c00
 8001744:	50001400 	.word	0x50001400

08001748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	0008      	movs	r0, r1
 8001752:	0011      	movs	r1, r2
 8001754:	1cbb      	adds	r3, r7, #2
 8001756:	1c02      	adds	r2, r0, #0
 8001758:	801a      	strh	r2, [r3, #0]
 800175a:	1c7b      	adds	r3, r7, #1
 800175c:	1c0a      	adds	r2, r1, #0
 800175e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001760:	1c7b      	adds	r3, r7, #1
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d004      	beq.n	8001772 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001768:	1cbb      	adds	r3, r7, #2
 800176a:	881a      	ldrh	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001770:	e003      	b.n	800177a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001772:	1cbb      	adds	r3, r7, #2
 8001774:	881a      	ldrh	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	629a      	str	r2, [r3, #40]	; 0x28
}
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	46bd      	mov	sp, r7
 800177e:	b002      	add	sp, #8
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	0002      	movs	r2, r0
 800178c:	1dbb      	adds	r3, r7, #6
 800178e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001790:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	1dba      	adds	r2, r7, #6
 8001796:	8812      	ldrh	r2, [r2, #0]
 8001798:	4013      	ands	r3, r2
 800179a:	d008      	beq.n	80017ae <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800179c:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800179e:	1dba      	adds	r2, r7, #6
 80017a0:	8812      	ldrh	r2, [r2, #0]
 80017a2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80017a4:	1dbb      	adds	r3, r7, #6
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	0018      	movs	r0, r3
 80017aa:	f000 f815 	bl	80017d8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	1dba      	adds	r2, r7, #6
 80017b4:	8812      	ldrh	r2, [r2, #0]
 80017b6:	4013      	ands	r3, r2
 80017b8:	d008      	beq.n	80017cc <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80017bc:	1dba      	adds	r2, r7, #6
 80017be:	8812      	ldrh	r2, [r2, #0]
 80017c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80017c2:	1dbb      	adds	r3, r7, #6
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	0018      	movs	r0, r3
 80017c8:	f000 f810 	bl	80017ec <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80017cc:	46c0      	nop			; (mov r8, r8)
 80017ce:	46bd      	mov	sp, r7
 80017d0:	b002      	add	sp, #8
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40021800 	.word	0x40021800

080017d8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	0002      	movs	r2, r0
 80017e0:	1dbb      	adds	r3, r7, #6
 80017e2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80017e4:	46c0      	nop			; (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b002      	add	sp, #8
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	0002      	movs	r2, r0
 80017f4:	1dbb      	adds	r3, r7, #6
 80017f6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80017f8:	46c0      	nop			; (mov r8, r8)
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b002      	add	sp, #8
 80017fe:	bd80      	pop	{r7, pc}

08001800 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e08f      	b.n	8001932 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2241      	movs	r2, #65	; 0x41
 8001816:	5c9b      	ldrb	r3, [r3, r2]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d107      	bne.n	800182e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2240      	movs	r2, #64	; 0x40
 8001822:	2100      	movs	r1, #0
 8001824:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	0018      	movs	r0, r3
 800182a:	f7ff fa03 	bl	8000c34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2241      	movs	r2, #65	; 0x41
 8001832:	2124      	movs	r1, #36	; 0x24
 8001834:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2101      	movs	r1, #1
 8001842:	438a      	bics	r2, r1
 8001844:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	493b      	ldr	r1, [pc, #236]	; (800193c <HAL_I2C_Init+0x13c>)
 8001850:	400a      	ands	r2, r1
 8001852:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4938      	ldr	r1, [pc, #224]	; (8001940 <HAL_I2C_Init+0x140>)
 8001860:	400a      	ands	r2, r1
 8001862:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d108      	bne.n	800187e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2180      	movs	r1, #128	; 0x80
 8001876:	0209      	lsls	r1, r1, #8
 8001878:	430a      	orrs	r2, r1
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	e007      	b.n	800188e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2184      	movs	r1, #132	; 0x84
 8001888:	0209      	lsls	r1, r1, #8
 800188a:	430a      	orrs	r2, r1
 800188c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d109      	bne.n	80018aa <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2180      	movs	r1, #128	; 0x80
 80018a2:	0109      	lsls	r1, r1, #4
 80018a4:	430a      	orrs	r2, r1
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	e007      	b.n	80018ba <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4923      	ldr	r1, [pc, #140]	; (8001944 <HAL_I2C_Init+0x144>)
 80018b6:	400a      	ands	r2, r1
 80018b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4920      	ldr	r1, [pc, #128]	; (8001948 <HAL_I2C_Init+0x148>)
 80018c6:	430a      	orrs	r2, r1
 80018c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	491a      	ldr	r1, [pc, #104]	; (8001940 <HAL_I2C_Init+0x140>)
 80018d6:	400a      	ands	r2, r1
 80018d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691a      	ldr	r2, [r3, #16]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	431a      	orrs	r2, r3
 80018e4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69d9      	ldr	r1, [r3, #28]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a1a      	ldr	r2, [r3, #32]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2101      	movs	r1, #1
 8001910:	430a      	orrs	r2, r1
 8001912:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2241      	movs	r2, #65	; 0x41
 800191e:	2120      	movs	r1, #32
 8001920:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2242      	movs	r2, #66	; 0x42
 800192c:	2100      	movs	r1, #0
 800192e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	0018      	movs	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	b002      	add	sp, #8
 8001938:	bd80      	pop	{r7, pc}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	f0ffffff 	.word	0xf0ffffff
 8001940:	ffff7fff 	.word	0xffff7fff
 8001944:	fffff7ff 	.word	0xfffff7ff
 8001948:	02008000 	.word	0x02008000

0800194c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b089      	sub	sp, #36	; 0x24
 8001950:	af02      	add	r7, sp, #8
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	0008      	movs	r0, r1
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	0019      	movs	r1, r3
 800195a:	230a      	movs	r3, #10
 800195c:	18fb      	adds	r3, r7, r3
 800195e:	1c02      	adds	r2, r0, #0
 8001960:	801a      	strh	r2, [r3, #0]
 8001962:	2308      	movs	r3, #8
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	1c0a      	adds	r2, r1, #0
 8001968:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2241      	movs	r2, #65	; 0x41
 800196e:	5c9b      	ldrb	r3, [r3, r2]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b20      	cmp	r3, #32
 8001974:	d000      	beq.n	8001978 <HAL_I2C_Master_Transmit+0x2c>
 8001976:	e10a      	b.n	8001b8e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2240      	movs	r2, #64	; 0x40
 800197c:	5c9b      	ldrb	r3, [r3, r2]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d101      	bne.n	8001986 <HAL_I2C_Master_Transmit+0x3a>
 8001982:	2302      	movs	r3, #2
 8001984:	e104      	b.n	8001b90 <HAL_I2C_Master_Transmit+0x244>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2240      	movs	r2, #64	; 0x40
 800198a:	2101      	movs	r1, #1
 800198c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800198e:	f7ff fb81 	bl	8001094 <HAL_GetTick>
 8001992:	0003      	movs	r3, r0
 8001994:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	0219      	lsls	r1, r3, #8
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	2319      	movs	r3, #25
 80019a2:	2201      	movs	r2, #1
 80019a4:	f000 fbce 	bl	8002144 <I2C_WaitOnFlagUntilTimeout>
 80019a8:	1e03      	subs	r3, r0, #0
 80019aa:	d001      	beq.n	80019b0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0ef      	b.n	8001b90 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2241      	movs	r2, #65	; 0x41
 80019b4:	2121      	movs	r1, #33	; 0x21
 80019b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2242      	movs	r2, #66	; 0x42
 80019bc:	2110      	movs	r1, #16
 80019be:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2208      	movs	r2, #8
 80019d0:	18ba      	adds	r2, r7, r2
 80019d2:	8812      	ldrh	r2, [r2, #0]
 80019d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	2bff      	cmp	r3, #255	; 0xff
 80019e4:	d906      	bls.n	80019f4 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	22ff      	movs	r2, #255	; 0xff
 80019ea:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	045b      	lsls	r3, r3, #17
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	e007      	b.n	8001a04 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80019fe:	2380      	movs	r3, #128	; 0x80
 8001a00:	049b      	lsls	r3, r3, #18
 8001a02:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d027      	beq.n	8001a5c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	781a      	ldrb	r2, [r3, #0]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	1c5a      	adds	r2, r3, #1
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	3301      	adds	r3, #1
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	697c      	ldr	r4, [r7, #20]
 8001a48:	230a      	movs	r3, #10
 8001a4a:	18fb      	adds	r3, r7, r3
 8001a4c:	8819      	ldrh	r1, [r3, #0]
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	4b51      	ldr	r3, [pc, #324]	; (8001b98 <HAL_I2C_Master_Transmit+0x24c>)
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	0023      	movs	r3, r4
 8001a56:	f000 fd4d 	bl	80024f4 <I2C_TransferConfig>
 8001a5a:	e06f      	b.n	8001b3c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	697c      	ldr	r4, [r7, #20]
 8001a64:	230a      	movs	r3, #10
 8001a66:	18fb      	adds	r3, r7, r3
 8001a68:	8819      	ldrh	r1, [r3, #0]
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	4b4a      	ldr	r3, [pc, #296]	; (8001b98 <HAL_I2C_Master_Transmit+0x24c>)
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	0023      	movs	r3, r4
 8001a72:	f000 fd3f 	bl	80024f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001a76:	e061      	b.n	8001b3c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f000 fbae 	bl	80021e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a84:	1e03      	subs	r3, r0, #0
 8001a86:	d001      	beq.n	8001a8c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e081      	b.n	8001b90 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	781a      	ldrb	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	1c5a      	adds	r2, r3, #1
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d03a      	beq.n	8001b3c <HAL_I2C_Master_Transmit+0x1f0>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d136      	bne.n	8001b3c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	0013      	movs	r3, r2
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2180      	movs	r1, #128	; 0x80
 8001adc:	f000 fb32 	bl	8002144 <I2C_WaitOnFlagUntilTimeout>
 8001ae0:	1e03      	subs	r3, r0, #0
 8001ae2:	d001      	beq.n	8001ae8 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e053      	b.n	8001b90 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	2bff      	cmp	r3, #255	; 0xff
 8001af0:	d911      	bls.n	8001b16 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	22ff      	movs	r2, #255	; 0xff
 8001af6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	045c      	lsls	r4, r3, #17
 8001b02:	230a      	movs	r3, #10
 8001b04:	18fb      	adds	r3, r7, r3
 8001b06:	8819      	ldrh	r1, [r3, #0]
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	0023      	movs	r3, r4
 8001b10:	f000 fcf0 	bl	80024f4 <I2C_TransferConfig>
 8001b14:	e012      	b.n	8001b3c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	2380      	movs	r3, #128	; 0x80
 8001b28:	049c      	lsls	r4, r3, #18
 8001b2a:	230a      	movs	r3, #10
 8001b2c:	18fb      	adds	r3, r7, r3
 8001b2e:	8819      	ldrh	r1, [r3, #0]
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	2300      	movs	r3, #0
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	0023      	movs	r3, r4
 8001b38:	f000 fcdc 	bl	80024f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d198      	bne.n	8001a78 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f000 fb8d 	bl	800226c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b52:	1e03      	subs	r3, r0, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e01a      	b.n	8001b90 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2220      	movs	r2, #32
 8001b60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	490b      	ldr	r1, [pc, #44]	; (8001b9c <HAL_I2C_Master_Transmit+0x250>)
 8001b6e:	400a      	ands	r2, r1
 8001b70:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2241      	movs	r2, #65	; 0x41
 8001b76:	2120      	movs	r1, #32
 8001b78:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2242      	movs	r2, #66	; 0x42
 8001b7e:	2100      	movs	r1, #0
 8001b80:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2240      	movs	r2, #64	; 0x40
 8001b86:	2100      	movs	r1, #0
 8001b88:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e000      	b.n	8001b90 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8001b8e:	2302      	movs	r3, #2
  }
}
 8001b90:	0018      	movs	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b007      	add	sp, #28
 8001b96:	bd90      	pop	{r4, r7, pc}
 8001b98:	80002000 	.word	0x80002000
 8001b9c:	fe00e800 	.word	0xfe00e800

08001ba0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ba0:	b590      	push	{r4, r7, lr}
 8001ba2:	b089      	sub	sp, #36	; 0x24
 8001ba4:	af02      	add	r7, sp, #8
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	000c      	movs	r4, r1
 8001baa:	0010      	movs	r0, r2
 8001bac:	0019      	movs	r1, r3
 8001bae:	230a      	movs	r3, #10
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	1c22      	adds	r2, r4, #0
 8001bb4:	801a      	strh	r2, [r3, #0]
 8001bb6:	2308      	movs	r3, #8
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	1c02      	adds	r2, r0, #0
 8001bbc:	801a      	strh	r2, [r3, #0]
 8001bbe:	1dbb      	adds	r3, r7, #6
 8001bc0:	1c0a      	adds	r2, r1, #0
 8001bc2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2241      	movs	r2, #65	; 0x41
 8001bc8:	5c9b      	ldrb	r3, [r3, r2]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b20      	cmp	r3, #32
 8001bce:	d000      	beq.n	8001bd2 <HAL_I2C_Mem_Read+0x32>
 8001bd0:	e110      	b.n	8001df4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d004      	beq.n	8001be2 <HAL_I2C_Mem_Read+0x42>
 8001bd8:	232c      	movs	r3, #44	; 0x2c
 8001bda:	18fb      	adds	r3, r7, r3
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d105      	bne.n	8001bee <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2280      	movs	r2, #128	; 0x80
 8001be6:	0092      	lsls	r2, r2, #2
 8001be8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e103      	b.n	8001df6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2240      	movs	r2, #64	; 0x40
 8001bf2:	5c9b      	ldrb	r3, [r3, r2]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <HAL_I2C_Mem_Read+0x5c>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e0fc      	b.n	8001df6 <HAL_I2C_Mem_Read+0x256>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2240      	movs	r2, #64	; 0x40
 8001c00:	2101      	movs	r1, #1
 8001c02:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c04:	f7ff fa46 	bl	8001094 <HAL_GetTick>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	0219      	lsls	r1, r3, #8
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	2319      	movs	r3, #25
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f000 fa93 	bl	8002144 <I2C_WaitOnFlagUntilTimeout>
 8001c1e:	1e03      	subs	r3, r0, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e0e7      	b.n	8001df6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2241      	movs	r2, #65	; 0x41
 8001c2a:	2122      	movs	r1, #34	; 0x22
 8001c2c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2242      	movs	r2, #66	; 0x42
 8001c32:	2140      	movs	r1, #64	; 0x40
 8001c34:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	222c      	movs	r2, #44	; 0x2c
 8001c46:	18ba      	adds	r2, r7, r2
 8001c48:	8812      	ldrh	r2, [r2, #0]
 8001c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c52:	1dbb      	adds	r3, r7, #6
 8001c54:	881c      	ldrh	r4, [r3, #0]
 8001c56:	2308      	movs	r3, #8
 8001c58:	18fb      	adds	r3, r7, r3
 8001c5a:	881a      	ldrh	r2, [r3, #0]
 8001c5c:	230a      	movs	r3, #10
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	8819      	ldrh	r1, [r3, #0]
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	0023      	movs	r3, r4
 8001c6e:	f000 f9e5 	bl	800203c <I2C_RequestMemoryRead>
 8001c72:	1e03      	subs	r3, r0, #0
 8001c74:	d005      	beq.n	8001c82 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2240      	movs	r2, #64	; 0x40
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e0b9      	b.n	8001df6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	2bff      	cmp	r3, #255	; 0xff
 8001c8a:	d911      	bls.n	8001cb0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	22ff      	movs	r2, #255	; 0xff
 8001c90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	045c      	lsls	r4, r3, #17
 8001c9c:	230a      	movs	r3, #10
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	8819      	ldrh	r1, [r3, #0]
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	4b56      	ldr	r3, [pc, #344]	; (8001e00 <HAL_I2C_Mem_Read+0x260>)
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	0023      	movs	r3, r4
 8001caa:	f000 fc23 	bl	80024f4 <I2C_TransferConfig>
 8001cae:	e012      	b.n	8001cd6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	049c      	lsls	r4, r3, #18
 8001cc4:	230a      	movs	r3, #10
 8001cc6:	18fb      	adds	r3, r7, r3
 8001cc8:	8819      	ldrh	r1, [r3, #0]
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	4b4c      	ldr	r3, [pc, #304]	; (8001e00 <HAL_I2C_Mem_Read+0x260>)
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	0023      	movs	r3, r4
 8001cd2:	f000 fc0f 	bl	80024f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001cd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	0013      	movs	r3, r2
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2104      	movs	r1, #4
 8001ce4:	f000 fa2e 	bl	8002144 <I2C_WaitOnFlagUntilTimeout>
 8001ce8:	1e03      	subs	r3, r0, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e082      	b.n	8001df6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d03a      	beq.n	8001da2 <HAL_I2C_Mem_Read+0x202>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d136      	bne.n	8001da2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	0013      	movs	r3, r2
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2180      	movs	r1, #128	; 0x80
 8001d42:	f000 f9ff 	bl	8002144 <I2C_WaitOnFlagUntilTimeout>
 8001d46:	1e03      	subs	r3, r0, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e053      	b.n	8001df6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	2bff      	cmp	r3, #255	; 0xff
 8001d56:	d911      	bls.n	8001d7c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	22ff      	movs	r2, #255	; 0xff
 8001d5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	2380      	movs	r3, #128	; 0x80
 8001d66:	045c      	lsls	r4, r3, #17
 8001d68:	230a      	movs	r3, #10
 8001d6a:	18fb      	adds	r3, r7, r3
 8001d6c:	8819      	ldrh	r1, [r3, #0]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	2300      	movs	r3, #0
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	0023      	movs	r3, r4
 8001d76:	f000 fbbd 	bl	80024f4 <I2C_TransferConfig>
 8001d7a:	e012      	b.n	8001da2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	049c      	lsls	r4, r3, #18
 8001d90:	230a      	movs	r3, #10
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	8819      	ldrh	r1, [r3, #0]
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	2300      	movs	r3, #0
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	0023      	movs	r3, r4
 8001d9e:	f000 fba9 	bl	80024f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d194      	bne.n	8001cd6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	0018      	movs	r0, r3
 8001db4:	f000 fa5a 	bl	800226c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001db8:	1e03      	subs	r3, r0, #0
 8001dba:	d001      	beq.n	8001dc0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e01a      	b.n	8001df6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	490c      	ldr	r1, [pc, #48]	; (8001e04 <HAL_I2C_Mem_Read+0x264>)
 8001dd4:	400a      	ands	r2, r1
 8001dd6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2241      	movs	r2, #65	; 0x41
 8001ddc:	2120      	movs	r1, #32
 8001dde:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2242      	movs	r2, #66	; 0x42
 8001de4:	2100      	movs	r1, #0
 8001de6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2240      	movs	r2, #64	; 0x40
 8001dec:	2100      	movs	r1, #0
 8001dee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	e000      	b.n	8001df6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001df4:	2302      	movs	r3, #2
  }
}
 8001df6:	0018      	movs	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	b007      	add	sp, #28
 8001dfc:	bd90      	pop	{r4, r7, pc}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	80002400 	.word	0x80002400
 8001e04:	fe00e800 	.word	0xfe00e800

08001e08 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	; 0x28
 8001e0c:	af02      	add	r7, sp, #8
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	230a      	movs	r3, #10
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	1c0a      	adds	r2, r1, #0
 8001e1a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2241      	movs	r2, #65	; 0x41
 8001e24:	5c9b      	ldrb	r3, [r3, r2]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b20      	cmp	r3, #32
 8001e2a:	d000      	beq.n	8001e2e <HAL_I2C_IsDeviceReady+0x26>
 8001e2c:	e0fd      	b.n	800202a <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	699a      	ldr	r2, [r3, #24]
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	401a      	ands	r2, r3
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	021b      	lsls	r3, r3, #8
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d101      	bne.n	8001e46 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8001e42:	2302      	movs	r3, #2
 8001e44:	e0f2      	b.n	800202c <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2240      	movs	r2, #64	; 0x40
 8001e4a:	5c9b      	ldrb	r3, [r3, r2]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_I2C_IsDeviceReady+0x4c>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e0eb      	b.n	800202c <HAL_I2C_IsDeviceReady+0x224>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2240      	movs	r2, #64	; 0x40
 8001e58:	2101      	movs	r1, #1
 8001e5a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2241      	movs	r2, #65	; 0x41
 8001e60:	2124      	movs	r1, #36	; 0x24
 8001e62:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d107      	bne.n	8001e82 <HAL_I2C_IsDeviceReady+0x7a>
 8001e72:	230a      	movs	r3, #10
 8001e74:	18fb      	adds	r3, r7, r3
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	059b      	lsls	r3, r3, #22
 8001e7a:	0d9b      	lsrs	r3, r3, #22
 8001e7c:	4a6d      	ldr	r2, [pc, #436]	; (8002034 <HAL_I2C_IsDeviceReady+0x22c>)
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	e006      	b.n	8001e90 <HAL_I2C_IsDeviceReady+0x88>
 8001e82:	230a      	movs	r3, #10
 8001e84:	18fb      	adds	r3, r7, r3
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	059b      	lsls	r3, r3, #22
 8001e8a:	0d9b      	lsrs	r3, r3, #22
 8001e8c:	4a6a      	ldr	r2, [pc, #424]	; (8002038 <HAL_I2C_IsDeviceReady+0x230>)
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001e96:	f7ff f8fd 	bl	8001094 <HAL_GetTick>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	3b20      	subs	r3, #32
 8001eaa:	425a      	negs	r2, r3
 8001eac:	4153      	adcs	r3, r2
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	231f      	movs	r3, #31
 8001eb2:	18fb      	adds	r3, r7, r3
 8001eb4:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	2210      	movs	r2, #16
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	3b10      	subs	r3, #16
 8001ec2:	425a      	negs	r2, r3
 8001ec4:	4153      	adcs	r3, r2
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	231e      	movs	r3, #30
 8001eca:	18fb      	adds	r3, r7, r3
 8001ecc:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001ece:	e035      	b.n	8001f3c <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	d01a      	beq.n	8001f0c <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ed6:	f7ff f8dd 	bl	8001094 <HAL_GetTick>
 8001eda:	0002      	movs	r2, r0
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d302      	bcc.n	8001eec <HAL_I2C_IsDeviceReady+0xe4>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10f      	bne.n	8001f0c <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2241      	movs	r2, #65	; 0x41
 8001ef0:	2120      	movs	r1, #32
 8001ef2:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	2220      	movs	r2, #32
 8001efa:	431a      	orrs	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2240      	movs	r2, #64	; 0x40
 8001f04:	2100      	movs	r1, #0
 8001f06:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e08f      	b.n	800202c <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	2220      	movs	r2, #32
 8001f14:	4013      	ands	r3, r2
 8001f16:	3b20      	subs	r3, #32
 8001f18:	425a      	negs	r2, r3
 8001f1a:	4153      	adcs	r3, r2
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	231f      	movs	r3, #31
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	2210      	movs	r2, #16
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	3b10      	subs	r3, #16
 8001f30:	425a      	negs	r2, r3
 8001f32:	4153      	adcs	r3, r2
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	231e      	movs	r3, #30
 8001f38:	18fb      	adds	r3, r7, r3
 8001f3a:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001f3c:	231f      	movs	r3, #31
 8001f3e:	18fb      	adds	r3, r7, r3
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d104      	bne.n	8001f50 <HAL_I2C_IsDeviceReady+0x148>
 8001f46:	231e      	movs	r3, #30
 8001f48:	18fb      	adds	r3, r7, r3
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0bf      	beq.n	8001ed0 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	2210      	movs	r2, #16
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b10      	cmp	r3, #16
 8001f5c:	d01a      	beq.n	8001f94 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	0013      	movs	r3, r2
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2120      	movs	r1, #32
 8001f6c:	f000 f8ea 	bl	8002144 <I2C_WaitOnFlagUntilTimeout>
 8001f70:	1e03      	subs	r3, r0, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e059      	b.n	800202c <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2241      	movs	r2, #65	; 0x41
 8001f84:	2120      	movs	r1, #32
 8001f86:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2240      	movs	r2, #64	; 0x40
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	e04b      	b.n	800202c <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	0013      	movs	r3, r2
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2120      	movs	r1, #32
 8001fa2:	f000 f8cf 	bl	8002144 <I2C_WaitOnFlagUntilTimeout>
 8001fa6:	1e03      	subs	r3, r0, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e03e      	b.n	800202c <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2210      	movs	r2, #16
 8001fb4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d119      	bne.n	8001ffa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2180      	movs	r1, #128	; 0x80
 8001fd2:	01c9      	lsls	r1, r1, #7
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	0013      	movs	r3, r2
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2120      	movs	r1, #32
 8001fe6:	f000 f8ad 	bl	8002144 <I2C_WaitOnFlagUntilTimeout>
 8001fea:	1e03      	subs	r3, r0, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e01c      	b.n	800202c <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	429a      	cmp	r2, r3
 8002006:	d900      	bls.n	800200a <HAL_I2C_IsDeviceReady+0x202>
 8002008:	e72f      	b.n	8001e6a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2241      	movs	r2, #65	; 0x41
 800200e:	2120      	movs	r1, #32
 8002010:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	2220      	movs	r2, #32
 8002018:	431a      	orrs	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2240      	movs	r2, #64	; 0x40
 8002022:	2100      	movs	r1, #0
 8002024:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 800202a:	2302      	movs	r3, #2
  }
}
 800202c:	0018      	movs	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	b008      	add	sp, #32
 8002032:	bd80      	pop	{r7, pc}
 8002034:	02002000 	.word	0x02002000
 8002038:	02002800 	.word	0x02002800

0800203c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800203c:	b5b0      	push	{r4, r5, r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af02      	add	r7, sp, #8
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	000c      	movs	r4, r1
 8002046:	0010      	movs	r0, r2
 8002048:	0019      	movs	r1, r3
 800204a:	250a      	movs	r5, #10
 800204c:	197b      	adds	r3, r7, r5
 800204e:	1c22      	adds	r2, r4, #0
 8002050:	801a      	strh	r2, [r3, #0]
 8002052:	2308      	movs	r3, #8
 8002054:	18fb      	adds	r3, r7, r3
 8002056:	1c02      	adds	r2, r0, #0
 8002058:	801a      	strh	r2, [r3, #0]
 800205a:	1dbb      	adds	r3, r7, #6
 800205c:	1c0a      	adds	r2, r1, #0
 800205e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002060:	1dbb      	adds	r3, r7, #6
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	b2da      	uxtb	r2, r3
 8002066:	197b      	adds	r3, r7, r5
 8002068:	8819      	ldrh	r1, [r3, #0]
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	4b23      	ldr	r3, [pc, #140]	; (80020fc <I2C_RequestMemoryRead+0xc0>)
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	2300      	movs	r3, #0
 8002072:	f000 fa3f 	bl	80024f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002078:	6a39      	ldr	r1, [r7, #32]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	0018      	movs	r0, r3
 800207e:	f000 f8af 	bl	80021e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002082:	1e03      	subs	r3, r0, #0
 8002084:	d001      	beq.n	800208a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e033      	b.n	80020f2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800208a:	1dbb      	adds	r3, r7, #6
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d107      	bne.n	80020a2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002092:	2308      	movs	r3, #8
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	b2da      	uxtb	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	629a      	str	r2, [r3, #40]	; 0x28
 80020a0:	e019      	b.n	80020d6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020a2:	2308      	movs	r3, #8
 80020a4:	18fb      	adds	r3, r7, r3
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	0a1b      	lsrs	r3, r3, #8
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b6:	6a39      	ldr	r1, [r7, #32]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	0018      	movs	r0, r3
 80020bc:	f000 f890 	bl	80021e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80020c0:	1e03      	subs	r3, r0, #0
 80020c2:	d001      	beq.n	80020c8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e014      	b.n	80020f2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020c8:	2308      	movs	r3, #8
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80020d6:	6a3a      	ldr	r2, [r7, #32]
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	0013      	movs	r3, r2
 80020e0:	2200      	movs	r2, #0
 80020e2:	2140      	movs	r1, #64	; 0x40
 80020e4:	f000 f82e 	bl	8002144 <I2C_WaitOnFlagUntilTimeout>
 80020e8:	1e03      	subs	r3, r0, #0
 80020ea:	d001      	beq.n	80020f0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	0018      	movs	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	b004      	add	sp, #16
 80020f8:	bdb0      	pop	{r4, r5, r7, pc}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	80002000 	.word	0x80002000

08002100 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	2202      	movs	r2, #2
 8002110:	4013      	ands	r3, r2
 8002112:	2b02      	cmp	r3, #2
 8002114:	d103      	bne.n	800211e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2200      	movs	r2, #0
 800211c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	2201      	movs	r2, #1
 8002126:	4013      	ands	r3, r2
 8002128:	2b01      	cmp	r3, #1
 800212a:	d007      	beq.n	800213c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	699a      	ldr	r2, [r3, #24]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2101      	movs	r1, #1
 8002138:	430a      	orrs	r2, r1
 800213a:	619a      	str	r2, [r3, #24]
  }
}
 800213c:	46c0      	nop			; (mov r8, r8)
 800213e:	46bd      	mov	sp, r7
 8002140:	b002      	add	sp, #8
 8002142:	bd80      	pop	{r7, pc}

08002144 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	1dfb      	adds	r3, r7, #7
 8002152:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002154:	e030      	b.n	80021b8 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	3301      	adds	r3, #1
 800215a:	d02d      	beq.n	80021b8 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800215c:	f7fe ff9a 	bl	8001094 <HAL_GetTick>
 8002160:	0002      	movs	r2, r0
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d302      	bcc.n	8002172 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d122      	bne.n	80021b8 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	68ba      	ldr	r2, [r7, #8]
 800217a:	4013      	ands	r3, r2
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	425a      	negs	r2, r3
 8002182:	4153      	adcs	r3, r2
 8002184:	b2db      	uxtb	r3, r3
 8002186:	001a      	movs	r2, r3
 8002188:	1dfb      	adds	r3, r7, #7
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d113      	bne.n	80021b8 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002194:	2220      	movs	r2, #32
 8002196:	431a      	orrs	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2241      	movs	r2, #65	; 0x41
 80021a0:	2120      	movs	r1, #32
 80021a2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2242      	movs	r2, #66	; 0x42
 80021a8:	2100      	movs	r1, #0
 80021aa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2240      	movs	r2, #64	; 0x40
 80021b0:	2100      	movs	r1, #0
 80021b2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e00f      	b.n	80021d8 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	4013      	ands	r3, r2
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	425a      	negs	r2, r3
 80021c8:	4153      	adcs	r3, r2
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	001a      	movs	r2, r3
 80021ce:	1dfb      	adds	r3, r7, #7
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d0bf      	beq.n	8002156 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	0018      	movs	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	b004      	add	sp, #16
 80021de:	bd80      	pop	{r7, pc}

080021e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021ec:	e032      	b.n	8002254 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	0018      	movs	r0, r3
 80021f6:	f000 f87d 	bl	80022f4 <I2C_IsErrorOccurred>
 80021fa:	1e03      	subs	r3, r0, #0
 80021fc:	d001      	beq.n	8002202 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e030      	b.n	8002264 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3301      	adds	r3, #1
 8002206:	d025      	beq.n	8002254 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002208:	f7fe ff44 	bl	8001094 <HAL_GetTick>
 800220c:	0002      	movs	r2, r0
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	429a      	cmp	r2, r3
 8002216:	d302      	bcc.n	800221e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d11a      	bne.n	8002254 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	2202      	movs	r2, #2
 8002226:	4013      	ands	r3, r2
 8002228:	2b02      	cmp	r3, #2
 800222a:	d013      	beq.n	8002254 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002230:	2220      	movs	r2, #32
 8002232:	431a      	orrs	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2241      	movs	r2, #65	; 0x41
 800223c:	2120      	movs	r1, #32
 800223e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2242      	movs	r2, #66	; 0x42
 8002244:	2100      	movs	r1, #0
 8002246:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2240      	movs	r2, #64	; 0x40
 800224c:	2100      	movs	r1, #0
 800224e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e007      	b.n	8002264 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	2202      	movs	r2, #2
 800225c:	4013      	ands	r3, r2
 800225e:	2b02      	cmp	r3, #2
 8002260:	d1c5      	bne.n	80021ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	0018      	movs	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	b004      	add	sp, #16
 800226a:	bd80      	pop	{r7, pc}

0800226c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002278:	e02f      	b.n	80022da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	0018      	movs	r0, r3
 8002282:	f000 f837 	bl	80022f4 <I2C_IsErrorOccurred>
 8002286:	1e03      	subs	r3, r0, #0
 8002288:	d001      	beq.n	800228e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e02d      	b.n	80022ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800228e:	f7fe ff01 	bl	8001094 <HAL_GetTick>
 8002292:	0002      	movs	r2, r0
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	429a      	cmp	r2, r3
 800229c:	d302      	bcc.n	80022a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d11a      	bne.n	80022da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	2220      	movs	r2, #32
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b20      	cmp	r3, #32
 80022b0:	d013      	beq.n	80022da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	2220      	movs	r2, #32
 80022b8:	431a      	orrs	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2241      	movs	r2, #65	; 0x41
 80022c2:	2120      	movs	r1, #32
 80022c4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2242      	movs	r2, #66	; 0x42
 80022ca:	2100      	movs	r1, #0
 80022cc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2240      	movs	r2, #64	; 0x40
 80022d2:	2100      	movs	r1, #0
 80022d4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e007      	b.n	80022ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	2220      	movs	r2, #32
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b20      	cmp	r3, #32
 80022e6:	d1c8      	bne.n	800227a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	0018      	movs	r0, r3
 80022ec:	46bd      	mov	sp, r7
 80022ee:	b004      	add	sp, #16
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022f4:	b590      	push	{r4, r7, lr}
 80022f6:	b08b      	sub	sp, #44	; 0x2c
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002300:	2327      	movs	r3, #39	; 0x27
 8002302:	18fb      	adds	r3, r7, r3
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	2210      	movs	r2, #16
 800231c:	4013      	ands	r3, r2
 800231e:	d100      	bne.n	8002322 <I2C_IsErrorOccurred+0x2e>
 8002320:	e082      	b.n	8002428 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2210      	movs	r2, #16
 8002328:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800232a:	e060      	b.n	80023ee <I2C_IsErrorOccurred+0xfa>
 800232c:	2427      	movs	r4, #39	; 0x27
 800232e:	193b      	adds	r3, r7, r4
 8002330:	193a      	adds	r2, r7, r4
 8002332:	7812      	ldrb	r2, [r2, #0]
 8002334:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	3301      	adds	r3, #1
 800233a:	d058      	beq.n	80023ee <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800233c:	f7fe feaa 	bl	8001094 <HAL_GetTick>
 8002340:	0002      	movs	r2, r0
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	429a      	cmp	r2, r3
 800234a:	d306      	bcc.n	800235a <I2C_IsErrorOccurred+0x66>
 800234c:	193b      	adds	r3, r7, r4
 800234e:	193a      	adds	r2, r7, r4
 8002350:	7812      	ldrb	r2, [r2, #0]
 8002352:	701a      	strb	r2, [r3, #0]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d149      	bne.n	80023ee <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	01db      	lsls	r3, r3, #7
 8002364:	4013      	ands	r3, r2
 8002366:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002368:	2013      	movs	r0, #19
 800236a:	183b      	adds	r3, r7, r0
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	2142      	movs	r1, #66	; 0x42
 8002370:	5c52      	ldrb	r2, [r2, r1]
 8002372:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699a      	ldr	r2, [r3, #24]
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	021b      	lsls	r3, r3, #8
 800237e:	401a      	ands	r2, r3
 8002380:	2380      	movs	r3, #128	; 0x80
 8002382:	021b      	lsls	r3, r3, #8
 8002384:	429a      	cmp	r2, r3
 8002386:	d126      	bne.n	80023d6 <I2C_IsErrorOccurred+0xe2>
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	2380      	movs	r3, #128	; 0x80
 800238c:	01db      	lsls	r3, r3, #7
 800238e:	429a      	cmp	r2, r3
 8002390:	d021      	beq.n	80023d6 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002392:	183b      	adds	r3, r7, r0
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b20      	cmp	r3, #32
 8002398:	d01d      	beq.n	80023d6 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2180      	movs	r1, #128	; 0x80
 80023a6:	01c9      	lsls	r1, r1, #7
 80023a8:	430a      	orrs	r2, r1
 80023aa:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80023ac:	f7fe fe72 	bl	8001094 <HAL_GetTick>
 80023b0:	0003      	movs	r3, r0
 80023b2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023b4:	e00f      	b.n	80023d6 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80023b6:	f7fe fe6d 	bl	8001094 <HAL_GetTick>
 80023ba:	0002      	movs	r2, r0
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b19      	cmp	r3, #25
 80023c2:	d908      	bls.n	80023d6 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	2220      	movs	r2, #32
 80023c8:	4313      	orrs	r3, r2
 80023ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80023cc:	2327      	movs	r3, #39	; 0x27
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	2201      	movs	r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]

              break;
 80023d4:	e00b      	b.n	80023ee <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	2220      	movs	r2, #32
 80023de:	4013      	ands	r3, r2
 80023e0:	2127      	movs	r1, #39	; 0x27
 80023e2:	187a      	adds	r2, r7, r1
 80023e4:	1879      	adds	r1, r7, r1
 80023e6:	7809      	ldrb	r1, [r1, #0]
 80023e8:	7011      	strb	r1, [r2, #0]
 80023ea:	2b20      	cmp	r3, #32
 80023ec:	d1e3      	bne.n	80023b6 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	2220      	movs	r2, #32
 80023f6:	4013      	ands	r3, r2
 80023f8:	2b20      	cmp	r3, #32
 80023fa:	d004      	beq.n	8002406 <I2C_IsErrorOccurred+0x112>
 80023fc:	2327      	movs	r3, #39	; 0x27
 80023fe:	18fb      	adds	r3, r7, r3
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d092      	beq.n	800232c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002406:	2327      	movs	r3, #39	; 0x27
 8002408:	18fb      	adds	r3, r7, r3
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d103      	bne.n	8002418 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2220      	movs	r2, #32
 8002416:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	2204      	movs	r2, #4
 800241c:	4313      	orrs	r3, r2
 800241e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002420:	2327      	movs	r3, #39	; 0x27
 8002422:	18fb      	adds	r3, r7, r3
 8002424:	2201      	movs	r2, #1
 8002426:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	2380      	movs	r3, #128	; 0x80
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	4013      	ands	r3, r2
 8002438:	d00c      	beq.n	8002454 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	2201      	movs	r2, #1
 800243e:	4313      	orrs	r3, r2
 8002440:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2280      	movs	r2, #128	; 0x80
 8002448:	0052      	lsls	r2, r2, #1
 800244a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800244c:	2327      	movs	r3, #39	; 0x27
 800244e:	18fb      	adds	r3, r7, r3
 8002450:	2201      	movs	r2, #1
 8002452:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4013      	ands	r3, r2
 800245c:	d00c      	beq.n	8002478 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	2208      	movs	r2, #8
 8002462:	4313      	orrs	r3, r2
 8002464:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2280      	movs	r2, #128	; 0x80
 800246c:	00d2      	lsls	r2, r2, #3
 800246e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002470:	2327      	movs	r3, #39	; 0x27
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	2201      	movs	r2, #1
 8002476:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4013      	ands	r3, r2
 8002480:	d00c      	beq.n	800249c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	2202      	movs	r2, #2
 8002486:	4313      	orrs	r3, r2
 8002488:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2280      	movs	r2, #128	; 0x80
 8002490:	0092      	lsls	r2, r2, #2
 8002492:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002494:	2327      	movs	r3, #39	; 0x27
 8002496:	18fb      	adds	r3, r7, r3
 8002498:	2201      	movs	r2, #1
 800249a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800249c:	2327      	movs	r3, #39	; 0x27
 800249e:	18fb      	adds	r3, r7, r3
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d01d      	beq.n	80024e2 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	0018      	movs	r0, r3
 80024aa:	f7ff fe29 	bl	8002100 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	490d      	ldr	r1, [pc, #52]	; (80024f0 <I2C_IsErrorOccurred+0x1fc>)
 80024ba:	400a      	ands	r2, r1
 80024bc:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	431a      	orrs	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2241      	movs	r2, #65	; 0x41
 80024ce:	2120      	movs	r1, #32
 80024d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2242      	movs	r2, #66	; 0x42
 80024d6:	2100      	movs	r1, #0
 80024d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2240      	movs	r2, #64	; 0x40
 80024de:	2100      	movs	r1, #0
 80024e0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80024e2:	2327      	movs	r3, #39	; 0x27
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	781b      	ldrb	r3, [r3, #0]
}
 80024e8:	0018      	movs	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b00b      	add	sp, #44	; 0x2c
 80024ee:	bd90      	pop	{r4, r7, pc}
 80024f0:	fe00e800 	.word	0xfe00e800

080024f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80024f4:	b590      	push	{r4, r7, lr}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	0008      	movs	r0, r1
 80024fe:	0011      	movs	r1, r2
 8002500:	607b      	str	r3, [r7, #4]
 8002502:	240a      	movs	r4, #10
 8002504:	193b      	adds	r3, r7, r4
 8002506:	1c02      	adds	r2, r0, #0
 8002508:	801a      	strh	r2, [r3, #0]
 800250a:	2009      	movs	r0, #9
 800250c:	183b      	adds	r3, r7, r0
 800250e:	1c0a      	adds	r2, r1, #0
 8002510:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002512:	193b      	adds	r3, r7, r4
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	059b      	lsls	r3, r3, #22
 8002518:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800251a:	183b      	adds	r3, r7, r0
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	0419      	lsls	r1, r3, #16
 8002520:	23ff      	movs	r3, #255	; 0xff
 8002522:	041b      	lsls	r3, r3, #16
 8002524:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002526:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800252c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252e:	4313      	orrs	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	085b      	lsrs	r3, r3, #1
 8002534:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800253e:	0d51      	lsrs	r1, r2, #21
 8002540:	2280      	movs	r2, #128	; 0x80
 8002542:	00d2      	lsls	r2, r2, #3
 8002544:	400a      	ands	r2, r1
 8002546:	4907      	ldr	r1, [pc, #28]	; (8002564 <I2C_TransferConfig+0x70>)
 8002548:	430a      	orrs	r2, r1
 800254a:	43d2      	mvns	r2, r2
 800254c:	401a      	ands	r2, r3
 800254e:	0011      	movs	r1, r2
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	430a      	orrs	r2, r1
 8002558:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	46bd      	mov	sp, r7
 800255e:	b007      	add	sp, #28
 8002560:	bd90      	pop	{r4, r7, pc}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	03ff63ff 	.word	0x03ff63ff

08002568 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2241      	movs	r2, #65	; 0x41
 8002576:	5c9b      	ldrb	r3, [r3, r2]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b20      	cmp	r3, #32
 800257c:	d138      	bne.n	80025f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2240      	movs	r2, #64	; 0x40
 8002582:	5c9b      	ldrb	r3, [r3, r2]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002588:	2302      	movs	r3, #2
 800258a:	e032      	b.n	80025f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2240      	movs	r2, #64	; 0x40
 8002590:	2101      	movs	r1, #1
 8002592:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2241      	movs	r2, #65	; 0x41
 8002598:	2124      	movs	r1, #36	; 0x24
 800259a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2101      	movs	r1, #1
 80025a8:	438a      	bics	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4911      	ldr	r1, [pc, #68]	; (80025fc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80025b8:	400a      	ands	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6819      	ldr	r1, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2101      	movs	r1, #1
 80025d8:	430a      	orrs	r2, r1
 80025da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2241      	movs	r2, #65	; 0x41
 80025e0:	2120      	movs	r1, #32
 80025e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2240      	movs	r2, #64	; 0x40
 80025e8:	2100      	movs	r1, #0
 80025ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	e000      	b.n	80025f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025f0:	2302      	movs	r3, #2
  }
}
 80025f2:	0018      	movs	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	b002      	add	sp, #8
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	ffffefff 	.word	0xffffefff

08002600 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2241      	movs	r2, #65	; 0x41
 800260e:	5c9b      	ldrb	r3, [r3, r2]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b20      	cmp	r3, #32
 8002614:	d139      	bne.n	800268a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2240      	movs	r2, #64	; 0x40
 800261a:	5c9b      	ldrb	r3, [r3, r2]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002620:	2302      	movs	r3, #2
 8002622:	e033      	b.n	800268c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2240      	movs	r2, #64	; 0x40
 8002628:	2101      	movs	r1, #1
 800262a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2241      	movs	r2, #65	; 0x41
 8002630:	2124      	movs	r1, #36	; 0x24
 8002632:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2101      	movs	r1, #1
 8002640:	438a      	bics	r2, r1
 8002642:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4a11      	ldr	r2, [pc, #68]	; (8002694 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002650:	4013      	ands	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	021b      	lsls	r3, r3, #8
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	4313      	orrs	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2101      	movs	r1, #1
 8002672:	430a      	orrs	r2, r1
 8002674:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2241      	movs	r2, #65	; 0x41
 800267a:	2120      	movs	r1, #32
 800267c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2240      	movs	r2, #64	; 0x40
 8002682:	2100      	movs	r1, #0
 8002684:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	e000      	b.n	800268c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800268a:	2302      	movs	r3, #2
  }
}
 800268c:	0018      	movs	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	b004      	add	sp, #16
 8002692:	bd80      	pop	{r7, pc}
 8002694:	fffff0ff 	.word	0xfffff0ff

08002698 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e1d0      	b.n	8002a4c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2201      	movs	r2, #1
 80026b0:	4013      	ands	r3, r2
 80026b2:	d100      	bne.n	80026b6 <HAL_RCC_OscConfig+0x1e>
 80026b4:	e069      	b.n	800278a <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026b6:	4bc8      	ldr	r3, [pc, #800]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2238      	movs	r2, #56	; 0x38
 80026bc:	4013      	ands	r3, r2
 80026be:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d105      	bne.n	80026d2 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d15d      	bne.n	800278a <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e1bc      	b.n	8002a4c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	2380      	movs	r3, #128	; 0x80
 80026d8:	025b      	lsls	r3, r3, #9
 80026da:	429a      	cmp	r2, r3
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_OscConfig+0x56>
 80026de:	4bbe      	ldr	r3, [pc, #760]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	4bbd      	ldr	r3, [pc, #756]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 80026e4:	2180      	movs	r1, #128	; 0x80
 80026e6:	0249      	lsls	r1, r1, #9
 80026e8:	430a      	orrs	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	e020      	b.n	8002730 <HAL_RCC_OscConfig+0x98>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	23a0      	movs	r3, #160	; 0xa0
 80026f4:	02db      	lsls	r3, r3, #11
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d10e      	bne.n	8002718 <HAL_RCC_OscConfig+0x80>
 80026fa:	4bb7      	ldr	r3, [pc, #732]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	4bb6      	ldr	r3, [pc, #728]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 8002700:	2180      	movs	r1, #128	; 0x80
 8002702:	02c9      	lsls	r1, r1, #11
 8002704:	430a      	orrs	r2, r1
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	4bb3      	ldr	r3, [pc, #716]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4bb2      	ldr	r3, [pc, #712]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 800270e:	2180      	movs	r1, #128	; 0x80
 8002710:	0249      	lsls	r1, r1, #9
 8002712:	430a      	orrs	r2, r1
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	e00b      	b.n	8002730 <HAL_RCC_OscConfig+0x98>
 8002718:	4baf      	ldr	r3, [pc, #700]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4bae      	ldr	r3, [pc, #696]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 800271e:	49af      	ldr	r1, [pc, #700]	; (80029dc <HAL_RCC_OscConfig+0x344>)
 8002720:	400a      	ands	r2, r1
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	4bac      	ldr	r3, [pc, #688]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4bab      	ldr	r3, [pc, #684]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 800272a:	49ad      	ldr	r1, [pc, #692]	; (80029e0 <HAL_RCC_OscConfig+0x348>)
 800272c:	400a      	ands	r2, r1
 800272e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d014      	beq.n	8002762 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7fe fcac 	bl	8001094 <HAL_GetTick>
 800273c:	0003      	movs	r3, r0
 800273e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002742:	f7fe fca7 	bl	8001094 <HAL_GetTick>
 8002746:	0002      	movs	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b64      	cmp	r3, #100	; 0x64
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e17b      	b.n	8002a4c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002754:	4ba0      	ldr	r3, [pc, #640]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	2380      	movs	r3, #128	; 0x80
 800275a:	029b      	lsls	r3, r3, #10
 800275c:	4013      	ands	r3, r2
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0xaa>
 8002760:	e013      	b.n	800278a <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002762:	f7fe fc97 	bl	8001094 <HAL_GetTick>
 8002766:	0003      	movs	r3, r0
 8002768:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800276c:	f7fe fc92 	bl	8001094 <HAL_GetTick>
 8002770:	0002      	movs	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	; 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e166      	b.n	8002a4c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800277e:	4b96      	ldr	r3, [pc, #600]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	2380      	movs	r3, #128	; 0x80
 8002784:	029b      	lsls	r3, r3, #10
 8002786:	4013      	ands	r3, r2
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2202      	movs	r2, #2
 8002790:	4013      	ands	r3, r2
 8002792:	d100      	bne.n	8002796 <HAL_RCC_OscConfig+0xfe>
 8002794:	e086      	b.n	80028a4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002796:	4b90      	ldr	r3, [pc, #576]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2238      	movs	r2, #56	; 0x38
 800279c:	4013      	ands	r3, r2
 800279e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d12f      	bne.n	8002806 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e14c      	b.n	8002a4c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b2:	4b89      	ldr	r3, [pc, #548]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	4a8b      	ldr	r2, [pc, #556]	; (80029e4 <HAL_RCC_OscConfig+0x34c>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	0019      	movs	r1, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	021a      	lsls	r2, r3, #8
 80027c2:	4b85      	ldr	r3, [pc, #532]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 80027c4:	430a      	orrs	r2, r1
 80027c6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d112      	bne.n	80027f4 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80027ce:	4b82      	ldr	r3, [pc, #520]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a85      	ldr	r2, [pc, #532]	; (80029e8 <HAL_RCC_OscConfig+0x350>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	0019      	movs	r1, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	4b7e      	ldr	r3, [pc, #504]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 80027de:	430a      	orrs	r2, r1
 80027e0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80027e2:	4b7d      	ldr	r3, [pc, #500]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	0adb      	lsrs	r3, r3, #11
 80027e8:	2207      	movs	r2, #7
 80027ea:	4013      	ands	r3, r2
 80027ec:	4a7f      	ldr	r2, [pc, #508]	; (80029ec <HAL_RCC_OscConfig+0x354>)
 80027ee:	40da      	lsrs	r2, r3
 80027f0:	4b7f      	ldr	r3, [pc, #508]	; (80029f0 <HAL_RCC_OscConfig+0x358>)
 80027f2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027f4:	4b7f      	ldr	r3, [pc, #508]	; (80029f4 <HAL_RCC_OscConfig+0x35c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	0018      	movs	r0, r3
 80027fa:	f7fe fbef 	bl	8000fdc <HAL_InitTick>
 80027fe:	1e03      	subs	r3, r0, #0
 8002800:	d050      	beq.n	80028a4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e122      	b.n	8002a4c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d030      	beq.n	8002870 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800280e:	4b72      	ldr	r3, [pc, #456]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a75      	ldr	r2, [pc, #468]	; (80029e8 <HAL_RCC_OscConfig+0x350>)
 8002814:	4013      	ands	r3, r2
 8002816:	0019      	movs	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	4b6e      	ldr	r3, [pc, #440]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 800281e:	430a      	orrs	r2, r1
 8002820:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002822:	4b6d      	ldr	r3, [pc, #436]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	4b6c      	ldr	r3, [pc, #432]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 8002828:	2180      	movs	r1, #128	; 0x80
 800282a:	0049      	lsls	r1, r1, #1
 800282c:	430a      	orrs	r2, r1
 800282e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002830:	f7fe fc30 	bl	8001094 <HAL_GetTick>
 8002834:	0003      	movs	r3, r0
 8002836:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800283a:	f7fe fc2b 	bl	8001094 <HAL_GetTick>
 800283e:	0002      	movs	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e0ff      	b.n	8002a4c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800284c:	4b62      	ldr	r3, [pc, #392]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4013      	ands	r3, r2
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002858:	4b5f      	ldr	r3, [pc, #380]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4a61      	ldr	r2, [pc, #388]	; (80029e4 <HAL_RCC_OscConfig+0x34c>)
 800285e:	4013      	ands	r3, r2
 8002860:	0019      	movs	r1, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	021a      	lsls	r2, r3, #8
 8002868:	4b5b      	ldr	r3, [pc, #364]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 800286a:	430a      	orrs	r2, r1
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	e019      	b.n	80028a4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002870:	4b59      	ldr	r3, [pc, #356]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4b58      	ldr	r3, [pc, #352]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 8002876:	4960      	ldr	r1, [pc, #384]	; (80029f8 <HAL_RCC_OscConfig+0x360>)
 8002878:	400a      	ands	r2, r1
 800287a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7fe fc0a 	bl	8001094 <HAL_GetTick>
 8002880:	0003      	movs	r3, r0
 8002882:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002886:	f7fe fc05 	bl	8001094 <HAL_GetTick>
 800288a:	0002      	movs	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e0d9      	b.n	8002a4c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002898:	4b4f      	ldr	r3, [pc, #316]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	2380      	movs	r3, #128	; 0x80
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4013      	ands	r3, r2
 80028a2:	d1f0      	bne.n	8002886 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2208      	movs	r2, #8
 80028aa:	4013      	ands	r3, r2
 80028ac:	d042      	beq.n	8002934 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80028ae:	4b4a      	ldr	r3, [pc, #296]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2238      	movs	r2, #56	; 0x38
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b18      	cmp	r3, #24
 80028b8:	d105      	bne.n	80028c6 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d138      	bne.n	8002934 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e0c2      	b.n	8002a4c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d019      	beq.n	8002902 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80028ce:	4b42      	ldr	r3, [pc, #264]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 80028d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028d2:	4b41      	ldr	r3, [pc, #260]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 80028d4:	2101      	movs	r1, #1
 80028d6:	430a      	orrs	r2, r1
 80028d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028da:	f7fe fbdb 	bl	8001094 <HAL_GetTick>
 80028de:	0003      	movs	r3, r0
 80028e0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80028e4:	f7fe fbd6 	bl	8001094 <HAL_GetTick>
 80028e8:	0002      	movs	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e0aa      	b.n	8002a4c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80028f6:	4b38      	ldr	r3, [pc, #224]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 80028f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028fa:	2202      	movs	r2, #2
 80028fc:	4013      	ands	r3, r2
 80028fe:	d0f1      	beq.n	80028e4 <HAL_RCC_OscConfig+0x24c>
 8002900:	e018      	b.n	8002934 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002902:	4b35      	ldr	r3, [pc, #212]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 8002904:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002906:	4b34      	ldr	r3, [pc, #208]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 8002908:	2101      	movs	r1, #1
 800290a:	438a      	bics	r2, r1
 800290c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290e:	f7fe fbc1 	bl	8001094 <HAL_GetTick>
 8002912:	0003      	movs	r3, r0
 8002914:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002918:	f7fe fbbc 	bl	8001094 <HAL_GetTick>
 800291c:	0002      	movs	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e090      	b.n	8002a4c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800292a:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 800292c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800292e:	2202      	movs	r2, #2
 8002930:	4013      	ands	r3, r2
 8002932:	d1f1      	bne.n	8002918 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2204      	movs	r2, #4
 800293a:	4013      	ands	r3, r2
 800293c:	d100      	bne.n	8002940 <HAL_RCC_OscConfig+0x2a8>
 800293e:	e084      	b.n	8002a4a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002940:	230f      	movs	r3, #15
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002948:	4b23      	ldr	r3, [pc, #140]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2238      	movs	r2, #56	; 0x38
 800294e:	4013      	ands	r3, r2
 8002950:	2b20      	cmp	r3, #32
 8002952:	d106      	bne.n	8002962 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d000      	beq.n	800295e <HAL_RCC_OscConfig+0x2c6>
 800295c:	e075      	b.n	8002a4a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e074      	b.n	8002a4c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d106      	bne.n	8002978 <HAL_RCC_OscConfig+0x2e0>
 800296a:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 800296c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800296e:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 8002970:	2101      	movs	r1, #1
 8002972:	430a      	orrs	r2, r1
 8002974:	65da      	str	r2, [r3, #92]	; 0x5c
 8002976:	e01c      	b.n	80029b2 <HAL_RCC_OscConfig+0x31a>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2b05      	cmp	r3, #5
 800297e:	d10c      	bne.n	800299a <HAL_RCC_OscConfig+0x302>
 8002980:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 8002982:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002984:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 8002986:	2104      	movs	r1, #4
 8002988:	430a      	orrs	r2, r1
 800298a:	65da      	str	r2, [r3, #92]	; 0x5c
 800298c:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 800298e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 8002992:	2101      	movs	r1, #1
 8002994:	430a      	orrs	r2, r1
 8002996:	65da      	str	r2, [r3, #92]	; 0x5c
 8002998:	e00b      	b.n	80029b2 <HAL_RCC_OscConfig+0x31a>
 800299a:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 800299c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800299e:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 80029a0:	2101      	movs	r1, #1
 80029a2:	438a      	bics	r2, r1
 80029a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80029a6:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 80029a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029aa:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_RCC_OscConfig+0x340>)
 80029ac:	2104      	movs	r1, #4
 80029ae:	438a      	bics	r2, r1
 80029b0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d028      	beq.n	8002a0c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ba:	f7fe fb6b 	bl	8001094 <HAL_GetTick>
 80029be:	0003      	movs	r3, r0
 80029c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80029c2:	e01d      	b.n	8002a00 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c4:	f7fe fb66 	bl	8001094 <HAL_GetTick>
 80029c8:	0002      	movs	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	4a0b      	ldr	r2, [pc, #44]	; (80029fc <HAL_RCC_OscConfig+0x364>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d915      	bls.n	8002a00 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e039      	b.n	8002a4c <HAL_RCC_OscConfig+0x3b4>
 80029d8:	40021000 	.word	0x40021000
 80029dc:	fffeffff 	.word	0xfffeffff
 80029e0:	fffbffff 	.word	0xfffbffff
 80029e4:	ffff80ff 	.word	0xffff80ff
 80029e8:	ffffc7ff 	.word	0xffffc7ff
 80029ec:	02dc6c00 	.word	0x02dc6c00
 80029f0:	20000004 	.word	0x20000004
 80029f4:	20000008 	.word	0x20000008
 80029f8:	fffffeff 	.word	0xfffffeff
 80029fc:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002a00:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <HAL_RCC_OscConfig+0x3bc>)
 8002a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a04:	2202      	movs	r2, #2
 8002a06:	4013      	ands	r3, r2
 8002a08:	d0dc      	beq.n	80029c4 <HAL_RCC_OscConfig+0x32c>
 8002a0a:	e013      	b.n	8002a34 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7fe fb42 	bl	8001094 <HAL_GetTick>
 8002a10:	0003      	movs	r3, r0
 8002a12:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002a14:	e009      	b.n	8002a2a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a16:	f7fe fb3d 	bl	8001094 <HAL_GetTick>
 8002a1a:	0002      	movs	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	4a0d      	ldr	r2, [pc, #52]	; (8002a58 <HAL_RCC_OscConfig+0x3c0>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e010      	b.n	8002a4c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002a2a:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <HAL_RCC_OscConfig+0x3bc>)
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2e:	2202      	movs	r2, #2
 8002a30:	4013      	ands	r3, r2
 8002a32:	d1f0      	bne.n	8002a16 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002a34:	230f      	movs	r3, #15
 8002a36:	18fb      	adds	r3, r7, r3
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d105      	bne.n	8002a4a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002a3e:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <HAL_RCC_OscConfig+0x3bc>)
 8002a40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a42:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <HAL_RCC_OscConfig+0x3bc>)
 8002a44:	4905      	ldr	r1, [pc, #20]	; (8002a5c <HAL_RCC_OscConfig+0x3c4>)
 8002a46:	400a      	ands	r2, r1
 8002a48:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b006      	add	sp, #24
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40021000 	.word	0x40021000
 8002a58:	00001388 	.word	0x00001388
 8002a5c:	efffffff 	.word	0xefffffff

08002a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0e9      	b.n	8002c48 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a74:	4b76      	ldr	r3, [pc, #472]	; (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2207      	movs	r2, #7
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d91e      	bls.n	8002ac0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b73      	ldr	r3, [pc, #460]	; (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2207      	movs	r2, #7
 8002a88:	4393      	bics	r3, r2
 8002a8a:	0019      	movs	r1, r3
 8002a8c:	4b70      	ldr	r3, [pc, #448]	; (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a94:	f7fe fafe 	bl	8001094 <HAL_GetTick>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a9c:	e009      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002a9e:	f7fe faf9 	bl	8001094 <HAL_GetTick>
 8002aa2:	0002      	movs	r2, r0
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	4a6a      	ldr	r2, [pc, #424]	; (8002c54 <HAL_RCC_ClockConfig+0x1f4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e0ca      	b.n	8002c48 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ab2:	4b67      	ldr	r3, [pc, #412]	; (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2207      	movs	r2, #7
 8002ab8:	4013      	ands	r3, r2
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d1ee      	bne.n	8002a9e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d017      	beq.n	8002afa <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2204      	movs	r2, #4
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d008      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ad4:	4b60      	ldr	r3, [pc, #384]	; (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	4a60      	ldr	r2, [pc, #384]	; (8002c5c <HAL_RCC_ClockConfig+0x1fc>)
 8002ada:	401a      	ands	r2, r3
 8002adc:	4b5e      	ldr	r3, [pc, #376]	; (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002ade:	21b0      	movs	r1, #176	; 0xb0
 8002ae0:	0109      	lsls	r1, r1, #4
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae6:	4b5c      	ldr	r3, [pc, #368]	; (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	4a5d      	ldr	r2, [pc, #372]	; (8002c60 <HAL_RCC_ClockConfig+0x200>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	0019      	movs	r1, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	4b58      	ldr	r3, [pc, #352]	; (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002af6:	430a      	orrs	r2, r1
 8002af8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2201      	movs	r2, #1
 8002b00:	4013      	ands	r3, r2
 8002b02:	d055      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002b04:	4b54      	ldr	r3, [pc, #336]	; (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	221c      	movs	r2, #28
 8002b0a:	4393      	bics	r3, r2
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	4b51      	ldr	r3, [pc, #324]	; (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002b14:	430a      	orrs	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d107      	bne.n	8002b30 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b20:	4b4d      	ldr	r3, [pc, #308]	; (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	029b      	lsls	r3, r3, #10
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d11f      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e08b      	b.n	8002c48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d107      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b38:	4b47      	ldr	r3, [pc, #284]	; (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	2380      	movs	r3, #128	; 0x80
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4013      	ands	r3, r2
 8002b42:	d113      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e07f      	b.n	8002c48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d106      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002b50:	4b41      	ldr	r3, [pc, #260]	; (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b54:	2202      	movs	r2, #2
 8002b56:	4013      	ands	r3, r2
 8002b58:	d108      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e074      	b.n	8002c48 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002b5e:	4b3e      	ldr	r3, [pc, #248]	; (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b62:	2202      	movs	r2, #2
 8002b64:	4013      	ands	r3, r2
 8002b66:	d101      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e06d      	b.n	8002c48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b6c:	4b3a      	ldr	r3, [pc, #232]	; (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2207      	movs	r2, #7
 8002b72:	4393      	bics	r3, r2
 8002b74:	0019      	movs	r1, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	4b37      	ldr	r3, [pc, #220]	; (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b80:	f7fe fa88 	bl	8001094 <HAL_GetTick>
 8002b84:	0003      	movs	r3, r0
 8002b86:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b88:	e009      	b.n	8002b9e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8a:	f7fe fa83 	bl	8001094 <HAL_GetTick>
 8002b8e:	0002      	movs	r2, r0
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	4a2f      	ldr	r2, [pc, #188]	; (8002c54 <HAL_RCC_ClockConfig+0x1f4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e054      	b.n	8002c48 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9e:	4b2e      	ldr	r3, [pc, #184]	; (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2238      	movs	r2, #56	; 0x38
 8002ba4:	401a      	ands	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d1ec      	bne.n	8002b8a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb0:	4b27      	ldr	r3, [pc, #156]	; (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2207      	movs	r2, #7
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d21e      	bcs.n	8002bfc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bbe:	4b24      	ldr	r3, [pc, #144]	; (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2207      	movs	r2, #7
 8002bc4:	4393      	bics	r3, r2
 8002bc6:	0019      	movs	r1, r3
 8002bc8:	4b21      	ldr	r3, [pc, #132]	; (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bd0:	f7fe fa60 	bl	8001094 <HAL_GetTick>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bd8:	e009      	b.n	8002bee <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002bda:	f7fe fa5b 	bl	8001094 <HAL_GetTick>
 8002bde:	0002      	movs	r2, r0
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	4a1b      	ldr	r2, [pc, #108]	; (8002c54 <HAL_RCC_ClockConfig+0x1f4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e02c      	b.n	8002c48 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bee:	4b18      	ldr	r3, [pc, #96]	; (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2207      	movs	r2, #7
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d1ee      	bne.n	8002bda <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2204      	movs	r2, #4
 8002c02:	4013      	ands	r3, r2
 8002c04:	d009      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c06:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	4a16      	ldr	r2, [pc, #88]	; (8002c64 <HAL_RCC_ClockConfig+0x204>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	0019      	movs	r1, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002c16:	430a      	orrs	r2, r1
 8002c18:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002c1a:	f000 f82b 	bl	8002c74 <HAL_RCC_GetSysClockFreq>
 8002c1e:	0001      	movs	r1, r0
 8002c20:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	0a1b      	lsrs	r3, r3, #8
 8002c26:	220f      	movs	r2, #15
 8002c28:	401a      	ands	r2, r3
 8002c2a:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <HAL_RCC_ClockConfig+0x208>)
 8002c2c:	0092      	lsls	r2, r2, #2
 8002c2e:	58d3      	ldr	r3, [r2, r3]
 8002c30:	221f      	movs	r2, #31
 8002c32:	4013      	ands	r3, r2
 8002c34:	000a      	movs	r2, r1
 8002c36:	40da      	lsrs	r2, r3
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <HAL_RCC_ClockConfig+0x20c>)
 8002c3a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <HAL_RCC_ClockConfig+0x210>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	0018      	movs	r0, r3
 8002c42:	f7fe f9cb 	bl	8000fdc <HAL_InitTick>
 8002c46:	0003      	movs	r3, r0
}
 8002c48:	0018      	movs	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	b004      	add	sp, #16
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40022000 	.word	0x40022000
 8002c54:	00001388 	.word	0x00001388
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	ffff84ff 	.word	0xffff84ff
 8002c60:	fffff0ff 	.word	0xfffff0ff
 8002c64:	ffff8fff 	.word	0xffff8fff
 8002c68:	08005a90 	.word	0x08005a90
 8002c6c:	20000004 	.word	0x20000004
 8002c70:	20000008 	.word	0x20000008

08002c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c7a:	4b1c      	ldr	r3, [pc, #112]	; (8002cec <HAL_RCC_GetSysClockFreq+0x78>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2238      	movs	r2, #56	; 0x38
 8002c80:	4013      	ands	r3, r2
 8002c82:	d10f      	bne.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002c84:	4b19      	ldr	r3, [pc, #100]	; (8002cec <HAL_RCC_GetSysClockFreq+0x78>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	0adb      	lsrs	r3, r3, #11
 8002c8a:	2207      	movs	r2, #7
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2201      	movs	r2, #1
 8002c90:	409a      	lsls	r2, r3
 8002c92:	0013      	movs	r3, r2
 8002c94:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002c96:	6839      	ldr	r1, [r7, #0]
 8002c98:	4815      	ldr	r0, [pc, #84]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002c9a:	f7fd fa47 	bl	800012c <__udivsi3>
 8002c9e:	0003      	movs	r3, r0
 8002ca0:	607b      	str	r3, [r7, #4]
 8002ca2:	e01e      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ca4:	4b11      	ldr	r3, [pc, #68]	; (8002cec <HAL_RCC_GetSysClockFreq+0x78>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2238      	movs	r2, #56	; 0x38
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d102      	bne.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002cb2:	607b      	str	r3, [r7, #4]
 8002cb4:	e015      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002cb6:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <HAL_RCC_GetSysClockFreq+0x78>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2238      	movs	r2, #56	; 0x38
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b20      	cmp	r3, #32
 8002cc0:	d103      	bne.n	8002cca <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002cc2:	2380      	movs	r3, #128	; 0x80
 8002cc4:	021b      	lsls	r3, r3, #8
 8002cc6:	607b      	str	r3, [r7, #4]
 8002cc8:	e00b      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002cca:	4b08      	ldr	r3, [pc, #32]	; (8002cec <HAL_RCC_GetSysClockFreq+0x78>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2238      	movs	r2, #56	; 0x38
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b18      	cmp	r3, #24
 8002cd4:	d103      	bne.n	8002cde <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002cd6:	23fa      	movs	r3, #250	; 0xfa
 8002cd8:	01db      	lsls	r3, r3, #7
 8002cda:	607b      	str	r3, [r7, #4]
 8002cdc:	e001      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8002ce2:	687b      	ldr	r3, [r7, #4]
}
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b002      	add	sp, #8
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	02dc6c00 	.word	0x02dc6c00

08002cf4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cf8:	4b02      	ldr	r3, [pc, #8]	; (8002d04 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
}
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	20000004 	.word	0x20000004

08002d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002d0c:	f7ff fff2 	bl	8002cf4 <HAL_RCC_GetHCLKFreq>
 8002d10:	0001      	movs	r1, r0
 8002d12:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	0b1b      	lsrs	r3, r3, #12
 8002d18:	2207      	movs	r2, #7
 8002d1a:	401a      	ands	r2, r3
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002d1e:	0092      	lsls	r2, r2, #2
 8002d20:	58d3      	ldr	r3, [r2, r3]
 8002d22:	221f      	movs	r2, #31
 8002d24:	4013      	ands	r3, r2
 8002d26:	40d9      	lsrs	r1, r3
 8002d28:	000b      	movs	r3, r1
}
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40021000 	.word	0x40021000
 8002d34:	08005ad0 	.word	0x08005ad0

08002d38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002d40:	2313      	movs	r3, #19
 8002d42:	18fb      	adds	r3, r7, r3
 8002d44:	2200      	movs	r2, #0
 8002d46:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d48:	2312      	movs	r3, #18
 8002d4a:	18fb      	adds	r3, r7, r3
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	2380      	movs	r3, #128	; 0x80
 8002d56:	029b      	lsls	r3, r3, #10
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d100      	bne.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002d5c:	e079      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d5e:	2011      	movs	r0, #17
 8002d60:	183b      	adds	r3, r7, r0
 8002d62:	2200      	movs	r2, #0
 8002d64:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d66:	4b64      	ldr	r3, [pc, #400]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d6a:	2380      	movs	r3, #128	; 0x80
 8002d6c:	055b      	lsls	r3, r3, #21
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d110      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d72:	4b61      	ldr	r3, [pc, #388]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d76:	4b60      	ldr	r3, [pc, #384]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d78:	2180      	movs	r1, #128	; 0x80
 8002d7a:	0549      	lsls	r1, r1, #21
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d80:	4b5d      	ldr	r3, [pc, #372]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	055b      	lsls	r3, r3, #21
 8002d88:	4013      	ands	r3, r2
 8002d8a:	60bb      	str	r3, [r7, #8]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d8e:	183b      	adds	r3, r7, r0
 8002d90:	2201      	movs	r2, #1
 8002d92:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002d94:	4b58      	ldr	r3, [pc, #352]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d98:	23c0      	movs	r3, #192	; 0xc0
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d019      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d014      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002db0:	4b51      	ldr	r3, [pc, #324]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db4:	4a51      	ldr	r2, [pc, #324]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dba:	4b4f      	ldr	r3, [pc, #316]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002dbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dbe:	4b4e      	ldr	r3, [pc, #312]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002dc0:	2180      	movs	r1, #128	; 0x80
 8002dc2:	0249      	lsls	r1, r1, #9
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dc8:	4b4b      	ldr	r3, [pc, #300]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002dca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dcc:	4b4a      	ldr	r3, [pc, #296]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002dce:	494c      	ldr	r1, [pc, #304]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002dd0:	400a      	ands	r2, r1
 8002dd2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002dd4:	4b48      	ldr	r3, [pc, #288]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	4013      	ands	r3, r2
 8002de0:	d016      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de2:	f7fe f957 	bl	8001094 <HAL_GetTick>
 8002de6:	0003      	movs	r3, r0
 8002de8:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002dea:	e00c      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dec:	f7fe f952 	bl	8001094 <HAL_GetTick>
 8002df0:	0002      	movs	r2, r0
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	4a43      	ldr	r2, [pc, #268]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d904      	bls.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8002dfc:	2313      	movs	r3, #19
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	2203      	movs	r2, #3
 8002e02:	701a      	strb	r2, [r3, #0]
          break;
 8002e04:	e004      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002e06:	4b3c      	ldr	r3, [pc, #240]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d0ed      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8002e10:	2313      	movs	r3, #19
 8002e12:	18fb      	adds	r3, r7, r3
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10a      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e1a:	4b37      	ldr	r3, [pc, #220]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1e:	4a37      	ldr	r2, [pc, #220]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e20:	4013      	ands	r3, r2
 8002e22:	0019      	movs	r1, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699a      	ldr	r2, [r3, #24]
 8002e28:	4b33      	ldr	r3, [pc, #204]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e2e:	e005      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e30:	2312      	movs	r3, #18
 8002e32:	18fb      	adds	r3, r7, r3
 8002e34:	2213      	movs	r2, #19
 8002e36:	18ba      	adds	r2, r7, r2
 8002e38:	7812      	ldrb	r2, [r2, #0]
 8002e3a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e3c:	2311      	movs	r3, #17
 8002e3e:	18fb      	adds	r3, r7, r3
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d105      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e46:	4b2c      	ldr	r3, [pc, #176]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e4a:	4b2b      	ldr	r3, [pc, #172]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e4c:	492e      	ldr	r1, [pc, #184]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4e:	400a      	ands	r2, r1
 8002e50:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2201      	movs	r2, #1
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d009      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e5c:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e60:	2203      	movs	r2, #3
 8002e62:	4393      	bics	r3, r2
 8002e64:	0019      	movs	r1, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	4b23      	ldr	r3, [pc, #140]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2240      	movs	r2, #64	; 0x40
 8002e76:	4013      	ands	r3, r2
 8002e78:	d009      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e7a:	4b1f      	ldr	r3, [pc, #124]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7e:	4a23      	ldr	r2, [pc, #140]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	0019      	movs	r1, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	4b1b      	ldr	r3, [pc, #108]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	2380      	movs	r3, #128	; 0x80
 8002e94:	01db      	lsls	r3, r3, #7
 8002e96:	4013      	ands	r3, r2
 8002e98:	d008      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e9a:	4b17      	ldr	r3, [pc, #92]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	0899      	lsrs	r1, r3, #2
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	4b14      	ldr	r3, [pc, #80]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	2380      	movs	r3, #128	; 0x80
 8002eb2:	011b      	lsls	r3, r3, #4
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d009      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002eb8:	4b0f      	ldr	r3, [pc, #60]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebc:	4a14      	ldr	r2, [pc, #80]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	0019      	movs	r1, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	da09      	bge.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002ed4:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	22e0      	movs	r2, #224	; 0xe0
 8002eda:	4393      	bics	r3, r2
 8002edc:	0019      	movs	r1, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002ee8:	2312      	movs	r3, #18
 8002eea:	18fb      	adds	r3, r7, r3
 8002eec:	781b      	ldrb	r3, [r3, #0]
}
 8002eee:	0018      	movs	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b006      	add	sp, #24
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	fffffcff 	.word	0xfffffcff
 8002f00:	fffeffff 	.word	0xfffeffff
 8002f04:	00001388 	.word	0x00001388
 8002f08:	efffffff 	.word	0xefffffff
 8002f0c:	ffffcfff 	.word	0xffffcfff
 8002f10:	ffff3fff 	.word	0xffff3fff

08002f14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e04a      	b.n	8002fbc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	223d      	movs	r2, #61	; 0x3d
 8002f2a:	5c9b      	ldrb	r3, [r3, r2]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d107      	bne.n	8002f42 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	223c      	movs	r2, #60	; 0x3c
 8002f36:	2100      	movs	r1, #0
 8002f38:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f7fd fedb 	bl	8000cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	223d      	movs	r2, #61	; 0x3d
 8002f46:	2102      	movs	r1, #2
 8002f48:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3304      	adds	r3, #4
 8002f52:	0019      	movs	r1, r3
 8002f54:	0010      	movs	r0, r2
 8002f56:	f000 fb89 	bl	800366c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2248      	movs	r2, #72	; 0x48
 8002f5e:	2101      	movs	r1, #1
 8002f60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	223e      	movs	r2, #62	; 0x3e
 8002f66:	2101      	movs	r1, #1
 8002f68:	5499      	strb	r1, [r3, r2]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	223f      	movs	r2, #63	; 0x3f
 8002f6e:	2101      	movs	r1, #1
 8002f70:	5499      	strb	r1, [r3, r2]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2240      	movs	r2, #64	; 0x40
 8002f76:	2101      	movs	r1, #1
 8002f78:	5499      	strb	r1, [r3, r2]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2241      	movs	r2, #65	; 0x41
 8002f7e:	2101      	movs	r1, #1
 8002f80:	5499      	strb	r1, [r3, r2]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2242      	movs	r2, #66	; 0x42
 8002f86:	2101      	movs	r1, #1
 8002f88:	5499      	strb	r1, [r3, r2]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2243      	movs	r2, #67	; 0x43
 8002f8e:	2101      	movs	r1, #1
 8002f90:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2244      	movs	r2, #68	; 0x44
 8002f96:	2101      	movs	r1, #1
 8002f98:	5499      	strb	r1, [r3, r2]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2245      	movs	r2, #69	; 0x45
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	5499      	strb	r1, [r3, r2]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2246      	movs	r2, #70	; 0x46
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	5499      	strb	r1, [r3, r2]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2247      	movs	r2, #71	; 0x47
 8002fae:	2101      	movs	r1, #1
 8002fb0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	223d      	movs	r2, #61	; 0x3d
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b002      	add	sp, #8
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	223d      	movs	r2, #61	; 0x3d
 8002fd0:	5c9b      	ldrb	r3, [r3, r2]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d001      	beq.n	8002fdc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e02f      	b.n	800303c <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	223d      	movs	r2, #61	; 0x3d
 8002fe0:	2102      	movs	r1, #2
 8002fe2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a16      	ldr	r2, [pc, #88]	; (8003044 <HAL_TIM_Base_Start+0x80>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d004      	beq.n	8002ff8 <HAL_TIM_Base_Start+0x34>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a15      	ldr	r2, [pc, #84]	; (8003048 <HAL_TIM_Base_Start+0x84>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d116      	bne.n	8003026 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	4a13      	ldr	r2, [pc, #76]	; (800304c <HAL_TIM_Base_Start+0x88>)
 8003000:	4013      	ands	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b06      	cmp	r3, #6
 8003008:	d016      	beq.n	8003038 <HAL_TIM_Base_Start+0x74>
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	2380      	movs	r3, #128	; 0x80
 800300e:	025b      	lsls	r3, r3, #9
 8003010:	429a      	cmp	r2, r3
 8003012:	d011      	beq.n	8003038 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2101      	movs	r1, #1
 8003020:	430a      	orrs	r2, r1
 8003022:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003024:	e008      	b.n	8003038 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2101      	movs	r1, #1
 8003032:	430a      	orrs	r2, r1
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	e000      	b.n	800303a <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003038:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	b004      	add	sp, #16
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40012c00 	.word	0x40012c00
 8003048:	40000400 	.word	0x40000400
 800304c:	00010007 	.word	0x00010007

08003050 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e04a      	b.n	80030f8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	223d      	movs	r2, #61	; 0x3d
 8003066:	5c9b      	ldrb	r3, [r3, r2]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d107      	bne.n	800307e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	223c      	movs	r2, #60	; 0x3c
 8003072:	2100      	movs	r1, #0
 8003074:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	0018      	movs	r0, r3
 800307a:	f000 f841 	bl	8003100 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	223d      	movs	r2, #61	; 0x3d
 8003082:	2102      	movs	r1, #2
 8003084:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3304      	adds	r3, #4
 800308e:	0019      	movs	r1, r3
 8003090:	0010      	movs	r0, r2
 8003092:	f000 faeb 	bl	800366c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2248      	movs	r2, #72	; 0x48
 800309a:	2101      	movs	r1, #1
 800309c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	223e      	movs	r2, #62	; 0x3e
 80030a2:	2101      	movs	r1, #1
 80030a4:	5499      	strb	r1, [r3, r2]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	223f      	movs	r2, #63	; 0x3f
 80030aa:	2101      	movs	r1, #1
 80030ac:	5499      	strb	r1, [r3, r2]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2240      	movs	r2, #64	; 0x40
 80030b2:	2101      	movs	r1, #1
 80030b4:	5499      	strb	r1, [r3, r2]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2241      	movs	r2, #65	; 0x41
 80030ba:	2101      	movs	r1, #1
 80030bc:	5499      	strb	r1, [r3, r2]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2242      	movs	r2, #66	; 0x42
 80030c2:	2101      	movs	r1, #1
 80030c4:	5499      	strb	r1, [r3, r2]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2243      	movs	r2, #67	; 0x43
 80030ca:	2101      	movs	r1, #1
 80030cc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2244      	movs	r2, #68	; 0x44
 80030d2:	2101      	movs	r1, #1
 80030d4:	5499      	strb	r1, [r3, r2]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2245      	movs	r2, #69	; 0x45
 80030da:	2101      	movs	r1, #1
 80030dc:	5499      	strb	r1, [r3, r2]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2246      	movs	r2, #70	; 0x46
 80030e2:	2101      	movs	r1, #1
 80030e4:	5499      	strb	r1, [r3, r2]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2247      	movs	r2, #71	; 0x47
 80030ea:	2101      	movs	r1, #1
 80030ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	223d      	movs	r2, #61	; 0x3d
 80030f2:	2101      	movs	r1, #1
 80030f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	0018      	movs	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b002      	add	sp, #8
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003108:	46c0      	nop			; (mov r8, r8)
 800310a:	46bd      	mov	sp, r7
 800310c:	b002      	add	sp, #8
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d108      	bne.n	8003132 <HAL_TIM_PWM_Start+0x22>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	223e      	movs	r2, #62	; 0x3e
 8003124:	5c9b      	ldrb	r3, [r3, r2]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	1e5a      	subs	r2, r3, #1
 800312c:	4193      	sbcs	r3, r2
 800312e:	b2db      	uxtb	r3, r3
 8003130:	e037      	b.n	80031a2 <HAL_TIM_PWM_Start+0x92>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b04      	cmp	r3, #4
 8003136:	d108      	bne.n	800314a <HAL_TIM_PWM_Start+0x3a>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	223f      	movs	r2, #63	; 0x3f
 800313c:	5c9b      	ldrb	r3, [r3, r2]
 800313e:	b2db      	uxtb	r3, r3
 8003140:	3b01      	subs	r3, #1
 8003142:	1e5a      	subs	r2, r3, #1
 8003144:	4193      	sbcs	r3, r2
 8003146:	b2db      	uxtb	r3, r3
 8003148:	e02b      	b.n	80031a2 <HAL_TIM_PWM_Start+0x92>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b08      	cmp	r3, #8
 800314e:	d108      	bne.n	8003162 <HAL_TIM_PWM_Start+0x52>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2240      	movs	r2, #64	; 0x40
 8003154:	5c9b      	ldrb	r3, [r3, r2]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	3b01      	subs	r3, #1
 800315a:	1e5a      	subs	r2, r3, #1
 800315c:	4193      	sbcs	r3, r2
 800315e:	b2db      	uxtb	r3, r3
 8003160:	e01f      	b.n	80031a2 <HAL_TIM_PWM_Start+0x92>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b0c      	cmp	r3, #12
 8003166:	d108      	bne.n	800317a <HAL_TIM_PWM_Start+0x6a>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2241      	movs	r2, #65	; 0x41
 800316c:	5c9b      	ldrb	r3, [r3, r2]
 800316e:	b2db      	uxtb	r3, r3
 8003170:	3b01      	subs	r3, #1
 8003172:	1e5a      	subs	r2, r3, #1
 8003174:	4193      	sbcs	r3, r2
 8003176:	b2db      	uxtb	r3, r3
 8003178:	e013      	b.n	80031a2 <HAL_TIM_PWM_Start+0x92>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b10      	cmp	r3, #16
 800317e:	d108      	bne.n	8003192 <HAL_TIM_PWM_Start+0x82>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2242      	movs	r2, #66	; 0x42
 8003184:	5c9b      	ldrb	r3, [r3, r2]
 8003186:	b2db      	uxtb	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	1e5a      	subs	r2, r3, #1
 800318c:	4193      	sbcs	r3, r2
 800318e:	b2db      	uxtb	r3, r3
 8003190:	e007      	b.n	80031a2 <HAL_TIM_PWM_Start+0x92>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2243      	movs	r2, #67	; 0x43
 8003196:	5c9b      	ldrb	r3, [r3, r2]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	3b01      	subs	r3, #1
 800319c:	1e5a      	subs	r2, r3, #1
 800319e:	4193      	sbcs	r3, r2
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e07b      	b.n	80032a2 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d104      	bne.n	80031ba <HAL_TIM_PWM_Start+0xaa>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	223e      	movs	r2, #62	; 0x3e
 80031b4:	2102      	movs	r1, #2
 80031b6:	5499      	strb	r1, [r3, r2]
 80031b8:	e023      	b.n	8003202 <HAL_TIM_PWM_Start+0xf2>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d104      	bne.n	80031ca <HAL_TIM_PWM_Start+0xba>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	223f      	movs	r2, #63	; 0x3f
 80031c4:	2102      	movs	r1, #2
 80031c6:	5499      	strb	r1, [r3, r2]
 80031c8:	e01b      	b.n	8003202 <HAL_TIM_PWM_Start+0xf2>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d104      	bne.n	80031da <HAL_TIM_PWM_Start+0xca>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2240      	movs	r2, #64	; 0x40
 80031d4:	2102      	movs	r1, #2
 80031d6:	5499      	strb	r1, [r3, r2]
 80031d8:	e013      	b.n	8003202 <HAL_TIM_PWM_Start+0xf2>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b0c      	cmp	r3, #12
 80031de:	d104      	bne.n	80031ea <HAL_TIM_PWM_Start+0xda>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2241      	movs	r2, #65	; 0x41
 80031e4:	2102      	movs	r1, #2
 80031e6:	5499      	strb	r1, [r3, r2]
 80031e8:	e00b      	b.n	8003202 <HAL_TIM_PWM_Start+0xf2>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b10      	cmp	r3, #16
 80031ee:	d104      	bne.n	80031fa <HAL_TIM_PWM_Start+0xea>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2242      	movs	r2, #66	; 0x42
 80031f4:	2102      	movs	r1, #2
 80031f6:	5499      	strb	r1, [r3, r2]
 80031f8:	e003      	b.n	8003202 <HAL_TIM_PWM_Start+0xf2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2243      	movs	r2, #67	; 0x43
 80031fe:	2102      	movs	r1, #2
 8003200:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6839      	ldr	r1, [r7, #0]
 8003208:	2201      	movs	r2, #1
 800320a:	0018      	movs	r0, r3
 800320c:	f000 fdd2 	bl	8003db4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a25      	ldr	r2, [pc, #148]	; (80032ac <HAL_TIM_PWM_Start+0x19c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d009      	beq.n	800322e <HAL_TIM_PWM_Start+0x11e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a24      	ldr	r2, [pc, #144]	; (80032b0 <HAL_TIM_PWM_Start+0x1a0>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d004      	beq.n	800322e <HAL_TIM_PWM_Start+0x11e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a22      	ldr	r2, [pc, #136]	; (80032b4 <HAL_TIM_PWM_Start+0x1a4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d101      	bne.n	8003232 <HAL_TIM_PWM_Start+0x122>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <HAL_TIM_PWM_Start+0x124>
 8003232:	2300      	movs	r3, #0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2180      	movs	r1, #128	; 0x80
 8003244:	0209      	lsls	r1, r1, #8
 8003246:	430a      	orrs	r2, r1
 8003248:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a17      	ldr	r2, [pc, #92]	; (80032ac <HAL_TIM_PWM_Start+0x19c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d004      	beq.n	800325e <HAL_TIM_PWM_Start+0x14e>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a17      	ldr	r2, [pc, #92]	; (80032b8 <HAL_TIM_PWM_Start+0x1a8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d116      	bne.n	800328c <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	4a15      	ldr	r2, [pc, #84]	; (80032bc <HAL_TIM_PWM_Start+0x1ac>)
 8003266:	4013      	ands	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2b06      	cmp	r3, #6
 800326e:	d016      	beq.n	800329e <HAL_TIM_PWM_Start+0x18e>
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	2380      	movs	r3, #128	; 0x80
 8003274:	025b      	lsls	r3, r3, #9
 8003276:	429a      	cmp	r2, r3
 8003278:	d011      	beq.n	800329e <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2101      	movs	r1, #1
 8003286:	430a      	orrs	r2, r1
 8003288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800328a:	e008      	b.n	800329e <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2101      	movs	r1, #1
 8003298:	430a      	orrs	r2, r1
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	e000      	b.n	80032a0 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800329e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	0018      	movs	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b004      	add	sp, #16
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	40012c00 	.word	0x40012c00
 80032b0:	40014400 	.word	0x40014400
 80032b4:	40014800 	.word	0x40014800
 80032b8:	40000400 	.word	0x40000400
 80032bc:	00010007 	.word	0x00010007

080032c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032cc:	2317      	movs	r3, #23
 80032ce:	18fb      	adds	r3, r7, r3
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	223c      	movs	r2, #60	; 0x3c
 80032d8:	5c9b      	ldrb	r3, [r3, r2]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80032de:	2302      	movs	r3, #2
 80032e0:	e0e5      	b.n	80034ae <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	223c      	movs	r2, #60	; 0x3c
 80032e6:	2101      	movs	r1, #1
 80032e8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b14      	cmp	r3, #20
 80032ee:	d900      	bls.n	80032f2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80032f0:	e0d1      	b.n	8003496 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	009a      	lsls	r2, r3, #2
 80032f6:	4b70      	ldr	r3, [pc, #448]	; (80034b8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80032f8:	18d3      	adds	r3, r2, r3
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	0011      	movs	r1, r2
 8003306:	0018      	movs	r0, r3
 8003308:	f000 fa1c 	bl	8003744 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2108      	movs	r1, #8
 8003318:	430a      	orrs	r2, r1
 800331a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699a      	ldr	r2, [r3, #24]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2104      	movs	r1, #4
 8003328:	438a      	bics	r2, r1
 800332a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6999      	ldr	r1, [r3, #24]
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	691a      	ldr	r2, [r3, #16]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	619a      	str	r2, [r3, #24]
      break;
 800333e:	e0af      	b.n	80034a0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	0011      	movs	r1, r2
 8003348:	0018      	movs	r0, r3
 800334a:	f000 fa7b 	bl	8003844 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699a      	ldr	r2, [r3, #24]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2180      	movs	r1, #128	; 0x80
 800335a:	0109      	lsls	r1, r1, #4
 800335c:	430a      	orrs	r2, r1
 800335e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699a      	ldr	r2, [r3, #24]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4954      	ldr	r1, [pc, #336]	; (80034bc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800336c:	400a      	ands	r2, r1
 800336e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6999      	ldr	r1, [r3, #24]
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	021a      	lsls	r2, r3, #8
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	619a      	str	r2, [r3, #24]
      break;
 8003384:	e08c      	b.n	80034a0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	0011      	movs	r1, r2
 800338e:	0018      	movs	r0, r3
 8003390:	f000 fad6 	bl	8003940 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	69da      	ldr	r2, [r3, #28]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2108      	movs	r1, #8
 80033a0:	430a      	orrs	r2, r1
 80033a2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	69da      	ldr	r2, [r3, #28]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2104      	movs	r1, #4
 80033b0:	438a      	bics	r2, r1
 80033b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	69d9      	ldr	r1, [r3, #28]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	691a      	ldr	r2, [r3, #16]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	61da      	str	r2, [r3, #28]
      break;
 80033c6:	e06b      	b.n	80034a0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	0011      	movs	r1, r2
 80033d0:	0018      	movs	r0, r3
 80033d2:	f000 fb37 	bl	8003a44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69da      	ldr	r2, [r3, #28]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2180      	movs	r1, #128	; 0x80
 80033e2:	0109      	lsls	r1, r1, #4
 80033e4:	430a      	orrs	r2, r1
 80033e6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	69da      	ldr	r2, [r3, #28]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4932      	ldr	r1, [pc, #200]	; (80034bc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80033f4:	400a      	ands	r2, r1
 80033f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69d9      	ldr	r1, [r3, #28]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	021a      	lsls	r2, r3, #8
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	61da      	str	r2, [r3, #28]
      break;
 800340c:	e048      	b.n	80034a0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	0011      	movs	r1, r2
 8003416:	0018      	movs	r0, r3
 8003418:	f000 fb78 	bl	8003b0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2108      	movs	r1, #8
 8003428:	430a      	orrs	r2, r1
 800342a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2104      	movs	r1, #4
 8003438:	438a      	bics	r2, r1
 800343a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	691a      	ldr	r2, [r3, #16]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800344e:	e027      	b.n	80034a0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	0011      	movs	r1, r2
 8003458:	0018      	movs	r0, r3
 800345a:	f000 fbb1 	bl	8003bc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2180      	movs	r1, #128	; 0x80
 800346a:	0109      	lsls	r1, r1, #4
 800346c:	430a      	orrs	r2, r1
 800346e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4910      	ldr	r1, [pc, #64]	; (80034bc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800347c:	400a      	ands	r2, r1
 800347e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	021a      	lsls	r2, r3, #8
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003494:	e004      	b.n	80034a0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003496:	2317      	movs	r3, #23
 8003498:	18fb      	adds	r3, r7, r3
 800349a:	2201      	movs	r2, #1
 800349c:	701a      	strb	r2, [r3, #0]
      break;
 800349e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	223c      	movs	r2, #60	; 0x3c
 80034a4:	2100      	movs	r1, #0
 80034a6:	5499      	strb	r1, [r3, r2]

  return status;
 80034a8:	2317      	movs	r3, #23
 80034aa:	18fb      	adds	r3, r7, r3
 80034ac:	781b      	ldrb	r3, [r3, #0]
}
 80034ae:	0018      	movs	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b006      	add	sp, #24
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	08005af0 	.word	0x08005af0
 80034bc:	fffffbff 	.word	0xfffffbff

080034c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ca:	230f      	movs	r3, #15
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	2200      	movs	r2, #0
 80034d0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	223c      	movs	r2, #60	; 0x3c
 80034d6:	5c9b      	ldrb	r3, [r3, r2]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d101      	bne.n	80034e0 <HAL_TIM_ConfigClockSource+0x20>
 80034dc:	2302      	movs	r3, #2
 80034de:	e0bc      	b.n	800365a <HAL_TIM_ConfigClockSource+0x19a>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	223c      	movs	r2, #60	; 0x3c
 80034e4:	2101      	movs	r1, #1
 80034e6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	223d      	movs	r2, #61	; 0x3d
 80034ec:	2102      	movs	r1, #2
 80034ee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4a5a      	ldr	r2, [pc, #360]	; (8003664 <HAL_TIM_ConfigClockSource+0x1a4>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4a59      	ldr	r2, [pc, #356]	; (8003668 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003504:	4013      	ands	r3, r2
 8003506:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2280      	movs	r2, #128	; 0x80
 8003516:	0192      	lsls	r2, r2, #6
 8003518:	4293      	cmp	r3, r2
 800351a:	d040      	beq.n	800359e <HAL_TIM_ConfigClockSource+0xde>
 800351c:	2280      	movs	r2, #128	; 0x80
 800351e:	0192      	lsls	r2, r2, #6
 8003520:	4293      	cmp	r3, r2
 8003522:	d900      	bls.n	8003526 <HAL_TIM_ConfigClockSource+0x66>
 8003524:	e088      	b.n	8003638 <HAL_TIM_ConfigClockSource+0x178>
 8003526:	2280      	movs	r2, #128	; 0x80
 8003528:	0152      	lsls	r2, r2, #5
 800352a:	4293      	cmp	r3, r2
 800352c:	d100      	bne.n	8003530 <HAL_TIM_ConfigClockSource+0x70>
 800352e:	e088      	b.n	8003642 <HAL_TIM_ConfigClockSource+0x182>
 8003530:	2280      	movs	r2, #128	; 0x80
 8003532:	0152      	lsls	r2, r2, #5
 8003534:	4293      	cmp	r3, r2
 8003536:	d900      	bls.n	800353a <HAL_TIM_ConfigClockSource+0x7a>
 8003538:	e07e      	b.n	8003638 <HAL_TIM_ConfigClockSource+0x178>
 800353a:	2b70      	cmp	r3, #112	; 0x70
 800353c:	d018      	beq.n	8003570 <HAL_TIM_ConfigClockSource+0xb0>
 800353e:	d900      	bls.n	8003542 <HAL_TIM_ConfigClockSource+0x82>
 8003540:	e07a      	b.n	8003638 <HAL_TIM_ConfigClockSource+0x178>
 8003542:	2b60      	cmp	r3, #96	; 0x60
 8003544:	d04f      	beq.n	80035e6 <HAL_TIM_ConfigClockSource+0x126>
 8003546:	d900      	bls.n	800354a <HAL_TIM_ConfigClockSource+0x8a>
 8003548:	e076      	b.n	8003638 <HAL_TIM_ConfigClockSource+0x178>
 800354a:	2b50      	cmp	r3, #80	; 0x50
 800354c:	d03b      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x106>
 800354e:	d900      	bls.n	8003552 <HAL_TIM_ConfigClockSource+0x92>
 8003550:	e072      	b.n	8003638 <HAL_TIM_ConfigClockSource+0x178>
 8003552:	2b40      	cmp	r3, #64	; 0x40
 8003554:	d057      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x146>
 8003556:	d900      	bls.n	800355a <HAL_TIM_ConfigClockSource+0x9a>
 8003558:	e06e      	b.n	8003638 <HAL_TIM_ConfigClockSource+0x178>
 800355a:	2b30      	cmp	r3, #48	; 0x30
 800355c:	d063      	beq.n	8003626 <HAL_TIM_ConfigClockSource+0x166>
 800355e:	d86b      	bhi.n	8003638 <HAL_TIM_ConfigClockSource+0x178>
 8003560:	2b20      	cmp	r3, #32
 8003562:	d060      	beq.n	8003626 <HAL_TIM_ConfigClockSource+0x166>
 8003564:	d868      	bhi.n	8003638 <HAL_TIM_ConfigClockSource+0x178>
 8003566:	2b00      	cmp	r3, #0
 8003568:	d05d      	beq.n	8003626 <HAL_TIM_ConfigClockSource+0x166>
 800356a:	2b10      	cmp	r3, #16
 800356c:	d05b      	beq.n	8003626 <HAL_TIM_ConfigClockSource+0x166>
 800356e:	e063      	b.n	8003638 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003580:	f000 fbf8 	bl	8003d74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2277      	movs	r2, #119	; 0x77
 8003590:	4313      	orrs	r3, r2
 8003592:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	609a      	str	r2, [r3, #8]
      break;
 800359c:	e052      	b.n	8003644 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035ae:	f000 fbe1 	bl	8003d74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2180      	movs	r1, #128	; 0x80
 80035be:	01c9      	lsls	r1, r1, #7
 80035c0:	430a      	orrs	r2, r1
 80035c2:	609a      	str	r2, [r3, #8]
      break;
 80035c4:	e03e      	b.n	8003644 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035d2:	001a      	movs	r2, r3
 80035d4:	f000 fb52 	bl	8003c7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2150      	movs	r1, #80	; 0x50
 80035de:	0018      	movs	r0, r3
 80035e0:	f000 fbac 	bl	8003d3c <TIM_ITRx_SetConfig>
      break;
 80035e4:	e02e      	b.n	8003644 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035f2:	001a      	movs	r2, r3
 80035f4:	f000 fb70 	bl	8003cd8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2160      	movs	r1, #96	; 0x60
 80035fe:	0018      	movs	r0, r3
 8003600:	f000 fb9c 	bl	8003d3c <TIM_ITRx_SetConfig>
      break;
 8003604:	e01e      	b.n	8003644 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003612:	001a      	movs	r2, r3
 8003614:	f000 fb32 	bl	8003c7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2140      	movs	r1, #64	; 0x40
 800361e:	0018      	movs	r0, r3
 8003620:	f000 fb8c 	bl	8003d3c <TIM_ITRx_SetConfig>
      break;
 8003624:	e00e      	b.n	8003644 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	0019      	movs	r1, r3
 8003630:	0010      	movs	r0, r2
 8003632:	f000 fb83 	bl	8003d3c <TIM_ITRx_SetConfig>
      break;
 8003636:	e005      	b.n	8003644 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003638:	230f      	movs	r3, #15
 800363a:	18fb      	adds	r3, r7, r3
 800363c:	2201      	movs	r2, #1
 800363e:	701a      	strb	r2, [r3, #0]
      break;
 8003640:	e000      	b.n	8003644 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003642:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	223d      	movs	r2, #61	; 0x3d
 8003648:	2101      	movs	r1, #1
 800364a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	223c      	movs	r2, #60	; 0x3c
 8003650:	2100      	movs	r1, #0
 8003652:	5499      	strb	r1, [r3, r2]

  return status;
 8003654:	230f      	movs	r3, #15
 8003656:	18fb      	adds	r3, r7, r3
 8003658:	781b      	ldrb	r3, [r3, #0]
}
 800365a:	0018      	movs	r0, r3
 800365c:	46bd      	mov	sp, r7
 800365e:	b004      	add	sp, #16
 8003660:	bd80      	pop	{r7, pc}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	ffceff88 	.word	0xffceff88
 8003668:	ffff00ff 	.word	0xffff00ff

0800366c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a2b      	ldr	r2, [pc, #172]	; (800372c <TIM_Base_SetConfig+0xc0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d003      	beq.n	800368c <TIM_Base_SetConfig+0x20>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a2a      	ldr	r2, [pc, #168]	; (8003730 <TIM_Base_SetConfig+0xc4>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d108      	bne.n	800369e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2270      	movs	r2, #112	; 0x70
 8003690:	4393      	bics	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a22      	ldr	r2, [pc, #136]	; (800372c <TIM_Base_SetConfig+0xc0>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00f      	beq.n	80036c6 <TIM_Base_SetConfig+0x5a>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a21      	ldr	r2, [pc, #132]	; (8003730 <TIM_Base_SetConfig+0xc4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00b      	beq.n	80036c6 <TIM_Base_SetConfig+0x5a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a20      	ldr	r2, [pc, #128]	; (8003734 <TIM_Base_SetConfig+0xc8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d007      	beq.n	80036c6 <TIM_Base_SetConfig+0x5a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a1f      	ldr	r2, [pc, #124]	; (8003738 <TIM_Base_SetConfig+0xcc>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d003      	beq.n	80036c6 <TIM_Base_SetConfig+0x5a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a1e      	ldr	r2, [pc, #120]	; (800373c <TIM_Base_SetConfig+0xd0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d108      	bne.n	80036d8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4a1d      	ldr	r2, [pc, #116]	; (8003740 <TIM_Base_SetConfig+0xd4>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2280      	movs	r2, #128	; 0x80
 80036dc:	4393      	bics	r3, r2
 80036de:	001a      	movs	r2, r3
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a0a      	ldr	r2, [pc, #40]	; (800372c <TIM_Base_SetConfig+0xc0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d007      	beq.n	8003716 <TIM_Base_SetConfig+0xaa>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a0b      	ldr	r2, [pc, #44]	; (8003738 <TIM_Base_SetConfig+0xcc>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d003      	beq.n	8003716 <TIM_Base_SetConfig+0xaa>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a0a      	ldr	r2, [pc, #40]	; (800373c <TIM_Base_SetConfig+0xd0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d103      	bne.n	800371e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	615a      	str	r2, [r3, #20]
}
 8003724:	46c0      	nop			; (mov r8, r8)
 8003726:	46bd      	mov	sp, r7
 8003728:	b004      	add	sp, #16
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40012c00 	.word	0x40012c00
 8003730:	40000400 	.word	0x40000400
 8003734:	40002000 	.word	0x40002000
 8003738:	40014400 	.word	0x40014400
 800373c:	40014800 	.word	0x40014800
 8003740:	fffffcff 	.word	0xfffffcff

08003744 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	2201      	movs	r2, #1
 800375a:	4393      	bics	r3, r2
 800375c:	001a      	movs	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4a2e      	ldr	r2, [pc, #184]	; (800382c <TIM_OC1_SetConfig+0xe8>)
 8003772:	4013      	ands	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2203      	movs	r2, #3
 800377a:	4393      	bics	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4313      	orrs	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2202      	movs	r2, #2
 800378c:	4393      	bics	r3, r2
 800378e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	4313      	orrs	r3, r2
 8003798:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a24      	ldr	r2, [pc, #144]	; (8003830 <TIM_OC1_SetConfig+0xec>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d007      	beq.n	80037b2 <TIM_OC1_SetConfig+0x6e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a23      	ldr	r2, [pc, #140]	; (8003834 <TIM_OC1_SetConfig+0xf0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d003      	beq.n	80037b2 <TIM_OC1_SetConfig+0x6e>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a22      	ldr	r2, [pc, #136]	; (8003838 <TIM_OC1_SetConfig+0xf4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d10c      	bne.n	80037cc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2208      	movs	r2, #8
 80037b6:	4393      	bics	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	2204      	movs	r2, #4
 80037c8:	4393      	bics	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a18      	ldr	r2, [pc, #96]	; (8003830 <TIM_OC1_SetConfig+0xec>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d007      	beq.n	80037e4 <TIM_OC1_SetConfig+0xa0>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a17      	ldr	r2, [pc, #92]	; (8003834 <TIM_OC1_SetConfig+0xf0>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d003      	beq.n	80037e4 <TIM_OC1_SetConfig+0xa0>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a16      	ldr	r2, [pc, #88]	; (8003838 <TIM_OC1_SetConfig+0xf4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d111      	bne.n	8003808 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	4a15      	ldr	r2, [pc, #84]	; (800383c <TIM_OC1_SetConfig+0xf8>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4a14      	ldr	r2, [pc, #80]	; (8003840 <TIM_OC1_SetConfig+0xfc>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	621a      	str	r2, [r3, #32]
}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	46bd      	mov	sp, r7
 8003826:	b006      	add	sp, #24
 8003828:	bd80      	pop	{r7, pc}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	fffeff8f 	.word	0xfffeff8f
 8003830:	40012c00 	.word	0x40012c00
 8003834:	40014400 	.word	0x40014400
 8003838:	40014800 	.word	0x40014800
 800383c:	fffffeff 	.word	0xfffffeff
 8003840:	fffffdff 	.word	0xfffffdff

08003844 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	2210      	movs	r2, #16
 800385a:	4393      	bics	r3, r2
 800385c:	001a      	movs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4a2c      	ldr	r2, [pc, #176]	; (8003924 <TIM_OC2_SetConfig+0xe0>)
 8003872:	4013      	ands	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4a2b      	ldr	r2, [pc, #172]	; (8003928 <TIM_OC2_SetConfig+0xe4>)
 800387a:	4013      	ands	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	021b      	lsls	r3, r3, #8
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4313      	orrs	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2220      	movs	r2, #32
 800388e:	4393      	bics	r3, r2
 8003890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	4313      	orrs	r3, r2
 800389c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a22      	ldr	r2, [pc, #136]	; (800392c <TIM_OC2_SetConfig+0xe8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d10d      	bne.n	80038c2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2280      	movs	r2, #128	; 0x80
 80038aa:	4393      	bics	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2240      	movs	r2, #64	; 0x40
 80038be:	4393      	bics	r3, r2
 80038c0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a19      	ldr	r2, [pc, #100]	; (800392c <TIM_OC2_SetConfig+0xe8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d007      	beq.n	80038da <TIM_OC2_SetConfig+0x96>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a18      	ldr	r2, [pc, #96]	; (8003930 <TIM_OC2_SetConfig+0xec>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d003      	beq.n	80038da <TIM_OC2_SetConfig+0x96>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a17      	ldr	r2, [pc, #92]	; (8003934 <TIM_OC2_SetConfig+0xf0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d113      	bne.n	8003902 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4a16      	ldr	r2, [pc, #88]	; (8003938 <TIM_OC2_SetConfig+0xf4>)
 80038de:	4013      	ands	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	4a15      	ldr	r2, [pc, #84]	; (800393c <TIM_OC2_SetConfig+0xf8>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	621a      	str	r2, [r3, #32]
}
 800391c:	46c0      	nop			; (mov r8, r8)
 800391e:	46bd      	mov	sp, r7
 8003920:	b006      	add	sp, #24
 8003922:	bd80      	pop	{r7, pc}
 8003924:	feff8fff 	.word	0xfeff8fff
 8003928:	fffffcff 	.word	0xfffffcff
 800392c:	40012c00 	.word	0x40012c00
 8003930:	40014400 	.word	0x40014400
 8003934:	40014800 	.word	0x40014800
 8003938:	fffffbff 	.word	0xfffffbff
 800393c:	fffff7ff 	.word	0xfffff7ff

08003940 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	4a31      	ldr	r2, [pc, #196]	; (8003a1c <TIM_OC3_SetConfig+0xdc>)
 8003956:	401a      	ands	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4a2d      	ldr	r2, [pc, #180]	; (8003a20 <TIM_OC3_SetConfig+0xe0>)
 800396c:	4013      	ands	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2203      	movs	r2, #3
 8003974:	4393      	bics	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	4a27      	ldr	r2, [pc, #156]	; (8003a24 <TIM_OC3_SetConfig+0xe4>)
 8003986:	4013      	ands	r3, r2
 8003988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	021b      	lsls	r3, r3, #8
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	4313      	orrs	r3, r2
 8003994:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a23      	ldr	r2, [pc, #140]	; (8003a28 <TIM_OC3_SetConfig+0xe8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d10d      	bne.n	80039ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	4a22      	ldr	r2, [pc, #136]	; (8003a2c <TIM_OC3_SetConfig+0xec>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	021b      	lsls	r3, r3, #8
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	4a1e      	ldr	r2, [pc, #120]	; (8003a30 <TIM_OC3_SetConfig+0xf0>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a1a      	ldr	r2, [pc, #104]	; (8003a28 <TIM_OC3_SetConfig+0xe8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d007      	beq.n	80039d2 <TIM_OC3_SetConfig+0x92>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a1b      	ldr	r2, [pc, #108]	; (8003a34 <TIM_OC3_SetConfig+0xf4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d003      	beq.n	80039d2 <TIM_OC3_SetConfig+0x92>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a1a      	ldr	r2, [pc, #104]	; (8003a38 <TIM_OC3_SetConfig+0xf8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d113      	bne.n	80039fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4a19      	ldr	r2, [pc, #100]	; (8003a3c <TIM_OC3_SetConfig+0xfc>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4a18      	ldr	r2, [pc, #96]	; (8003a40 <TIM_OC3_SetConfig+0x100>)
 80039de:	4013      	ands	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	621a      	str	r2, [r3, #32]
}
 8003a14:	46c0      	nop			; (mov r8, r8)
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b006      	add	sp, #24
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	fffffeff 	.word	0xfffffeff
 8003a20:	fffeff8f 	.word	0xfffeff8f
 8003a24:	fffffdff 	.word	0xfffffdff
 8003a28:	40012c00 	.word	0x40012c00
 8003a2c:	fffff7ff 	.word	0xfffff7ff
 8003a30:	fffffbff 	.word	0xfffffbff
 8003a34:	40014400 	.word	0x40014400
 8003a38:	40014800 	.word	0x40014800
 8003a3c:	ffffefff 	.word	0xffffefff
 8003a40:	ffffdfff 	.word	0xffffdfff

08003a44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	4a24      	ldr	r2, [pc, #144]	; (8003aec <TIM_OC4_SetConfig+0xa8>)
 8003a5a:	401a      	ands	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4a20      	ldr	r2, [pc, #128]	; (8003af0 <TIM_OC4_SetConfig+0xac>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4a1f      	ldr	r2, [pc, #124]	; (8003af4 <TIM_OC4_SetConfig+0xb0>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4a1b      	ldr	r2, [pc, #108]	; (8003af8 <TIM_OC4_SetConfig+0xb4>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	031b      	lsls	r3, r3, #12
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a17      	ldr	r2, [pc, #92]	; (8003afc <TIM_OC4_SetConfig+0xb8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d007      	beq.n	8003ab4 <TIM_OC4_SetConfig+0x70>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a16      	ldr	r2, [pc, #88]	; (8003b00 <TIM_OC4_SetConfig+0xbc>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d003      	beq.n	8003ab4 <TIM_OC4_SetConfig+0x70>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a15      	ldr	r2, [pc, #84]	; (8003b04 <TIM_OC4_SetConfig+0xc0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d109      	bne.n	8003ac8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	4a14      	ldr	r2, [pc, #80]	; (8003b08 <TIM_OC4_SetConfig+0xc4>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	019b      	lsls	r3, r3, #6
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	621a      	str	r2, [r3, #32]
}
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	b006      	add	sp, #24
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	ffffefff 	.word	0xffffefff
 8003af0:	feff8fff 	.word	0xfeff8fff
 8003af4:	fffffcff 	.word	0xfffffcff
 8003af8:	ffffdfff 	.word	0xffffdfff
 8003afc:	40012c00 	.word	0x40012c00
 8003b00:	40014400 	.word	0x40014400
 8003b04:	40014800 	.word	0x40014800
 8003b08:	ffffbfff 	.word	0xffffbfff

08003b0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	4a21      	ldr	r2, [pc, #132]	; (8003ba8 <TIM_OC5_SetConfig+0x9c>)
 8003b22:	401a      	ands	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4a1d      	ldr	r2, [pc, #116]	; (8003bac <TIM_OC5_SetConfig+0xa0>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4a19      	ldr	r2, [pc, #100]	; (8003bb0 <TIM_OC5_SetConfig+0xa4>)
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	041b      	lsls	r3, r3, #16
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a15      	ldr	r2, [pc, #84]	; (8003bb4 <TIM_OC5_SetConfig+0xa8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d007      	beq.n	8003b72 <TIM_OC5_SetConfig+0x66>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a14      	ldr	r2, [pc, #80]	; (8003bb8 <TIM_OC5_SetConfig+0xac>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d003      	beq.n	8003b72 <TIM_OC5_SetConfig+0x66>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a13      	ldr	r2, [pc, #76]	; (8003bbc <TIM_OC5_SetConfig+0xb0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d109      	bne.n	8003b86 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	4a0c      	ldr	r2, [pc, #48]	; (8003ba8 <TIM_OC5_SetConfig+0x9c>)
 8003b76:	4013      	ands	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	021b      	lsls	r3, r3, #8
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	621a      	str	r2, [r3, #32]
}
 8003ba0:	46c0      	nop			; (mov r8, r8)
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	b006      	add	sp, #24
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	fffeffff 	.word	0xfffeffff
 8003bac:	fffeff8f 	.word	0xfffeff8f
 8003bb0:	fffdffff 	.word	0xfffdffff
 8003bb4:	40012c00 	.word	0x40012c00
 8003bb8:	40014400 	.word	0x40014400
 8003bbc:	40014800 	.word	0x40014800

08003bc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	4a22      	ldr	r2, [pc, #136]	; (8003c60 <TIM_OC6_SetConfig+0xa0>)
 8003bd6:	401a      	ands	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4a1e      	ldr	r2, [pc, #120]	; (8003c64 <TIM_OC6_SetConfig+0xa4>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	4a1a      	ldr	r2, [pc, #104]	; (8003c68 <TIM_OC6_SetConfig+0xa8>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	051b      	lsls	r3, r3, #20
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a16      	ldr	r2, [pc, #88]	; (8003c6c <TIM_OC6_SetConfig+0xac>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d007      	beq.n	8003c28 <TIM_OC6_SetConfig+0x68>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a15      	ldr	r2, [pc, #84]	; (8003c70 <TIM_OC6_SetConfig+0xb0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d003      	beq.n	8003c28 <TIM_OC6_SetConfig+0x68>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a14      	ldr	r2, [pc, #80]	; (8003c74 <TIM_OC6_SetConfig+0xb4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d109      	bne.n	8003c3c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	4a13      	ldr	r2, [pc, #76]	; (8003c78 <TIM_OC6_SetConfig+0xb8>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	029b      	lsls	r3, r3, #10
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	621a      	str	r2, [r3, #32]
}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b006      	add	sp, #24
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	ffefffff 	.word	0xffefffff
 8003c64:	feff8fff 	.word	0xfeff8fff
 8003c68:	ffdfffff 	.word	0xffdfffff
 8003c6c:	40012c00 	.word	0x40012c00
 8003c70:	40014400 	.word	0x40014400
 8003c74:	40014800 	.word	0x40014800
 8003c78:	fffbffff 	.word	0xfffbffff

08003c7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	2201      	movs	r2, #1
 8003c94:	4393      	bics	r3, r2
 8003c96:	001a      	movs	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	22f0      	movs	r2, #240	; 0xf0
 8003ca6:	4393      	bics	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	220a      	movs	r2, #10
 8003cb8:	4393      	bics	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	621a      	str	r2, [r3, #32]
}
 8003cd0:	46c0      	nop			; (mov r8, r8)
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b006      	add	sp, #24
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	2210      	movs	r2, #16
 8003cf0:	4393      	bics	r3, r2
 8003cf2:	001a      	movs	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4a0d      	ldr	r2, [pc, #52]	; (8003d38 <TIM_TI2_ConfigInputStage+0x60>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	031b      	lsls	r3, r3, #12
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	22a0      	movs	r2, #160	; 0xa0
 8003d14:	4393      	bics	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	621a      	str	r2, [r3, #32]
}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	46bd      	mov	sp, r7
 8003d32:	b006      	add	sp, #24
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	ffff0fff 	.word	0xffff0fff

08003d3c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4a08      	ldr	r2, [pc, #32]	; (8003d70 <TIM_ITRx_SetConfig+0x34>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	2207      	movs	r2, #7
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	609a      	str	r2, [r3, #8]
}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b004      	add	sp, #16
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	ffcfff8f 	.word	0xffcfff8f

08003d74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	4a09      	ldr	r2, [pc, #36]	; (8003db0 <TIM_ETR_SetConfig+0x3c>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	021a      	lsls	r2, r3, #8
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	431a      	orrs	r2, r3
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	609a      	str	r2, [r3, #8]
}
 8003da8:	46c0      	nop			; (mov r8, r8)
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b006      	add	sp, #24
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	ffff00ff 	.word	0xffff00ff

08003db4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	221f      	movs	r2, #31
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	409a      	lsls	r2, r3
 8003dca:	0013      	movs	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	43d2      	mvns	r2, r2
 8003dd6:	401a      	ands	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6a1a      	ldr	r2, [r3, #32]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	211f      	movs	r1, #31
 8003de4:	400b      	ands	r3, r1
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4099      	lsls	r1, r3
 8003dea:	000b      	movs	r3, r1
 8003dec:	431a      	orrs	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	621a      	str	r2, [r3, #32]
}
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b006      	add	sp, #24
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	223c      	movs	r2, #60	; 0x3c
 8003e0a:	5c9b      	ldrb	r3, [r3, r2]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e04a      	b.n	8003eaa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	223c      	movs	r2, #60	; 0x3c
 8003e18:	2101      	movs	r1, #1
 8003e1a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	223d      	movs	r2, #61	; 0x3d
 8003e20:	2102      	movs	r1, #2
 8003e22:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a1e      	ldr	r2, [pc, #120]	; (8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d108      	bne.n	8003e50 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4a1d      	ldr	r2, [pc, #116]	; (8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2270      	movs	r2, #112	; 0x70
 8003e54:	4393      	bics	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a11      	ldr	r2, [pc, #68]	; (8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d004      	beq.n	8003e7e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a10      	ldr	r2, [pc, #64]	; (8003ebc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d10c      	bne.n	8003e98 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2280      	movs	r2, #128	; 0x80
 8003e82:	4393      	bics	r3, r2
 8003e84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	223d      	movs	r2, #61	; 0x3d
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	223c      	movs	r2, #60	; 0x3c
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	0018      	movs	r0, r3
 8003eac:	46bd      	mov	sp, r7
 8003eae:	b004      	add	sp, #16
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	40012c00 	.word	0x40012c00
 8003eb8:	ff0fffff 	.word	0xff0fffff
 8003ebc:	40000400 	.word	0x40000400

08003ec0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e046      	b.n	8003f60 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2288      	movs	r2, #136	; 0x88
 8003ed6:	589b      	ldr	r3, [r3, r2]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d107      	bne.n	8003eec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2284      	movs	r2, #132	; 0x84
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f7fc ff76 	bl	8000dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2288      	movs	r2, #136	; 0x88
 8003ef0:	2124      	movs	r1, #36	; 0x24
 8003ef2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2101      	movs	r1, #1
 8003f00:	438a      	bics	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f000 fe76 	bl	8004c00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	0018      	movs	r0, r3
 8003f18:	f000 fcf4 	bl	8004904 <UART_SetConfig>
 8003f1c:	0003      	movs	r3, r0
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d101      	bne.n	8003f26 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e01c      	b.n	8003f60 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	490d      	ldr	r1, [pc, #52]	; (8003f68 <HAL_UART_Init+0xa8>)
 8003f32:	400a      	ands	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	212a      	movs	r1, #42	; 0x2a
 8003f42:	438a      	bics	r2, r1
 8003f44:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2101      	movs	r1, #1
 8003f52:	430a      	orrs	r2, r1
 8003f54:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f000 ff05 	bl	8004d68 <UART_CheckIdleState>
 8003f5e:	0003      	movs	r3, r0
}
 8003f60:	0018      	movs	r0, r3
 8003f62:	46bd      	mov	sp, r7
 8003f64:	b002      	add	sp, #8
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	ffffb7ff 	.word	0xffffb7ff

08003f6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08a      	sub	sp, #40	; 0x28
 8003f70:	af02      	add	r7, sp, #8
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	603b      	str	r3, [r7, #0]
 8003f78:	1dbb      	adds	r3, r7, #6
 8003f7a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2288      	movs	r2, #136	; 0x88
 8003f80:	589b      	ldr	r3, [r3, r2]
 8003f82:	2b20      	cmp	r3, #32
 8003f84:	d000      	beq.n	8003f88 <HAL_UART_Transmit+0x1c>
 8003f86:	e090      	b.n	80040aa <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_UART_Transmit+0x2a>
 8003f8e:	1dbb      	adds	r3, r7, #6
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e088      	b.n	80040ac <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	2380      	movs	r3, #128	; 0x80
 8003fa0:	015b      	lsls	r3, r3, #5
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d109      	bne.n	8003fba <HAL_UART_Transmit+0x4e>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d105      	bne.n	8003fba <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	d001      	beq.n	8003fba <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e078      	b.n	80040ac <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2290      	movs	r2, #144	; 0x90
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2288      	movs	r2, #136	; 0x88
 8003fc6:	2121      	movs	r1, #33	; 0x21
 8003fc8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fca:	f7fd f863 	bl	8001094 <HAL_GetTick>
 8003fce:	0003      	movs	r3, r0
 8003fd0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1dba      	adds	r2, r7, #6
 8003fd6:	2154      	movs	r1, #84	; 0x54
 8003fd8:	8812      	ldrh	r2, [r2, #0]
 8003fda:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	1dba      	adds	r2, r7, #6
 8003fe0:	2156      	movs	r1, #86	; 0x56
 8003fe2:	8812      	ldrh	r2, [r2, #0]
 8003fe4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	2380      	movs	r3, #128	; 0x80
 8003fec:	015b      	lsls	r3, r3, #5
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d108      	bne.n	8004004 <HAL_UART_Transmit+0x98>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d104      	bne.n	8004004 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	61bb      	str	r3, [r7, #24]
 8004002:	e003      	b.n	800400c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004008:	2300      	movs	r3, #0
 800400a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800400c:	e030      	b.n	8004070 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	0013      	movs	r3, r2
 8004018:	2200      	movs	r2, #0
 800401a:	2180      	movs	r1, #128	; 0x80
 800401c:	f000 ff4e 	bl	8004ebc <UART_WaitOnFlagUntilTimeout>
 8004020:	1e03      	subs	r3, r0, #0
 8004022:	d005      	beq.n	8004030 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2288      	movs	r2, #136	; 0x88
 8004028:	2120      	movs	r1, #32
 800402a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e03d      	b.n	80040ac <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10b      	bne.n	800404e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	001a      	movs	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	05d2      	lsls	r2, r2, #23
 8004042:	0dd2      	lsrs	r2, r2, #23
 8004044:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	3302      	adds	r3, #2
 800404a:	61bb      	str	r3, [r7, #24]
 800404c:	e007      	b.n	800405e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	781a      	ldrb	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	3301      	adds	r3, #1
 800405c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2256      	movs	r2, #86	; 0x56
 8004062:	5a9b      	ldrh	r3, [r3, r2]
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	b299      	uxth	r1, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2256      	movs	r2, #86	; 0x56
 800406e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2256      	movs	r2, #86	; 0x56
 8004074:	5a9b      	ldrh	r3, [r3, r2]
 8004076:	b29b      	uxth	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1c8      	bne.n	800400e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	0013      	movs	r3, r2
 8004086:	2200      	movs	r2, #0
 8004088:	2140      	movs	r1, #64	; 0x40
 800408a:	f000 ff17 	bl	8004ebc <UART_WaitOnFlagUntilTimeout>
 800408e:	1e03      	subs	r3, r0, #0
 8004090:	d005      	beq.n	800409e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2288      	movs	r2, #136	; 0x88
 8004096:	2120      	movs	r1, #32
 8004098:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e006      	b.n	80040ac <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2288      	movs	r2, #136	; 0x88
 80040a2:	2120      	movs	r1, #32
 80040a4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	e000      	b.n	80040ac <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80040aa:	2302      	movs	r3, #2
  }
}
 80040ac:	0018      	movs	r0, r3
 80040ae:	46bd      	mov	sp, r7
 80040b0:	b008      	add	sp, #32
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08a      	sub	sp, #40	; 0x28
 80040b8:	af02      	add	r7, sp, #8
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	1dbb      	adds	r3, r7, #6
 80040c2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	228c      	movs	r2, #140	; 0x8c
 80040c8:	589b      	ldr	r3, [r3, r2]
 80040ca:	2b20      	cmp	r3, #32
 80040cc:	d000      	beq.n	80040d0 <HAL_UART_Receive+0x1c>
 80040ce:	e0d0      	b.n	8004272 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_UART_Receive+0x2a>
 80040d6:	1dbb      	adds	r3, r7, #6
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e0c8      	b.n	8004274 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	2380      	movs	r3, #128	; 0x80
 80040e8:	015b      	lsls	r3, r3, #5
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d109      	bne.n	8004102 <HAL_UART_Receive+0x4e>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d105      	bne.n	8004102 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2201      	movs	r2, #1
 80040fa:	4013      	ands	r3, r2
 80040fc:	d001      	beq.n	8004102 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e0b8      	b.n	8004274 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2290      	movs	r2, #144	; 0x90
 8004106:	2100      	movs	r1, #0
 8004108:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	228c      	movs	r2, #140	; 0x8c
 800410e:	2122      	movs	r1, #34	; 0x22
 8004110:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004118:	f7fc ffbc 	bl	8001094 <HAL_GetTick>
 800411c:	0003      	movs	r3, r0
 800411e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	1dba      	adds	r2, r7, #6
 8004124:	215c      	movs	r1, #92	; 0x5c
 8004126:	8812      	ldrh	r2, [r2, #0]
 8004128:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1dba      	adds	r2, r7, #6
 800412e:	215e      	movs	r1, #94	; 0x5e
 8004130:	8812      	ldrh	r2, [r2, #0]
 8004132:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	2380      	movs	r3, #128	; 0x80
 800413a:	015b      	lsls	r3, r3, #5
 800413c:	429a      	cmp	r2, r3
 800413e:	d10d      	bne.n	800415c <HAL_UART_Receive+0xa8>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d104      	bne.n	8004152 <HAL_UART_Receive+0x9e>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2260      	movs	r2, #96	; 0x60
 800414c:	494b      	ldr	r1, [pc, #300]	; (800427c <HAL_UART_Receive+0x1c8>)
 800414e:	5299      	strh	r1, [r3, r2]
 8004150:	e02e      	b.n	80041b0 <HAL_UART_Receive+0xfc>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2260      	movs	r2, #96	; 0x60
 8004156:	21ff      	movs	r1, #255	; 0xff
 8004158:	5299      	strh	r1, [r3, r2]
 800415a:	e029      	b.n	80041b0 <HAL_UART_Receive+0xfc>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10d      	bne.n	8004180 <HAL_UART_Receive+0xcc>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d104      	bne.n	8004176 <HAL_UART_Receive+0xc2>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2260      	movs	r2, #96	; 0x60
 8004170:	21ff      	movs	r1, #255	; 0xff
 8004172:	5299      	strh	r1, [r3, r2]
 8004174:	e01c      	b.n	80041b0 <HAL_UART_Receive+0xfc>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2260      	movs	r2, #96	; 0x60
 800417a:	217f      	movs	r1, #127	; 0x7f
 800417c:	5299      	strh	r1, [r3, r2]
 800417e:	e017      	b.n	80041b0 <HAL_UART_Receive+0xfc>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	2380      	movs	r3, #128	; 0x80
 8004186:	055b      	lsls	r3, r3, #21
 8004188:	429a      	cmp	r2, r3
 800418a:	d10d      	bne.n	80041a8 <HAL_UART_Receive+0xf4>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d104      	bne.n	800419e <HAL_UART_Receive+0xea>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2260      	movs	r2, #96	; 0x60
 8004198:	217f      	movs	r1, #127	; 0x7f
 800419a:	5299      	strh	r1, [r3, r2]
 800419c:	e008      	b.n	80041b0 <HAL_UART_Receive+0xfc>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2260      	movs	r2, #96	; 0x60
 80041a2:	213f      	movs	r1, #63	; 0x3f
 80041a4:	5299      	strh	r1, [r3, r2]
 80041a6:	e003      	b.n	80041b0 <HAL_UART_Receive+0xfc>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2260      	movs	r2, #96	; 0x60
 80041ac:	2100      	movs	r1, #0
 80041ae:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80041b0:	2312      	movs	r3, #18
 80041b2:	18fb      	adds	r3, r7, r3
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	2160      	movs	r1, #96	; 0x60
 80041b8:	5a52      	ldrh	r2, [r2, r1]
 80041ba:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	2380      	movs	r3, #128	; 0x80
 80041c2:	015b      	lsls	r3, r3, #5
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d108      	bne.n	80041da <HAL_UART_Receive+0x126>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d104      	bne.n	80041da <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80041d0:	2300      	movs	r3, #0
 80041d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	61bb      	str	r3, [r7, #24]
 80041d8:	e003      	b.n	80041e2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041de:	2300      	movs	r3, #0
 80041e0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80041e2:	e03a      	b.n	800425a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	0013      	movs	r3, r2
 80041ee:	2200      	movs	r2, #0
 80041f0:	2120      	movs	r1, #32
 80041f2:	f000 fe63 	bl	8004ebc <UART_WaitOnFlagUntilTimeout>
 80041f6:	1e03      	subs	r3, r0, #0
 80041f8:	d005      	beq.n	8004206 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	228c      	movs	r2, #140	; 0x8c
 80041fe:	2120      	movs	r1, #32
 8004200:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e036      	b.n	8004274 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10e      	bne.n	800422a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	b29b      	uxth	r3, r3
 8004214:	2212      	movs	r2, #18
 8004216:	18ba      	adds	r2, r7, r2
 8004218:	8812      	ldrh	r2, [r2, #0]
 800421a:	4013      	ands	r3, r2
 800421c:	b29a      	uxth	r2, r3
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	3302      	adds	r3, #2
 8004226:	61bb      	str	r3, [r7, #24]
 8004228:	e00e      	b.n	8004248 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2212      	movs	r2, #18
 8004234:	18ba      	adds	r2, r7, r2
 8004236:	8812      	ldrh	r2, [r2, #0]
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	4013      	ands	r3, r2
 800423c:	b2da      	uxtb	r2, r3
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	3301      	adds	r3, #1
 8004246:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	225e      	movs	r2, #94	; 0x5e
 800424c:	5a9b      	ldrh	r3, [r3, r2]
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b299      	uxth	r1, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	225e      	movs	r2, #94	; 0x5e
 8004258:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	225e      	movs	r2, #94	; 0x5e
 800425e:	5a9b      	ldrh	r3, [r3, r2]
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1be      	bne.n	80041e4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	228c      	movs	r2, #140	; 0x8c
 800426a:	2120      	movs	r1, #32
 800426c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800426e:	2300      	movs	r3, #0
 8004270:	e000      	b.n	8004274 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8004272:	2302      	movs	r3, #2
  }
}
 8004274:	0018      	movs	r0, r3
 8004276:	46bd      	mov	sp, r7
 8004278:	b008      	add	sp, #32
 800427a:	bd80      	pop	{r7, pc}
 800427c:	000001ff 	.word	0x000001ff

08004280 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004280:	b5b0      	push	{r4, r5, r7, lr}
 8004282:	b0aa      	sub	sp, #168	; 0xa8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	22a4      	movs	r2, #164	; 0xa4
 8004290:	18b9      	adds	r1, r7, r2
 8004292:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	20a0      	movs	r0, #160	; 0xa0
 800429c:	1839      	adds	r1, r7, r0
 800429e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	249c      	movs	r4, #156	; 0x9c
 80042a8:	1939      	adds	r1, r7, r4
 80042aa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80042ac:	0011      	movs	r1, r2
 80042ae:	18bb      	adds	r3, r7, r2
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4aa2      	ldr	r2, [pc, #648]	; (800453c <HAL_UART_IRQHandler+0x2bc>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	2298      	movs	r2, #152	; 0x98
 80042b8:	18bd      	adds	r5, r7, r2
 80042ba:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80042bc:	18bb      	adds	r3, r7, r2
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d11a      	bne.n	80042fa <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80042c4:	187b      	adds	r3, r7, r1
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2220      	movs	r2, #32
 80042ca:	4013      	ands	r3, r2
 80042cc:	d015      	beq.n	80042fa <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80042ce:	183b      	adds	r3, r7, r0
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2220      	movs	r2, #32
 80042d4:	4013      	ands	r3, r2
 80042d6:	d105      	bne.n	80042e4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80042d8:	193b      	adds	r3, r7, r4
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	2380      	movs	r3, #128	; 0x80
 80042de:	055b      	lsls	r3, r3, #21
 80042e0:	4013      	ands	r3, r2
 80042e2:	d00a      	beq.n	80042fa <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d100      	bne.n	80042ee <HAL_UART_IRQHandler+0x6e>
 80042ec:	e2dc      	b.n	80048a8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	0010      	movs	r0, r2
 80042f6:	4798      	blx	r3
      }
      return;
 80042f8:	e2d6      	b.n	80048a8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80042fa:	2398      	movs	r3, #152	; 0x98
 80042fc:	18fb      	adds	r3, r7, r3
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d100      	bne.n	8004306 <HAL_UART_IRQHandler+0x86>
 8004304:	e122      	b.n	800454c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004306:	239c      	movs	r3, #156	; 0x9c
 8004308:	18fb      	adds	r3, r7, r3
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a8c      	ldr	r2, [pc, #560]	; (8004540 <HAL_UART_IRQHandler+0x2c0>)
 800430e:	4013      	ands	r3, r2
 8004310:	d106      	bne.n	8004320 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004312:	23a0      	movs	r3, #160	; 0xa0
 8004314:	18fb      	adds	r3, r7, r3
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a8a      	ldr	r2, [pc, #552]	; (8004544 <HAL_UART_IRQHandler+0x2c4>)
 800431a:	4013      	ands	r3, r2
 800431c:	d100      	bne.n	8004320 <HAL_UART_IRQHandler+0xa0>
 800431e:	e115      	b.n	800454c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004320:	23a4      	movs	r3, #164	; 0xa4
 8004322:	18fb      	adds	r3, r7, r3
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2201      	movs	r2, #1
 8004328:	4013      	ands	r3, r2
 800432a:	d012      	beq.n	8004352 <HAL_UART_IRQHandler+0xd2>
 800432c:	23a0      	movs	r3, #160	; 0xa0
 800432e:	18fb      	adds	r3, r7, r3
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	2380      	movs	r3, #128	; 0x80
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	4013      	ands	r3, r2
 8004338:	d00b      	beq.n	8004352 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2201      	movs	r2, #1
 8004340:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2290      	movs	r2, #144	; 0x90
 8004346:	589b      	ldr	r3, [r3, r2]
 8004348:	2201      	movs	r2, #1
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2190      	movs	r1, #144	; 0x90
 8004350:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004352:	23a4      	movs	r3, #164	; 0xa4
 8004354:	18fb      	adds	r3, r7, r3
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2202      	movs	r2, #2
 800435a:	4013      	ands	r3, r2
 800435c:	d011      	beq.n	8004382 <HAL_UART_IRQHandler+0x102>
 800435e:	239c      	movs	r3, #156	; 0x9c
 8004360:	18fb      	adds	r3, r7, r3
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2201      	movs	r2, #1
 8004366:	4013      	ands	r3, r2
 8004368:	d00b      	beq.n	8004382 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2202      	movs	r2, #2
 8004370:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2290      	movs	r2, #144	; 0x90
 8004376:	589b      	ldr	r3, [r3, r2]
 8004378:	2204      	movs	r2, #4
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2190      	movs	r1, #144	; 0x90
 8004380:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004382:	23a4      	movs	r3, #164	; 0xa4
 8004384:	18fb      	adds	r3, r7, r3
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2204      	movs	r2, #4
 800438a:	4013      	ands	r3, r2
 800438c:	d011      	beq.n	80043b2 <HAL_UART_IRQHandler+0x132>
 800438e:	239c      	movs	r3, #156	; 0x9c
 8004390:	18fb      	adds	r3, r7, r3
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2201      	movs	r2, #1
 8004396:	4013      	ands	r3, r2
 8004398:	d00b      	beq.n	80043b2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2204      	movs	r2, #4
 80043a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2290      	movs	r2, #144	; 0x90
 80043a6:	589b      	ldr	r3, [r3, r2]
 80043a8:	2202      	movs	r2, #2
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2190      	movs	r1, #144	; 0x90
 80043b0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043b2:	23a4      	movs	r3, #164	; 0xa4
 80043b4:	18fb      	adds	r3, r7, r3
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2208      	movs	r2, #8
 80043ba:	4013      	ands	r3, r2
 80043bc:	d017      	beq.n	80043ee <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80043be:	23a0      	movs	r3, #160	; 0xa0
 80043c0:	18fb      	adds	r3, r7, r3
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2220      	movs	r2, #32
 80043c6:	4013      	ands	r3, r2
 80043c8:	d105      	bne.n	80043d6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80043ca:	239c      	movs	r3, #156	; 0x9c
 80043cc:	18fb      	adds	r3, r7, r3
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a5b      	ldr	r2, [pc, #364]	; (8004540 <HAL_UART_IRQHandler+0x2c0>)
 80043d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80043d4:	d00b      	beq.n	80043ee <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2208      	movs	r2, #8
 80043dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2290      	movs	r2, #144	; 0x90
 80043e2:	589b      	ldr	r3, [r3, r2]
 80043e4:	2208      	movs	r2, #8
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2190      	movs	r1, #144	; 0x90
 80043ec:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80043ee:	23a4      	movs	r3, #164	; 0xa4
 80043f0:	18fb      	adds	r3, r7, r3
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	2380      	movs	r3, #128	; 0x80
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	4013      	ands	r3, r2
 80043fa:	d013      	beq.n	8004424 <HAL_UART_IRQHandler+0x1a4>
 80043fc:	23a0      	movs	r3, #160	; 0xa0
 80043fe:	18fb      	adds	r3, r7, r3
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	2380      	movs	r3, #128	; 0x80
 8004404:	04db      	lsls	r3, r3, #19
 8004406:	4013      	ands	r3, r2
 8004408:	d00c      	beq.n	8004424 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2280      	movs	r2, #128	; 0x80
 8004410:	0112      	lsls	r2, r2, #4
 8004412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2290      	movs	r2, #144	; 0x90
 8004418:	589b      	ldr	r3, [r3, r2]
 800441a:	2220      	movs	r2, #32
 800441c:	431a      	orrs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2190      	movs	r1, #144	; 0x90
 8004422:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2290      	movs	r2, #144	; 0x90
 8004428:	589b      	ldr	r3, [r3, r2]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d100      	bne.n	8004430 <HAL_UART_IRQHandler+0x1b0>
 800442e:	e23d      	b.n	80048ac <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004430:	23a4      	movs	r3, #164	; 0xa4
 8004432:	18fb      	adds	r3, r7, r3
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2220      	movs	r2, #32
 8004438:	4013      	ands	r3, r2
 800443a:	d015      	beq.n	8004468 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800443c:	23a0      	movs	r3, #160	; 0xa0
 800443e:	18fb      	adds	r3, r7, r3
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2220      	movs	r2, #32
 8004444:	4013      	ands	r3, r2
 8004446:	d106      	bne.n	8004456 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004448:	239c      	movs	r3, #156	; 0x9c
 800444a:	18fb      	adds	r3, r7, r3
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	2380      	movs	r3, #128	; 0x80
 8004450:	055b      	lsls	r3, r3, #21
 8004452:	4013      	ands	r3, r2
 8004454:	d008      	beq.n	8004468 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445a:	2b00      	cmp	r3, #0
 800445c:	d004      	beq.n	8004468 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	0010      	movs	r0, r2
 8004466:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2290      	movs	r2, #144	; 0x90
 800446c:	589b      	ldr	r3, [r3, r2]
 800446e:	2194      	movs	r1, #148	; 0x94
 8004470:	187a      	adds	r2, r7, r1
 8004472:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2240      	movs	r2, #64	; 0x40
 800447c:	4013      	ands	r3, r2
 800447e:	2b40      	cmp	r3, #64	; 0x40
 8004480:	d004      	beq.n	800448c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004482:	187b      	adds	r3, r7, r1
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2228      	movs	r2, #40	; 0x28
 8004488:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800448a:	d04c      	beq.n	8004526 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	0018      	movs	r0, r3
 8004490:	f000 fd7e 	bl	8004f90 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	2240      	movs	r2, #64	; 0x40
 800449c:	4013      	ands	r3, r2
 800449e:	2b40      	cmp	r3, #64	; 0x40
 80044a0:	d13c      	bne.n	800451c <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80044a2:	f3ef 8310 	mrs	r3, PRIMASK
 80044a6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80044a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044aa:	2090      	movs	r0, #144	; 0x90
 80044ac:	183a      	adds	r2, r7, r0
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	2301      	movs	r3, #1
 80044b2:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044b6:	f383 8810 	msr	PRIMASK, r3
}
 80044ba:	46c0      	nop			; (mov r8, r8)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2140      	movs	r1, #64	; 0x40
 80044c8:	438a      	bics	r2, r1
 80044ca:	609a      	str	r2, [r3, #8]
 80044cc:	183b      	adds	r3, r7, r0
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044d4:	f383 8810 	msr	PRIMASK, r3
}
 80044d8:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2280      	movs	r2, #128	; 0x80
 80044de:	589b      	ldr	r3, [r3, r2]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d016      	beq.n	8004512 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2280      	movs	r2, #128	; 0x80
 80044e8:	589b      	ldr	r3, [r3, r2]
 80044ea:	4a17      	ldr	r2, [pc, #92]	; (8004548 <HAL_UART_IRQHandler+0x2c8>)
 80044ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2280      	movs	r2, #128	; 0x80
 80044f2:	589b      	ldr	r3, [r3, r2]
 80044f4:	0018      	movs	r0, r3
 80044f6:	f7fc ff3b 	bl	8001370 <HAL_DMA_Abort_IT>
 80044fa:	1e03      	subs	r3, r0, #0
 80044fc:	d01c      	beq.n	8004538 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2280      	movs	r2, #128	; 0x80
 8004502:	589b      	ldr	r3, [r3, r2]
 8004504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	2180      	movs	r1, #128	; 0x80
 800450a:	5852      	ldr	r2, [r2, r1]
 800450c:	0010      	movs	r0, r2
 800450e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004510:	e012      	b.n	8004538 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	0018      	movs	r0, r3
 8004516:	f000 f9e1 	bl	80048dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800451a:	e00d      	b.n	8004538 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	0018      	movs	r0, r3
 8004520:	f000 f9dc 	bl	80048dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004524:	e008      	b.n	8004538 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	0018      	movs	r0, r3
 800452a:	f000 f9d7 	bl	80048dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2290      	movs	r2, #144	; 0x90
 8004532:	2100      	movs	r1, #0
 8004534:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004536:	e1b9      	b.n	80048ac <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004538:	46c0      	nop			; (mov r8, r8)
    return;
 800453a:	e1b7      	b.n	80048ac <HAL_UART_IRQHandler+0x62c>
 800453c:	0000080f 	.word	0x0000080f
 8004540:	10000001 	.word	0x10000001
 8004544:	04000120 	.word	0x04000120
 8004548:	0800505d 	.word	0x0800505d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004550:	2b01      	cmp	r3, #1
 8004552:	d000      	beq.n	8004556 <HAL_UART_IRQHandler+0x2d6>
 8004554:	e13e      	b.n	80047d4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004556:	23a4      	movs	r3, #164	; 0xa4
 8004558:	18fb      	adds	r3, r7, r3
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2210      	movs	r2, #16
 800455e:	4013      	ands	r3, r2
 8004560:	d100      	bne.n	8004564 <HAL_UART_IRQHandler+0x2e4>
 8004562:	e137      	b.n	80047d4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004564:	23a0      	movs	r3, #160	; 0xa0
 8004566:	18fb      	adds	r3, r7, r3
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2210      	movs	r2, #16
 800456c:	4013      	ands	r3, r2
 800456e:	d100      	bne.n	8004572 <HAL_UART_IRQHandler+0x2f2>
 8004570:	e130      	b.n	80047d4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2210      	movs	r2, #16
 8004578:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2240      	movs	r2, #64	; 0x40
 8004582:	4013      	ands	r3, r2
 8004584:	2b40      	cmp	r3, #64	; 0x40
 8004586:	d000      	beq.n	800458a <HAL_UART_IRQHandler+0x30a>
 8004588:	e0a4      	b.n	80046d4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2280      	movs	r2, #128	; 0x80
 800458e:	589b      	ldr	r3, [r3, r2]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	217e      	movs	r1, #126	; 0x7e
 8004596:	187b      	adds	r3, r7, r1
 8004598:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800459a:	187b      	adds	r3, r7, r1
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d100      	bne.n	80045a4 <HAL_UART_IRQHandler+0x324>
 80045a2:	e185      	b.n	80048b0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	225c      	movs	r2, #92	; 0x5c
 80045a8:	5a9b      	ldrh	r3, [r3, r2]
 80045aa:	187a      	adds	r2, r7, r1
 80045ac:	8812      	ldrh	r2, [r2, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d300      	bcc.n	80045b4 <HAL_UART_IRQHandler+0x334>
 80045b2:	e17d      	b.n	80048b0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	187a      	adds	r2, r7, r1
 80045b8:	215e      	movs	r1, #94	; 0x5e
 80045ba:	8812      	ldrh	r2, [r2, #0]
 80045bc:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2280      	movs	r2, #128	; 0x80
 80045c2:	589b      	ldr	r3, [r3, r2]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2220      	movs	r2, #32
 80045ca:	4013      	ands	r3, r2
 80045cc:	d170      	bne.n	80046b0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80045ce:	f3ef 8310 	mrs	r3, PRIMASK
 80045d2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80045d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80045d8:	2301      	movs	r3, #1
 80045da:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045de:	f383 8810 	msr	PRIMASK, r3
}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	49b4      	ldr	r1, [pc, #720]	; (80048c0 <HAL_UART_IRQHandler+0x640>)
 80045f0:	400a      	ands	r2, r1
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fa:	f383 8810 	msr	PRIMASK, r3
}
 80045fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004600:	f3ef 8310 	mrs	r3, PRIMASK
 8004604:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004608:	677b      	str	r3, [r7, #116]	; 0x74
 800460a:	2301      	movs	r3, #1
 800460c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800460e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004610:	f383 8810 	msr	PRIMASK, r3
}
 8004614:	46c0      	nop			; (mov r8, r8)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2101      	movs	r1, #1
 8004622:	438a      	bics	r2, r1
 8004624:	609a      	str	r2, [r3, #8]
 8004626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004628:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800462a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800462c:	f383 8810 	msr	PRIMASK, r3
}
 8004630:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004632:	f3ef 8310 	mrs	r3, PRIMASK
 8004636:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004638:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800463a:	673b      	str	r3, [r7, #112]	; 0x70
 800463c:	2301      	movs	r3, #1
 800463e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004642:	f383 8810 	msr	PRIMASK, r3
}
 8004646:	46c0      	nop			; (mov r8, r8)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2140      	movs	r1, #64	; 0x40
 8004654:	438a      	bics	r2, r1
 8004656:	609a      	str	r2, [r3, #8]
 8004658:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800465a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800465c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800465e:	f383 8810 	msr	PRIMASK, r3
}
 8004662:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	228c      	movs	r2, #140	; 0x8c
 8004668:	2120      	movs	r1, #32
 800466a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004672:	f3ef 8310 	mrs	r3, PRIMASK
 8004676:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004678:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800467a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800467c:	2301      	movs	r3, #1
 800467e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004680:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004682:	f383 8810 	msr	PRIMASK, r3
}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2110      	movs	r1, #16
 8004694:	438a      	bics	r2, r1
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800469a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800469c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800469e:	f383 8810 	msr	PRIMASK, r3
}
 80046a2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2280      	movs	r2, #128	; 0x80
 80046a8:	589b      	ldr	r3, [r3, r2]
 80046aa:	0018      	movs	r0, r3
 80046ac:	f7fc fdfe 	bl	80012ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	225c      	movs	r2, #92	; 0x5c
 80046ba:	5a9a      	ldrh	r2, [r3, r2]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	215e      	movs	r1, #94	; 0x5e
 80046c0:	5a5b      	ldrh	r3, [r3, r1]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	0011      	movs	r1, r2
 80046cc:	0018      	movs	r0, r3
 80046ce:	f000 f90d 	bl	80048ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046d2:	e0ed      	b.n	80048b0 <HAL_UART_IRQHandler+0x630>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	225c      	movs	r2, #92	; 0x5c
 80046d8:	5a99      	ldrh	r1, [r3, r2]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	225e      	movs	r2, #94	; 0x5e
 80046de:	5a9b      	ldrh	r3, [r3, r2]
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	208e      	movs	r0, #142	; 0x8e
 80046e4:	183b      	adds	r3, r7, r0
 80046e6:	1a8a      	subs	r2, r1, r2
 80046e8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	225e      	movs	r2, #94	; 0x5e
 80046ee:	5a9b      	ldrh	r3, [r3, r2]
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d100      	bne.n	80046f8 <HAL_UART_IRQHandler+0x478>
 80046f6:	e0dd      	b.n	80048b4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80046f8:	183b      	adds	r3, r7, r0
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d100      	bne.n	8004702 <HAL_UART_IRQHandler+0x482>
 8004700:	e0d8      	b.n	80048b4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004702:	f3ef 8310 	mrs	r3, PRIMASK
 8004706:	60fb      	str	r3, [r7, #12]
  return(result);
 8004708:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800470a:	2488      	movs	r4, #136	; 0x88
 800470c:	193a      	adds	r2, r7, r4
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	2301      	movs	r3, #1
 8004712:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f383 8810 	msr	PRIMASK, r3
}
 800471a:	46c0      	nop			; (mov r8, r8)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4967      	ldr	r1, [pc, #412]	; (80048c4 <HAL_UART_IRQHandler+0x644>)
 8004728:	400a      	ands	r2, r1
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	193b      	adds	r3, r7, r4
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f383 8810 	msr	PRIMASK, r3
}
 8004738:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800473a:	f3ef 8310 	mrs	r3, PRIMASK
 800473e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004740:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004742:	2484      	movs	r4, #132	; 0x84
 8004744:	193a      	adds	r2, r7, r4
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	2301      	movs	r3, #1
 800474a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f383 8810 	msr	PRIMASK, r3
}
 8004752:	46c0      	nop			; (mov r8, r8)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	495a      	ldr	r1, [pc, #360]	; (80048c8 <HAL_UART_IRQHandler+0x648>)
 8004760:	400a      	ands	r2, r1
 8004762:	609a      	str	r2, [r3, #8]
 8004764:	193b      	adds	r3, r7, r4
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	f383 8810 	msr	PRIMASK, r3
}
 8004770:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	228c      	movs	r2, #140	; 0x8c
 8004776:	2120      	movs	r1, #32
 8004778:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004786:	f3ef 8310 	mrs	r3, PRIMASK
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800478e:	2480      	movs	r4, #128	; 0x80
 8004790:	193a      	adds	r2, r7, r4
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	2301      	movs	r3, #1
 8004796:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	f383 8810 	msr	PRIMASK, r3
}
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2110      	movs	r1, #16
 80047ac:	438a      	bics	r2, r1
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	193b      	adds	r3, r7, r4
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b8:	f383 8810 	msr	PRIMASK, r3
}
 80047bc:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2202      	movs	r2, #2
 80047c2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047c4:	183b      	adds	r3, r7, r0
 80047c6:	881a      	ldrh	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	0011      	movs	r1, r2
 80047cc:	0018      	movs	r0, r3
 80047ce:	f000 f88d 	bl	80048ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80047d2:	e06f      	b.n	80048b4 <HAL_UART_IRQHandler+0x634>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80047d4:	23a4      	movs	r3, #164	; 0xa4
 80047d6:	18fb      	adds	r3, r7, r3
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	2380      	movs	r3, #128	; 0x80
 80047dc:	035b      	lsls	r3, r3, #13
 80047de:	4013      	ands	r3, r2
 80047e0:	d010      	beq.n	8004804 <HAL_UART_IRQHandler+0x584>
 80047e2:	239c      	movs	r3, #156	; 0x9c
 80047e4:	18fb      	adds	r3, r7, r3
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	2380      	movs	r3, #128	; 0x80
 80047ea:	03db      	lsls	r3, r3, #15
 80047ec:	4013      	ands	r3, r2
 80047ee:	d009      	beq.n	8004804 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2280      	movs	r2, #128	; 0x80
 80047f6:	0352      	lsls	r2, r2, #13
 80047f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	0018      	movs	r0, r3
 80047fe:	f000 fc70 	bl	80050e2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004802:	e05a      	b.n	80048ba <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004804:	23a4      	movs	r3, #164	; 0xa4
 8004806:	18fb      	adds	r3, r7, r3
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2280      	movs	r2, #128	; 0x80
 800480c:	4013      	ands	r3, r2
 800480e:	d016      	beq.n	800483e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004810:	23a0      	movs	r3, #160	; 0xa0
 8004812:	18fb      	adds	r3, r7, r3
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2280      	movs	r2, #128	; 0x80
 8004818:	4013      	ands	r3, r2
 800481a:	d106      	bne.n	800482a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800481c:	239c      	movs	r3, #156	; 0x9c
 800481e:	18fb      	adds	r3, r7, r3
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	2380      	movs	r3, #128	; 0x80
 8004824:	041b      	lsls	r3, r3, #16
 8004826:	4013      	ands	r3, r2
 8004828:	d009      	beq.n	800483e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800482e:	2b00      	cmp	r3, #0
 8004830:	d042      	beq.n	80048b8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	0010      	movs	r0, r2
 800483a:	4798      	blx	r3
    }
    return;
 800483c:	e03c      	b.n	80048b8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800483e:	23a4      	movs	r3, #164	; 0xa4
 8004840:	18fb      	adds	r3, r7, r3
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2240      	movs	r2, #64	; 0x40
 8004846:	4013      	ands	r3, r2
 8004848:	d00a      	beq.n	8004860 <HAL_UART_IRQHandler+0x5e0>
 800484a:	23a0      	movs	r3, #160	; 0xa0
 800484c:	18fb      	adds	r3, r7, r3
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2240      	movs	r2, #64	; 0x40
 8004852:	4013      	ands	r3, r2
 8004854:	d004      	beq.n	8004860 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	0018      	movs	r0, r3
 800485a:	f000 fc16 	bl	800508a <UART_EndTransmit_IT>
    return;
 800485e:	e02c      	b.n	80048ba <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004860:	23a4      	movs	r3, #164	; 0xa4
 8004862:	18fb      	adds	r3, r7, r3
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	2380      	movs	r3, #128	; 0x80
 8004868:	041b      	lsls	r3, r3, #16
 800486a:	4013      	ands	r3, r2
 800486c:	d00b      	beq.n	8004886 <HAL_UART_IRQHandler+0x606>
 800486e:	23a0      	movs	r3, #160	; 0xa0
 8004870:	18fb      	adds	r3, r7, r3
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	2380      	movs	r3, #128	; 0x80
 8004876:	05db      	lsls	r3, r3, #23
 8004878:	4013      	ands	r3, r2
 800487a:	d004      	beq.n	8004886 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	0018      	movs	r0, r3
 8004880:	f000 fc3f 	bl	8005102 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004884:	e019      	b.n	80048ba <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004886:	23a4      	movs	r3, #164	; 0xa4
 8004888:	18fb      	adds	r3, r7, r3
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	2380      	movs	r3, #128	; 0x80
 800488e:	045b      	lsls	r3, r3, #17
 8004890:	4013      	ands	r3, r2
 8004892:	d012      	beq.n	80048ba <HAL_UART_IRQHandler+0x63a>
 8004894:	23a0      	movs	r3, #160	; 0xa0
 8004896:	18fb      	adds	r3, r7, r3
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	da0d      	bge.n	80048ba <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	0018      	movs	r0, r3
 80048a2:	f000 fc26 	bl	80050f2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80048a6:	e008      	b.n	80048ba <HAL_UART_IRQHandler+0x63a>
      return;
 80048a8:	46c0      	nop			; (mov r8, r8)
 80048aa:	e006      	b.n	80048ba <HAL_UART_IRQHandler+0x63a>
    return;
 80048ac:	46c0      	nop			; (mov r8, r8)
 80048ae:	e004      	b.n	80048ba <HAL_UART_IRQHandler+0x63a>
      return;
 80048b0:	46c0      	nop			; (mov r8, r8)
 80048b2:	e002      	b.n	80048ba <HAL_UART_IRQHandler+0x63a>
      return;
 80048b4:	46c0      	nop			; (mov r8, r8)
 80048b6:	e000      	b.n	80048ba <HAL_UART_IRQHandler+0x63a>
    return;
 80048b8:	46c0      	nop			; (mov r8, r8)
  }
}
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b02a      	add	sp, #168	; 0xa8
 80048be:	bdb0      	pop	{r4, r5, r7, pc}
 80048c0:	fffffeff 	.word	0xfffffeff
 80048c4:	fffffedf 	.word	0xfffffedf
 80048c8:	effffffe 	.word	0xeffffffe

080048cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80048d4:	46c0      	nop			; (mov r8, r8)
 80048d6:	46bd      	mov	sp, r7
 80048d8:	b002      	add	sp, #8
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80048e4:	46c0      	nop			; (mov r8, r8)
 80048e6:	46bd      	mov	sp, r7
 80048e8:	b002      	add	sp, #8
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	000a      	movs	r2, r1
 80048f6:	1cbb      	adds	r3, r7, #2
 80048f8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048fa:	46c0      	nop			; (mov r8, r8)
 80048fc:	46bd      	mov	sp, r7
 80048fe:	b002      	add	sp, #8
 8004900:	bd80      	pop	{r7, pc}
	...

08004904 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800490c:	231e      	movs	r3, #30
 800490e:	18fb      	adds	r3, r7, r3
 8004910:	2200      	movs	r2, #0
 8004912:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	4313      	orrs	r3, r2
 800492a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4aab      	ldr	r2, [pc, #684]	; (8004be0 <UART_SetConfig+0x2dc>)
 8004934:	4013      	ands	r3, r2
 8004936:	0019      	movs	r1, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	430a      	orrs	r2, r1
 8004940:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	4aa6      	ldr	r2, [pc, #664]	; (8004be4 <UART_SetConfig+0x2e0>)
 800494a:	4013      	ands	r3, r2
 800494c:	0019      	movs	r1, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	4313      	orrs	r3, r2
 8004968:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	4a9d      	ldr	r2, [pc, #628]	; (8004be8 <UART_SetConfig+0x2e4>)
 8004972:	4013      	ands	r3, r2
 8004974:	0019      	movs	r1, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	430a      	orrs	r2, r1
 800497e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004986:	220f      	movs	r2, #15
 8004988:	4393      	bics	r3, r2
 800498a:	0019      	movs	r1, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a93      	ldr	r2, [pc, #588]	; (8004bec <UART_SetConfig+0x2e8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d127      	bne.n	80049f2 <UART_SetConfig+0xee>
 80049a2:	4b93      	ldr	r3, [pc, #588]	; (8004bf0 <UART_SetConfig+0x2ec>)
 80049a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a6:	2203      	movs	r2, #3
 80049a8:	4013      	ands	r3, r2
 80049aa:	2b03      	cmp	r3, #3
 80049ac:	d017      	beq.n	80049de <UART_SetConfig+0xda>
 80049ae:	d81b      	bhi.n	80049e8 <UART_SetConfig+0xe4>
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d00a      	beq.n	80049ca <UART_SetConfig+0xc6>
 80049b4:	d818      	bhi.n	80049e8 <UART_SetConfig+0xe4>
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <UART_SetConfig+0xbc>
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d00a      	beq.n	80049d4 <UART_SetConfig+0xd0>
 80049be:	e013      	b.n	80049e8 <UART_SetConfig+0xe4>
 80049c0:	231f      	movs	r3, #31
 80049c2:	18fb      	adds	r3, r7, r3
 80049c4:	2200      	movs	r2, #0
 80049c6:	701a      	strb	r2, [r3, #0]
 80049c8:	e021      	b.n	8004a0e <UART_SetConfig+0x10a>
 80049ca:	231f      	movs	r3, #31
 80049cc:	18fb      	adds	r3, r7, r3
 80049ce:	2202      	movs	r2, #2
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	e01c      	b.n	8004a0e <UART_SetConfig+0x10a>
 80049d4:	231f      	movs	r3, #31
 80049d6:	18fb      	adds	r3, r7, r3
 80049d8:	2204      	movs	r2, #4
 80049da:	701a      	strb	r2, [r3, #0]
 80049dc:	e017      	b.n	8004a0e <UART_SetConfig+0x10a>
 80049de:	231f      	movs	r3, #31
 80049e0:	18fb      	adds	r3, r7, r3
 80049e2:	2208      	movs	r2, #8
 80049e4:	701a      	strb	r2, [r3, #0]
 80049e6:	e012      	b.n	8004a0e <UART_SetConfig+0x10a>
 80049e8:	231f      	movs	r3, #31
 80049ea:	18fb      	adds	r3, r7, r3
 80049ec:	2210      	movs	r2, #16
 80049ee:	701a      	strb	r2, [r3, #0]
 80049f0:	e00d      	b.n	8004a0e <UART_SetConfig+0x10a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a7f      	ldr	r2, [pc, #508]	; (8004bf4 <UART_SetConfig+0x2f0>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d104      	bne.n	8004a06 <UART_SetConfig+0x102>
 80049fc:	231f      	movs	r3, #31
 80049fe:	18fb      	adds	r3, r7, r3
 8004a00:	2200      	movs	r2, #0
 8004a02:	701a      	strb	r2, [r3, #0]
 8004a04:	e003      	b.n	8004a0e <UART_SetConfig+0x10a>
 8004a06:	231f      	movs	r3, #31
 8004a08:	18fb      	adds	r3, r7, r3
 8004a0a:	2210      	movs	r2, #16
 8004a0c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	69da      	ldr	r2, [r3, #28]
 8004a12:	2380      	movs	r3, #128	; 0x80
 8004a14:	021b      	lsls	r3, r3, #8
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d000      	beq.n	8004a1c <UART_SetConfig+0x118>
 8004a1a:	e06f      	b.n	8004afc <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8004a1c:	231f      	movs	r3, #31
 8004a1e:	18fb      	adds	r3, r7, r3
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	2b08      	cmp	r3, #8
 8004a24:	d01f      	beq.n	8004a66 <UART_SetConfig+0x162>
 8004a26:	dc22      	bgt.n	8004a6e <UART_SetConfig+0x16a>
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d017      	beq.n	8004a5c <UART_SetConfig+0x158>
 8004a2c:	dc1f      	bgt.n	8004a6e <UART_SetConfig+0x16a>
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d002      	beq.n	8004a38 <UART_SetConfig+0x134>
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d005      	beq.n	8004a42 <UART_SetConfig+0x13e>
 8004a36:	e01a      	b.n	8004a6e <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a38:	f7fe f966 	bl	8002d08 <HAL_RCC_GetPCLK1Freq>
 8004a3c:	0003      	movs	r3, r0
 8004a3e:	61bb      	str	r3, [r7, #24]
        break;
 8004a40:	e01c      	b.n	8004a7c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004a42:	4b6b      	ldr	r3, [pc, #428]	; (8004bf0 <UART_SetConfig+0x2ec>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	095b      	lsrs	r3, r3, #5
 8004a48:	2207      	movs	r2, #7
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	0019      	movs	r1, r3
 8004a50:	4869      	ldr	r0, [pc, #420]	; (8004bf8 <UART_SetConfig+0x2f4>)
 8004a52:	f7fb fb6b 	bl	800012c <__udivsi3>
 8004a56:	0003      	movs	r3, r0
 8004a58:	61bb      	str	r3, [r7, #24]
        break;
 8004a5a:	e00f      	b.n	8004a7c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a5c:	f7fe f90a 	bl	8002c74 <HAL_RCC_GetSysClockFreq>
 8004a60:	0003      	movs	r3, r0
 8004a62:	61bb      	str	r3, [r7, #24]
        break;
 8004a64:	e00a      	b.n	8004a7c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a66:	2380      	movs	r3, #128	; 0x80
 8004a68:	021b      	lsls	r3, r3, #8
 8004a6a:	61bb      	str	r3, [r7, #24]
        break;
 8004a6c:	e006      	b.n	8004a7c <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a72:	231e      	movs	r3, #30
 8004a74:	18fb      	adds	r3, r7, r3
 8004a76:	2201      	movs	r2, #1
 8004a78:	701a      	strb	r2, [r3, #0]
        break;
 8004a7a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d100      	bne.n	8004a84 <UART_SetConfig+0x180>
 8004a82:	e097      	b.n	8004bb4 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a88:	4b5c      	ldr	r3, [pc, #368]	; (8004bfc <UART_SetConfig+0x2f8>)
 8004a8a:	0052      	lsls	r2, r2, #1
 8004a8c:	5ad3      	ldrh	r3, [r2, r3]
 8004a8e:	0019      	movs	r1, r3
 8004a90:	69b8      	ldr	r0, [r7, #24]
 8004a92:	f7fb fb4b 	bl	800012c <__udivsi3>
 8004a96:	0003      	movs	r3, r0
 8004a98:	005a      	lsls	r2, r3, #1
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	085b      	lsrs	r3, r3, #1
 8004aa0:	18d2      	adds	r2, r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	0019      	movs	r1, r3
 8004aa8:	0010      	movs	r0, r2
 8004aaa:	f7fb fb3f 	bl	800012c <__udivsi3>
 8004aae:	0003      	movs	r3, r0
 8004ab0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	2b0f      	cmp	r3, #15
 8004ab6:	d91c      	bls.n	8004af2 <UART_SetConfig+0x1ee>
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	2380      	movs	r3, #128	; 0x80
 8004abc:	025b      	lsls	r3, r3, #9
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d217      	bcs.n	8004af2 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	200e      	movs	r0, #14
 8004ac8:	183b      	adds	r3, r7, r0
 8004aca:	210f      	movs	r1, #15
 8004acc:	438a      	bics	r2, r1
 8004ace:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	085b      	lsrs	r3, r3, #1
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2207      	movs	r2, #7
 8004ad8:	4013      	ands	r3, r2
 8004ada:	b299      	uxth	r1, r3
 8004adc:	183b      	adds	r3, r7, r0
 8004ade:	183a      	adds	r2, r7, r0
 8004ae0:	8812      	ldrh	r2, [r2, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	183a      	adds	r2, r7, r0
 8004aec:	8812      	ldrh	r2, [r2, #0]
 8004aee:	60da      	str	r2, [r3, #12]
 8004af0:	e060      	b.n	8004bb4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004af2:	231e      	movs	r3, #30
 8004af4:	18fb      	adds	r3, r7, r3
 8004af6:	2201      	movs	r2, #1
 8004af8:	701a      	strb	r2, [r3, #0]
 8004afa:	e05b      	b.n	8004bb4 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004afc:	231f      	movs	r3, #31
 8004afe:	18fb      	adds	r3, r7, r3
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	2b08      	cmp	r3, #8
 8004b04:	d01f      	beq.n	8004b46 <UART_SetConfig+0x242>
 8004b06:	dc22      	bgt.n	8004b4e <UART_SetConfig+0x24a>
 8004b08:	2b04      	cmp	r3, #4
 8004b0a:	d017      	beq.n	8004b3c <UART_SetConfig+0x238>
 8004b0c:	dc1f      	bgt.n	8004b4e <UART_SetConfig+0x24a>
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <UART_SetConfig+0x214>
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d005      	beq.n	8004b22 <UART_SetConfig+0x21e>
 8004b16:	e01a      	b.n	8004b4e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b18:	f7fe f8f6 	bl	8002d08 <HAL_RCC_GetPCLK1Freq>
 8004b1c:	0003      	movs	r3, r0
 8004b1e:	61bb      	str	r3, [r7, #24]
        break;
 8004b20:	e01c      	b.n	8004b5c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004b22:	4b33      	ldr	r3, [pc, #204]	; (8004bf0 <UART_SetConfig+0x2ec>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	2207      	movs	r2, #7
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	0019      	movs	r1, r3
 8004b30:	4831      	ldr	r0, [pc, #196]	; (8004bf8 <UART_SetConfig+0x2f4>)
 8004b32:	f7fb fafb 	bl	800012c <__udivsi3>
 8004b36:	0003      	movs	r3, r0
 8004b38:	61bb      	str	r3, [r7, #24]
        break;
 8004b3a:	e00f      	b.n	8004b5c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b3c:	f7fe f89a 	bl	8002c74 <HAL_RCC_GetSysClockFreq>
 8004b40:	0003      	movs	r3, r0
 8004b42:	61bb      	str	r3, [r7, #24]
        break;
 8004b44:	e00a      	b.n	8004b5c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b46:	2380      	movs	r3, #128	; 0x80
 8004b48:	021b      	lsls	r3, r3, #8
 8004b4a:	61bb      	str	r3, [r7, #24]
        break;
 8004b4c:	e006      	b.n	8004b5c <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b52:	231e      	movs	r3, #30
 8004b54:	18fb      	adds	r3, r7, r3
 8004b56:	2201      	movs	r2, #1
 8004b58:	701a      	strb	r2, [r3, #0]
        break;
 8004b5a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d028      	beq.n	8004bb4 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b66:	4b25      	ldr	r3, [pc, #148]	; (8004bfc <UART_SetConfig+0x2f8>)
 8004b68:	0052      	lsls	r2, r2, #1
 8004b6a:	5ad3      	ldrh	r3, [r2, r3]
 8004b6c:	0019      	movs	r1, r3
 8004b6e:	69b8      	ldr	r0, [r7, #24]
 8004b70:	f7fb fadc 	bl	800012c <__udivsi3>
 8004b74:	0003      	movs	r3, r0
 8004b76:	001a      	movs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	085b      	lsrs	r3, r3, #1
 8004b7e:	18d2      	adds	r2, r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	0019      	movs	r1, r3
 8004b86:	0010      	movs	r0, r2
 8004b88:	f7fb fad0 	bl	800012c <__udivsi3>
 8004b8c:	0003      	movs	r3, r0
 8004b8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	2b0f      	cmp	r3, #15
 8004b94:	d90a      	bls.n	8004bac <UART_SetConfig+0x2a8>
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	2380      	movs	r3, #128	; 0x80
 8004b9a:	025b      	lsls	r3, r3, #9
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d205      	bcs.n	8004bac <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60da      	str	r2, [r3, #12]
 8004baa:	e003      	b.n	8004bb4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004bac:	231e      	movs	r3, #30
 8004bae:	18fb      	adds	r3, r7, r3
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	226a      	movs	r2, #106	; 0x6a
 8004bb8:	2101      	movs	r1, #1
 8004bba:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2268      	movs	r2, #104	; 0x68
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004bd0:	231e      	movs	r3, #30
 8004bd2:	18fb      	adds	r3, r7, r3
 8004bd4:	781b      	ldrb	r3, [r3, #0]
}
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	b008      	add	sp, #32
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	cfff69f3 	.word	0xcfff69f3
 8004be4:	ffffcfff 	.word	0xffffcfff
 8004be8:	11fff4ff 	.word	0x11fff4ff
 8004bec:	40013800 	.word	0x40013800
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	40004400 	.word	0x40004400
 8004bf8:	02dc6c00 	.word	0x02dc6c00
 8004bfc:	08005b44 	.word	0x08005b44

08004c00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	4013      	ands	r3, r2
 8004c10:	d00b      	beq.n	8004c2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	4a4a      	ldr	r2, [pc, #296]	; (8004d44 <UART_AdvFeatureConfig+0x144>)
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	0019      	movs	r1, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2e:	2201      	movs	r2, #1
 8004c30:	4013      	ands	r3, r2
 8004c32:	d00b      	beq.n	8004c4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	4a43      	ldr	r2, [pc, #268]	; (8004d48 <UART_AdvFeatureConfig+0x148>)
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	0019      	movs	r1, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c50:	2202      	movs	r2, #2
 8004c52:	4013      	ands	r3, r2
 8004c54:	d00b      	beq.n	8004c6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	4a3b      	ldr	r2, [pc, #236]	; (8004d4c <UART_AdvFeatureConfig+0x14c>)
 8004c5e:	4013      	ands	r3, r2
 8004c60:	0019      	movs	r1, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c72:	2204      	movs	r2, #4
 8004c74:	4013      	ands	r3, r2
 8004c76:	d00b      	beq.n	8004c90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	4a34      	ldr	r2, [pc, #208]	; (8004d50 <UART_AdvFeatureConfig+0x150>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	0019      	movs	r1, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c94:	2210      	movs	r2, #16
 8004c96:	4013      	ands	r3, r2
 8004c98:	d00b      	beq.n	8004cb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	4a2c      	ldr	r2, [pc, #176]	; (8004d54 <UART_AdvFeatureConfig+0x154>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	0019      	movs	r1, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	4013      	ands	r3, r2
 8004cba:	d00b      	beq.n	8004cd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	4a25      	ldr	r2, [pc, #148]	; (8004d58 <UART_AdvFeatureConfig+0x158>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	0019      	movs	r1, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd8:	2240      	movs	r2, #64	; 0x40
 8004cda:	4013      	ands	r3, r2
 8004cdc:	d01d      	beq.n	8004d1a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	4a1d      	ldr	r2, [pc, #116]	; (8004d5c <UART_AdvFeatureConfig+0x15c>)
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	0019      	movs	r1, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cfa:	2380      	movs	r3, #128	; 0x80
 8004cfc:	035b      	lsls	r3, r3, #13
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d10b      	bne.n	8004d1a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	4a15      	ldr	r2, [pc, #84]	; (8004d60 <UART_AdvFeatureConfig+0x160>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	0019      	movs	r1, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1e:	2280      	movs	r2, #128	; 0x80
 8004d20:	4013      	ands	r3, r2
 8004d22:	d00b      	beq.n	8004d3c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	4a0e      	ldr	r2, [pc, #56]	; (8004d64 <UART_AdvFeatureConfig+0x164>)
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	0019      	movs	r1, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	605a      	str	r2, [r3, #4]
  }
}
 8004d3c:	46c0      	nop			; (mov r8, r8)
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	b002      	add	sp, #8
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	ffff7fff 	.word	0xffff7fff
 8004d48:	fffdffff 	.word	0xfffdffff
 8004d4c:	fffeffff 	.word	0xfffeffff
 8004d50:	fffbffff 	.word	0xfffbffff
 8004d54:	ffffefff 	.word	0xffffefff
 8004d58:	ffffdfff 	.word	0xffffdfff
 8004d5c:	ffefffff 	.word	0xffefffff
 8004d60:	ff9fffff 	.word	0xff9fffff
 8004d64:	fff7ffff 	.word	0xfff7ffff

08004d68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b092      	sub	sp, #72	; 0x48
 8004d6c:	af02      	add	r7, sp, #8
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2290      	movs	r2, #144	; 0x90
 8004d74:	2100      	movs	r1, #0
 8004d76:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d78:	f7fc f98c 	bl	8001094 <HAL_GetTick>
 8004d7c:	0003      	movs	r3, r0
 8004d7e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2208      	movs	r2, #8
 8004d88:	4013      	ands	r3, r2
 8004d8a:	2b08      	cmp	r3, #8
 8004d8c:	d12d      	bne.n	8004dea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d90:	2280      	movs	r2, #128	; 0x80
 8004d92:	0391      	lsls	r1, r2, #14
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	4a47      	ldr	r2, [pc, #284]	; (8004eb4 <UART_CheckIdleState+0x14c>)
 8004d98:	9200      	str	r2, [sp, #0]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f000 f88e 	bl	8004ebc <UART_WaitOnFlagUntilTimeout>
 8004da0:	1e03      	subs	r3, r0, #0
 8004da2:	d022      	beq.n	8004dea <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004da4:	f3ef 8310 	mrs	r3, PRIMASK
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004dac:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dae:	2301      	movs	r3, #1
 8004db0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db4:	f383 8810 	msr	PRIMASK, r3
}
 8004db8:	46c0      	nop			; (mov r8, r8)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2180      	movs	r1, #128	; 0x80
 8004dc6:	438a      	bics	r2, r1
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd0:	f383 8810 	msr	PRIMASK, r3
}
 8004dd4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2288      	movs	r2, #136	; 0x88
 8004dda:	2120      	movs	r1, #32
 8004ddc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2284      	movs	r2, #132	; 0x84
 8004de2:	2100      	movs	r1, #0
 8004de4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e060      	b.n	8004eac <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2204      	movs	r2, #4
 8004df2:	4013      	ands	r3, r2
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d146      	bne.n	8004e86 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dfa:	2280      	movs	r2, #128	; 0x80
 8004dfc:	03d1      	lsls	r1, r2, #15
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	4a2c      	ldr	r2, [pc, #176]	; (8004eb4 <UART_CheckIdleState+0x14c>)
 8004e02:	9200      	str	r2, [sp, #0]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f000 f859 	bl	8004ebc <UART_WaitOnFlagUntilTimeout>
 8004e0a:	1e03      	subs	r3, r0, #0
 8004e0c:	d03b      	beq.n	8004e86 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e12:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e14:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e16:	637b      	str	r3, [r7, #52]	; 0x34
 8004e18:	2301      	movs	r3, #1
 8004e1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f383 8810 	msr	PRIMASK, r3
}
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4922      	ldr	r1, [pc, #136]	; (8004eb8 <UART_CheckIdleState+0x150>)
 8004e30:	400a      	ands	r2, r1
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f383 8810 	msr	PRIMASK, r3
}
 8004e3e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e40:	f3ef 8310 	mrs	r3, PRIMASK
 8004e44:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e46:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e48:	633b      	str	r3, [r7, #48]	; 0x30
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	f383 8810 	msr	PRIMASK, r3
}
 8004e54:	46c0      	nop			; (mov r8, r8)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2101      	movs	r1, #1
 8004e62:	438a      	bics	r2, r1
 8004e64:	609a      	str	r2, [r3, #8]
 8004e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e68:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	f383 8810 	msr	PRIMASK, r3
}
 8004e70:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	228c      	movs	r2, #140	; 0x8c
 8004e76:	2120      	movs	r1, #32
 8004e78:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2284      	movs	r2, #132	; 0x84
 8004e7e:	2100      	movs	r1, #0
 8004e80:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e012      	b.n	8004eac <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2288      	movs	r2, #136	; 0x88
 8004e8a:	2120      	movs	r1, #32
 8004e8c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	228c      	movs	r2, #140	; 0x8c
 8004e92:	2120      	movs	r1, #32
 8004e94:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2284      	movs	r2, #132	; 0x84
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	0018      	movs	r0, r3
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b010      	add	sp, #64	; 0x40
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	01ffffff 	.word	0x01ffffff
 8004eb8:	fffffedf 	.word	0xfffffedf

08004ebc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	603b      	str	r3, [r7, #0]
 8004ec8:	1dfb      	adds	r3, r7, #7
 8004eca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ecc:	e04b      	b.n	8004f66 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	d048      	beq.n	8004f66 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed4:	f7fc f8de 	bl	8001094 <HAL_GetTick>
 8004ed8:	0002      	movs	r2, r0
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d302      	bcc.n	8004eea <UART_WaitOnFlagUntilTimeout+0x2e>
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e04b      	b.n	8004f86 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2204      	movs	r2, #4
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d035      	beq.n	8004f66 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	2208      	movs	r2, #8
 8004f02:	4013      	ands	r3, r2
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d111      	bne.n	8004f2c <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2208      	movs	r2, #8
 8004f0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	0018      	movs	r0, r3
 8004f14:	f000 f83c 	bl	8004f90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2290      	movs	r2, #144	; 0x90
 8004f1c:	2108      	movs	r1, #8
 8004f1e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2284      	movs	r2, #132	; 0x84
 8004f24:	2100      	movs	r1, #0
 8004f26:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e02c      	b.n	8004f86 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	69da      	ldr	r2, [r3, #28]
 8004f32:	2380      	movs	r3, #128	; 0x80
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	401a      	ands	r2, r3
 8004f38:	2380      	movs	r3, #128	; 0x80
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d112      	bne.n	8004f66 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2280      	movs	r2, #128	; 0x80
 8004f46:	0112      	lsls	r2, r2, #4
 8004f48:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	0018      	movs	r0, r3
 8004f4e:	f000 f81f 	bl	8004f90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2290      	movs	r2, #144	; 0x90
 8004f56:	2120      	movs	r1, #32
 8004f58:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2284      	movs	r2, #132	; 0x84
 8004f5e:	2100      	movs	r1, #0
 8004f60:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e00f      	b.n	8004f86 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	425a      	negs	r2, r3
 8004f76:	4153      	adcs	r3, r2
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	001a      	movs	r2, r3
 8004f7c:	1dfb      	adds	r3, r7, #7
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d0a4      	beq.n	8004ece <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	0018      	movs	r0, r3
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	b004      	add	sp, #16
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08e      	sub	sp, #56	; 0x38
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004f98:	f3ef 8310 	mrs	r3, PRIMASK
 8004f9c:	617b      	str	r3, [r7, #20]
  return(result);
 8004f9e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	f383 8810 	msr	PRIMASK, r3
}
 8004fac:	46c0      	nop			; (mov r8, r8)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4926      	ldr	r1, [pc, #152]	; (8005054 <UART_EndRxTransfer+0xc4>)
 8004fba:	400a      	ands	r2, r1
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	f383 8810 	msr	PRIMASK, r3
}
 8004fc8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004fca:	f3ef 8310 	mrs	r3, PRIMASK
 8004fce:	623b      	str	r3, [r7, #32]
  return(result);
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004fd2:	633b      	str	r3, [r7, #48]	; 0x30
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	f383 8810 	msr	PRIMASK, r3
}
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689a      	ldr	r2, [r3, #8]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	491b      	ldr	r1, [pc, #108]	; (8005058 <UART_EndRxTransfer+0xc8>)
 8004fec:	400a      	ands	r2, r1
 8004fee:	609a      	str	r2, [r3, #8]
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff6:	f383 8810 	msr	PRIMASK, r3
}
 8004ffa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005000:	2b01      	cmp	r3, #1
 8005002:	d118      	bne.n	8005036 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005004:	f3ef 8310 	mrs	r3, PRIMASK
 8005008:	60bb      	str	r3, [r7, #8]
  return(result);
 800500a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800500c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800500e:	2301      	movs	r3, #1
 8005010:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f383 8810 	msr	PRIMASK, r3
}
 8005018:	46c0      	nop			; (mov r8, r8)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2110      	movs	r1, #16
 8005026:	438a      	bics	r2, r1
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f383 8810 	msr	PRIMASK, r3
}
 8005034:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	228c      	movs	r2, #140	; 0x8c
 800503a:	2120      	movs	r1, #32
 800503c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	675a      	str	r2, [r3, #116]	; 0x74
}
 800504a:	46c0      	nop			; (mov r8, r8)
 800504c:	46bd      	mov	sp, r7
 800504e:	b00e      	add	sp, #56	; 0x38
 8005050:	bd80      	pop	{r7, pc}
 8005052:	46c0      	nop			; (mov r8, r8)
 8005054:	fffffedf 	.word	0xfffffedf
 8005058:	effffffe 	.word	0xeffffffe

0800505c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005068:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	225e      	movs	r2, #94	; 0x5e
 800506e:	2100      	movs	r1, #0
 8005070:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2256      	movs	r2, #86	; 0x56
 8005076:	2100      	movs	r1, #0
 8005078:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	0018      	movs	r0, r3
 800507e:	f7ff fc2d 	bl	80048dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005082:	46c0      	nop			; (mov r8, r8)
 8005084:	46bd      	mov	sp, r7
 8005086:	b004      	add	sp, #16
 8005088:	bd80      	pop	{r7, pc}

0800508a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b086      	sub	sp, #24
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005092:	f3ef 8310 	mrs	r3, PRIMASK
 8005096:	60bb      	str	r3, [r7, #8]
  return(result);
 8005098:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800509a:	617b      	str	r3, [r7, #20]
 800509c:	2301      	movs	r3, #1
 800509e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f383 8810 	msr	PRIMASK, r3
}
 80050a6:	46c0      	nop			; (mov r8, r8)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2140      	movs	r1, #64	; 0x40
 80050b4:	438a      	bics	r2, r1
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	f383 8810 	msr	PRIMASK, r3
}
 80050c2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2288      	movs	r2, #136	; 0x88
 80050c8:	2120      	movs	r1, #32
 80050ca:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	0018      	movs	r0, r3
 80050d6:	f7ff fbf9 	bl	80048cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050da:	46c0      	nop			; (mov r8, r8)
 80050dc:	46bd      	mov	sp, r7
 80050de:	b006      	add	sp, #24
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b082      	sub	sp, #8
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80050ea:	46c0      	nop			; (mov r8, r8)
 80050ec:	46bd      	mov	sp, r7
 80050ee:	b002      	add	sp, #8
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b082      	sub	sp, #8
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80050fa:	46c0      	nop			; (mov r8, r8)
 80050fc:	46bd      	mov	sp, r7
 80050fe:	b002      	add	sp, #8
 8005100:	bd80      	pop	{r7, pc}

08005102 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b082      	sub	sp, #8
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800510a:	46c0      	nop			; (mov r8, r8)
 800510c:	46bd      	mov	sp, r7
 800510e:	b002      	add	sp, #8
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <siprintf>:
 8005114:	b40e      	push	{r1, r2, r3}
 8005116:	b500      	push	{lr}
 8005118:	490b      	ldr	r1, [pc, #44]	; (8005148 <siprintf+0x34>)
 800511a:	b09c      	sub	sp, #112	; 0x70
 800511c:	ab1d      	add	r3, sp, #116	; 0x74
 800511e:	9002      	str	r0, [sp, #8]
 8005120:	9006      	str	r0, [sp, #24]
 8005122:	9107      	str	r1, [sp, #28]
 8005124:	9104      	str	r1, [sp, #16]
 8005126:	4809      	ldr	r0, [pc, #36]	; (800514c <siprintf+0x38>)
 8005128:	4909      	ldr	r1, [pc, #36]	; (8005150 <siprintf+0x3c>)
 800512a:	cb04      	ldmia	r3!, {r2}
 800512c:	9105      	str	r1, [sp, #20]
 800512e:	6800      	ldr	r0, [r0, #0]
 8005130:	a902      	add	r1, sp, #8
 8005132:	9301      	str	r3, [sp, #4]
 8005134:	f000 f9a2 	bl	800547c <_svfiprintf_r>
 8005138:	2200      	movs	r2, #0
 800513a:	9b02      	ldr	r3, [sp, #8]
 800513c:	701a      	strb	r2, [r3, #0]
 800513e:	b01c      	add	sp, #112	; 0x70
 8005140:	bc08      	pop	{r3}
 8005142:	b003      	add	sp, #12
 8005144:	4718      	bx	r3
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	7fffffff 	.word	0x7fffffff
 800514c:	2000005c 	.word	0x2000005c
 8005150:	ffff0208 	.word	0xffff0208

08005154 <memset>:
 8005154:	0003      	movs	r3, r0
 8005156:	1882      	adds	r2, r0, r2
 8005158:	4293      	cmp	r3, r2
 800515a:	d100      	bne.n	800515e <memset+0xa>
 800515c:	4770      	bx	lr
 800515e:	7019      	strb	r1, [r3, #0]
 8005160:	3301      	adds	r3, #1
 8005162:	e7f9      	b.n	8005158 <memset+0x4>

08005164 <__errno>:
 8005164:	4b01      	ldr	r3, [pc, #4]	; (800516c <__errno+0x8>)
 8005166:	6818      	ldr	r0, [r3, #0]
 8005168:	4770      	bx	lr
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	2000005c 	.word	0x2000005c

08005170 <__libc_init_array>:
 8005170:	b570      	push	{r4, r5, r6, lr}
 8005172:	2600      	movs	r6, #0
 8005174:	4c0c      	ldr	r4, [pc, #48]	; (80051a8 <__libc_init_array+0x38>)
 8005176:	4d0d      	ldr	r5, [pc, #52]	; (80051ac <__libc_init_array+0x3c>)
 8005178:	1b64      	subs	r4, r4, r5
 800517a:	10a4      	asrs	r4, r4, #2
 800517c:	42a6      	cmp	r6, r4
 800517e:	d109      	bne.n	8005194 <__libc_init_array+0x24>
 8005180:	2600      	movs	r6, #0
 8005182:	f000 fc6d 	bl	8005a60 <_init>
 8005186:	4c0a      	ldr	r4, [pc, #40]	; (80051b0 <__libc_init_array+0x40>)
 8005188:	4d0a      	ldr	r5, [pc, #40]	; (80051b4 <__libc_init_array+0x44>)
 800518a:	1b64      	subs	r4, r4, r5
 800518c:	10a4      	asrs	r4, r4, #2
 800518e:	42a6      	cmp	r6, r4
 8005190:	d105      	bne.n	800519e <__libc_init_array+0x2e>
 8005192:	bd70      	pop	{r4, r5, r6, pc}
 8005194:	00b3      	lsls	r3, r6, #2
 8005196:	58eb      	ldr	r3, [r5, r3]
 8005198:	4798      	blx	r3
 800519a:	3601      	adds	r6, #1
 800519c:	e7ee      	b.n	800517c <__libc_init_array+0xc>
 800519e:	00b3      	lsls	r3, r6, #2
 80051a0:	58eb      	ldr	r3, [r5, r3]
 80051a2:	4798      	blx	r3
 80051a4:	3601      	adds	r6, #1
 80051a6:	e7f2      	b.n	800518e <__libc_init_array+0x1e>
 80051a8:	08005b90 	.word	0x08005b90
 80051ac:	08005b90 	.word	0x08005b90
 80051b0:	08005b94 	.word	0x08005b94
 80051b4:	08005b90 	.word	0x08005b90

080051b8 <__retarget_lock_acquire_recursive>:
 80051b8:	4770      	bx	lr

080051ba <__retarget_lock_release_recursive>:
 80051ba:	4770      	bx	lr

080051bc <_free_r>:
 80051bc:	b570      	push	{r4, r5, r6, lr}
 80051be:	0005      	movs	r5, r0
 80051c0:	2900      	cmp	r1, #0
 80051c2:	d010      	beq.n	80051e6 <_free_r+0x2a>
 80051c4:	1f0c      	subs	r4, r1, #4
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	da00      	bge.n	80051ce <_free_r+0x12>
 80051cc:	18e4      	adds	r4, r4, r3
 80051ce:	0028      	movs	r0, r5
 80051d0:	f000 f8e2 	bl	8005398 <__malloc_lock>
 80051d4:	4a1d      	ldr	r2, [pc, #116]	; (800524c <_free_r+0x90>)
 80051d6:	6813      	ldr	r3, [r2, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d105      	bne.n	80051e8 <_free_r+0x2c>
 80051dc:	6063      	str	r3, [r4, #4]
 80051de:	6014      	str	r4, [r2, #0]
 80051e0:	0028      	movs	r0, r5
 80051e2:	f000 f8e1 	bl	80053a8 <__malloc_unlock>
 80051e6:	bd70      	pop	{r4, r5, r6, pc}
 80051e8:	42a3      	cmp	r3, r4
 80051ea:	d908      	bls.n	80051fe <_free_r+0x42>
 80051ec:	6820      	ldr	r0, [r4, #0]
 80051ee:	1821      	adds	r1, r4, r0
 80051f0:	428b      	cmp	r3, r1
 80051f2:	d1f3      	bne.n	80051dc <_free_r+0x20>
 80051f4:	6819      	ldr	r1, [r3, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	1809      	adds	r1, r1, r0
 80051fa:	6021      	str	r1, [r4, #0]
 80051fc:	e7ee      	b.n	80051dc <_free_r+0x20>
 80051fe:	001a      	movs	r2, r3
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <_free_r+0x4e>
 8005206:	42a3      	cmp	r3, r4
 8005208:	d9f9      	bls.n	80051fe <_free_r+0x42>
 800520a:	6811      	ldr	r1, [r2, #0]
 800520c:	1850      	adds	r0, r2, r1
 800520e:	42a0      	cmp	r0, r4
 8005210:	d10b      	bne.n	800522a <_free_r+0x6e>
 8005212:	6820      	ldr	r0, [r4, #0]
 8005214:	1809      	adds	r1, r1, r0
 8005216:	1850      	adds	r0, r2, r1
 8005218:	6011      	str	r1, [r2, #0]
 800521a:	4283      	cmp	r3, r0
 800521c:	d1e0      	bne.n	80051e0 <_free_r+0x24>
 800521e:	6818      	ldr	r0, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	1841      	adds	r1, r0, r1
 8005224:	6011      	str	r1, [r2, #0]
 8005226:	6053      	str	r3, [r2, #4]
 8005228:	e7da      	b.n	80051e0 <_free_r+0x24>
 800522a:	42a0      	cmp	r0, r4
 800522c:	d902      	bls.n	8005234 <_free_r+0x78>
 800522e:	230c      	movs	r3, #12
 8005230:	602b      	str	r3, [r5, #0]
 8005232:	e7d5      	b.n	80051e0 <_free_r+0x24>
 8005234:	6820      	ldr	r0, [r4, #0]
 8005236:	1821      	adds	r1, r4, r0
 8005238:	428b      	cmp	r3, r1
 800523a:	d103      	bne.n	8005244 <_free_r+0x88>
 800523c:	6819      	ldr	r1, [r3, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	1809      	adds	r1, r1, r0
 8005242:	6021      	str	r1, [r4, #0]
 8005244:	6063      	str	r3, [r4, #4]
 8005246:	6054      	str	r4, [r2, #4]
 8005248:	e7ca      	b.n	80051e0 <_free_r+0x24>
 800524a:	46c0      	nop			; (mov r8, r8)
 800524c:	20000400 	.word	0x20000400

08005250 <sbrk_aligned>:
 8005250:	b570      	push	{r4, r5, r6, lr}
 8005252:	4e0f      	ldr	r6, [pc, #60]	; (8005290 <sbrk_aligned+0x40>)
 8005254:	000d      	movs	r5, r1
 8005256:	6831      	ldr	r1, [r6, #0]
 8005258:	0004      	movs	r4, r0
 800525a:	2900      	cmp	r1, #0
 800525c:	d102      	bne.n	8005264 <sbrk_aligned+0x14>
 800525e:	f000 fba1 	bl	80059a4 <_sbrk_r>
 8005262:	6030      	str	r0, [r6, #0]
 8005264:	0029      	movs	r1, r5
 8005266:	0020      	movs	r0, r4
 8005268:	f000 fb9c 	bl	80059a4 <_sbrk_r>
 800526c:	1c43      	adds	r3, r0, #1
 800526e:	d00a      	beq.n	8005286 <sbrk_aligned+0x36>
 8005270:	2303      	movs	r3, #3
 8005272:	1cc5      	adds	r5, r0, #3
 8005274:	439d      	bics	r5, r3
 8005276:	42a8      	cmp	r0, r5
 8005278:	d007      	beq.n	800528a <sbrk_aligned+0x3a>
 800527a:	1a29      	subs	r1, r5, r0
 800527c:	0020      	movs	r0, r4
 800527e:	f000 fb91 	bl	80059a4 <_sbrk_r>
 8005282:	3001      	adds	r0, #1
 8005284:	d101      	bne.n	800528a <sbrk_aligned+0x3a>
 8005286:	2501      	movs	r5, #1
 8005288:	426d      	negs	r5, r5
 800528a:	0028      	movs	r0, r5
 800528c:	bd70      	pop	{r4, r5, r6, pc}
 800528e:	46c0      	nop			; (mov r8, r8)
 8005290:	20000404 	.word	0x20000404

08005294 <_malloc_r>:
 8005294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005296:	2203      	movs	r2, #3
 8005298:	1ccb      	adds	r3, r1, #3
 800529a:	4393      	bics	r3, r2
 800529c:	3308      	adds	r3, #8
 800529e:	0006      	movs	r6, r0
 80052a0:	001f      	movs	r7, r3
 80052a2:	2b0c      	cmp	r3, #12
 80052a4:	d238      	bcs.n	8005318 <_malloc_r+0x84>
 80052a6:	270c      	movs	r7, #12
 80052a8:	42b9      	cmp	r1, r7
 80052aa:	d837      	bhi.n	800531c <_malloc_r+0x88>
 80052ac:	0030      	movs	r0, r6
 80052ae:	f000 f873 	bl	8005398 <__malloc_lock>
 80052b2:	4b38      	ldr	r3, [pc, #224]	; (8005394 <_malloc_r+0x100>)
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	001c      	movs	r4, r3
 80052ba:	2c00      	cmp	r4, #0
 80052bc:	d133      	bne.n	8005326 <_malloc_r+0x92>
 80052be:	0039      	movs	r1, r7
 80052c0:	0030      	movs	r0, r6
 80052c2:	f7ff ffc5 	bl	8005250 <sbrk_aligned>
 80052c6:	0004      	movs	r4, r0
 80052c8:	1c43      	adds	r3, r0, #1
 80052ca:	d15e      	bne.n	800538a <_malloc_r+0xf6>
 80052cc:	9b00      	ldr	r3, [sp, #0]
 80052ce:	681c      	ldr	r4, [r3, #0]
 80052d0:	0025      	movs	r5, r4
 80052d2:	2d00      	cmp	r5, #0
 80052d4:	d14e      	bne.n	8005374 <_malloc_r+0xe0>
 80052d6:	2c00      	cmp	r4, #0
 80052d8:	d051      	beq.n	800537e <_malloc_r+0xea>
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	0029      	movs	r1, r5
 80052de:	18e3      	adds	r3, r4, r3
 80052e0:	0030      	movs	r0, r6
 80052e2:	9301      	str	r3, [sp, #4]
 80052e4:	f000 fb5e 	bl	80059a4 <_sbrk_r>
 80052e8:	9b01      	ldr	r3, [sp, #4]
 80052ea:	4283      	cmp	r3, r0
 80052ec:	d147      	bne.n	800537e <_malloc_r+0xea>
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	0030      	movs	r0, r6
 80052f2:	1aff      	subs	r7, r7, r3
 80052f4:	0039      	movs	r1, r7
 80052f6:	f7ff ffab 	bl	8005250 <sbrk_aligned>
 80052fa:	3001      	adds	r0, #1
 80052fc:	d03f      	beq.n	800537e <_malloc_r+0xea>
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	19db      	adds	r3, r3, r7
 8005302:	6023      	str	r3, [r4, #0]
 8005304:	9b00      	ldr	r3, [sp, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d040      	beq.n	800538e <_malloc_r+0xfa>
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	42a2      	cmp	r2, r4
 8005310:	d133      	bne.n	800537a <_malloc_r+0xe6>
 8005312:	2200      	movs	r2, #0
 8005314:	605a      	str	r2, [r3, #4]
 8005316:	e014      	b.n	8005342 <_malloc_r+0xae>
 8005318:	2b00      	cmp	r3, #0
 800531a:	dac5      	bge.n	80052a8 <_malloc_r+0x14>
 800531c:	230c      	movs	r3, #12
 800531e:	2500      	movs	r5, #0
 8005320:	6033      	str	r3, [r6, #0]
 8005322:	0028      	movs	r0, r5
 8005324:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005326:	6821      	ldr	r1, [r4, #0]
 8005328:	1bc9      	subs	r1, r1, r7
 800532a:	d420      	bmi.n	800536e <_malloc_r+0xda>
 800532c:	290b      	cmp	r1, #11
 800532e:	d918      	bls.n	8005362 <_malloc_r+0xce>
 8005330:	19e2      	adds	r2, r4, r7
 8005332:	6027      	str	r7, [r4, #0]
 8005334:	42a3      	cmp	r3, r4
 8005336:	d112      	bne.n	800535e <_malloc_r+0xca>
 8005338:	9b00      	ldr	r3, [sp, #0]
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	6863      	ldr	r3, [r4, #4]
 800533e:	6011      	str	r1, [r2, #0]
 8005340:	6053      	str	r3, [r2, #4]
 8005342:	0030      	movs	r0, r6
 8005344:	0025      	movs	r5, r4
 8005346:	f000 f82f 	bl	80053a8 <__malloc_unlock>
 800534a:	2207      	movs	r2, #7
 800534c:	350b      	adds	r5, #11
 800534e:	1d23      	adds	r3, r4, #4
 8005350:	4395      	bics	r5, r2
 8005352:	1aea      	subs	r2, r5, r3
 8005354:	429d      	cmp	r5, r3
 8005356:	d0e4      	beq.n	8005322 <_malloc_r+0x8e>
 8005358:	1b5b      	subs	r3, r3, r5
 800535a:	50a3      	str	r3, [r4, r2]
 800535c:	e7e1      	b.n	8005322 <_malloc_r+0x8e>
 800535e:	605a      	str	r2, [r3, #4]
 8005360:	e7ec      	b.n	800533c <_malloc_r+0xa8>
 8005362:	6862      	ldr	r2, [r4, #4]
 8005364:	42a3      	cmp	r3, r4
 8005366:	d1d5      	bne.n	8005314 <_malloc_r+0x80>
 8005368:	9b00      	ldr	r3, [sp, #0]
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	e7e9      	b.n	8005342 <_malloc_r+0xae>
 800536e:	0023      	movs	r3, r4
 8005370:	6864      	ldr	r4, [r4, #4]
 8005372:	e7a2      	b.n	80052ba <_malloc_r+0x26>
 8005374:	002c      	movs	r4, r5
 8005376:	686d      	ldr	r5, [r5, #4]
 8005378:	e7ab      	b.n	80052d2 <_malloc_r+0x3e>
 800537a:	0013      	movs	r3, r2
 800537c:	e7c4      	b.n	8005308 <_malloc_r+0x74>
 800537e:	230c      	movs	r3, #12
 8005380:	0030      	movs	r0, r6
 8005382:	6033      	str	r3, [r6, #0]
 8005384:	f000 f810 	bl	80053a8 <__malloc_unlock>
 8005388:	e7cb      	b.n	8005322 <_malloc_r+0x8e>
 800538a:	6027      	str	r7, [r4, #0]
 800538c:	e7d9      	b.n	8005342 <_malloc_r+0xae>
 800538e:	605b      	str	r3, [r3, #4]
 8005390:	deff      	udf	#255	; 0xff
 8005392:	46c0      	nop			; (mov r8, r8)
 8005394:	20000400 	.word	0x20000400

08005398 <__malloc_lock>:
 8005398:	b510      	push	{r4, lr}
 800539a:	4802      	ldr	r0, [pc, #8]	; (80053a4 <__malloc_lock+0xc>)
 800539c:	f7ff ff0c 	bl	80051b8 <__retarget_lock_acquire_recursive>
 80053a0:	bd10      	pop	{r4, pc}
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	200003fc 	.word	0x200003fc

080053a8 <__malloc_unlock>:
 80053a8:	b510      	push	{r4, lr}
 80053aa:	4802      	ldr	r0, [pc, #8]	; (80053b4 <__malloc_unlock+0xc>)
 80053ac:	f7ff ff05 	bl	80051ba <__retarget_lock_release_recursive>
 80053b0:	bd10      	pop	{r4, pc}
 80053b2:	46c0      	nop			; (mov r8, r8)
 80053b4:	200003fc 	.word	0x200003fc

080053b8 <__ssputs_r>:
 80053b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ba:	b085      	sub	sp, #20
 80053bc:	9301      	str	r3, [sp, #4]
 80053be:	9203      	str	r2, [sp, #12]
 80053c0:	688e      	ldr	r6, [r1, #8]
 80053c2:	9a01      	ldr	r2, [sp, #4]
 80053c4:	0007      	movs	r7, r0
 80053c6:	000c      	movs	r4, r1
 80053c8:	680b      	ldr	r3, [r1, #0]
 80053ca:	4296      	cmp	r6, r2
 80053cc:	d831      	bhi.n	8005432 <__ssputs_r+0x7a>
 80053ce:	898a      	ldrh	r2, [r1, #12]
 80053d0:	2190      	movs	r1, #144	; 0x90
 80053d2:	00c9      	lsls	r1, r1, #3
 80053d4:	420a      	tst	r2, r1
 80053d6:	d029      	beq.n	800542c <__ssputs_r+0x74>
 80053d8:	2003      	movs	r0, #3
 80053da:	6921      	ldr	r1, [r4, #16]
 80053dc:	1a5b      	subs	r3, r3, r1
 80053de:	9302      	str	r3, [sp, #8]
 80053e0:	6963      	ldr	r3, [r4, #20]
 80053e2:	4343      	muls	r3, r0
 80053e4:	0fdd      	lsrs	r5, r3, #31
 80053e6:	18ed      	adds	r5, r5, r3
 80053e8:	9b01      	ldr	r3, [sp, #4]
 80053ea:	9802      	ldr	r0, [sp, #8]
 80053ec:	3301      	adds	r3, #1
 80053ee:	181b      	adds	r3, r3, r0
 80053f0:	106d      	asrs	r5, r5, #1
 80053f2:	42ab      	cmp	r3, r5
 80053f4:	d900      	bls.n	80053f8 <__ssputs_r+0x40>
 80053f6:	001d      	movs	r5, r3
 80053f8:	0552      	lsls	r2, r2, #21
 80053fa:	d529      	bpl.n	8005450 <__ssputs_r+0x98>
 80053fc:	0029      	movs	r1, r5
 80053fe:	0038      	movs	r0, r7
 8005400:	f7ff ff48 	bl	8005294 <_malloc_r>
 8005404:	1e06      	subs	r6, r0, #0
 8005406:	d02d      	beq.n	8005464 <__ssputs_r+0xac>
 8005408:	9a02      	ldr	r2, [sp, #8]
 800540a:	6921      	ldr	r1, [r4, #16]
 800540c:	f000 fae7 	bl	80059de <memcpy>
 8005410:	89a2      	ldrh	r2, [r4, #12]
 8005412:	4b19      	ldr	r3, [pc, #100]	; (8005478 <__ssputs_r+0xc0>)
 8005414:	401a      	ands	r2, r3
 8005416:	2380      	movs	r3, #128	; 0x80
 8005418:	4313      	orrs	r3, r2
 800541a:	81a3      	strh	r3, [r4, #12]
 800541c:	9b02      	ldr	r3, [sp, #8]
 800541e:	6126      	str	r6, [r4, #16]
 8005420:	18f6      	adds	r6, r6, r3
 8005422:	6026      	str	r6, [r4, #0]
 8005424:	6165      	str	r5, [r4, #20]
 8005426:	9e01      	ldr	r6, [sp, #4]
 8005428:	1aed      	subs	r5, r5, r3
 800542a:	60a5      	str	r5, [r4, #8]
 800542c:	9b01      	ldr	r3, [sp, #4]
 800542e:	429e      	cmp	r6, r3
 8005430:	d900      	bls.n	8005434 <__ssputs_r+0x7c>
 8005432:	9e01      	ldr	r6, [sp, #4]
 8005434:	0032      	movs	r2, r6
 8005436:	9903      	ldr	r1, [sp, #12]
 8005438:	6820      	ldr	r0, [r4, #0]
 800543a:	f000 fa9f 	bl	800597c <memmove>
 800543e:	2000      	movs	r0, #0
 8005440:	68a3      	ldr	r3, [r4, #8]
 8005442:	1b9b      	subs	r3, r3, r6
 8005444:	60a3      	str	r3, [r4, #8]
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	199b      	adds	r3, r3, r6
 800544a:	6023      	str	r3, [r4, #0]
 800544c:	b005      	add	sp, #20
 800544e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005450:	002a      	movs	r2, r5
 8005452:	0038      	movs	r0, r7
 8005454:	f000 facc 	bl	80059f0 <_realloc_r>
 8005458:	1e06      	subs	r6, r0, #0
 800545a:	d1df      	bne.n	800541c <__ssputs_r+0x64>
 800545c:	0038      	movs	r0, r7
 800545e:	6921      	ldr	r1, [r4, #16]
 8005460:	f7ff feac 	bl	80051bc <_free_r>
 8005464:	230c      	movs	r3, #12
 8005466:	2001      	movs	r0, #1
 8005468:	603b      	str	r3, [r7, #0]
 800546a:	89a2      	ldrh	r2, [r4, #12]
 800546c:	3334      	adds	r3, #52	; 0x34
 800546e:	4313      	orrs	r3, r2
 8005470:	81a3      	strh	r3, [r4, #12]
 8005472:	4240      	negs	r0, r0
 8005474:	e7ea      	b.n	800544c <__ssputs_r+0x94>
 8005476:	46c0      	nop			; (mov r8, r8)
 8005478:	fffffb7f 	.word	0xfffffb7f

0800547c <_svfiprintf_r>:
 800547c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800547e:	b0a1      	sub	sp, #132	; 0x84
 8005480:	9003      	str	r0, [sp, #12]
 8005482:	001d      	movs	r5, r3
 8005484:	898b      	ldrh	r3, [r1, #12]
 8005486:	000f      	movs	r7, r1
 8005488:	0016      	movs	r6, r2
 800548a:	061b      	lsls	r3, r3, #24
 800548c:	d511      	bpl.n	80054b2 <_svfiprintf_r+0x36>
 800548e:	690b      	ldr	r3, [r1, #16]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10e      	bne.n	80054b2 <_svfiprintf_r+0x36>
 8005494:	2140      	movs	r1, #64	; 0x40
 8005496:	f7ff fefd 	bl	8005294 <_malloc_r>
 800549a:	6038      	str	r0, [r7, #0]
 800549c:	6138      	str	r0, [r7, #16]
 800549e:	2800      	cmp	r0, #0
 80054a0:	d105      	bne.n	80054ae <_svfiprintf_r+0x32>
 80054a2:	230c      	movs	r3, #12
 80054a4:	9a03      	ldr	r2, [sp, #12]
 80054a6:	3801      	subs	r0, #1
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	b021      	add	sp, #132	; 0x84
 80054ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054ae:	2340      	movs	r3, #64	; 0x40
 80054b0:	617b      	str	r3, [r7, #20]
 80054b2:	2300      	movs	r3, #0
 80054b4:	ac08      	add	r4, sp, #32
 80054b6:	6163      	str	r3, [r4, #20]
 80054b8:	3320      	adds	r3, #32
 80054ba:	7663      	strb	r3, [r4, #25]
 80054bc:	3310      	adds	r3, #16
 80054be:	76a3      	strb	r3, [r4, #26]
 80054c0:	9507      	str	r5, [sp, #28]
 80054c2:	0035      	movs	r5, r6
 80054c4:	782b      	ldrb	r3, [r5, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <_svfiprintf_r+0x52>
 80054ca:	2b25      	cmp	r3, #37	; 0x25
 80054cc:	d148      	bne.n	8005560 <_svfiprintf_r+0xe4>
 80054ce:	1bab      	subs	r3, r5, r6
 80054d0:	9305      	str	r3, [sp, #20]
 80054d2:	42b5      	cmp	r5, r6
 80054d4:	d00b      	beq.n	80054ee <_svfiprintf_r+0x72>
 80054d6:	0032      	movs	r2, r6
 80054d8:	0039      	movs	r1, r7
 80054da:	9803      	ldr	r0, [sp, #12]
 80054dc:	f7ff ff6c 	bl	80053b8 <__ssputs_r>
 80054e0:	3001      	adds	r0, #1
 80054e2:	d100      	bne.n	80054e6 <_svfiprintf_r+0x6a>
 80054e4:	e0af      	b.n	8005646 <_svfiprintf_r+0x1ca>
 80054e6:	6963      	ldr	r3, [r4, #20]
 80054e8:	9a05      	ldr	r2, [sp, #20]
 80054ea:	189b      	adds	r3, r3, r2
 80054ec:	6163      	str	r3, [r4, #20]
 80054ee:	782b      	ldrb	r3, [r5, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d100      	bne.n	80054f6 <_svfiprintf_r+0x7a>
 80054f4:	e0a7      	b.n	8005646 <_svfiprintf_r+0x1ca>
 80054f6:	2201      	movs	r2, #1
 80054f8:	2300      	movs	r3, #0
 80054fa:	4252      	negs	r2, r2
 80054fc:	6062      	str	r2, [r4, #4]
 80054fe:	a904      	add	r1, sp, #16
 8005500:	3254      	adds	r2, #84	; 0x54
 8005502:	1852      	adds	r2, r2, r1
 8005504:	1c6e      	adds	r6, r5, #1
 8005506:	6023      	str	r3, [r4, #0]
 8005508:	60e3      	str	r3, [r4, #12]
 800550a:	60a3      	str	r3, [r4, #8]
 800550c:	7013      	strb	r3, [r2, #0]
 800550e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005510:	4b55      	ldr	r3, [pc, #340]	; (8005668 <_svfiprintf_r+0x1ec>)
 8005512:	2205      	movs	r2, #5
 8005514:	0018      	movs	r0, r3
 8005516:	7831      	ldrb	r1, [r6, #0]
 8005518:	9305      	str	r3, [sp, #20]
 800551a:	f000 fa55 	bl	80059c8 <memchr>
 800551e:	1c75      	adds	r5, r6, #1
 8005520:	2800      	cmp	r0, #0
 8005522:	d11f      	bne.n	8005564 <_svfiprintf_r+0xe8>
 8005524:	6822      	ldr	r2, [r4, #0]
 8005526:	06d3      	lsls	r3, r2, #27
 8005528:	d504      	bpl.n	8005534 <_svfiprintf_r+0xb8>
 800552a:	2353      	movs	r3, #83	; 0x53
 800552c:	a904      	add	r1, sp, #16
 800552e:	185b      	adds	r3, r3, r1
 8005530:	2120      	movs	r1, #32
 8005532:	7019      	strb	r1, [r3, #0]
 8005534:	0713      	lsls	r3, r2, #28
 8005536:	d504      	bpl.n	8005542 <_svfiprintf_r+0xc6>
 8005538:	2353      	movs	r3, #83	; 0x53
 800553a:	a904      	add	r1, sp, #16
 800553c:	185b      	adds	r3, r3, r1
 800553e:	212b      	movs	r1, #43	; 0x2b
 8005540:	7019      	strb	r1, [r3, #0]
 8005542:	7833      	ldrb	r3, [r6, #0]
 8005544:	2b2a      	cmp	r3, #42	; 0x2a
 8005546:	d016      	beq.n	8005576 <_svfiprintf_r+0xfa>
 8005548:	0035      	movs	r5, r6
 800554a:	2100      	movs	r1, #0
 800554c:	200a      	movs	r0, #10
 800554e:	68e3      	ldr	r3, [r4, #12]
 8005550:	782a      	ldrb	r2, [r5, #0]
 8005552:	1c6e      	adds	r6, r5, #1
 8005554:	3a30      	subs	r2, #48	; 0x30
 8005556:	2a09      	cmp	r2, #9
 8005558:	d94e      	bls.n	80055f8 <_svfiprintf_r+0x17c>
 800555a:	2900      	cmp	r1, #0
 800555c:	d111      	bne.n	8005582 <_svfiprintf_r+0x106>
 800555e:	e017      	b.n	8005590 <_svfiprintf_r+0x114>
 8005560:	3501      	adds	r5, #1
 8005562:	e7af      	b.n	80054c4 <_svfiprintf_r+0x48>
 8005564:	9b05      	ldr	r3, [sp, #20]
 8005566:	6822      	ldr	r2, [r4, #0]
 8005568:	1ac0      	subs	r0, r0, r3
 800556a:	2301      	movs	r3, #1
 800556c:	4083      	lsls	r3, r0
 800556e:	4313      	orrs	r3, r2
 8005570:	002e      	movs	r6, r5
 8005572:	6023      	str	r3, [r4, #0]
 8005574:	e7cc      	b.n	8005510 <_svfiprintf_r+0x94>
 8005576:	9b07      	ldr	r3, [sp, #28]
 8005578:	1d19      	adds	r1, r3, #4
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	9107      	str	r1, [sp, #28]
 800557e:	2b00      	cmp	r3, #0
 8005580:	db01      	blt.n	8005586 <_svfiprintf_r+0x10a>
 8005582:	930b      	str	r3, [sp, #44]	; 0x2c
 8005584:	e004      	b.n	8005590 <_svfiprintf_r+0x114>
 8005586:	425b      	negs	r3, r3
 8005588:	60e3      	str	r3, [r4, #12]
 800558a:	2302      	movs	r3, #2
 800558c:	4313      	orrs	r3, r2
 800558e:	6023      	str	r3, [r4, #0]
 8005590:	782b      	ldrb	r3, [r5, #0]
 8005592:	2b2e      	cmp	r3, #46	; 0x2e
 8005594:	d10a      	bne.n	80055ac <_svfiprintf_r+0x130>
 8005596:	786b      	ldrb	r3, [r5, #1]
 8005598:	2b2a      	cmp	r3, #42	; 0x2a
 800559a:	d135      	bne.n	8005608 <_svfiprintf_r+0x18c>
 800559c:	9b07      	ldr	r3, [sp, #28]
 800559e:	3502      	adds	r5, #2
 80055a0:	1d1a      	adds	r2, r3, #4
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	9207      	str	r2, [sp, #28]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	db2b      	blt.n	8005602 <_svfiprintf_r+0x186>
 80055aa:	9309      	str	r3, [sp, #36]	; 0x24
 80055ac:	4e2f      	ldr	r6, [pc, #188]	; (800566c <_svfiprintf_r+0x1f0>)
 80055ae:	2203      	movs	r2, #3
 80055b0:	0030      	movs	r0, r6
 80055b2:	7829      	ldrb	r1, [r5, #0]
 80055b4:	f000 fa08 	bl	80059c8 <memchr>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d006      	beq.n	80055ca <_svfiprintf_r+0x14e>
 80055bc:	2340      	movs	r3, #64	; 0x40
 80055be:	1b80      	subs	r0, r0, r6
 80055c0:	4083      	lsls	r3, r0
 80055c2:	6822      	ldr	r2, [r4, #0]
 80055c4:	3501      	adds	r5, #1
 80055c6:	4313      	orrs	r3, r2
 80055c8:	6023      	str	r3, [r4, #0]
 80055ca:	7829      	ldrb	r1, [r5, #0]
 80055cc:	2206      	movs	r2, #6
 80055ce:	4828      	ldr	r0, [pc, #160]	; (8005670 <_svfiprintf_r+0x1f4>)
 80055d0:	1c6e      	adds	r6, r5, #1
 80055d2:	7621      	strb	r1, [r4, #24]
 80055d4:	f000 f9f8 	bl	80059c8 <memchr>
 80055d8:	2800      	cmp	r0, #0
 80055da:	d03c      	beq.n	8005656 <_svfiprintf_r+0x1da>
 80055dc:	4b25      	ldr	r3, [pc, #148]	; (8005674 <_svfiprintf_r+0x1f8>)
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d125      	bne.n	800562e <_svfiprintf_r+0x1b2>
 80055e2:	2207      	movs	r2, #7
 80055e4:	9b07      	ldr	r3, [sp, #28]
 80055e6:	3307      	adds	r3, #7
 80055e8:	4393      	bics	r3, r2
 80055ea:	3308      	adds	r3, #8
 80055ec:	9307      	str	r3, [sp, #28]
 80055ee:	6963      	ldr	r3, [r4, #20]
 80055f0:	9a04      	ldr	r2, [sp, #16]
 80055f2:	189b      	adds	r3, r3, r2
 80055f4:	6163      	str	r3, [r4, #20]
 80055f6:	e764      	b.n	80054c2 <_svfiprintf_r+0x46>
 80055f8:	4343      	muls	r3, r0
 80055fa:	0035      	movs	r5, r6
 80055fc:	2101      	movs	r1, #1
 80055fe:	189b      	adds	r3, r3, r2
 8005600:	e7a6      	b.n	8005550 <_svfiprintf_r+0xd4>
 8005602:	2301      	movs	r3, #1
 8005604:	425b      	negs	r3, r3
 8005606:	e7d0      	b.n	80055aa <_svfiprintf_r+0x12e>
 8005608:	2300      	movs	r3, #0
 800560a:	200a      	movs	r0, #10
 800560c:	001a      	movs	r2, r3
 800560e:	3501      	adds	r5, #1
 8005610:	6063      	str	r3, [r4, #4]
 8005612:	7829      	ldrb	r1, [r5, #0]
 8005614:	1c6e      	adds	r6, r5, #1
 8005616:	3930      	subs	r1, #48	; 0x30
 8005618:	2909      	cmp	r1, #9
 800561a:	d903      	bls.n	8005624 <_svfiprintf_r+0x1a8>
 800561c:	2b00      	cmp	r3, #0
 800561e:	d0c5      	beq.n	80055ac <_svfiprintf_r+0x130>
 8005620:	9209      	str	r2, [sp, #36]	; 0x24
 8005622:	e7c3      	b.n	80055ac <_svfiprintf_r+0x130>
 8005624:	4342      	muls	r2, r0
 8005626:	0035      	movs	r5, r6
 8005628:	2301      	movs	r3, #1
 800562a:	1852      	adds	r2, r2, r1
 800562c:	e7f1      	b.n	8005612 <_svfiprintf_r+0x196>
 800562e:	aa07      	add	r2, sp, #28
 8005630:	9200      	str	r2, [sp, #0]
 8005632:	0021      	movs	r1, r4
 8005634:	003a      	movs	r2, r7
 8005636:	4b10      	ldr	r3, [pc, #64]	; (8005678 <_svfiprintf_r+0x1fc>)
 8005638:	9803      	ldr	r0, [sp, #12]
 800563a:	e000      	b.n	800563e <_svfiprintf_r+0x1c2>
 800563c:	bf00      	nop
 800563e:	9004      	str	r0, [sp, #16]
 8005640:	9b04      	ldr	r3, [sp, #16]
 8005642:	3301      	adds	r3, #1
 8005644:	d1d3      	bne.n	80055ee <_svfiprintf_r+0x172>
 8005646:	89bb      	ldrh	r3, [r7, #12]
 8005648:	980d      	ldr	r0, [sp, #52]	; 0x34
 800564a:	065b      	lsls	r3, r3, #25
 800564c:	d400      	bmi.n	8005650 <_svfiprintf_r+0x1d4>
 800564e:	e72c      	b.n	80054aa <_svfiprintf_r+0x2e>
 8005650:	2001      	movs	r0, #1
 8005652:	4240      	negs	r0, r0
 8005654:	e729      	b.n	80054aa <_svfiprintf_r+0x2e>
 8005656:	aa07      	add	r2, sp, #28
 8005658:	9200      	str	r2, [sp, #0]
 800565a:	0021      	movs	r1, r4
 800565c:	003a      	movs	r2, r7
 800565e:	4b06      	ldr	r3, [pc, #24]	; (8005678 <_svfiprintf_r+0x1fc>)
 8005660:	9803      	ldr	r0, [sp, #12]
 8005662:	f000 f87b 	bl	800575c <_printf_i>
 8005666:	e7ea      	b.n	800563e <_svfiprintf_r+0x1c2>
 8005668:	08005b5c 	.word	0x08005b5c
 800566c:	08005b62 	.word	0x08005b62
 8005670:	08005b66 	.word	0x08005b66
 8005674:	00000000 	.word	0x00000000
 8005678:	080053b9 	.word	0x080053b9

0800567c <_printf_common>:
 800567c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800567e:	0016      	movs	r6, r2
 8005680:	9301      	str	r3, [sp, #4]
 8005682:	688a      	ldr	r2, [r1, #8]
 8005684:	690b      	ldr	r3, [r1, #16]
 8005686:	000c      	movs	r4, r1
 8005688:	9000      	str	r0, [sp, #0]
 800568a:	4293      	cmp	r3, r2
 800568c:	da00      	bge.n	8005690 <_printf_common+0x14>
 800568e:	0013      	movs	r3, r2
 8005690:	0022      	movs	r2, r4
 8005692:	6033      	str	r3, [r6, #0]
 8005694:	3243      	adds	r2, #67	; 0x43
 8005696:	7812      	ldrb	r2, [r2, #0]
 8005698:	2a00      	cmp	r2, #0
 800569a:	d001      	beq.n	80056a0 <_printf_common+0x24>
 800569c:	3301      	adds	r3, #1
 800569e:	6033      	str	r3, [r6, #0]
 80056a0:	6823      	ldr	r3, [r4, #0]
 80056a2:	069b      	lsls	r3, r3, #26
 80056a4:	d502      	bpl.n	80056ac <_printf_common+0x30>
 80056a6:	6833      	ldr	r3, [r6, #0]
 80056a8:	3302      	adds	r3, #2
 80056aa:	6033      	str	r3, [r6, #0]
 80056ac:	6822      	ldr	r2, [r4, #0]
 80056ae:	2306      	movs	r3, #6
 80056b0:	0015      	movs	r5, r2
 80056b2:	401d      	ands	r5, r3
 80056b4:	421a      	tst	r2, r3
 80056b6:	d027      	beq.n	8005708 <_printf_common+0x8c>
 80056b8:	0023      	movs	r3, r4
 80056ba:	3343      	adds	r3, #67	; 0x43
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	1e5a      	subs	r2, r3, #1
 80056c0:	4193      	sbcs	r3, r2
 80056c2:	6822      	ldr	r2, [r4, #0]
 80056c4:	0692      	lsls	r2, r2, #26
 80056c6:	d430      	bmi.n	800572a <_printf_common+0xae>
 80056c8:	0022      	movs	r2, r4
 80056ca:	9901      	ldr	r1, [sp, #4]
 80056cc:	9800      	ldr	r0, [sp, #0]
 80056ce:	9d08      	ldr	r5, [sp, #32]
 80056d0:	3243      	adds	r2, #67	; 0x43
 80056d2:	47a8      	blx	r5
 80056d4:	3001      	adds	r0, #1
 80056d6:	d025      	beq.n	8005724 <_printf_common+0xa8>
 80056d8:	2206      	movs	r2, #6
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	2500      	movs	r5, #0
 80056de:	4013      	ands	r3, r2
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d105      	bne.n	80056f0 <_printf_common+0x74>
 80056e4:	6833      	ldr	r3, [r6, #0]
 80056e6:	68e5      	ldr	r5, [r4, #12]
 80056e8:	1aed      	subs	r5, r5, r3
 80056ea:	43eb      	mvns	r3, r5
 80056ec:	17db      	asrs	r3, r3, #31
 80056ee:	401d      	ands	r5, r3
 80056f0:	68a3      	ldr	r3, [r4, #8]
 80056f2:	6922      	ldr	r2, [r4, #16]
 80056f4:	4293      	cmp	r3, r2
 80056f6:	dd01      	ble.n	80056fc <_printf_common+0x80>
 80056f8:	1a9b      	subs	r3, r3, r2
 80056fa:	18ed      	adds	r5, r5, r3
 80056fc:	2600      	movs	r6, #0
 80056fe:	42b5      	cmp	r5, r6
 8005700:	d120      	bne.n	8005744 <_printf_common+0xc8>
 8005702:	2000      	movs	r0, #0
 8005704:	e010      	b.n	8005728 <_printf_common+0xac>
 8005706:	3501      	adds	r5, #1
 8005708:	68e3      	ldr	r3, [r4, #12]
 800570a:	6832      	ldr	r2, [r6, #0]
 800570c:	1a9b      	subs	r3, r3, r2
 800570e:	42ab      	cmp	r3, r5
 8005710:	ddd2      	ble.n	80056b8 <_printf_common+0x3c>
 8005712:	0022      	movs	r2, r4
 8005714:	2301      	movs	r3, #1
 8005716:	9901      	ldr	r1, [sp, #4]
 8005718:	9800      	ldr	r0, [sp, #0]
 800571a:	9f08      	ldr	r7, [sp, #32]
 800571c:	3219      	adds	r2, #25
 800571e:	47b8      	blx	r7
 8005720:	3001      	adds	r0, #1
 8005722:	d1f0      	bne.n	8005706 <_printf_common+0x8a>
 8005724:	2001      	movs	r0, #1
 8005726:	4240      	negs	r0, r0
 8005728:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800572a:	2030      	movs	r0, #48	; 0x30
 800572c:	18e1      	adds	r1, r4, r3
 800572e:	3143      	adds	r1, #67	; 0x43
 8005730:	7008      	strb	r0, [r1, #0]
 8005732:	0021      	movs	r1, r4
 8005734:	1c5a      	adds	r2, r3, #1
 8005736:	3145      	adds	r1, #69	; 0x45
 8005738:	7809      	ldrb	r1, [r1, #0]
 800573a:	18a2      	adds	r2, r4, r2
 800573c:	3243      	adds	r2, #67	; 0x43
 800573e:	3302      	adds	r3, #2
 8005740:	7011      	strb	r1, [r2, #0]
 8005742:	e7c1      	b.n	80056c8 <_printf_common+0x4c>
 8005744:	0022      	movs	r2, r4
 8005746:	2301      	movs	r3, #1
 8005748:	9901      	ldr	r1, [sp, #4]
 800574a:	9800      	ldr	r0, [sp, #0]
 800574c:	9f08      	ldr	r7, [sp, #32]
 800574e:	321a      	adds	r2, #26
 8005750:	47b8      	blx	r7
 8005752:	3001      	adds	r0, #1
 8005754:	d0e6      	beq.n	8005724 <_printf_common+0xa8>
 8005756:	3601      	adds	r6, #1
 8005758:	e7d1      	b.n	80056fe <_printf_common+0x82>
	...

0800575c <_printf_i>:
 800575c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800575e:	b08b      	sub	sp, #44	; 0x2c
 8005760:	9206      	str	r2, [sp, #24]
 8005762:	000a      	movs	r2, r1
 8005764:	3243      	adds	r2, #67	; 0x43
 8005766:	9307      	str	r3, [sp, #28]
 8005768:	9005      	str	r0, [sp, #20]
 800576a:	9204      	str	r2, [sp, #16]
 800576c:	7e0a      	ldrb	r2, [r1, #24]
 800576e:	000c      	movs	r4, r1
 8005770:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005772:	2a78      	cmp	r2, #120	; 0x78
 8005774:	d809      	bhi.n	800578a <_printf_i+0x2e>
 8005776:	2a62      	cmp	r2, #98	; 0x62
 8005778:	d80b      	bhi.n	8005792 <_printf_i+0x36>
 800577a:	2a00      	cmp	r2, #0
 800577c:	d100      	bne.n	8005780 <_printf_i+0x24>
 800577e:	e0be      	b.n	80058fe <_printf_i+0x1a2>
 8005780:	497c      	ldr	r1, [pc, #496]	; (8005974 <_printf_i+0x218>)
 8005782:	9103      	str	r1, [sp, #12]
 8005784:	2a58      	cmp	r2, #88	; 0x58
 8005786:	d100      	bne.n	800578a <_printf_i+0x2e>
 8005788:	e093      	b.n	80058b2 <_printf_i+0x156>
 800578a:	0026      	movs	r6, r4
 800578c:	3642      	adds	r6, #66	; 0x42
 800578e:	7032      	strb	r2, [r6, #0]
 8005790:	e022      	b.n	80057d8 <_printf_i+0x7c>
 8005792:	0010      	movs	r0, r2
 8005794:	3863      	subs	r0, #99	; 0x63
 8005796:	2815      	cmp	r0, #21
 8005798:	d8f7      	bhi.n	800578a <_printf_i+0x2e>
 800579a:	f7fa fcbd 	bl	8000118 <__gnu_thumb1_case_shi>
 800579e:	0016      	.short	0x0016
 80057a0:	fff6001f 	.word	0xfff6001f
 80057a4:	fff6fff6 	.word	0xfff6fff6
 80057a8:	001ffff6 	.word	0x001ffff6
 80057ac:	fff6fff6 	.word	0xfff6fff6
 80057b0:	fff6fff6 	.word	0xfff6fff6
 80057b4:	003600a3 	.word	0x003600a3
 80057b8:	fff60083 	.word	0xfff60083
 80057bc:	00b4fff6 	.word	0x00b4fff6
 80057c0:	0036fff6 	.word	0x0036fff6
 80057c4:	fff6fff6 	.word	0xfff6fff6
 80057c8:	0087      	.short	0x0087
 80057ca:	0026      	movs	r6, r4
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	3642      	adds	r6, #66	; 0x42
 80057d0:	1d11      	adds	r1, r2, #4
 80057d2:	6019      	str	r1, [r3, #0]
 80057d4:	6813      	ldr	r3, [r2, #0]
 80057d6:	7033      	strb	r3, [r6, #0]
 80057d8:	2301      	movs	r3, #1
 80057da:	e0a2      	b.n	8005922 <_printf_i+0x1c6>
 80057dc:	6818      	ldr	r0, [r3, #0]
 80057de:	6809      	ldr	r1, [r1, #0]
 80057e0:	1d02      	adds	r2, r0, #4
 80057e2:	060d      	lsls	r5, r1, #24
 80057e4:	d50b      	bpl.n	80057fe <_printf_i+0xa2>
 80057e6:	6805      	ldr	r5, [r0, #0]
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	2d00      	cmp	r5, #0
 80057ec:	da03      	bge.n	80057f6 <_printf_i+0x9a>
 80057ee:	232d      	movs	r3, #45	; 0x2d
 80057f0:	9a04      	ldr	r2, [sp, #16]
 80057f2:	426d      	negs	r5, r5
 80057f4:	7013      	strb	r3, [r2, #0]
 80057f6:	4b5f      	ldr	r3, [pc, #380]	; (8005974 <_printf_i+0x218>)
 80057f8:	270a      	movs	r7, #10
 80057fa:	9303      	str	r3, [sp, #12]
 80057fc:	e01b      	b.n	8005836 <_printf_i+0xda>
 80057fe:	6805      	ldr	r5, [r0, #0]
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	0649      	lsls	r1, r1, #25
 8005804:	d5f1      	bpl.n	80057ea <_printf_i+0x8e>
 8005806:	b22d      	sxth	r5, r5
 8005808:	e7ef      	b.n	80057ea <_printf_i+0x8e>
 800580a:	680d      	ldr	r5, [r1, #0]
 800580c:	6819      	ldr	r1, [r3, #0]
 800580e:	1d08      	adds	r0, r1, #4
 8005810:	6018      	str	r0, [r3, #0]
 8005812:	062e      	lsls	r6, r5, #24
 8005814:	d501      	bpl.n	800581a <_printf_i+0xbe>
 8005816:	680d      	ldr	r5, [r1, #0]
 8005818:	e003      	b.n	8005822 <_printf_i+0xc6>
 800581a:	066d      	lsls	r5, r5, #25
 800581c:	d5fb      	bpl.n	8005816 <_printf_i+0xba>
 800581e:	680d      	ldr	r5, [r1, #0]
 8005820:	b2ad      	uxth	r5, r5
 8005822:	4b54      	ldr	r3, [pc, #336]	; (8005974 <_printf_i+0x218>)
 8005824:	2708      	movs	r7, #8
 8005826:	9303      	str	r3, [sp, #12]
 8005828:	2a6f      	cmp	r2, #111	; 0x6f
 800582a:	d000      	beq.n	800582e <_printf_i+0xd2>
 800582c:	3702      	adds	r7, #2
 800582e:	0023      	movs	r3, r4
 8005830:	2200      	movs	r2, #0
 8005832:	3343      	adds	r3, #67	; 0x43
 8005834:	701a      	strb	r2, [r3, #0]
 8005836:	6863      	ldr	r3, [r4, #4]
 8005838:	60a3      	str	r3, [r4, #8]
 800583a:	2b00      	cmp	r3, #0
 800583c:	db03      	blt.n	8005846 <_printf_i+0xea>
 800583e:	2104      	movs	r1, #4
 8005840:	6822      	ldr	r2, [r4, #0]
 8005842:	438a      	bics	r2, r1
 8005844:	6022      	str	r2, [r4, #0]
 8005846:	2d00      	cmp	r5, #0
 8005848:	d102      	bne.n	8005850 <_printf_i+0xf4>
 800584a:	9e04      	ldr	r6, [sp, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00c      	beq.n	800586a <_printf_i+0x10e>
 8005850:	9e04      	ldr	r6, [sp, #16]
 8005852:	0028      	movs	r0, r5
 8005854:	0039      	movs	r1, r7
 8005856:	f7fa fcef 	bl	8000238 <__aeabi_uidivmod>
 800585a:	9b03      	ldr	r3, [sp, #12]
 800585c:	3e01      	subs	r6, #1
 800585e:	5c5b      	ldrb	r3, [r3, r1]
 8005860:	7033      	strb	r3, [r6, #0]
 8005862:	002b      	movs	r3, r5
 8005864:	0005      	movs	r5, r0
 8005866:	429f      	cmp	r7, r3
 8005868:	d9f3      	bls.n	8005852 <_printf_i+0xf6>
 800586a:	2f08      	cmp	r7, #8
 800586c:	d109      	bne.n	8005882 <_printf_i+0x126>
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	07db      	lsls	r3, r3, #31
 8005872:	d506      	bpl.n	8005882 <_printf_i+0x126>
 8005874:	6862      	ldr	r2, [r4, #4]
 8005876:	6923      	ldr	r3, [r4, #16]
 8005878:	429a      	cmp	r2, r3
 800587a:	dc02      	bgt.n	8005882 <_printf_i+0x126>
 800587c:	2330      	movs	r3, #48	; 0x30
 800587e:	3e01      	subs	r6, #1
 8005880:	7033      	strb	r3, [r6, #0]
 8005882:	9b04      	ldr	r3, [sp, #16]
 8005884:	1b9b      	subs	r3, r3, r6
 8005886:	6123      	str	r3, [r4, #16]
 8005888:	9b07      	ldr	r3, [sp, #28]
 800588a:	0021      	movs	r1, r4
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	9805      	ldr	r0, [sp, #20]
 8005890:	9b06      	ldr	r3, [sp, #24]
 8005892:	aa09      	add	r2, sp, #36	; 0x24
 8005894:	f7ff fef2 	bl	800567c <_printf_common>
 8005898:	3001      	adds	r0, #1
 800589a:	d147      	bne.n	800592c <_printf_i+0x1d0>
 800589c:	2001      	movs	r0, #1
 800589e:	4240      	negs	r0, r0
 80058a0:	b00b      	add	sp, #44	; 0x2c
 80058a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058a4:	2220      	movs	r2, #32
 80058a6:	6809      	ldr	r1, [r1, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	6022      	str	r2, [r4, #0]
 80058ac:	2278      	movs	r2, #120	; 0x78
 80058ae:	4932      	ldr	r1, [pc, #200]	; (8005978 <_printf_i+0x21c>)
 80058b0:	9103      	str	r1, [sp, #12]
 80058b2:	0021      	movs	r1, r4
 80058b4:	3145      	adds	r1, #69	; 0x45
 80058b6:	700a      	strb	r2, [r1, #0]
 80058b8:	6819      	ldr	r1, [r3, #0]
 80058ba:	6822      	ldr	r2, [r4, #0]
 80058bc:	c920      	ldmia	r1!, {r5}
 80058be:	0610      	lsls	r0, r2, #24
 80058c0:	d402      	bmi.n	80058c8 <_printf_i+0x16c>
 80058c2:	0650      	lsls	r0, r2, #25
 80058c4:	d500      	bpl.n	80058c8 <_printf_i+0x16c>
 80058c6:	b2ad      	uxth	r5, r5
 80058c8:	6019      	str	r1, [r3, #0]
 80058ca:	07d3      	lsls	r3, r2, #31
 80058cc:	d502      	bpl.n	80058d4 <_printf_i+0x178>
 80058ce:	2320      	movs	r3, #32
 80058d0:	4313      	orrs	r3, r2
 80058d2:	6023      	str	r3, [r4, #0]
 80058d4:	2710      	movs	r7, #16
 80058d6:	2d00      	cmp	r5, #0
 80058d8:	d1a9      	bne.n	800582e <_printf_i+0xd2>
 80058da:	2220      	movs	r2, #32
 80058dc:	6823      	ldr	r3, [r4, #0]
 80058de:	4393      	bics	r3, r2
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	e7a4      	b.n	800582e <_printf_i+0xd2>
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	680d      	ldr	r5, [r1, #0]
 80058e8:	1d10      	adds	r0, r2, #4
 80058ea:	6949      	ldr	r1, [r1, #20]
 80058ec:	6018      	str	r0, [r3, #0]
 80058ee:	6813      	ldr	r3, [r2, #0]
 80058f0:	062e      	lsls	r6, r5, #24
 80058f2:	d501      	bpl.n	80058f8 <_printf_i+0x19c>
 80058f4:	6019      	str	r1, [r3, #0]
 80058f6:	e002      	b.n	80058fe <_printf_i+0x1a2>
 80058f8:	066d      	lsls	r5, r5, #25
 80058fa:	d5fb      	bpl.n	80058f4 <_printf_i+0x198>
 80058fc:	8019      	strh	r1, [r3, #0]
 80058fe:	2300      	movs	r3, #0
 8005900:	9e04      	ldr	r6, [sp, #16]
 8005902:	6123      	str	r3, [r4, #16]
 8005904:	e7c0      	b.n	8005888 <_printf_i+0x12c>
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	1d11      	adds	r1, r2, #4
 800590a:	6019      	str	r1, [r3, #0]
 800590c:	6816      	ldr	r6, [r2, #0]
 800590e:	2100      	movs	r1, #0
 8005910:	0030      	movs	r0, r6
 8005912:	6862      	ldr	r2, [r4, #4]
 8005914:	f000 f858 	bl	80059c8 <memchr>
 8005918:	2800      	cmp	r0, #0
 800591a:	d001      	beq.n	8005920 <_printf_i+0x1c4>
 800591c:	1b80      	subs	r0, r0, r6
 800591e:	6060      	str	r0, [r4, #4]
 8005920:	6863      	ldr	r3, [r4, #4]
 8005922:	6123      	str	r3, [r4, #16]
 8005924:	2300      	movs	r3, #0
 8005926:	9a04      	ldr	r2, [sp, #16]
 8005928:	7013      	strb	r3, [r2, #0]
 800592a:	e7ad      	b.n	8005888 <_printf_i+0x12c>
 800592c:	0032      	movs	r2, r6
 800592e:	6923      	ldr	r3, [r4, #16]
 8005930:	9906      	ldr	r1, [sp, #24]
 8005932:	9805      	ldr	r0, [sp, #20]
 8005934:	9d07      	ldr	r5, [sp, #28]
 8005936:	47a8      	blx	r5
 8005938:	3001      	adds	r0, #1
 800593a:	d0af      	beq.n	800589c <_printf_i+0x140>
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	079b      	lsls	r3, r3, #30
 8005940:	d415      	bmi.n	800596e <_printf_i+0x212>
 8005942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005944:	68e0      	ldr	r0, [r4, #12]
 8005946:	4298      	cmp	r0, r3
 8005948:	daaa      	bge.n	80058a0 <_printf_i+0x144>
 800594a:	0018      	movs	r0, r3
 800594c:	e7a8      	b.n	80058a0 <_printf_i+0x144>
 800594e:	0022      	movs	r2, r4
 8005950:	2301      	movs	r3, #1
 8005952:	9906      	ldr	r1, [sp, #24]
 8005954:	9805      	ldr	r0, [sp, #20]
 8005956:	9e07      	ldr	r6, [sp, #28]
 8005958:	3219      	adds	r2, #25
 800595a:	47b0      	blx	r6
 800595c:	3001      	adds	r0, #1
 800595e:	d09d      	beq.n	800589c <_printf_i+0x140>
 8005960:	3501      	adds	r5, #1
 8005962:	68e3      	ldr	r3, [r4, #12]
 8005964:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005966:	1a9b      	subs	r3, r3, r2
 8005968:	42ab      	cmp	r3, r5
 800596a:	dcf0      	bgt.n	800594e <_printf_i+0x1f2>
 800596c:	e7e9      	b.n	8005942 <_printf_i+0x1e6>
 800596e:	2500      	movs	r5, #0
 8005970:	e7f7      	b.n	8005962 <_printf_i+0x206>
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	08005b6d 	.word	0x08005b6d
 8005978:	08005b7e 	.word	0x08005b7e

0800597c <memmove>:
 800597c:	b510      	push	{r4, lr}
 800597e:	4288      	cmp	r0, r1
 8005980:	d902      	bls.n	8005988 <memmove+0xc>
 8005982:	188b      	adds	r3, r1, r2
 8005984:	4298      	cmp	r0, r3
 8005986:	d303      	bcc.n	8005990 <memmove+0x14>
 8005988:	2300      	movs	r3, #0
 800598a:	e007      	b.n	800599c <memmove+0x20>
 800598c:	5c8b      	ldrb	r3, [r1, r2]
 800598e:	5483      	strb	r3, [r0, r2]
 8005990:	3a01      	subs	r2, #1
 8005992:	d2fb      	bcs.n	800598c <memmove+0x10>
 8005994:	bd10      	pop	{r4, pc}
 8005996:	5ccc      	ldrb	r4, [r1, r3]
 8005998:	54c4      	strb	r4, [r0, r3]
 800599a:	3301      	adds	r3, #1
 800599c:	429a      	cmp	r2, r3
 800599e:	d1fa      	bne.n	8005996 <memmove+0x1a>
 80059a0:	e7f8      	b.n	8005994 <memmove+0x18>
	...

080059a4 <_sbrk_r>:
 80059a4:	2300      	movs	r3, #0
 80059a6:	b570      	push	{r4, r5, r6, lr}
 80059a8:	4d06      	ldr	r5, [pc, #24]	; (80059c4 <_sbrk_r+0x20>)
 80059aa:	0004      	movs	r4, r0
 80059ac:	0008      	movs	r0, r1
 80059ae:	602b      	str	r3, [r5, #0]
 80059b0:	f7fb fa92 	bl	8000ed8 <_sbrk>
 80059b4:	1c43      	adds	r3, r0, #1
 80059b6:	d103      	bne.n	80059c0 <_sbrk_r+0x1c>
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d000      	beq.n	80059c0 <_sbrk_r+0x1c>
 80059be:	6023      	str	r3, [r4, #0]
 80059c0:	bd70      	pop	{r4, r5, r6, pc}
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	200003f8 	.word	0x200003f8

080059c8 <memchr>:
 80059c8:	b2c9      	uxtb	r1, r1
 80059ca:	1882      	adds	r2, r0, r2
 80059cc:	4290      	cmp	r0, r2
 80059ce:	d101      	bne.n	80059d4 <memchr+0xc>
 80059d0:	2000      	movs	r0, #0
 80059d2:	4770      	bx	lr
 80059d4:	7803      	ldrb	r3, [r0, #0]
 80059d6:	428b      	cmp	r3, r1
 80059d8:	d0fb      	beq.n	80059d2 <memchr+0xa>
 80059da:	3001      	adds	r0, #1
 80059dc:	e7f6      	b.n	80059cc <memchr+0x4>

080059de <memcpy>:
 80059de:	2300      	movs	r3, #0
 80059e0:	b510      	push	{r4, lr}
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d100      	bne.n	80059e8 <memcpy+0xa>
 80059e6:	bd10      	pop	{r4, pc}
 80059e8:	5ccc      	ldrb	r4, [r1, r3]
 80059ea:	54c4      	strb	r4, [r0, r3]
 80059ec:	3301      	adds	r3, #1
 80059ee:	e7f8      	b.n	80059e2 <memcpy+0x4>

080059f0 <_realloc_r>:
 80059f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059f2:	0007      	movs	r7, r0
 80059f4:	000e      	movs	r6, r1
 80059f6:	0014      	movs	r4, r2
 80059f8:	2900      	cmp	r1, #0
 80059fa:	d105      	bne.n	8005a08 <_realloc_r+0x18>
 80059fc:	0011      	movs	r1, r2
 80059fe:	f7ff fc49 	bl	8005294 <_malloc_r>
 8005a02:	0005      	movs	r5, r0
 8005a04:	0028      	movs	r0, r5
 8005a06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a08:	2a00      	cmp	r2, #0
 8005a0a:	d103      	bne.n	8005a14 <_realloc_r+0x24>
 8005a0c:	f7ff fbd6 	bl	80051bc <_free_r>
 8005a10:	0025      	movs	r5, r4
 8005a12:	e7f7      	b.n	8005a04 <_realloc_r+0x14>
 8005a14:	f000 f81b 	bl	8005a4e <_malloc_usable_size_r>
 8005a18:	9001      	str	r0, [sp, #4]
 8005a1a:	4284      	cmp	r4, r0
 8005a1c:	d803      	bhi.n	8005a26 <_realloc_r+0x36>
 8005a1e:	0035      	movs	r5, r6
 8005a20:	0843      	lsrs	r3, r0, #1
 8005a22:	42a3      	cmp	r3, r4
 8005a24:	d3ee      	bcc.n	8005a04 <_realloc_r+0x14>
 8005a26:	0021      	movs	r1, r4
 8005a28:	0038      	movs	r0, r7
 8005a2a:	f7ff fc33 	bl	8005294 <_malloc_r>
 8005a2e:	1e05      	subs	r5, r0, #0
 8005a30:	d0e8      	beq.n	8005a04 <_realloc_r+0x14>
 8005a32:	9b01      	ldr	r3, [sp, #4]
 8005a34:	0022      	movs	r2, r4
 8005a36:	429c      	cmp	r4, r3
 8005a38:	d900      	bls.n	8005a3c <_realloc_r+0x4c>
 8005a3a:	001a      	movs	r2, r3
 8005a3c:	0031      	movs	r1, r6
 8005a3e:	0028      	movs	r0, r5
 8005a40:	f7ff ffcd 	bl	80059de <memcpy>
 8005a44:	0031      	movs	r1, r6
 8005a46:	0038      	movs	r0, r7
 8005a48:	f7ff fbb8 	bl	80051bc <_free_r>
 8005a4c:	e7da      	b.n	8005a04 <_realloc_r+0x14>

08005a4e <_malloc_usable_size_r>:
 8005a4e:	1f0b      	subs	r3, r1, #4
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	1f18      	subs	r0, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	da01      	bge.n	8005a5c <_malloc_usable_size_r+0xe>
 8005a58:	580b      	ldr	r3, [r1, r0]
 8005a5a:	18c0      	adds	r0, r0, r3
 8005a5c:	4770      	bx	lr
	...

08005a60 <_init>:
 8005a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a62:	46c0      	nop			; (mov r8, r8)
 8005a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a66:	bc08      	pop	{r3}
 8005a68:	469e      	mov	lr, r3
 8005a6a:	4770      	bx	lr

08005a6c <_fini>:
 8005a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6e:	46c0      	nop			; (mov r8, r8)
 8005a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a72:	bc08      	pop	{r3}
 8005a74:	469e      	mov	lr, r3
 8005a76:	4770      	bx	lr
