
Project 11 - BMX160_IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bae4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800bc74  0800bc74  0001bc74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcdc  0800bcdc  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcdc  0800bcdc  0001bcdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bce4  0800bce4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bce4  0800bce4  0001bce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bce8  0800bce8  0001bce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800bcec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000ad0  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b50  20000b50  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e205  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000046b0  00000000  00000000  0003e2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019d0  00000000  00000000  000429a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001418  00000000  00000000  00044378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000265a4  00000000  00000000  00045790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000227d4  00000000  00000000  0006bd34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000da1a9  00000000  00000000  0008e508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007324  00000000  00000000  001686b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  0016f9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bc5c 	.word	0x0800bc5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800bc5c 	.word	0x0800bc5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <i2c_write>:

uint8_t BMI160_WRITE_ADDRESS = 0x68 << 1;
uint8_t BMI160_READ_ADDRESS = (0x68 << 1) + 1;

//BMI160 low level functions
void i2c_write(I2C_HandleTypeDef* handle, uint8_t address, uint8_t reg_address, uint8_t data) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af02      	add	r7, sp, #8
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	4608      	mov	r0, r1
 8000586:	4611      	mov	r1, r2
 8000588:	461a      	mov	r2, r3
 800058a:	4603      	mov	r3, r0
 800058c:	70fb      	strb	r3, [r7, #3]
 800058e:	460b      	mov	r3, r1
 8000590:	70bb      	strb	r3, [r7, #2]
 8000592:	4613      	mov	r3, r2
 8000594:	707b      	strb	r3, [r7, #1]
    uint8_t buffer[2];
    buffer[0] = reg_address;
 8000596:	78bb      	ldrb	r3, [r7, #2]
 8000598:	733b      	strb	r3, [r7, #12]
    buffer[1] = data;
 800059a:	787b      	ldrb	r3, [r7, #1]
 800059c:	737b      	strb	r3, [r7, #13]

    HAL_I2C_Master_Transmit(handle, address, buffer, 2, HAL_MAX_DELAY);
 800059e:	78fb      	ldrb	r3, [r7, #3]
 80005a0:	b299      	uxth	r1, r3
 80005a2:	f107 020c 	add.w	r2, r7, #12
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2302      	movs	r3, #2
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f003 f91e 	bl	80037f0 <HAL_I2C_Master_Transmit>
}
 80005b4:	bf00      	nop
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <i2c_read>:

void i2c_read(I2C_HandleTypeDef* handle, uint8_t address, uint8_t reg_address, uint8_t *data, uint8_t length) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af04      	add	r7, sp, #16
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	460b      	mov	r3, r1
 80005c8:	72fb      	strb	r3, [r7, #11]
 80005ca:	4613      	mov	r3, r2
 80005cc:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Read(handle, address, reg_address, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 80005ce:	7afb      	ldrb	r3, [r7, #11]
 80005d0:	b299      	uxth	r1, r3
 80005d2:	7abb      	ldrb	r3, [r7, #10]
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	7e3b      	ldrb	r3, [r7, #24]
 80005d8:	b29b      	uxth	r3, r3
 80005da:	f04f 30ff 	mov.w	r0, #4294967295
 80005de:	9002      	str	r0, [sp, #8]
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2301      	movs	r3, #1
 80005e8:	68f8      	ldr	r0, [r7, #12]
 80005ea:	f003 f9ff 	bl	80039ec <HAL_I2C_Mem_Read>
}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <BMI160_Check>:

//BMI160 user functions

//Check connection
uint8_t BMI160_Check(I2C_HandleTypeDef* handle){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(handle, BMI160_WRITE_ADDRESS, 1, 10) && HAL_I2C_IsDeviceReady(handle, BMI160_READ_ADDRESS, 1, 10);
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <BMI160_Check+0x50>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b299      	uxth	r1, r3
 8000606:	230a      	movs	r3, #10
 8000608:	2201      	movs	r2, #1
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f003 fc14 	bl	8003e38 <HAL_I2C_IsDeviceReady>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d00c      	beq.n	8000630 <BMI160_Check+0x38>
 8000616:	4b0d      	ldr	r3, [pc, #52]	; (800064c <BMI160_Check+0x54>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	b299      	uxth	r1, r3
 800061c:	230a      	movs	r3, #10
 800061e:	2201      	movs	r2, #1
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f003 fc09 	bl	8003e38 <HAL_I2C_IsDeviceReady>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <BMI160_Check+0x38>
 800062c:	2301      	movs	r3, #1
 800062e:	e000      	b.n	8000632 <BMI160_Check+0x3a>
 8000630:	2300      	movs	r3, #0
 8000632:	73fb      	strb	r3, [r7, #15]

	if (status == HAL_OK){
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d101      	bne.n	800063e <BMI160_Check+0x46>
		return HAL_OK;
 800063a:	2300      	movs	r3, #0
 800063c:	e000      	b.n	8000640 <BMI160_Check+0x48>
	}
	else {
		return HAL_ERROR;
 800063e:	2301      	movs	r3, #1
	}
}
 8000640:	4618      	mov	r0, r3
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000000 	.word	0x20000000
 800064c:	20000001 	.word	0x20000001

08000650 <BMI160_write_uint8>:

//Write
void BMI160_write_uint8(I2C_HandleTypeDef* handle, uint8_t reg_address, uint8_t data) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	460b      	mov	r3, r1
 800065a:	70fb      	strb	r3, [r7, #3]
 800065c:	4613      	mov	r3, r2
 800065e:	70bb      	strb	r3, [r7, #2]
    i2c_write(handle, BMI160_WRITE_ADDRESS, reg_address, data);
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <BMI160_write_uint8+0x28>)
 8000662:	7819      	ldrb	r1, [r3, #0]
 8000664:	78bb      	ldrb	r3, [r7, #2]
 8000666:	78fa      	ldrb	r2, [r7, #3]
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff ff87 	bl	800057c <i2c_write>
}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000000 	.word	0x20000000

0800067c <BMI160_read_uint8>:

//Read
uint8_t BMI160_read_uint8(I2C_HandleTypeDef* handle, uint8_t reg_address) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af02      	add	r7, sp, #8
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	460b      	mov	r3, r1
 8000686:	70fb      	strb	r3, [r7, #3]
    uint8_t data;
    i2c_read(handle, BMI160_READ_ADDRESS, reg_address, &data, 1);
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <BMI160_read_uint8+0x2c>)
 800068a:	7819      	ldrb	r1, [r3, #0]
 800068c:	f107 030f 	add.w	r3, r7, #15
 8000690:	78fa      	ldrb	r2, [r7, #3]
 8000692:	2001      	movs	r0, #1
 8000694:	9000      	str	r0, [sp, #0]
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f7ff ff90 	bl	80005bc <i2c_read>
    return data;
 800069c:	7bfb      	ldrb	r3, [r7, #15]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000001 	.word	0x20000001

080006ac <BMI160_read_int16>:

int16_t BMI160_read_int16(I2C_HandleTypeDef* handle, uint8_t reg_address) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	460b      	mov	r3, r1
 80006b6:	70fb      	strb	r3, [r7, #3]
    uint8_t data[2];
    data[0] = BMI160_read_uint8(handle, reg_address);
 80006b8:	78fb      	ldrb	r3, [r7, #3]
 80006ba:	4619      	mov	r1, r3
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff ffdd 	bl	800067c <BMI160_read_uint8>
 80006c2:	4603      	mov	r3, r0
 80006c4:	733b      	strb	r3, [r7, #12]
    data[1] = BMI160_read_uint8(handle, reg_address + 1);
 80006c6:	78fb      	ldrb	r3, [r7, #3]
 80006c8:	3301      	adds	r3, #1
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	4619      	mov	r1, r3
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff ffd4 	bl	800067c <BMI160_read_uint8>
 80006d4:	4603      	mov	r3, r0
 80006d6:	737b      	strb	r3, [r7, #13]

    // Combine the two 8-bit values into a 16-bit signed integer
    int16_t result = (int16_t)((data[1] << 8) | data[0]);
 80006d8:	7b7b      	ldrb	r3, [r7, #13]
 80006da:	021b      	lsls	r3, r3, #8
 80006dc:	b21a      	sxth	r2, r3
 80006de:	7b3b      	ldrb	r3, [r7, #12]
 80006e0:	b21b      	sxth	r3, r3
 80006e2:	4313      	orrs	r3, r2
 80006e4:	81fb      	strh	r3, [r7, #14]

    return result;
 80006e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <BMI160_Init>:
	uint64_t result = (uint64_t)((uint64_t)data[2] << 16) | ((uint64_t)data[1] << 8) | data[0];

	return result;
}

void BMI160_Init(I2C_HandleTypeDef* handle){
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b082      	sub	sp, #8
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
	//System power up
	HAL_Delay(1);
 80006fa:	2001      	movs	r0, #1
 80006fc:	f000 ffac 	bl	8001658 <HAL_Delay>

	//Accelerometer
	BMI160_write_uint8(handle, BMI160_COMMAND_REG_ADDR, BMI160_ACCEL_NORMAL_MODE);
 8000700:	2211      	movs	r2, #17
 8000702:	217e      	movs	r1, #126	; 0x7e
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f7ff ffa3 	bl	8000650 <BMI160_write_uint8>
	HAL_Delay(5);
 800070a:	2005      	movs	r0, #5
 800070c:	f000 ffa4 	bl	8001658 <HAL_Delay>

	//Gyro
	BMI160_write_uint8(handle, BMI160_COMMAND_REG_ADDR, BMI160_GYRO_NORMAL_MODE);
 8000710:	2215      	movs	r2, #21
 8000712:	217e      	movs	r1, #126	; 0x7e
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f7ff ff9b 	bl	8000650 <BMI160_write_uint8>
	HAL_Delay(100);
 800071a:	2064      	movs	r0, #100	; 0x64
 800071c:	f000 ff9c 	bl	8001658 <HAL_Delay>
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <getEmptyGimbalIndex>:
	}

	return -1;
}

int8_t getEmptyGimbalIndex(){
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < MAX_GIMBAL_NUM; i++){
 800072e:	2300      	movs	r3, #0
 8000730:	71fb      	strb	r3, [r7, #7]
 8000732:	e00a      	b.n	800074a <getEmptyGimbalIndex+0x22>
		if (gimbal_symbols[i] == 0){
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <getEmptyGimbalIndex+0x38>)
 8000738:	5cd3      	ldrb	r3, [r2, r3]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d102      	bne.n	8000744 <getEmptyGimbalIndex+0x1c>
			return i;
 800073e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000742:	e007      	b.n	8000754 <getEmptyGimbalIndex+0x2c>
	for (uint8_t i = 0; i < MAX_GIMBAL_NUM; i++){
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	3301      	adds	r3, #1
 8000748:	71fb      	strb	r3, [r7, #7]
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	2b1d      	cmp	r3, #29
 800074e:	d9f1      	bls.n	8000734 <getEmptyGimbalIndex+0xc>
		}
	}

	return -1;
 8000750:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000754:	4618      	mov	r0, r3
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	2000009c 	.word	0x2000009c

08000764 <initGimbals>:

	return  (uint32_t) ( ((float)(value - prev_min) / (float)(prev_max - prev_min)) * (float)(after_max - after_min) + (float) after_min);
}

//========== USER FUNCTIONS
void initGimbals(){
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < MAX_GIMBAL_NUM; i++){
 800076a:	2300      	movs	r3, #0
 800076c:	71fb      	strb	r3, [r7, #7]
 800076e:	e00f      	b.n	8000790 <initGimbals+0x2c>
		gimbal_symbols[i] = 0;
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	4a0c      	ldr	r2, [pc, #48]	; (80007a4 <initGimbals+0x40>)
 8000774:	2100      	movs	r1, #0
 8000776:	54d1      	strb	r1, [r2, r3]
		gimbal_positions[i] = 0;
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	4a0b      	ldr	r2, [pc, #44]	; (80007a8 <initGimbals+0x44>)
 800077c:	2100      	movs	r1, #0
 800077e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		gimbal_types[i] = 0;
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <initGimbals+0x48>)
 8000786:	2100      	movs	r1, #0
 8000788:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < MAX_GIMBAL_NUM; i++){
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	3301      	adds	r3, #1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2b1d      	cmp	r3, #29
 8000794:	d9ec      	bls.n	8000770 <initGimbals+0xc>
	}
}
 8000796:	bf00      	nop
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	2000009c 	.word	0x2000009c
 80007a8:	200000bc 	.word	0x200000bc
 80007ac:	20000134 	.word	0x20000134

080007b0 <registerGimbal>:

void registerGimbal(char symbol, uint8_t type){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	460a      	mov	r2, r1
 80007ba:	71fb      	strb	r3, [r7, #7]
 80007bc:	4613      	mov	r3, r2
 80007be:	71bb      	strb	r3, [r7, #6]
	//Find empty slot
	uint8_t emptyIndex = getEmptyGimbalIndex(); if (emptyIndex == -1) {return;}
 80007c0:	f7ff ffb2 	bl	8000728 <getEmptyGimbalIndex>
 80007c4:	4603      	mov	r3, r0
 80007c6:	73fb      	strb	r3, [r7, #15]

	//Assign gimbal
	gimbal_symbols[emptyIndex] = symbol;
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	490b      	ldr	r1, [pc, #44]	; (80007f8 <registerGimbal+0x48>)
 80007cc:	79fa      	ldrb	r2, [r7, #7]
 80007ce:	54ca      	strb	r2, [r1, r3]
	gimbal_positions[emptyIndex] = 600;
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <registerGimbal+0x4c>)
 80007d4:	f44f 7116 	mov.w	r1, #600	; 0x258
 80007d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	//Assign type
	if (type == ABSOLUTE_GIMBAL || type == PUSH_GIMBAL){
 80007dc:	79bb      	ldrb	r3, [r7, #6]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d002      	beq.n	80007e8 <registerGimbal+0x38>
 80007e2:	79bb      	ldrb	r3, [r7, #6]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d103      	bne.n	80007f0 <registerGimbal+0x40>
		gimbal_types[emptyIndex] = type;
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	4905      	ldr	r1, [pc, #20]	; (8000800 <registerGimbal+0x50>)
 80007ec:	79ba      	ldrb	r2, [r7, #6]
 80007ee:	54ca      	strb	r2, [r1, r3]
	}
}
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	2000009c 	.word	0x2000009c
 80007fc:	200000bc 	.word	0x200000bc
 8000800:	20000134 	.word	0x20000134

08000804 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */

uint8_t Rx_data[2];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	/*
	setGimbalPosition('X', Rx_data[0], &(TIM3->CCR1));
	setGimbalPosition('Y', Rx_data[1], &(TIM3->CCR2));
	*/

	HAL_UART_Receive_IT(&huart2, Rx_data, 2);
 800080c:	2202      	movs	r2, #2
 800080e:	4904      	ldr	r1, [pc, #16]	; (8000820 <HAL_UART_RxCpltCallback+0x1c>)
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <HAL_UART_RxCpltCallback+0x20>)
 8000812:	f006 faf8 	bl	8006e06 <HAL_UART_Receive_IT>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000031c 	.word	0x2000031c
 8000824:	200002d8 	.word	0x200002d8

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800082a:	b0a5      	sub	sp, #148	; 0x94
 800082c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082e:	f000 fea1 	bl	8001574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000832:	f000 f8d5 	bl	80009e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f000 facf 	bl	8000dd8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800083a:	f000 f93b 	bl	8000ab4 <MX_I2C1_Init>
  MX_I2S3_Init();
 800083e:	f000 f967 	bl	8000b10 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000842:	f000 f995 	bl	8000b70 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000846:	f00a fa4d 	bl	800ace4 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 800084a:	f000 fa9b 	bl	8000d84 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800084e:	f000 f9c5 	bl	8000bdc <MX_TIM1_Init>
  MX_TIM3_Init();
 8000852:	f000 fa15 	bl	8000c80 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  uint8_t connection_established = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  // Start timer
  HAL_TIM_Base_Start(&htim1);
 800085c:	4859      	ldr	r0, [pc, #356]	; (80009c4 <main+0x19c>)
 800085e:	f005 fab1 	bl	8005dc4 <HAL_TIM_Base_Start>

  uint16_t timer_prev;
  uint16_t timer_current;

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000862:	2100      	movs	r1, #0
 8000864:	4858      	ldr	r0, [pc, #352]	; (80009c8 <main+0x1a0>)
 8000866:	f005 fb6f 	bl	8005f48 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800086a:	2104      	movs	r1, #4
 800086c:	4856      	ldr	r0, [pc, #344]	; (80009c8 <main+0x1a0>)
 800086e:	f005 fb6b 	bl	8005f48 <HAL_TIM_PWM_Start>

  initGimbals();
 8000872:	f7ff ff77 	bl	8000764 <initGimbals>

  registerGimbal('X', ABSOLUTE_GIMBAL);
 8000876:	2100      	movs	r1, #0
 8000878:	2058      	movs	r0, #88	; 0x58
 800087a:	f7ff ff99 	bl	80007b0 <registerGimbal>
  registerGimbal('Y', ABSOLUTE_GIMBAL);
 800087e:	2100      	movs	r1, #0
 8000880:	2059      	movs	r0, #89	; 0x59
 8000882:	f7ff ff95 	bl	80007b0 <registerGimbal>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000886:	f00a fa53 	bl	800ad30 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    HAL_UART_Receive(&huart2, Rx_data, 2, 10);
 800088a:	230a      	movs	r3, #10
 800088c:	2202      	movs	r2, #2
 800088e:	494f      	ldr	r1, [pc, #316]	; (80009cc <main+0x1a4>)
 8000890:	484f      	ldr	r0, [pc, #316]	; (80009d0 <main+0x1a8>)
 8000892:	f006 fa16 	bl	8006cc2 <HAL_UART_Receive>
    TIM3->CCR1 = 200 + (uint32_t) Rx_data[0];
 8000896:	4b4d      	ldr	r3, [pc, #308]	; (80009cc <main+0x1a4>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	4a4e      	ldr	r2, [pc, #312]	; (80009d4 <main+0x1ac>)
 800089c:	33c8      	adds	r3, #200	; 0xc8
 800089e:	6353      	str	r3, [r2, #52]	; 0x34
    TIM3->CCR2 = 200 + (uint32_t) Rx_data[1];
 80008a0:	4b4a      	ldr	r3, [pc, #296]	; (80009cc <main+0x1a4>)
 80008a2:	785b      	ldrb	r3, [r3, #1]
 80008a4:	4a4b      	ldr	r2, [pc, #300]	; (80009d4 <main+0x1ac>)
 80008a6:	33c8      	adds	r3, #200	; 0xc8
 80008a8:	6393      	str	r3, [r2, #56]	; 0x38

    // Check connection
	if (connection_established == 0 && BMI160_Check(&hi2c1) == HAL_OK) { // Connect
 80008aa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d116      	bne.n	80008e0 <main+0xb8>
 80008b2:	4849      	ldr	r0, [pc, #292]	; (80009d8 <main+0x1b0>)
 80008b4:	f7ff fea0 	bl	80005f8 <BMI160_Check>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d110      	bne.n	80008e0 <main+0xb8>
		BMI160_Init(&hi2c1);
 80008be:	4846      	ldr	r0, [pc, #280]	; (80009d8 <main+0x1b0>)
 80008c0:	f7ff ff17 	bl	80006f2 <BMI160_Init>
		connection_established = 1;
 80008c4:	2301      	movs	r3, #1
 80008c6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

		//Restart timer
		timer_prev = __HAL_TIM_GET_COUNTER(&htim1);
 80008ca:	4b3e      	ldr	r3, [pc, #248]	; (80009c4 <main+0x19c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d0:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		timer_current = __HAL_TIM_GET_COUNTER(&htim1);
 80008d4:	4b3b      	ldr	r3, [pc, #236]	; (80009c4 <main+0x19c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008da:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 80008de:	e00c      	b.n	80008fa <main+0xd2>
	} else if (connection_established == 1 && BMI160_Check(&hi2c1) != HAL_OK) { // Disconnect
 80008e0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d108      	bne.n	80008fa <main+0xd2>
 80008e8:	483b      	ldr	r0, [pc, #236]	; (80009d8 <main+0x1b0>)
 80008ea:	f7ff fe85 	bl	80005f8 <BMI160_Check>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d002      	beq.n	80008fa <main+0xd2>
		connection_established = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	}

	if (connection_established == 1) { // Run code
 80008fa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d15b      	bne.n	80009ba <main+0x192>
		int16_t GyroX = BMI160_read_int16(&hi2c1, BMI160_GYRO_DATA_ADDR);
 8000902:	210c      	movs	r1, #12
 8000904:	4834      	ldr	r0, [pc, #208]	; (80009d8 <main+0x1b0>)
 8000906:	f7ff fed1 	bl	80006ac <BMI160_read_int16>
 800090a:	4603      	mov	r3, r0
 800090c:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		int16_t GyroY = BMI160_read_int16(&hi2c1, BMI160_GYRO_DATA_ADDR + 2);
 8000910:	210e      	movs	r1, #14
 8000912:	4831      	ldr	r0, [pc, #196]	; (80009d8 <main+0x1b0>)
 8000914:	f7ff feca 	bl	80006ac <BMI160_read_int16>
 8000918:	4603      	mov	r3, r0
 800091a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		int16_t GyroZ = BMI160_read_int16(&hi2c1, BMI160_GYRO_DATA_ADDR + 4);
 800091e:	2110      	movs	r1, #16
 8000920:	482d      	ldr	r0, [pc, #180]	; (80009d8 <main+0x1b0>)
 8000922:	f7ff fec3 	bl	80006ac <BMI160_read_int16>
 8000926:	4603      	mov	r3, r0
 8000928:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

		int16_t AccX = BMI160_read_int16(&hi2c1, BMI160_ACCEL_DATA_ADDR);
 800092c:	2112      	movs	r1, #18
 800092e:	482a      	ldr	r0, [pc, #168]	; (80009d8 <main+0x1b0>)
 8000930:	f7ff febc 	bl	80006ac <BMI160_read_int16>
 8000934:	4603      	mov	r3, r0
 8000936:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
		int16_t AccY = BMI160_read_int16(&hi2c1, BMI160_ACCEL_DATA_ADDR + 2);
 800093a:	2114      	movs	r1, #20
 800093c:	4826      	ldr	r0, [pc, #152]	; (80009d8 <main+0x1b0>)
 800093e:	f7ff feb5 	bl	80006ac <BMI160_read_int16>
 8000942:	4603      	mov	r3, r0
 8000944:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
		int16_t AccZ = BMI160_read_int16(&hi2c1, BMI160_ACCEL_DATA_ADDR + 4);
 8000948:	2116      	movs	r1, #22
 800094a:	4823      	ldr	r0, [pc, #140]	; (80009d8 <main+0x1b0>)
 800094c:	f7ff feae 	bl	80006ac <BMI160_read_int16>
 8000950:	4603      	mov	r3, r0
 8000952:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

		timer_current = __HAL_TIM_GET_COUNTER(&htim1);
 8000956:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <main+0x19c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

		char str[100];
		sprintf(str, "%d|%d|%d|%d|%d|%d|%d?", GyroX, GyroY, GyroZ, AccX, AccY, AccZ, timer_current - timer_prev);
 8000960:	f9b7 6070 	ldrsh.w	r6, [r7, #112]	; 0x70
 8000964:	f9b7 c06e 	ldrsh.w	ip, [r7, #110]	; 0x6e
 8000968:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800096c:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 8000970:	f9b7 1068 	ldrsh.w	r1, [r7, #104]	; 0x68
 8000974:	f9b7 0066 	ldrsh.w	r0, [r7, #102]	; 0x66
 8000978:	f8b7 5072 	ldrh.w	r5, [r7, #114]	; 0x72
 800097c:	f8b7 4074 	ldrh.w	r4, [r7, #116]	; 0x74
 8000980:	1b2c      	subs	r4, r5, r4
 8000982:	463d      	mov	r5, r7
 8000984:	9404      	str	r4, [sp, #16]
 8000986:	9003      	str	r0, [sp, #12]
 8000988:	9102      	str	r1, [sp, #8]
 800098a:	9201      	str	r2, [sp, #4]
 800098c:	9300      	str	r3, [sp, #0]
 800098e:	4663      	mov	r3, ip
 8000990:	4632      	mov	r2, r6
 8000992:	4912      	ldr	r1, [pc, #72]	; (80009dc <main+0x1b4>)
 8000994:	4628      	mov	r0, r5
 8000996:	f00a fd69 	bl	800b46c <siprintf>
		HAL_UART_Transmit(&huart2, &str, strlen(str), 10);
 800099a:	463b      	mov	r3, r7
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fc17 	bl	80001d0 <strlen>
 80009a2:	4603      	mov	r3, r0
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	4639      	mov	r1, r7
 80009a8:	230a      	movs	r3, #10
 80009aa:	4809      	ldr	r0, [pc, #36]	; (80009d0 <main+0x1a8>)
 80009ac:	f006 f8f7 	bl	8006b9e <HAL_UART_Transmit>

		timer_prev = __HAL_TIM_GET_COUNTER(&htim1);
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <main+0x19c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b6:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	}

	HAL_Delay(PROGRAM_DELAY); //Delay
 80009ba:	2014      	movs	r0, #20
 80009bc:	f000 fe4c 	bl	8001658 <HAL_Delay>
    MX_USB_HOST_Process();
 80009c0:	e761      	b.n	8000886 <main+0x5e>
 80009c2:	bf00      	nop
 80009c4:	20000248 	.word	0x20000248
 80009c8:	20000290 	.word	0x20000290
 80009cc:	2000031c 	.word	0x2000031c
 80009d0:	200002d8 	.word	0x200002d8
 80009d4:	40000400 	.word	0x40000400
 80009d8:	20000154 	.word	0x20000154
 80009dc:	0800bc74 	.word	0x0800bc74

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b094      	sub	sp, #80	; 0x50
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 0320 	add.w	r3, r7, #32
 80009ea:	2230      	movs	r2, #48	; 0x30
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f00a fd5c 	bl	800b4ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	4b28      	ldr	r3, [pc, #160]	; (8000aac <SystemClock_Config+0xcc>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	4a27      	ldr	r2, [pc, #156]	; (8000aac <SystemClock_Config+0xcc>)
 8000a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a12:	6413      	str	r3, [r2, #64]	; 0x40
 8000a14:	4b25      	ldr	r3, [pc, #148]	; (8000aac <SystemClock_Config+0xcc>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <SystemClock_Config+0xd0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a21      	ldr	r2, [pc, #132]	; (8000ab0 <SystemClock_Config+0xd0>)
 8000a2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2e:	6013      	str	r3, [r2, #0]
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <SystemClock_Config+0xd0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a46:	2302      	movs	r3, #2
 8000a48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a50:	2308      	movs	r3, #8
 8000a52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a54:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a5e:	2307      	movs	r3, #7
 8000a60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a62:	f107 0320 	add.w	r3, r7, #32
 8000a66:	4618      	mov	r0, r3
 8000a68:	f004 fafc 	bl	8005064 <HAL_RCC_OscConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a72:	f000 faaf 	bl	8000fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a76:	230f      	movs	r3, #15
 8000a78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a82:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a8e:	f107 030c 	add.w	r3, r7, #12
 8000a92:	2105      	movs	r1, #5
 8000a94:	4618      	mov	r0, r3
 8000a96:	f004 fd5d 	bl	8005554 <HAL_RCC_ClockConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000aa0:	f000 fa98 	bl	8000fd4 <Error_Handler>
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	3750      	adds	r7, #80	; 0x50
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40007000 	.word	0x40007000

08000ab4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000aba:	4a13      	ldr	r2, [pc, #76]	; (8000b08 <MX_I2C1_Init+0x54>)
 8000abc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ac0:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <MX_I2C1_Init+0x58>)
 8000ac2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ad2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ad6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000af2:	f002 fd39 	bl	8003568 <HAL_I2C_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000afc:	f000 fa6a 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000154 	.word	0x20000154
 8000b08:	40005400 	.word	0x40005400
 8000b0c:	000186a0 	.word	0x000186a0

08000b10 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b14:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_I2S3_Init+0x54>)
 8000b16:	4a14      	ldr	r2, [pc, #80]	; (8000b68 <MX_I2S3_Init+0x58>)
 8000b18:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <MX_I2S3_Init+0x54>)
 8000b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b20:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <MX_I2S3_Init+0x54>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_I2S3_Init+0x54>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <MX_I2S3_Init+0x54>)
 8000b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b34:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_I2S3_Init+0x54>)
 8000b38:	4a0c      	ldr	r2, [pc, #48]	; (8000b6c <MX_I2S3_Init+0x5c>)
 8000b3a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_I2S3_Init+0x54>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_I2S3_Init+0x54>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_I2S3_Init+0x54>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_I2S3_Init+0x54>)
 8000b50:	f003 fde8 	bl	8004724 <HAL_I2S_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000b5a:	f000 fa3b 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200001a8 	.word	0x200001a8
 8000b68:	40003c00 	.word	0x40003c00
 8000b6c:	00017700 	.word	0x00017700

08000b70 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <MX_SPI1_Init+0x64>)
 8000b76:	4a18      	ldr	r2, [pc, #96]	; (8000bd8 <MX_SPI1_Init+0x68>)
 8000b78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <MX_SPI1_Init+0x64>)
 8000b7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_SPI1_Init+0x64>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_SPI1_Init+0x64>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_SPI1_Init+0x64>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_SPI1_Init+0x64>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_SPI1_Init+0x64>)
 8000b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ba0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_SPI1_Init+0x64>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <MX_SPI1_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_SPI1_Init+0x64>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <MX_SPI1_Init+0x64>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_SPI1_Init+0x64>)
 8000bbc:	220a      	movs	r2, #10
 8000bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_SPI1_Init+0x64>)
 8000bc2:	f005 f827 	bl	8005c14 <HAL_SPI_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bcc:	f000 fa02 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200001f0 	.word	0x200001f0
 8000bd8:	40013000 	.word	0x40013000

08000bdc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be2:	f107 0308 	add.w	r3, r7, #8
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <MX_TIM1_Init+0x9c>)
 8000bfa:	4a20      	ldr	r2, [pc, #128]	; (8000c7c <MX_TIM1_Init+0xa0>)
 8000bfc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1680-1;
 8000bfe:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <MX_TIM1_Init+0x9c>)
 8000c00:	f240 628f 	movw	r2, #1679	; 0x68f
 8000c04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c06:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <MX_TIM1_Init+0x9c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535 - 1;
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <MX_TIM1_Init+0x9c>)
 8000c0e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000c12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c14:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <MX_TIM1_Init+0x9c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <MX_TIM1_Init+0x9c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c20:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <MX_TIM1_Init+0x9c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c26:	4814      	ldr	r0, [pc, #80]	; (8000c78 <MX_TIM1_Init+0x9c>)
 8000c28:	f005 f87d 	bl	8005d26 <HAL_TIM_Base_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000c32:	f000 f9cf 	bl	8000fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c3c:	f107 0308 	add.w	r3, r7, #8
 8000c40:	4619      	mov	r1, r3
 8000c42:	480d      	ldr	r0, [pc, #52]	; (8000c78 <MX_TIM1_Init+0x9c>)
 8000c44:	f005 fb0a 	bl	800625c <HAL_TIM_ConfigClockSource>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000c4e:	f000 f9c1 	bl	8000fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c52:	2300      	movs	r3, #0
 8000c54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4806      	ldr	r0, [pc, #24]	; (8000c78 <MX_TIM1_Init+0x9c>)
 8000c60:	f005 fed4 	bl	8006a0c <HAL_TIMEx_MasterConfigSynchronization>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000c6a:	f000 f9b3 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000248 	.word	0x20000248
 8000c7c:	40010000 	.word	0x40010000

08000c80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08e      	sub	sp, #56	; 0x38
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c94:	f107 0320 	add.w	r3, r7, #32
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
 8000cac:	615a      	str	r2, [r3, #20]
 8000cae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cb0:	4b32      	ldr	r3, [pc, #200]	; (8000d7c <MX_TIM3_Init+0xfc>)
 8000cb2:	4a33      	ldr	r2, [pc, #204]	; (8000d80 <MX_TIM3_Init+0x100>)
 8000cb4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 420 - 1;
 8000cb6:	4b31      	ldr	r3, [pc, #196]	; (8000d7c <MX_TIM3_Init+0xfc>)
 8000cb8:	f240 12a3 	movw	r2, #419	; 0x1a3
 8000cbc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbe:	4b2f      	ldr	r3, [pc, #188]	; (8000d7c <MX_TIM3_Init+0xfc>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000cc4:	4b2d      	ldr	r3, [pc, #180]	; (8000d7c <MX_TIM3_Init+0xfc>)
 8000cc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ccc:	4b2b      	ldr	r3, [pc, #172]	; (8000d7c <MX_TIM3_Init+0xfc>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd2:	4b2a      	ldr	r3, [pc, #168]	; (8000d7c <MX_TIM3_Init+0xfc>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cd8:	4828      	ldr	r0, [pc, #160]	; (8000d7c <MX_TIM3_Init+0xfc>)
 8000cda:	f005 f824 	bl	8005d26 <HAL_TIM_Base_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ce4:	f000 f976 	bl	8000fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4821      	ldr	r0, [pc, #132]	; (8000d7c <MX_TIM3_Init+0xfc>)
 8000cf6:	f005 fab1 	bl	800625c <HAL_TIM_ConfigClockSource>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000d00:	f000 f968 	bl	8000fd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d04:	481d      	ldr	r0, [pc, #116]	; (8000d7c <MX_TIM3_Init+0xfc>)
 8000d06:	f005 f8c5 	bl	8005e94 <HAL_TIM_PWM_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000d10:	f000 f960 	bl	8000fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d14:	2300      	movs	r3, #0
 8000d16:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d1c:	f107 0320 	add.w	r3, r7, #32
 8000d20:	4619      	mov	r1, r3
 8000d22:	4816      	ldr	r0, [pc, #88]	; (8000d7c <MX_TIM3_Init+0xfc>)
 8000d24:	f005 fe72 	bl	8006a0c <HAL_TIMEx_MasterConfigSynchronization>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000d2e:	f000 f951 	bl	8000fd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d32:	2360      	movs	r3, #96	; 0x60
 8000d34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	2200      	movs	r2, #0
 8000d46:	4619      	mov	r1, r3
 8000d48:	480c      	ldr	r0, [pc, #48]	; (8000d7c <MX_TIM3_Init+0xfc>)
 8000d4a:	f005 f9c5 	bl	80060d8 <HAL_TIM_PWM_ConfigChannel>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000d54:	f000 f93e 	bl	8000fd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	2204      	movs	r2, #4
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4807      	ldr	r0, [pc, #28]	; (8000d7c <MX_TIM3_Init+0xfc>)
 8000d60:	f005 f9ba 	bl	80060d8 <HAL_TIM_PWM_ConfigChannel>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000d6a:	f000 f933 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d6e:	4803      	ldr	r0, [pc, #12]	; (8000d7c <MX_TIM3_Init+0xfc>)
 8000d70:	f000 faa6 	bl	80012c0 <HAL_TIM_MspPostInit>

}
 8000d74:	bf00      	nop
 8000d76:	3738      	adds	r7, #56	; 0x38
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000290 	.word	0x20000290
 8000d80:	40000400 	.word	0x40000400

08000d84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <MX_USART2_UART_Init+0x50>)
 8000d8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000daa:	220c      	movs	r2, #12
 8000dac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000dbc:	f005 fea2 	bl	8006b04 <HAL_UART_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dc6:	f000 f905 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200002d8 	.word	0x200002d8
 8000dd4:	40004400 	.word	0x40004400

08000dd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08c      	sub	sp, #48	; 0x30
 8000ddc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
 8000df2:	4b72      	ldr	r3, [pc, #456]	; (8000fbc <MX_GPIO_Init+0x1e4>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a71      	ldr	r2, [pc, #452]	; (8000fbc <MX_GPIO_Init+0x1e4>)
 8000df8:	f043 0310 	orr.w	r3, r3, #16
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b6f      	ldr	r3, [pc, #444]	; (8000fbc <MX_GPIO_Init+0x1e4>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0310 	and.w	r3, r3, #16
 8000e06:	61bb      	str	r3, [r7, #24]
 8000e08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	4b6b      	ldr	r3, [pc, #428]	; (8000fbc <MX_GPIO_Init+0x1e4>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a6a      	ldr	r2, [pc, #424]	; (8000fbc <MX_GPIO_Init+0x1e4>)
 8000e14:	f043 0304 	orr.w	r3, r3, #4
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b68      	ldr	r3, [pc, #416]	; (8000fbc <MX_GPIO_Init+0x1e4>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0304 	and.w	r3, r3, #4
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	4b64      	ldr	r3, [pc, #400]	; (8000fbc <MX_GPIO_Init+0x1e4>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a63      	ldr	r2, [pc, #396]	; (8000fbc <MX_GPIO_Init+0x1e4>)
 8000e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b61      	ldr	r3, [pc, #388]	; (8000fbc <MX_GPIO_Init+0x1e4>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b5d      	ldr	r3, [pc, #372]	; (8000fbc <MX_GPIO_Init+0x1e4>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a5c      	ldr	r2, [pc, #368]	; (8000fbc <MX_GPIO_Init+0x1e4>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b5a      	ldr	r3, [pc, #360]	; (8000fbc <MX_GPIO_Init+0x1e4>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	4b56      	ldr	r3, [pc, #344]	; (8000fbc <MX_GPIO_Init+0x1e4>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a55      	ldr	r2, [pc, #340]	; (8000fbc <MX_GPIO_Init+0x1e4>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b53      	ldr	r3, [pc, #332]	; (8000fbc <MX_GPIO_Init+0x1e4>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	4b4f      	ldr	r3, [pc, #316]	; (8000fbc <MX_GPIO_Init+0x1e4>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a4e      	ldr	r2, [pc, #312]	; (8000fbc <MX_GPIO_Init+0x1e4>)
 8000e84:	f043 0308 	orr.w	r3, r3, #8
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b4c      	ldr	r3, [pc, #304]	; (8000fbc <MX_GPIO_Init+0x1e4>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0308 	and.w	r3, r3, #8
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2108      	movs	r1, #8
 8000e9a:	4849      	ldr	r0, [pc, #292]	; (8000fc0 <MX_GPIO_Init+0x1e8>)
 8000e9c:	f000 ff40 	bl	8001d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	4847      	ldr	r0, [pc, #284]	; (8000fc4 <MX_GPIO_Init+0x1ec>)
 8000ea6:	f000 ff3b 	bl	8001d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, green_led_Pin|LD3_Pin|red_led_Pin|blue_led_Pin
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000eb0:	4845      	ldr	r0, [pc, #276]	; (8000fc8 <MX_GPIO_Init+0x1f0>)
 8000eb2:	f000 ff35 	bl	8001d20 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	4619      	mov	r1, r3
 8000ecc:	483c      	ldr	r0, [pc, #240]	; (8000fc0 <MX_GPIO_Init+0x1e8>)
 8000ece:	f000 fd8b 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ee2:	f107 031c 	add.w	r3, r7, #28
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4836      	ldr	r0, [pc, #216]	; (8000fc4 <MX_GPIO_Init+0x1ec>)
 8000eea:	f000 fd7d 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000eee:	2308      	movs	r3, #8
 8000ef0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000efe:	2305      	movs	r3, #5
 8000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	4619      	mov	r1, r3
 8000f08:	482e      	ldr	r0, [pc, #184]	; (8000fc4 <MX_GPIO_Init+0x1ec>)
 8000f0a:	f000 fd6d 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f12:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	4619      	mov	r1, r3
 8000f22:	482a      	ldr	r0, [pc, #168]	; (8000fcc <MX_GPIO_Init+0x1f4>)
 8000f24:	f000 fd60 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f28:	2304      	movs	r3, #4
 8000f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 031c 	add.w	r3, r7, #28
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4825      	ldr	r0, [pc, #148]	; (8000fd0 <MX_GPIO_Init+0x1f8>)
 8000f3c:	f000 fd54 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f52:	2305      	movs	r3, #5
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	481c      	ldr	r0, [pc, #112]	; (8000fd0 <MX_GPIO_Init+0x1f8>)
 8000f5e:	f000 fd43 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : green_led_Pin LD3_Pin red_led_Pin blue_led_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = green_led_Pin|LD3_Pin|red_led_Pin|blue_led_Pin
 8000f62:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000f66:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4813      	ldr	r0, [pc, #76]	; (8000fc8 <MX_GPIO_Init+0x1f0>)
 8000f7c:	f000 fd34 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000f80:	2320      	movs	r3, #32
 8000f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	4619      	mov	r1, r3
 8000f92:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <MX_GPIO_Init+0x1f0>)
 8000f94:	f000 fd28 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f9c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <MX_GPIO_Init+0x1e8>)
 8000fae:	f000 fd1b 	bl	80019e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fb2:	bf00      	nop
 8000fb4:	3730      	adds	r7, #48	; 0x30
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40020800 	.word	0x40020800
 8000fc8:	40020c00 	.word	0x40020c00
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	40020400 	.word	0x40020400

08000fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <Error_Handler+0x8>
	...

08000fe0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <HAL_MspInit+0x4c>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	4a0f      	ldr	r2, [pc, #60]	; (800102c <HAL_MspInit+0x4c>)
 8000ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	; (800102c <HAL_MspInit+0x4c>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <HAL_MspInit+0x4c>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	4a08      	ldr	r2, [pc, #32]	; (800102c <HAL_MspInit+0x4c>)
 800100c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001010:	6413      	str	r3, [r2, #64]	; 0x40
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_MspInit+0x4c>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800101e:	2007      	movs	r0, #7
 8001020:	f000 fc0e 	bl	8001840 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40023800 	.word	0x40023800

08001030 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a19      	ldr	r2, [pc, #100]	; (80010b4 <HAL_I2C_MspInit+0x84>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d12c      	bne.n	80010ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <HAL_I2C_MspInit+0x88>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a17      	ldr	r2, [pc, #92]	; (80010b8 <HAL_I2C_MspInit+0x88>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <HAL_I2C_MspInit+0x88>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800106e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001074:	2312      	movs	r3, #18
 8001076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001078:	2301      	movs	r3, #1
 800107a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001080:	2304      	movs	r3, #4
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	480c      	ldr	r0, [pc, #48]	; (80010bc <HAL_I2C_MspInit+0x8c>)
 800108c:	f000 fcac 	bl	80019e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <HAL_I2C_MspInit+0x88>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <HAL_I2C_MspInit+0x88>)
 800109a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800109e:	6413      	str	r3, [r2, #64]	; 0x40
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <HAL_I2C_MspInit+0x88>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010ac:	bf00      	nop
 80010ae:	3728      	adds	r7, #40	; 0x28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40005400 	.word	0x40005400
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020400 	.word	0x40020400

080010c0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08e      	sub	sp, #56	; 0x38
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a31      	ldr	r2, [pc, #196]	; (80011b0 <HAL_I2S_MspInit+0xf0>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d15a      	bne.n	80011a6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80010f0:	2301      	movs	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80010f4:	23c0      	movs	r3, #192	; 0xc0
 80010f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4618      	mov	r0, r3
 8001102:	f004 fc47 	bl	8005994 <HAL_RCCEx_PeriphCLKConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800110c:	f7ff ff62 	bl	8000fd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <HAL_I2S_MspInit+0xf4>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	4a26      	ldr	r2, [pc, #152]	; (80011b4 <HAL_I2S_MspInit+0xf4>)
 800111a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800111e:	6413      	str	r3, [r2, #64]	; 0x40
 8001120:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <HAL_I2S_MspInit+0xf4>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <HAL_I2S_MspInit+0xf4>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	4a1f      	ldr	r2, [pc, #124]	; (80011b4 <HAL_I2S_MspInit+0xf4>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	6313      	str	r3, [r2, #48]	; 0x30
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <HAL_I2S_MspInit+0xf4>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <HAL_I2S_MspInit+0xf4>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	4a18      	ldr	r2, [pc, #96]	; (80011b4 <HAL_I2S_MspInit+0xf4>)
 8001152:	f043 0304 	orr.w	r3, r3, #4
 8001156:	6313      	str	r3, [r2, #48]	; 0x30
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <HAL_I2S_MspInit+0xf4>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001164:	2310      	movs	r3, #16
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001174:	2306      	movs	r3, #6
 8001176:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117c:	4619      	mov	r1, r3
 800117e:	480e      	ldr	r0, [pc, #56]	; (80011b8 <HAL_I2S_MspInit+0xf8>)
 8001180:	f000 fc32 	bl	80019e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001184:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001196:	2306      	movs	r3, #6
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	4619      	mov	r1, r3
 80011a0:	4806      	ldr	r0, [pc, #24]	; (80011bc <HAL_I2S_MspInit+0xfc>)
 80011a2:	f000 fc21 	bl	80019e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80011a6:	bf00      	nop
 80011a8:	3738      	adds	r7, #56	; 0x38
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40003c00 	.word	0x40003c00
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40020800 	.word	0x40020800

080011c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a19      	ldr	r2, [pc, #100]	; (8001244 <HAL_SPI_MspInit+0x84>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d12b      	bne.n	800123a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	4b18      	ldr	r3, [pc, #96]	; (8001248 <HAL_SPI_MspInit+0x88>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	4a17      	ldr	r2, [pc, #92]	; (8001248 <HAL_SPI_MspInit+0x88>)
 80011ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011f0:	6453      	str	r3, [r2, #68]	; 0x44
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <HAL_SPI_MspInit+0x88>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <HAL_SPI_MspInit+0x88>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a10      	ldr	r2, [pc, #64]	; (8001248 <HAL_SPI_MspInit+0x88>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <HAL_SPI_MspInit+0x88>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800121a:	23e0      	movs	r3, #224	; 0xe0
 800121c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800122a:	2305      	movs	r3, #5
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <HAL_SPI_MspInit+0x8c>)
 8001236:	f000 fbd7 	bl	80019e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800123a:	bf00      	nop
 800123c:	3728      	adds	r7, #40	; 0x28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40013000 	.word	0x40013000
 8001248:	40023800 	.word	0x40023800
 800124c:	40020000 	.word	0x40020000

08001250 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a15      	ldr	r2, [pc, #84]	; (80012b4 <HAL_TIM_Base_MspInit+0x64>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d10e      	bne.n	8001280 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HAL_TIM_Base_MspInit+0x68>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	4a13      	ldr	r2, [pc, #76]	; (80012b8 <HAL_TIM_Base_MspInit+0x68>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6453      	str	r3, [r2, #68]	; 0x44
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HAL_TIM_Base_MspInit+0x68>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800127e:	e012      	b.n	80012a6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <HAL_TIM_Base_MspInit+0x6c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d10d      	bne.n	80012a6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_TIM_Base_MspInit+0x68>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a09      	ldr	r2, [pc, #36]	; (80012b8 <HAL_TIM_Base_MspInit+0x68>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <HAL_TIM_Base_MspInit+0x68>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
}
 80012a6:	bf00      	nop
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40010000 	.word	0x40010000
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40000400 	.word	0x40000400

080012c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a21      	ldr	r2, [pc, #132]	; (8001364 <HAL_TIM_MspPostInit+0xa4>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d13b      	bne.n	800135a <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	4b20      	ldr	r3, [pc, #128]	; (8001368 <HAL_TIM_MspPostInit+0xa8>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a1f      	ldr	r2, [pc, #124]	; (8001368 <HAL_TIM_MspPostInit+0xa8>)
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <HAL_TIM_MspPostInit+0xa8>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	4b19      	ldr	r3, [pc, #100]	; (8001368 <HAL_TIM_MspPostInit+0xa8>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a18      	ldr	r2, [pc, #96]	; (8001368 <HAL_TIM_MspPostInit+0xa8>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <HAL_TIM_MspPostInit+0xa8>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800131a:	2340      	movs	r3, #64	; 0x40
 800131c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800132a:	2302      	movs	r3, #2
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	480d      	ldr	r0, [pc, #52]	; (800136c <HAL_TIM_MspPostInit+0xac>)
 8001336:	f000 fb57 	bl	80019e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800133a:	2320      	movs	r3, #32
 800133c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800134a:	2302      	movs	r3, #2
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	4806      	ldr	r0, [pc, #24]	; (8001370 <HAL_TIM_MspPostInit+0xb0>)
 8001356:	f000 fb47 	bl	80019e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800135a:	bf00      	nop
 800135c:	3728      	adds	r7, #40	; 0x28
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40000400 	.word	0x40000400
 8001368:	40023800 	.word	0x40023800
 800136c:	40020800 	.word	0x40020800
 8001370:	40020400 	.word	0x40020400

08001374 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a1d      	ldr	r2, [pc, #116]	; (8001408 <HAL_UART_MspInit+0x94>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d133      	bne.n	80013fe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	4b1c      	ldr	r3, [pc, #112]	; (800140c <HAL_UART_MspInit+0x98>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a1b      	ldr	r2, [pc, #108]	; (800140c <HAL_UART_MspInit+0x98>)
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <HAL_UART_MspInit+0x98>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <HAL_UART_MspInit+0x98>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a14      	ldr	r2, [pc, #80]	; (800140c <HAL_UART_MspInit+0x98>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b12      	ldr	r3, [pc, #72]	; (800140c <HAL_UART_MspInit+0x98>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013ce:	230c      	movs	r3, #12
 80013d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013de:	2307      	movs	r3, #7
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	4809      	ldr	r0, [pc, #36]	; (8001410 <HAL_UART_MspInit+0x9c>)
 80013ea:	f000 fafd 	bl	80019e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	2026      	movs	r0, #38	; 0x26
 80013f4:	f000 fa2f 	bl	8001856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013f8:	2026      	movs	r0, #38	; 0x26
 80013fa:	f000 fa48 	bl	800188e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013fe:	bf00      	nop
 8001400:	3728      	adds	r7, #40	; 0x28
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40004400 	.word	0x40004400
 800140c:	40023800 	.word	0x40023800
 8001410:	40020000 	.word	0x40020000

08001414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <NMI_Handler+0x4>

0800141a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141e:	e7fe      	b.n	800141e <HardFault_Handler+0x4>

08001420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <MemManage_Handler+0x4>

08001426 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <BusFault_Handler+0x4>

0800142c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <UsageFault_Handler+0x4>

08001432 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001460:	f000 f8da 	bl	8001618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}

08001468 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <USART2_IRQHandler+0x10>)
 800146e:	f005 fcfb 	bl	8006e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200002d8 	.word	0x200002d8

0800147c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <OTG_FS_IRQHandler+0x10>)
 8001482:	f000 fed1 	bl	8002228 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000704 	.word	0x20000704

08001490 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001498:	4a14      	ldr	r2, [pc, #80]	; (80014ec <_sbrk+0x5c>)
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <_sbrk+0x60>)
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <_sbrk+0x64>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d102      	bne.n	80014b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <_sbrk+0x64>)
 80014ae:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <_sbrk+0x68>)
 80014b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <_sbrk+0x64>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d207      	bcs.n	80014d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c0:	f00a f80c 	bl	800b4dc <__errno>
 80014c4:	4603      	mov	r3, r0
 80014c6:	220c      	movs	r2, #12
 80014c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
 80014ce:	e009      	b.n	80014e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <_sbrk+0x64>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014d6:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	4a05      	ldr	r2, [pc, #20]	; (80014f4 <_sbrk+0x64>)
 80014e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014e2:	68fb      	ldr	r3, [r7, #12]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20020000 	.word	0x20020000
 80014f0:	00000400 	.word	0x00000400
 80014f4:	20000320 	.word	0x20000320
 80014f8:	20000b50 	.word	0x20000b50

080014fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <SystemInit+0x20>)
 8001502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001506:	4a05      	ldr	r2, [pc, #20]	; (800151c <SystemInit+0x20>)
 8001508:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800150c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001520:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001558 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001524:	480d      	ldr	r0, [pc, #52]	; (800155c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001526:	490e      	ldr	r1, [pc, #56]	; (8001560 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001528:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800152c:	e002      	b.n	8001534 <LoopCopyDataInit>

0800152e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001532:	3304      	adds	r3, #4

08001534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001538:	d3f9      	bcc.n	800152e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153a:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800153c:	4c0b      	ldr	r4, [pc, #44]	; (800156c <LoopFillZerobss+0x26>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001540:	e001      	b.n	8001546 <LoopFillZerobss>

08001542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001544:	3204      	adds	r2, #4

08001546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001548:	d3fb      	bcc.n	8001542 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800154a:	f7ff ffd7 	bl	80014fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800154e:	f009 ffcb 	bl	800b4e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001552:	f7ff f969 	bl	8000828 <main>
  bx  lr    
 8001556:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001558:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800155c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001560:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001564:	0800bcec 	.word	0x0800bcec
  ldr r2, =_sbss
 8001568:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800156c:	20000b50 	.word	0x20000b50

08001570 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001570:	e7fe      	b.n	8001570 <ADC_IRQHandler>
	...

08001574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001578:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <HAL_Init+0x40>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0d      	ldr	r2, [pc, #52]	; (80015b4 <HAL_Init+0x40>)
 800157e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001582:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <HAL_Init+0x40>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <HAL_Init+0x40>)
 800158a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800158e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_Init+0x40>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <HAL_Init+0x40>)
 8001596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800159c:	2003      	movs	r0, #3
 800159e:	f000 f94f 	bl	8001840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015a2:	2000      	movs	r0, #0
 80015a4:	f000 f808 	bl	80015b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a8:	f7ff fd1a 	bl	8000fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023c00 	.word	0x40023c00

080015b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_InitTick+0x54>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_InitTick+0x58>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f967 	bl	80018aa <HAL_SYSTICK_Config>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00e      	b.n	8001604 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b0f      	cmp	r3, #15
 80015ea:	d80a      	bhi.n	8001602 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ec:	2200      	movs	r2, #0
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	f000 f92f 	bl	8001856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f8:	4a06      	ldr	r2, [pc, #24]	; (8001614 <HAL_InitTick+0x5c>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	e000      	b.n	8001604 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000004 	.word	0x20000004
 8001610:	2000000c 	.word	0x2000000c
 8001614:	20000008 	.word	0x20000008

08001618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_IncTick+0x20>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_IncTick+0x24>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4413      	add	r3, r2
 8001628:	4a04      	ldr	r2, [pc, #16]	; (800163c <HAL_IncTick+0x24>)
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	2000000c 	.word	0x2000000c
 800163c:	20000324 	.word	0x20000324

08001640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return uwTick;
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <HAL_GetTick+0x14>)
 8001646:	681b      	ldr	r3, [r3, #0]
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20000324 	.word	0x20000324

08001658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001660:	f7ff ffee 	bl	8001640 <HAL_GetTick>
 8001664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001670:	d005      	beq.n	800167e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_Delay+0x44>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4413      	add	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800167e:	bf00      	nop
 8001680:	f7ff ffde 	bl	8001640 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	429a      	cmp	r2, r3
 800168e:	d8f7      	bhi.n	8001680 <HAL_Delay+0x28>
  {
  }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	2000000c 	.word	0x2000000c

080016a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016bc:	4013      	ands	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d2:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	60d3      	str	r3, [r2, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <__NVIC_GetPriorityGrouping+0x18>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	f003 0307 	and.w	r3, r3, #7
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	2b00      	cmp	r3, #0
 8001714:	db0b      	blt.n	800172e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	f003 021f 	and.w	r2, r3, #31
 800171c:	4907      	ldr	r1, [pc, #28]	; (800173c <__NVIC_EnableIRQ+0x38>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	095b      	lsrs	r3, r3, #5
 8001724:	2001      	movs	r0, #1
 8001726:	fa00 f202 	lsl.w	r2, r0, r2
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000e100 	.word	0xe000e100

08001740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	db0a      	blt.n	800176a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	490c      	ldr	r1, [pc, #48]	; (800178c <__NVIC_SetPriority+0x4c>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	0112      	lsls	r2, r2, #4
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	440b      	add	r3, r1
 8001764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001768:	e00a      	b.n	8001780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4908      	ldr	r1, [pc, #32]	; (8001790 <__NVIC_SetPriority+0x50>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	3b04      	subs	r3, #4
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	440b      	add	r3, r1
 800177e:	761a      	strb	r2, [r3, #24]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000e100 	.word	0xe000e100
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f1c3 0307 	rsb	r3, r3, #7
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	bf28      	it	cs
 80017b2:	2304      	movcs	r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3304      	adds	r3, #4
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d902      	bls.n	80017c4 <NVIC_EncodePriority+0x30>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3b03      	subs	r3, #3
 80017c2:	e000      	b.n	80017c6 <NVIC_EncodePriority+0x32>
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	401a      	ands	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43d9      	mvns	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	4313      	orrs	r3, r2
         );
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3724      	adds	r7, #36	; 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800180c:	d301      	bcc.n	8001812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180e:	2301      	movs	r3, #1
 8001810:	e00f      	b.n	8001832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <SysTick_Config+0x40>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181a:	210f      	movs	r1, #15
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	f7ff ff8e 	bl	8001740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <SysTick_Config+0x40>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182a:	4b04      	ldr	r3, [pc, #16]	; (800183c <SysTick_Config+0x40>)
 800182c:	2207      	movs	r2, #7
 800182e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	e000e010 	.word	0xe000e010

08001840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ff29 	bl	80016a0 <__NVIC_SetPriorityGrouping>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001868:	f7ff ff3e 	bl	80016e8 <__NVIC_GetPriorityGrouping>
 800186c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	6978      	ldr	r0, [r7, #20]
 8001874:	f7ff ff8e 	bl	8001794 <NVIC_EncodePriority>
 8001878:	4602      	mov	r2, r0
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff5d 	bl	8001740 <__NVIC_SetPriority>
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff31 	bl	8001704 <__NVIC_EnableIRQ>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff ffa2 	bl	80017fc <SysTick_Config>
 80018b8:	4603      	mov	r3, r0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b084      	sub	sp, #16
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018d0:	f7ff feb6 	bl	8001640 <HAL_GetTick>
 80018d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d008      	beq.n	80018f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2280      	movs	r2, #128	; 0x80
 80018e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e052      	b.n	800199a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0216 	bic.w	r2, r2, #22
 8001902:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	695a      	ldr	r2, [r3, #20]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001912:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	2b00      	cmp	r3, #0
 800191a:	d103      	bne.n	8001924 <HAL_DMA_Abort+0x62>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001920:	2b00      	cmp	r3, #0
 8001922:	d007      	beq.n	8001934 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0208 	bic.w	r2, r2, #8
 8001932:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0201 	bic.w	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001944:	e013      	b.n	800196e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001946:	f7ff fe7b 	bl	8001640 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b05      	cmp	r3, #5
 8001952:	d90c      	bls.n	800196e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2220      	movs	r2, #32
 8001958:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2203      	movs	r2, #3
 800195e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e015      	b.n	800199a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1e4      	bne.n	8001946 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001980:	223f      	movs	r2, #63	; 0x3f
 8001982:	409a      	lsls	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d004      	beq.n	80019c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2280      	movs	r2, #128	; 0x80
 80019ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e00c      	b.n	80019da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2205      	movs	r2, #5
 80019c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0201 	bic.w	r2, r2, #1
 80019d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
 8001a02:	e16b      	b.n	8001cdc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a04:	2201      	movs	r2, #1
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	f040 815a 	bne.w	8001cd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d005      	beq.n	8001a3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d130      	bne.n	8001a9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	2203      	movs	r2, #3
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a70:	2201      	movs	r2, #1
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	f003 0201 	and.w	r2, r3, #1
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d017      	beq.n	8001ad8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d123      	bne.n	8001b2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	08da      	lsrs	r2, r3, #3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3208      	adds	r2, #8
 8001aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	220f      	movs	r2, #15
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	691a      	ldr	r2, [r3, #16]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	08da      	lsrs	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3208      	adds	r2, #8
 8001b26:	69b9      	ldr	r1, [r7, #24]
 8001b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	2203      	movs	r2, #3
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0203 	and.w	r2, r3, #3
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 80b4 	beq.w	8001cd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b60      	ldr	r3, [pc, #384]	; (8001cf4 <HAL_GPIO_Init+0x30c>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	4a5f      	ldr	r2, [pc, #380]	; (8001cf4 <HAL_GPIO_Init+0x30c>)
 8001b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7e:	4b5d      	ldr	r3, [pc, #372]	; (8001cf4 <HAL_GPIO_Init+0x30c>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b8a:	4a5b      	ldr	r2, [pc, #364]	; (8001cf8 <HAL_GPIO_Init+0x310>)
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	089b      	lsrs	r3, r3, #2
 8001b90:	3302      	adds	r3, #2
 8001b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a52      	ldr	r2, [pc, #328]	; (8001cfc <HAL_GPIO_Init+0x314>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d02b      	beq.n	8001c0e <HAL_GPIO_Init+0x226>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a51      	ldr	r2, [pc, #324]	; (8001d00 <HAL_GPIO_Init+0x318>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d025      	beq.n	8001c0a <HAL_GPIO_Init+0x222>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a50      	ldr	r2, [pc, #320]	; (8001d04 <HAL_GPIO_Init+0x31c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d01f      	beq.n	8001c06 <HAL_GPIO_Init+0x21e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4f      	ldr	r2, [pc, #316]	; (8001d08 <HAL_GPIO_Init+0x320>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d019      	beq.n	8001c02 <HAL_GPIO_Init+0x21a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4e      	ldr	r2, [pc, #312]	; (8001d0c <HAL_GPIO_Init+0x324>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d013      	beq.n	8001bfe <HAL_GPIO_Init+0x216>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4d      	ldr	r2, [pc, #308]	; (8001d10 <HAL_GPIO_Init+0x328>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d00d      	beq.n	8001bfa <HAL_GPIO_Init+0x212>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4c      	ldr	r2, [pc, #304]	; (8001d14 <HAL_GPIO_Init+0x32c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d007      	beq.n	8001bf6 <HAL_GPIO_Init+0x20e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4b      	ldr	r2, [pc, #300]	; (8001d18 <HAL_GPIO_Init+0x330>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d101      	bne.n	8001bf2 <HAL_GPIO_Init+0x20a>
 8001bee:	2307      	movs	r3, #7
 8001bf0:	e00e      	b.n	8001c10 <HAL_GPIO_Init+0x228>
 8001bf2:	2308      	movs	r3, #8
 8001bf4:	e00c      	b.n	8001c10 <HAL_GPIO_Init+0x228>
 8001bf6:	2306      	movs	r3, #6
 8001bf8:	e00a      	b.n	8001c10 <HAL_GPIO_Init+0x228>
 8001bfa:	2305      	movs	r3, #5
 8001bfc:	e008      	b.n	8001c10 <HAL_GPIO_Init+0x228>
 8001bfe:	2304      	movs	r3, #4
 8001c00:	e006      	b.n	8001c10 <HAL_GPIO_Init+0x228>
 8001c02:	2303      	movs	r3, #3
 8001c04:	e004      	b.n	8001c10 <HAL_GPIO_Init+0x228>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e002      	b.n	8001c10 <HAL_GPIO_Init+0x228>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <HAL_GPIO_Init+0x228>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	69fa      	ldr	r2, [r7, #28]
 8001c12:	f002 0203 	and.w	r2, r2, #3
 8001c16:	0092      	lsls	r2, r2, #2
 8001c18:	4093      	lsls	r3, r2
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c20:	4935      	ldr	r1, [pc, #212]	; (8001cf8 <HAL_GPIO_Init+0x310>)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	089b      	lsrs	r3, r3, #2
 8001c26:	3302      	adds	r3, #2
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c2e:	4b3b      	ldr	r3, [pc, #236]	; (8001d1c <HAL_GPIO_Init+0x334>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c52:	4a32      	ldr	r2, [pc, #200]	; (8001d1c <HAL_GPIO_Init+0x334>)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c58:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <HAL_GPIO_Init+0x334>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c7c:	4a27      	ldr	r2, [pc, #156]	; (8001d1c <HAL_GPIO_Init+0x334>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c82:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <HAL_GPIO_Init+0x334>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ca6:	4a1d      	ldr	r2, [pc, #116]	; (8001d1c <HAL_GPIO_Init+0x334>)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cac:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <HAL_GPIO_Init+0x334>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cd0:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <HAL_GPIO_Init+0x334>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	61fb      	str	r3, [r7, #28]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	2b0f      	cmp	r3, #15
 8001ce0:	f67f ae90 	bls.w	8001a04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3724      	adds	r7, #36	; 0x24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40013800 	.word	0x40013800
 8001cfc:	40020000 	.word	0x40020000
 8001d00:	40020400 	.word	0x40020400
 8001d04:	40020800 	.word	0x40020800
 8001d08:	40020c00 	.word	0x40020c00
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40021400 	.word	0x40021400
 8001d14:	40021800 	.word	0x40021800
 8001d18:	40021c00 	.word	0x40021c00
 8001d1c:	40013c00 	.word	0x40013c00

08001d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	807b      	strh	r3, [r7, #2]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d30:	787b      	ldrb	r3, [r7, #1]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d36:	887a      	ldrh	r2, [r7, #2]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d3c:	e003      	b.n	8001d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d3e:	887b      	ldrh	r3, [r7, #2]
 8001d40:	041a      	lsls	r2, r3, #16
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	619a      	str	r2, [r3, #24]
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001d52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d54:	b08f      	sub	sp, #60	; 0x3c
 8001d56:	af0a      	add	r7, sp, #40	; 0x28
 8001d58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e054      	b.n	8001e0e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d106      	bne.n	8001d84 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f009 f80e 	bl	800ada0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2203      	movs	r2, #3
 8001d88:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d102      	bne.n	8001d9e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f006 f83a 	bl	8007e1c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	687e      	ldr	r6, [r7, #4]
 8001db0:	466d      	mov	r5, sp
 8001db2:	f106 0410 	add.w	r4, r6, #16
 8001db6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001db8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dc2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dc6:	1d33      	adds	r3, r6, #4
 8001dc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dca:	6838      	ldr	r0, [r7, #0]
 8001dcc:	f005 ffb4 	bl	8007d38 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f006 f831 	bl	8007e3e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	603b      	str	r3, [r7, #0]
 8001de2:	687e      	ldr	r6, [r7, #4]
 8001de4:	466d      	mov	r5, sp
 8001de6:	f106 0410 	add.w	r4, r6, #16
 8001dea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001df2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001df6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dfa:	1d33      	adds	r3, r6, #4
 8001dfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dfe:	6838      	ldr	r0, [r7, #0]
 8001e00:	f006 f9ba 	bl	8008178 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e16 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001e16:	b590      	push	{r4, r7, lr}
 8001e18:	b089      	sub	sp, #36	; 0x24
 8001e1a:	af04      	add	r7, sp, #16
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	4608      	mov	r0, r1
 8001e20:	4611      	mov	r1, r2
 8001e22:	461a      	mov	r2, r3
 8001e24:	4603      	mov	r3, r0
 8001e26:	70fb      	strb	r3, [r7, #3]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	70bb      	strb	r3, [r7, #2]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d101      	bne.n	8001e3e <HAL_HCD_HC_Init+0x28>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e076      	b.n	8001f2c <HAL_HCD_HC_Init+0x116>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001e46:	78fb      	ldrb	r3, [r7, #3]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	212c      	movs	r1, #44	; 0x2c
 8001e4c:	fb01 f303 	mul.w	r3, r1, r3
 8001e50:	4413      	add	r3, r2
 8001e52:	333d      	adds	r3, #61	; 0x3d
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	212c      	movs	r1, #44	; 0x2c
 8001e5e:	fb01 f303 	mul.w	r3, r1, r3
 8001e62:	4413      	add	r3, r2
 8001e64:	3338      	adds	r3, #56	; 0x38
 8001e66:	787a      	ldrb	r2, [r7, #1]
 8001e68:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	212c      	movs	r1, #44	; 0x2c
 8001e70:	fb01 f303 	mul.w	r3, r1, r3
 8001e74:	4413      	add	r3, r2
 8001e76:	3340      	adds	r3, #64	; 0x40
 8001e78:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e7a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	212c      	movs	r1, #44	; 0x2c
 8001e82:	fb01 f303 	mul.w	r3, r1, r3
 8001e86:	4413      	add	r3, r2
 8001e88:	3339      	adds	r3, #57	; 0x39
 8001e8a:	78fa      	ldrb	r2, [r7, #3]
 8001e8c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	212c      	movs	r1, #44	; 0x2c
 8001e94:	fb01 f303 	mul.w	r3, r1, r3
 8001e98:	4413      	add	r3, r2
 8001e9a:	333f      	adds	r3, #63	; 0x3f
 8001e9c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001ea0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	78ba      	ldrb	r2, [r7, #2]
 8001ea6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001eaa:	b2d0      	uxtb	r0, r2
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	212c      	movs	r1, #44	; 0x2c
 8001eb0:	fb01 f303 	mul.w	r3, r1, r3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	333a      	adds	r3, #58	; 0x3a
 8001eb8:	4602      	mov	r2, r0
 8001eba:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001ebc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	da09      	bge.n	8001ed8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	212c      	movs	r1, #44	; 0x2c
 8001eca:	fb01 f303 	mul.w	r3, r1, r3
 8001ece:	4413      	add	r3, r2
 8001ed0:	333b      	adds	r3, #59	; 0x3b
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]
 8001ed6:	e008      	b.n	8001eea <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	212c      	movs	r1, #44	; 0x2c
 8001ede:	fb01 f303 	mul.w	r3, r1, r3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	333b      	adds	r3, #59	; 0x3b
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	212c      	movs	r1, #44	; 0x2c
 8001ef0:	fb01 f303 	mul.w	r3, r1, r3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	333c      	adds	r3, #60	; 0x3c
 8001ef8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001efc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	787c      	ldrb	r4, [r7, #1]
 8001f04:	78ba      	ldrb	r2, [r7, #2]
 8001f06:	78f9      	ldrb	r1, [r7, #3]
 8001f08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f0a:	9302      	str	r3, [sp, #8]
 8001f0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f10:	9301      	str	r3, [sp, #4]
 8001f12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	4623      	mov	r3, r4
 8001f1a:	f006 fab3 	bl	8008484 <USB_HC_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd90      	pop	{r4, r7, pc}

08001f34 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_HCD_HC_Halt+0x1e>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e00f      	b.n	8001f72 <HAL_HCD_HC_Halt+0x3e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	78fa      	ldrb	r2, [r7, #3]
 8001f60:	4611      	mov	r1, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f006 fd03 	bl	800896e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	4608      	mov	r0, r1
 8001f86:	4611      	mov	r1, r2
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	70fb      	strb	r3, [r7, #3]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	70bb      	strb	r3, [r7, #2]
 8001f92:	4613      	mov	r3, r2
 8001f94:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	212c      	movs	r1, #44	; 0x2c
 8001f9c:	fb01 f303 	mul.w	r3, r1, r3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	333b      	adds	r3, #59	; 0x3b
 8001fa4:	78ba      	ldrb	r2, [r7, #2]
 8001fa6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	212c      	movs	r1, #44	; 0x2c
 8001fae:	fb01 f303 	mul.w	r3, r1, r3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	333f      	adds	r3, #63	; 0x3f
 8001fb6:	787a      	ldrb	r2, [r7, #1]
 8001fb8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001fba:	7c3b      	ldrb	r3, [r7, #16]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d112      	bne.n	8001fe6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	212c      	movs	r1, #44	; 0x2c
 8001fc6:	fb01 f303 	mul.w	r3, r1, r3
 8001fca:	4413      	add	r3, r2
 8001fcc:	3342      	adds	r3, #66	; 0x42
 8001fce:	2203      	movs	r2, #3
 8001fd0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001fd2:	78fb      	ldrb	r3, [r7, #3]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	212c      	movs	r1, #44	; 0x2c
 8001fd8:	fb01 f303 	mul.w	r3, r1, r3
 8001fdc:	4413      	add	r3, r2
 8001fde:	333d      	adds	r3, #61	; 0x3d
 8001fe0:	7f3a      	ldrb	r2, [r7, #28]
 8001fe2:	701a      	strb	r2, [r3, #0]
 8001fe4:	e008      	b.n	8001ff8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fe6:	78fb      	ldrb	r3, [r7, #3]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	212c      	movs	r1, #44	; 0x2c
 8001fec:	fb01 f303 	mul.w	r3, r1, r3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3342      	adds	r3, #66	; 0x42
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001ff8:	787b      	ldrb	r3, [r7, #1]
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	f200 80c6 	bhi.w	800218c <HAL_HCD_HC_SubmitRequest+0x210>
 8002000:	a201      	add	r2, pc, #4	; (adr r2, 8002008 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002006:	bf00      	nop
 8002008:	08002019 	.word	0x08002019
 800200c:	08002179 	.word	0x08002179
 8002010:	0800207d 	.word	0x0800207d
 8002014:	080020fb 	.word	0x080020fb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002018:	7c3b      	ldrb	r3, [r7, #16]
 800201a:	2b01      	cmp	r3, #1
 800201c:	f040 80b8 	bne.w	8002190 <HAL_HCD_HC_SubmitRequest+0x214>
 8002020:	78bb      	ldrb	r3, [r7, #2]
 8002022:	2b00      	cmp	r3, #0
 8002024:	f040 80b4 	bne.w	8002190 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002028:	8b3b      	ldrh	r3, [r7, #24]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d108      	bne.n	8002040 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	212c      	movs	r1, #44	; 0x2c
 8002034:	fb01 f303 	mul.w	r3, r1, r3
 8002038:	4413      	add	r3, r2
 800203a:	3355      	adds	r3, #85	; 0x55
 800203c:	2201      	movs	r2, #1
 800203e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	212c      	movs	r1, #44	; 0x2c
 8002046:	fb01 f303 	mul.w	r3, r1, r3
 800204a:	4413      	add	r3, r2
 800204c:	3355      	adds	r3, #85	; 0x55
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d109      	bne.n	8002068 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	212c      	movs	r1, #44	; 0x2c
 800205a:	fb01 f303 	mul.w	r3, r1, r3
 800205e:	4413      	add	r3, r2
 8002060:	3342      	adds	r3, #66	; 0x42
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002066:	e093      	b.n	8002190 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	212c      	movs	r1, #44	; 0x2c
 800206e:	fb01 f303 	mul.w	r3, r1, r3
 8002072:	4413      	add	r3, r2
 8002074:	3342      	adds	r3, #66	; 0x42
 8002076:	2202      	movs	r2, #2
 8002078:	701a      	strb	r2, [r3, #0]
      break;
 800207a:	e089      	b.n	8002190 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800207c:	78bb      	ldrb	r3, [r7, #2]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d11d      	bne.n	80020be <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002082:	78fb      	ldrb	r3, [r7, #3]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	212c      	movs	r1, #44	; 0x2c
 8002088:	fb01 f303 	mul.w	r3, r1, r3
 800208c:	4413      	add	r3, r2
 800208e:	3355      	adds	r3, #85	; 0x55
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d109      	bne.n	80020aa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	212c      	movs	r1, #44	; 0x2c
 800209c:	fb01 f303 	mul.w	r3, r1, r3
 80020a0:	4413      	add	r3, r2
 80020a2:	3342      	adds	r3, #66	; 0x42
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80020a8:	e073      	b.n	8002192 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020aa:	78fb      	ldrb	r3, [r7, #3]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	212c      	movs	r1, #44	; 0x2c
 80020b0:	fb01 f303 	mul.w	r3, r1, r3
 80020b4:	4413      	add	r3, r2
 80020b6:	3342      	adds	r3, #66	; 0x42
 80020b8:	2202      	movs	r2, #2
 80020ba:	701a      	strb	r2, [r3, #0]
      break;
 80020bc:	e069      	b.n	8002192 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	212c      	movs	r1, #44	; 0x2c
 80020c4:	fb01 f303 	mul.w	r3, r1, r3
 80020c8:	4413      	add	r3, r2
 80020ca:	3354      	adds	r3, #84	; 0x54
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d109      	bne.n	80020e6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020d2:	78fb      	ldrb	r3, [r7, #3]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	212c      	movs	r1, #44	; 0x2c
 80020d8:	fb01 f303 	mul.w	r3, r1, r3
 80020dc:	4413      	add	r3, r2
 80020de:	3342      	adds	r3, #66	; 0x42
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
      break;
 80020e4:	e055      	b.n	8002192 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020e6:	78fb      	ldrb	r3, [r7, #3]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	212c      	movs	r1, #44	; 0x2c
 80020ec:	fb01 f303 	mul.w	r3, r1, r3
 80020f0:	4413      	add	r3, r2
 80020f2:	3342      	adds	r3, #66	; 0x42
 80020f4:	2202      	movs	r2, #2
 80020f6:	701a      	strb	r2, [r3, #0]
      break;
 80020f8:	e04b      	b.n	8002192 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80020fa:	78bb      	ldrb	r3, [r7, #2]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d11d      	bne.n	800213c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	212c      	movs	r1, #44	; 0x2c
 8002106:	fb01 f303 	mul.w	r3, r1, r3
 800210a:	4413      	add	r3, r2
 800210c:	3355      	adds	r3, #85	; 0x55
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d109      	bne.n	8002128 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	212c      	movs	r1, #44	; 0x2c
 800211a:	fb01 f303 	mul.w	r3, r1, r3
 800211e:	4413      	add	r3, r2
 8002120:	3342      	adds	r3, #66	; 0x42
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002126:	e034      	b.n	8002192 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	212c      	movs	r1, #44	; 0x2c
 800212e:	fb01 f303 	mul.w	r3, r1, r3
 8002132:	4413      	add	r3, r2
 8002134:	3342      	adds	r3, #66	; 0x42
 8002136:	2202      	movs	r2, #2
 8002138:	701a      	strb	r2, [r3, #0]
      break;
 800213a:	e02a      	b.n	8002192 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	212c      	movs	r1, #44	; 0x2c
 8002142:	fb01 f303 	mul.w	r3, r1, r3
 8002146:	4413      	add	r3, r2
 8002148:	3354      	adds	r3, #84	; 0x54
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d109      	bne.n	8002164 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	212c      	movs	r1, #44	; 0x2c
 8002156:	fb01 f303 	mul.w	r3, r1, r3
 800215a:	4413      	add	r3, r2
 800215c:	3342      	adds	r3, #66	; 0x42
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]
      break;
 8002162:	e016      	b.n	8002192 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002164:	78fb      	ldrb	r3, [r7, #3]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	212c      	movs	r1, #44	; 0x2c
 800216a:	fb01 f303 	mul.w	r3, r1, r3
 800216e:	4413      	add	r3, r2
 8002170:	3342      	adds	r3, #66	; 0x42
 8002172:	2202      	movs	r2, #2
 8002174:	701a      	strb	r2, [r3, #0]
      break;
 8002176:	e00c      	b.n	8002192 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	212c      	movs	r1, #44	; 0x2c
 800217e:	fb01 f303 	mul.w	r3, r1, r3
 8002182:	4413      	add	r3, r2
 8002184:	3342      	adds	r3, #66	; 0x42
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]
      break;
 800218a:	e002      	b.n	8002192 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800218c:	bf00      	nop
 800218e:	e000      	b.n	8002192 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002190:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002192:	78fb      	ldrb	r3, [r7, #3]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	212c      	movs	r1, #44	; 0x2c
 8002198:	fb01 f303 	mul.w	r3, r1, r3
 800219c:	4413      	add	r3, r2
 800219e:	3344      	adds	r3, #68	; 0x44
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	8b3a      	ldrh	r2, [r7, #24]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	202c      	movs	r0, #44	; 0x2c
 80021ac:	fb00 f303 	mul.w	r3, r0, r3
 80021b0:	440b      	add	r3, r1
 80021b2:	334c      	adds	r3, #76	; 0x4c
 80021b4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80021b6:	78fb      	ldrb	r3, [r7, #3]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	212c      	movs	r1, #44	; 0x2c
 80021bc:	fb01 f303 	mul.w	r3, r1, r3
 80021c0:	4413      	add	r3, r2
 80021c2:	3360      	adds	r3, #96	; 0x60
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	212c      	movs	r1, #44	; 0x2c
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	3350      	adds	r3, #80	; 0x50
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	212c      	movs	r1, #44	; 0x2c
 80021e0:	fb01 f303 	mul.w	r3, r1, r3
 80021e4:	4413      	add	r3, r2
 80021e6:	3339      	adds	r3, #57	; 0x39
 80021e8:	78fa      	ldrb	r2, [r7, #3]
 80021ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	212c      	movs	r1, #44	; 0x2c
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	3361      	adds	r3, #97	; 0x61
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6818      	ldr	r0, [r3, #0]
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	222c      	movs	r2, #44	; 0x2c
 8002206:	fb02 f303 	mul.w	r3, r2, r3
 800220a:	3338      	adds	r3, #56	; 0x38
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	18d1      	adds	r1, r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	461a      	mov	r2, r3
 8002218:	f006 fa56 	bl	80086c8 <USB_HC_StartXfer>
 800221c:	4603      	mov	r3, r0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop

08002228 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f005 ff57 	bl	80080f2 <USB_GetMode>
 8002244:	4603      	mov	r3, r0
 8002246:	2b01      	cmp	r3, #1
 8002248:	f040 80f6 	bne.w	8002438 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f005 ff3b 	bl	80080cc <USB_ReadInterrupts>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 80ec 	beq.w	8002436 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f005 ff32 	bl	80080cc <USB_ReadInterrupts>
 8002268:	4603      	mov	r3, r0
 800226a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800226e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002272:	d104      	bne.n	800227e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800227c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f005 ff22 	bl	80080cc <USB_ReadInterrupts>
 8002288:	4603      	mov	r3, r0
 800228a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800228e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002292:	d104      	bne.n	800229e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800229c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f005 ff12 	bl	80080cc <USB_ReadInterrupts>
 80022a8:	4603      	mov	r3, r0
 80022aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022b2:	d104      	bne.n	80022be <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f005 ff02 	bl	80080cc <USB_ReadInterrupts>
 80022c8:	4603      	mov	r3, r0
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d103      	bne.n	80022da <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2202      	movs	r2, #2
 80022d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f005 fef4 	bl	80080cc <USB_ReadInterrupts>
 80022e4:	4603      	mov	r3, r0
 80022e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022ee:	d11c      	bne.n	800232a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80022f8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10f      	bne.n	800232a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800230a:	2110      	movs	r1, #16
 800230c:	6938      	ldr	r0, [r7, #16]
 800230e:	f005 fde3 	bl	8007ed8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002312:	6938      	ldr	r0, [r7, #16]
 8002314:	f005 fe14 	bl	8007f40 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2101      	movs	r1, #1
 800231e:	4618      	mov	r0, r3
 8002320:	f005 ffea 	bl	80082f8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f008 fdb9 	bl	800ae9c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f005 fecc 	bl	80080cc <USB_ReadInterrupts>
 8002334:	4603      	mov	r3, r0
 8002336:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800233a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800233e:	d102      	bne.n	8002346 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f001 f89e 	bl	8003482 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f005 febe 	bl	80080cc <USB_ReadInterrupts>
 8002350:	4603      	mov	r3, r0
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b08      	cmp	r3, #8
 8002358:	d106      	bne.n	8002368 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f008 fd82 	bl	800ae64 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2208      	movs	r2, #8
 8002366:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f005 fead 	bl	80080cc <USB_ReadInterrupts>
 8002372:	4603      	mov	r3, r0
 8002374:	f003 0310 	and.w	r3, r3, #16
 8002378:	2b10      	cmp	r3, #16
 800237a:	d101      	bne.n	8002380 <HAL_HCD_IRQHandler+0x158>
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <HAL_HCD_IRQHandler+0x15a>
 8002380:	2300      	movs	r3, #0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d012      	beq.n	80023ac <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	699a      	ldr	r2, [r3, #24]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0210 	bic.w	r2, r2, #16
 8002394:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 ffa1 	bl	80032de <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	699a      	ldr	r2, [r3, #24]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0210 	orr.w	r2, r2, #16
 80023aa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f005 fe8b 	bl	80080cc <USB_ReadInterrupts>
 80023b6:	4603      	mov	r3, r0
 80023b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023c0:	d13a      	bne.n	8002438 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f006 fac0 	bl	800894c <USB_HC_ReadInterrupt>
 80023cc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	e025      	b.n	8002420 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d018      	beq.n	800241a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023fe:	d106      	bne.n	800240e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	b2db      	uxtb	r3, r3
 8002404:	4619      	mov	r1, r3
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f8ab 	bl	8002562 <HCD_HC_IN_IRQHandler>
 800240c:	e005      	b.n	800241a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	b2db      	uxtb	r3, r3
 8002412:	4619      	mov	r1, r3
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 fbf9 	bl	8002c0c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	3301      	adds	r3, #1
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	429a      	cmp	r2, r3
 8002428:	d3d4      	bcc.n	80023d4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002432:	615a      	str	r2, [r3, #20]
 8002434:	e000      	b.n	8002438 <HAL_HCD_IRQHandler+0x210>
      return;
 8002436:	bf00      	nop
    }
  }
}
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <HAL_HCD_Start+0x16>
 8002450:	2302      	movs	r3, #2
 8002452:	e013      	b.n	800247c <HAL_HCD_Start+0x3e>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2101      	movs	r1, #1
 8002462:	4618      	mov	r0, r3
 8002464:	f005 ffac 	bl	80083c0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f005 fcc4 	bl	8007dfa <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_HCD_Stop+0x16>
 8002496:	2302      	movs	r3, #2
 8002498:	e00d      	b.n	80024b6 <HAL_HCD_Stop+0x32>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f006 fb9a 	bl	8008be0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f005 ff4e 	bl	800836c <USB_ResetPort>
 80024d0:	4603      	mov	r3, r0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	460b      	mov	r3, r1
 80024e4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80024e6:	78fb      	ldrb	r3, [r7, #3]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	212c      	movs	r1, #44	; 0x2c
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	4413      	add	r3, r2
 80024f2:	3360      	adds	r3, #96	; 0x60
 80024f4:	781b      	ldrb	r3, [r3, #0]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	460b      	mov	r3, r1
 800250c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800250e:	78fb      	ldrb	r3, [r7, #3]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	212c      	movs	r1, #44	; 0x2c
 8002514:	fb01 f303 	mul.w	r3, r1, r3
 8002518:	4413      	add	r3, r2
 800251a:	3350      	adds	r3, #80	; 0x50
 800251c:	681b      	ldr	r3, [r3, #0]
}
 800251e:	4618      	mov	r0, r3
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f005 ff92 	bl	8008460 <USB_GetCurrentFrame>
 800253c:	4603      	mov	r3, r0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f005 ff6d 	bl	8008432 <USB_GetHostSpeed>
 8002558:	4603      	mov	r3, r0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b086      	sub	sp, #24
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	460b      	mov	r3, r1
 800256c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4413      	add	r3, r2
 8002584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b04      	cmp	r3, #4
 8002590:	d11a      	bne.n	80025c8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4413      	add	r3, r2
 800259a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259e:	461a      	mov	r2, r3
 80025a0:	2304      	movs	r3, #4
 80025a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	212c      	movs	r1, #44	; 0x2c
 80025aa:	fb01 f303 	mul.w	r3, r1, r3
 80025ae:	4413      	add	r3, r2
 80025b0:	3361      	adds	r3, #97	; 0x61
 80025b2:	2206      	movs	r2, #6
 80025b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f006 f9d4 	bl	800896e <USB_HC_Halt>
 80025c6:	e0af      	b.n	8002728 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025de:	d11b      	bne.n	8002618 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ec:	461a      	mov	r2, r3
 80025ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	212c      	movs	r1, #44	; 0x2c
 80025fa:	fb01 f303 	mul.w	r3, r1, r3
 80025fe:	4413      	add	r3, r2
 8002600:	3361      	adds	r3, #97	; 0x61
 8002602:	2207      	movs	r2, #7
 8002604:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f006 f9ac 	bl	800896e <USB_HC_Halt>
 8002616:	e087      	b.n	8002728 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4413      	add	r3, r2
 8002620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 0320 	and.w	r3, r3, #32
 800262a:	2b20      	cmp	r3, #32
 800262c:	d109      	bne.n	8002642 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4413      	add	r3, r2
 8002636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263a:	461a      	mov	r2, r3
 800263c:	2320      	movs	r3, #32
 800263e:	6093      	str	r3, [r2, #8]
 8002640:	e072      	b.n	8002728 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4413      	add	r3, r2
 800264a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b08      	cmp	r3, #8
 8002656:	d11a      	bne.n	800268e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	015a      	lsls	r2, r3, #5
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4413      	add	r3, r2
 8002660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002664:	461a      	mov	r2, r3
 8002666:	2308      	movs	r3, #8
 8002668:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	212c      	movs	r1, #44	; 0x2c
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	4413      	add	r3, r2
 8002676:	3361      	adds	r3, #97	; 0x61
 8002678:	2205      	movs	r2, #5
 800267a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	4611      	mov	r1, r2
 8002686:	4618      	mov	r0, r3
 8002688:	f006 f971 	bl	800896e <USB_HC_Halt>
 800268c:	e04c      	b.n	8002728 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4413      	add	r3, r2
 8002696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a4:	d11b      	bne.n	80026de <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b2:	461a      	mov	r2, r3
 80026b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	212c      	movs	r1, #44	; 0x2c
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
 80026c4:	4413      	add	r3, r2
 80026c6:	3361      	adds	r3, #97	; 0x61
 80026c8:	2208      	movs	r2, #8
 80026ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	4611      	mov	r1, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f006 f949 	bl	800896e <USB_HC_Halt>
 80026dc:	e024      	b.n	8002728 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f0:	2b80      	cmp	r3, #128	; 0x80
 80026f2:	d119      	bne.n	8002728 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002700:	461a      	mov	r2, r3
 8002702:	2380      	movs	r3, #128	; 0x80
 8002704:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	212c      	movs	r1, #44	; 0x2c
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	4413      	add	r3, r2
 8002712:	3361      	adds	r3, #97	; 0x61
 8002714:	2206      	movs	r2, #6
 8002716:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f006 f923 	bl	800896e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4413      	add	r3, r2
 8002730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800273a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800273e:	d112      	bne.n	8002766 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	4611      	mov	r1, r2
 800274a:	4618      	mov	r0, r3
 800274c:	f006 f90f 	bl	800896e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4413      	add	r3, r2
 8002758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275c:	461a      	mov	r2, r3
 800275e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002762:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002764:	e24e      	b.n	8002c04 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4413      	add	r3, r2
 800276e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b01      	cmp	r3, #1
 800277a:	f040 80df 	bne.w	800293c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d019      	beq.n	80027ba <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	212c      	movs	r1, #44	; 0x2c
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	3348      	adds	r3, #72	; 0x48
 8002794:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	0159      	lsls	r1, r3, #5
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	440b      	add	r3, r1
 800279e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80027a8:	1ad2      	subs	r2, r2, r3
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	202c      	movs	r0, #44	; 0x2c
 80027b0:	fb00 f303 	mul.w	r3, r0, r3
 80027b4:	440b      	add	r3, r1
 80027b6:	3350      	adds	r3, #80	; 0x50
 80027b8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	3361      	adds	r3, #97	; 0x61
 80027c8:	2201      	movs	r2, #1
 80027ca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	212c      	movs	r1, #44	; 0x2c
 80027d2:	fb01 f303 	mul.w	r3, r1, r3
 80027d6:	4413      	add	r3, r2
 80027d8:	335c      	adds	r3, #92	; 0x5c
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ea:	461a      	mov	r2, r3
 80027ec:	2301      	movs	r3, #1
 80027ee:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	212c      	movs	r1, #44	; 0x2c
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	4413      	add	r3, r2
 80027fc:	333f      	adds	r3, #63	; 0x3f
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d009      	beq.n	8002818 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	212c      	movs	r1, #44	; 0x2c
 800280a:	fb01 f303 	mul.w	r3, r1, r3
 800280e:	4413      	add	r3, r2
 8002810:	333f      	adds	r3, #63	; 0x3f
 8002812:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002814:	2b02      	cmp	r3, #2
 8002816:	d111      	bne.n	800283c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	4611      	mov	r1, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f006 f8a3 	bl	800896e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4413      	add	r3, r2
 8002830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002834:	461a      	mov	r2, r3
 8002836:	2310      	movs	r3, #16
 8002838:	6093      	str	r3, [r2, #8]
 800283a:	e03a      	b.n	80028b2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	212c      	movs	r1, #44	; 0x2c
 8002842:	fb01 f303 	mul.w	r3, r1, r3
 8002846:	4413      	add	r3, r2
 8002848:	333f      	adds	r3, #63	; 0x3f
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b03      	cmp	r3, #3
 800284e:	d009      	beq.n	8002864 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	212c      	movs	r1, #44	; 0x2c
 8002856:	fb01 f303 	mul.w	r3, r1, r3
 800285a:	4413      	add	r3, r2
 800285c:	333f      	adds	r3, #63	; 0x3f
 800285e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002860:	2b01      	cmp	r3, #1
 8002862:	d126      	bne.n	80028b2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	4413      	add	r3, r2
 800286c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	0151      	lsls	r1, r2, #5
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	440a      	add	r2, r1
 800287a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800287e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002882:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	212c      	movs	r1, #44	; 0x2c
 800288a:	fb01 f303 	mul.w	r3, r1, r3
 800288e:	4413      	add	r3, r2
 8002890:	3360      	adds	r3, #96	; 0x60
 8002892:	2201      	movs	r2, #1
 8002894:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	b2d9      	uxtb	r1, r3
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	202c      	movs	r0, #44	; 0x2c
 80028a0:	fb00 f303 	mul.w	r3, r0, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	3360      	adds	r3, #96	; 0x60
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f008 fb03 	bl	800aeb8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d12b      	bne.n	8002912 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	3348      	adds	r3, #72	; 0x48
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	202c      	movs	r0, #44	; 0x2c
 80028d0:	fb00 f202 	mul.w	r2, r0, r2
 80028d4:	440a      	add	r2, r1
 80028d6:	3240      	adds	r2, #64	; 0x40
 80028d8:	8812      	ldrh	r2, [r2, #0]
 80028da:	fbb3 f3f2 	udiv	r3, r3, r2
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 818e 	beq.w	8002c04 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	212c      	movs	r1, #44	; 0x2c
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	3354      	adds	r3, #84	; 0x54
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	f083 0301 	eor.w	r3, r3, #1
 80028fc:	b2d8      	uxtb	r0, r3
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	212c      	movs	r1, #44	; 0x2c
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	4413      	add	r3, r2
 800290a:	3354      	adds	r3, #84	; 0x54
 800290c:	4602      	mov	r2, r0
 800290e:	701a      	strb	r2, [r3, #0]
}
 8002910:	e178      	b.n	8002c04 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	212c      	movs	r1, #44	; 0x2c
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	3354      	adds	r3, #84	; 0x54
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	f083 0301 	eor.w	r3, r3, #1
 8002926:	b2d8      	uxtb	r0, r3
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	212c      	movs	r1, #44	; 0x2c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	3354      	adds	r3, #84	; 0x54
 8002936:	4602      	mov	r2, r0
 8002938:	701a      	strb	r2, [r3, #0]
}
 800293a:	e163      	b.n	8002c04 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b02      	cmp	r3, #2
 8002950:	f040 80f6 	bne.w	8002b40 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	212c      	movs	r1, #44	; 0x2c
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	4413      	add	r3, r2
 8002960:	3361      	adds	r3, #97	; 0x61
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d109      	bne.n	800297c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	212c      	movs	r1, #44	; 0x2c
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	3360      	adds	r3, #96	; 0x60
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]
 800297a:	e0c9      	b.n	8002b10 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	3361      	adds	r3, #97	; 0x61
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b05      	cmp	r3, #5
 800298e:	d109      	bne.n	80029a4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	212c      	movs	r1, #44	; 0x2c
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	3360      	adds	r3, #96	; 0x60
 800299e:	2205      	movs	r2, #5
 80029a0:	701a      	strb	r2, [r3, #0]
 80029a2:	e0b5      	b.n	8002b10 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	212c      	movs	r1, #44	; 0x2c
 80029aa:	fb01 f303 	mul.w	r3, r1, r3
 80029ae:	4413      	add	r3, r2
 80029b0:	3361      	adds	r3, #97	; 0x61
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b06      	cmp	r3, #6
 80029b6:	d009      	beq.n	80029cc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3361      	adds	r3, #97	; 0x61
 80029c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d150      	bne.n	8002a6e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	212c      	movs	r1, #44	; 0x2c
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	335c      	adds	r3, #92	; 0x5c
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	202c      	movs	r0, #44	; 0x2c
 80029e4:	fb00 f303 	mul.w	r3, r0, r3
 80029e8:	440b      	add	r3, r1
 80029ea:	335c      	adds	r3, #92	; 0x5c
 80029ec:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	212c      	movs	r1, #44	; 0x2c
 80029f4:	fb01 f303 	mul.w	r3, r1, r3
 80029f8:	4413      	add	r3, r2
 80029fa:	335c      	adds	r3, #92	; 0x5c
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d912      	bls.n	8002a28 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	212c      	movs	r1, #44	; 0x2c
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	335c      	adds	r3, #92	; 0x5c
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	212c      	movs	r1, #44	; 0x2c
 8002a1a:	fb01 f303 	mul.w	r3, r1, r3
 8002a1e:	4413      	add	r3, r2
 8002a20:	3360      	adds	r3, #96	; 0x60
 8002a22:	2204      	movs	r2, #4
 8002a24:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a26:	e073      	b.n	8002b10 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	212c      	movs	r1, #44	; 0x2c
 8002a2e:	fb01 f303 	mul.w	r3, r1, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	3360      	adds	r3, #96	; 0x60
 8002a36:	2202      	movs	r2, #2
 8002a38:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a50:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a58:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a66:	461a      	mov	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a6c:	e050      	b.n	8002b10 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	212c      	movs	r1, #44	; 0x2c
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	4413      	add	r3, r2
 8002a7a:	3361      	adds	r3, #97	; 0x61
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d122      	bne.n	8002ac8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	212c      	movs	r1, #44	; 0x2c
 8002a88:	fb01 f303 	mul.w	r3, r1, r3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3360      	adds	r3, #96	; 0x60
 8002a90:	2202      	movs	r2, #2
 8002a92:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002aaa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ab2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	e023      	b.n	8002b10 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	212c      	movs	r1, #44	; 0x2c
 8002ace:	fb01 f303 	mul.w	r3, r1, r3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3361      	adds	r3, #97	; 0x61
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b07      	cmp	r3, #7
 8002ada:	d119      	bne.n	8002b10 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	212c      	movs	r1, #44	; 0x2c
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	335c      	adds	r3, #92	; 0x5c
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	202c      	movs	r0, #44	; 0x2c
 8002af4:	fb00 f303 	mul.w	r3, r0, r3
 8002af8:	440b      	add	r3, r1
 8002afa:	335c      	adds	r3, #92	; 0x5c
 8002afc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	212c      	movs	r1, #44	; 0x2c
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	4413      	add	r3, r2
 8002b0a:	3360      	adds	r3, #96	; 0x60
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2302      	movs	r3, #2
 8002b20:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	b2d9      	uxtb	r1, r3
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	202c      	movs	r0, #44	; 0x2c
 8002b2c:	fb00 f303 	mul.w	r3, r0, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	3360      	adds	r3, #96	; 0x60
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f008 f9bd 	bl	800aeb8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b3e:	e061      	b.n	8002c04 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	2b10      	cmp	r3, #16
 8002b54:	d156      	bne.n	8002c04 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	212c      	movs	r1, #44	; 0x2c
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	333f      	adds	r3, #63	; 0x3f
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	d111      	bne.n	8002b8e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	212c      	movs	r1, #44	; 0x2c
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	335c      	adds	r3, #92	; 0x5c
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	4611      	mov	r1, r2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f005 fef1 	bl	800896e <USB_HC_Halt>
 8002b8c:	e031      	b.n	8002bf2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	212c      	movs	r1, #44	; 0x2c
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	333f      	adds	r3, #63	; 0x3f
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d009      	beq.n	8002bb6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	212c      	movs	r1, #44	; 0x2c
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	333f      	adds	r3, #63	; 0x3f
 8002bb0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d11d      	bne.n	8002bf2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	212c      	movs	r1, #44	; 0x2c
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	335c      	adds	r3, #92	; 0x5c
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d110      	bne.n	8002bf2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	212c      	movs	r1, #44	; 0x2c
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	3361      	adds	r3, #97	; 0x61
 8002bde:	2203      	movs	r2, #3
 8002be0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	4611      	mov	r1, r2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f005 febe 	bl	800896e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	015a      	lsls	r2, r3, #5
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfe:	461a      	mov	r2, r3
 8002c00:	2310      	movs	r3, #16
 8002c02:	6093      	str	r3, [r2, #8]
}
 8002c04:	bf00      	nop
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002c22:	78fb      	ldrb	r3, [r7, #3]
 8002c24:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	015a      	lsls	r2, r3, #5
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d11a      	bne.n	8002c72 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c48:	461a      	mov	r2, r3
 8002c4a:	2304      	movs	r3, #4
 8002c4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	212c      	movs	r1, #44	; 0x2c
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	4413      	add	r3, r2
 8002c5a:	3361      	adds	r3, #97	; 0x61
 8002c5c:	2206      	movs	r2, #6
 8002c5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f005 fe7f 	bl	800896e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002c70:	e331      	b.n	80032d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	015a      	lsls	r2, r3, #5
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b20      	cmp	r3, #32
 8002c86:	d12e      	bne.n	8002ce6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c94:	461a      	mov	r2, r3
 8002c96:	2320      	movs	r3, #32
 8002c98:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	212c      	movs	r1, #44	; 0x2c
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	333d      	adds	r3, #61	; 0x3d
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	f040 8313 	bne.w	80032d6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	212c      	movs	r1, #44	; 0x2c
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	333d      	adds	r3, #61	; 0x3d
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	212c      	movs	r1, #44	; 0x2c
 8002cc8:	fb01 f303 	mul.w	r3, r1, r3
 8002ccc:	4413      	add	r3, r2
 8002cce:	3360      	adds	r3, #96	; 0x60
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	4611      	mov	r1, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f005 fe45 	bl	800896e <USB_HC_Halt>
}
 8002ce4:	e2f7      	b.n	80032d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cfc:	d112      	bne.n	8002d24 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	015a      	lsls	r2, r3, #5
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	4413      	add	r3, r2
 8002d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d10:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f005 fe26 	bl	800896e <USB_HC_Halt>
}
 8002d22:	e2d8      	b.n	80032d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d140      	bne.n	8002dbc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	212c      	movs	r1, #44	; 0x2c
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	335c      	adds	r3, #92	; 0x5c
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5e:	2b40      	cmp	r3, #64	; 0x40
 8002d60:	d111      	bne.n	8002d86 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	212c      	movs	r1, #44	; 0x2c
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	333d      	adds	r3, #61	; 0x3d
 8002d70:	2201      	movs	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d80:	461a      	mov	r2, r3
 8002d82:	2340      	movs	r3, #64	; 0x40
 8002d84:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d92:	461a      	mov	r2, r3
 8002d94:	2301      	movs	r3, #1
 8002d96:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	212c      	movs	r1, #44	; 0x2c
 8002d9e:	fb01 f303 	mul.w	r3, r1, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	3361      	adds	r3, #97	; 0x61
 8002da6:	2201      	movs	r2, #1
 8002da8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	4611      	mov	r1, r2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f005 fdda 	bl	800896e <USB_HC_Halt>
}
 8002dba:	e28c      	b.n	80032d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dce:	2b40      	cmp	r3, #64	; 0x40
 8002dd0:	d12c      	bne.n	8002e2c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	212c      	movs	r1, #44	; 0x2c
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	4413      	add	r3, r2
 8002dde:	3361      	adds	r3, #97	; 0x61
 8002de0:	2204      	movs	r2, #4
 8002de2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	212c      	movs	r1, #44	; 0x2c
 8002dea:	fb01 f303 	mul.w	r3, r1, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	333d      	adds	r3, #61	; 0x3d
 8002df2:	2201      	movs	r2, #1
 8002df4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	212c      	movs	r1, #44	; 0x2c
 8002dfc:	fb01 f303 	mul.w	r3, r1, r3
 8002e00:	4413      	add	r3, r2
 8002e02:	335c      	adds	r3, #92	; 0x5c
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	4611      	mov	r1, r2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f005 fdab 	bl	800896e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	015a      	lsls	r2, r3, #5
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e24:	461a      	mov	r2, r3
 8002e26:	2340      	movs	r3, #64	; 0x40
 8002e28:	6093      	str	r3, [r2, #8]
}
 8002e2a:	e254      	b.n	80032d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	015a      	lsls	r2, r3, #5
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d11a      	bne.n	8002e78 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4e:	461a      	mov	r2, r3
 8002e50:	2308      	movs	r3, #8
 8002e52:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	212c      	movs	r1, #44	; 0x2c
 8002e5a:	fb01 f303 	mul.w	r3, r1, r3
 8002e5e:	4413      	add	r3, r2
 8002e60:	3361      	adds	r3, #97	; 0x61
 8002e62:	2205      	movs	r2, #5
 8002e64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f005 fd7c 	bl	800896e <USB_HC_Halt>
}
 8002e76:	e22e      	b.n	80032d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	2b10      	cmp	r3, #16
 8002e8c:	d140      	bne.n	8002f10 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	212c      	movs	r1, #44	; 0x2c
 8002e94:	fb01 f303 	mul.w	r3, r1, r3
 8002e98:	4413      	add	r3, r2
 8002e9a:	335c      	adds	r3, #92	; 0x5c
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	212c      	movs	r1, #44	; 0x2c
 8002ea6:	fb01 f303 	mul.w	r3, r1, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	3361      	adds	r3, #97	; 0x61
 8002eae:	2203      	movs	r2, #3
 8002eb0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	212c      	movs	r1, #44	; 0x2c
 8002eb8:	fb01 f303 	mul.w	r3, r1, r3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	333d      	adds	r3, #61	; 0x3d
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d112      	bne.n	8002eec <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	212c      	movs	r1, #44	; 0x2c
 8002ecc:	fb01 f303 	mul.w	r3, r1, r3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	333c      	adds	r3, #60	; 0x3c
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d108      	bne.n	8002eec <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	212c      	movs	r1, #44	; 0x2c
 8002ee0:	fb01 f303 	mul.w	r3, r1, r3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	333d      	adds	r3, #61	; 0x3d
 8002ee8:	2201      	movs	r2, #1
 8002eea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f005 fd39 	bl	800896e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	015a      	lsls	r2, r3, #5
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2310      	movs	r3, #16
 8002f0c:	6093      	str	r3, [r2, #8]
}
 8002f0e:	e1e2      	b.n	80032d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	015a      	lsls	r2, r3, #5
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f22:	2b80      	cmp	r3, #128	; 0x80
 8002f24:	d164      	bne.n	8002ff0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d111      	bne.n	8002f52 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	212c      	movs	r1, #44	; 0x2c
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	3361      	adds	r3, #97	; 0x61
 8002f3c:	2206      	movs	r2, #6
 8002f3e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f005 fd0f 	bl	800896e <USB_HC_Halt>
 8002f50:	e044      	b.n	8002fdc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	212c      	movs	r1, #44	; 0x2c
 8002f58:	fb01 f303 	mul.w	r3, r1, r3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	335c      	adds	r3, #92	; 0x5c
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	202c      	movs	r0, #44	; 0x2c
 8002f6a:	fb00 f303 	mul.w	r3, r0, r3
 8002f6e:	440b      	add	r3, r1
 8002f70:	335c      	adds	r3, #92	; 0x5c
 8002f72:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	212c      	movs	r1, #44	; 0x2c
 8002f7a:	fb01 f303 	mul.w	r3, r1, r3
 8002f7e:	4413      	add	r3, r2
 8002f80:	335c      	adds	r3, #92	; 0x5c
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d920      	bls.n	8002fca <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	212c      	movs	r1, #44	; 0x2c
 8002f8e:	fb01 f303 	mul.w	r3, r1, r3
 8002f92:	4413      	add	r3, r2
 8002f94:	335c      	adds	r3, #92	; 0x5c
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	212c      	movs	r1, #44	; 0x2c
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3360      	adds	r3, #96	; 0x60
 8002fa8:	2204      	movs	r2, #4
 8002faa:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	b2d9      	uxtb	r1, r3
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	202c      	movs	r0, #44	; 0x2c
 8002fb6:	fb00 f303 	mul.w	r3, r0, r3
 8002fba:	4413      	add	r3, r2
 8002fbc:	3360      	adds	r3, #96	; 0x60
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f007 ff78 	bl	800aeb8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002fc8:	e008      	b.n	8002fdc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	212c      	movs	r1, #44	; 0x2c
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3360      	adds	r3, #96	; 0x60
 8002fd8:	2202      	movs	r2, #2
 8002fda:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	6093      	str	r3, [r2, #8]
}
 8002fee:	e172      	b.n	80032d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003006:	d11b      	bne.n	8003040 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	212c      	movs	r1, #44	; 0x2c
 800300e:	fb01 f303 	mul.w	r3, r1, r3
 8003012:	4413      	add	r3, r2
 8003014:	3361      	adds	r3, #97	; 0x61
 8003016:	2208      	movs	r2, #8
 8003018:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	4611      	mov	r1, r2
 8003024:	4618      	mov	r0, r3
 8003026:	f005 fca2 	bl	800896e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	4413      	add	r3, r2
 8003032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003036:	461a      	mov	r2, r3
 8003038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800303c:	6093      	str	r3, [r2, #8]
}
 800303e:	e14a      	b.n	80032d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	4413      	add	r3, r2
 8003048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b02      	cmp	r3, #2
 8003054:	f040 813f 	bne.w	80032d6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	212c      	movs	r1, #44	; 0x2c
 800305e:	fb01 f303 	mul.w	r3, r1, r3
 8003062:	4413      	add	r3, r2
 8003064:	3361      	adds	r3, #97	; 0x61
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d17d      	bne.n	8003168 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	212c      	movs	r1, #44	; 0x2c
 8003072:	fb01 f303 	mul.w	r3, r1, r3
 8003076:	4413      	add	r3, r2
 8003078:	3360      	adds	r3, #96	; 0x60
 800307a:	2201      	movs	r2, #1
 800307c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	333f      	adds	r3, #63	; 0x3f
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d00a      	beq.n	80030a8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	212c      	movs	r1, #44	; 0x2c
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	4413      	add	r3, r2
 800309e:	333f      	adds	r3, #63	; 0x3f
 80030a0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	f040 8100 	bne.w	80032a8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d113      	bne.n	80030d8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	212c      	movs	r1, #44	; 0x2c
 80030b6:	fb01 f303 	mul.w	r3, r1, r3
 80030ba:	4413      	add	r3, r2
 80030bc:	3355      	adds	r3, #85	; 0x55
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	f083 0301 	eor.w	r3, r3, #1
 80030c4:	b2d8      	uxtb	r0, r3
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	212c      	movs	r1, #44	; 0x2c
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	3355      	adds	r3, #85	; 0x55
 80030d4:	4602      	mov	r2, r0
 80030d6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	f040 80e3 	bne.w	80032a8 <HCD_HC_OUT_IRQHandler+0x69c>
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	212c      	movs	r1, #44	; 0x2c
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	4413      	add	r3, r2
 80030ee:	334c      	adds	r3, #76	; 0x4c
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 80d8 	beq.w	80032a8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	212c      	movs	r1, #44	; 0x2c
 80030fe:	fb01 f303 	mul.w	r3, r1, r3
 8003102:	4413      	add	r3, r2
 8003104:	334c      	adds	r3, #76	; 0x4c
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	202c      	movs	r0, #44	; 0x2c
 800310e:	fb00 f202 	mul.w	r2, r0, r2
 8003112:	440a      	add	r2, r1
 8003114:	3240      	adds	r2, #64	; 0x40
 8003116:	8812      	ldrh	r2, [r2, #0]
 8003118:	4413      	add	r3, r2
 800311a:	3b01      	subs	r3, #1
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	202c      	movs	r0, #44	; 0x2c
 8003122:	fb00 f202 	mul.w	r2, r0, r2
 8003126:	440a      	add	r2, r1
 8003128:	3240      	adds	r2, #64	; 0x40
 800312a:	8812      	ldrh	r2, [r2, #0]
 800312c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003130:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80b5 	beq.w	80032a8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	212c      	movs	r1, #44	; 0x2c
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	4413      	add	r3, r2
 800314a:	3355      	adds	r3, #85	; 0x55
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	f083 0301 	eor.w	r3, r3, #1
 8003152:	b2d8      	uxtb	r0, r3
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	212c      	movs	r1, #44	; 0x2c
 800315a:	fb01 f303 	mul.w	r3, r1, r3
 800315e:	4413      	add	r3, r2
 8003160:	3355      	adds	r3, #85	; 0x55
 8003162:	4602      	mov	r2, r0
 8003164:	701a      	strb	r2, [r3, #0]
 8003166:	e09f      	b.n	80032a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	212c      	movs	r1, #44	; 0x2c
 800316e:	fb01 f303 	mul.w	r3, r1, r3
 8003172:	4413      	add	r3, r2
 8003174:	3361      	adds	r3, #97	; 0x61
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b03      	cmp	r3, #3
 800317a:	d109      	bne.n	8003190 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	212c      	movs	r1, #44	; 0x2c
 8003182:	fb01 f303 	mul.w	r3, r1, r3
 8003186:	4413      	add	r3, r2
 8003188:	3360      	adds	r3, #96	; 0x60
 800318a:	2202      	movs	r2, #2
 800318c:	701a      	strb	r2, [r3, #0]
 800318e:	e08b      	b.n	80032a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	212c      	movs	r1, #44	; 0x2c
 8003196:	fb01 f303 	mul.w	r3, r1, r3
 800319a:	4413      	add	r3, r2
 800319c:	3361      	adds	r3, #97	; 0x61
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d109      	bne.n	80031b8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	212c      	movs	r1, #44	; 0x2c
 80031aa:	fb01 f303 	mul.w	r3, r1, r3
 80031ae:	4413      	add	r3, r2
 80031b0:	3360      	adds	r3, #96	; 0x60
 80031b2:	2202      	movs	r2, #2
 80031b4:	701a      	strb	r2, [r3, #0]
 80031b6:	e077      	b.n	80032a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	212c      	movs	r1, #44	; 0x2c
 80031be:	fb01 f303 	mul.w	r3, r1, r3
 80031c2:	4413      	add	r3, r2
 80031c4:	3361      	adds	r3, #97	; 0x61
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b05      	cmp	r3, #5
 80031ca:	d109      	bne.n	80031e0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	212c      	movs	r1, #44	; 0x2c
 80031d2:	fb01 f303 	mul.w	r3, r1, r3
 80031d6:	4413      	add	r3, r2
 80031d8:	3360      	adds	r3, #96	; 0x60
 80031da:	2205      	movs	r2, #5
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	e063      	b.n	80032a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	212c      	movs	r1, #44	; 0x2c
 80031e6:	fb01 f303 	mul.w	r3, r1, r3
 80031ea:	4413      	add	r3, r2
 80031ec:	3361      	adds	r3, #97	; 0x61
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b06      	cmp	r3, #6
 80031f2:	d009      	beq.n	8003208 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	212c      	movs	r1, #44	; 0x2c
 80031fa:	fb01 f303 	mul.w	r3, r1, r3
 80031fe:	4413      	add	r3, r2
 8003200:	3361      	adds	r3, #97	; 0x61
 8003202:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003204:	2b08      	cmp	r3, #8
 8003206:	d14f      	bne.n	80032a8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	212c      	movs	r1, #44	; 0x2c
 800320e:	fb01 f303 	mul.w	r3, r1, r3
 8003212:	4413      	add	r3, r2
 8003214:	335c      	adds	r3, #92	; 0x5c
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	202c      	movs	r0, #44	; 0x2c
 8003220:	fb00 f303 	mul.w	r3, r0, r3
 8003224:	440b      	add	r3, r1
 8003226:	335c      	adds	r3, #92	; 0x5c
 8003228:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	212c      	movs	r1, #44	; 0x2c
 8003230:	fb01 f303 	mul.w	r3, r1, r3
 8003234:	4413      	add	r3, r2
 8003236:	335c      	adds	r3, #92	; 0x5c
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d912      	bls.n	8003264 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	212c      	movs	r1, #44	; 0x2c
 8003244:	fb01 f303 	mul.w	r3, r1, r3
 8003248:	4413      	add	r3, r2
 800324a:	335c      	adds	r3, #92	; 0x5c
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	212c      	movs	r1, #44	; 0x2c
 8003256:	fb01 f303 	mul.w	r3, r1, r3
 800325a:	4413      	add	r3, r2
 800325c:	3360      	adds	r3, #96	; 0x60
 800325e:	2204      	movs	r2, #4
 8003260:	701a      	strb	r2, [r3, #0]
 8003262:	e021      	b.n	80032a8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	212c      	movs	r1, #44	; 0x2c
 800326a:	fb01 f303 	mul.w	r3, r1, r3
 800326e:	4413      	add	r3, r2
 8003270:	3360      	adds	r3, #96	; 0x60
 8003272:	2202      	movs	r2, #2
 8003274:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	4413      	add	r3, r2
 800327e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800328c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003294:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	4413      	add	r3, r2
 800329e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a2:	461a      	mov	r2, r3
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b4:	461a      	mov	r2, r3
 80032b6:	2302      	movs	r3, #2
 80032b8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	b2d9      	uxtb	r1, r3
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	202c      	movs	r0, #44	; 0x2c
 80032c4:	fb00 f303 	mul.w	r3, r0, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	3360      	adds	r3, #96	; 0x60
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	461a      	mov	r2, r3
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f007 fdf1 	bl	800aeb8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80032d6:	bf00      	nop
 80032d8:	3720      	adds	r7, #32
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b08a      	sub	sp, #40	; 0x28
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	0c5b      	lsrs	r3, r3, #17
 8003304:	f003 030f 	and.w	r3, r3, #15
 8003308:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003312:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d004      	beq.n	8003324 <HCD_RXQLVL_IRQHandler+0x46>
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b05      	cmp	r3, #5
 800331e:	f000 80a9 	beq.w	8003474 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003322:	e0aa      	b.n	800347a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 80a6 	beq.w	8003478 <HCD_RXQLVL_IRQHandler+0x19a>
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	212c      	movs	r1, #44	; 0x2c
 8003332:	fb01 f303 	mul.w	r3, r1, r3
 8003336:	4413      	add	r3, r2
 8003338:	3344      	adds	r3, #68	; 0x44
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 809b 	beq.w	8003478 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	212c      	movs	r1, #44	; 0x2c
 8003348:	fb01 f303 	mul.w	r3, r1, r3
 800334c:	4413      	add	r3, r2
 800334e:	3350      	adds	r3, #80	; 0x50
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	441a      	add	r2, r3
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	202c      	movs	r0, #44	; 0x2c
 800335c:	fb00 f303 	mul.w	r3, r0, r3
 8003360:	440b      	add	r3, r1
 8003362:	334c      	adds	r3, #76	; 0x4c
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d87a      	bhi.n	8003460 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	212c      	movs	r1, #44	; 0x2c
 8003374:	fb01 f303 	mul.w	r3, r1, r3
 8003378:	4413      	add	r3, r2
 800337a:	3344      	adds	r3, #68	; 0x44
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	b292      	uxth	r2, r2
 8003382:	4619      	mov	r1, r3
 8003384:	f004 fe4a 	bl	800801c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	212c      	movs	r1, #44	; 0x2c
 800338e:	fb01 f303 	mul.w	r3, r1, r3
 8003392:	4413      	add	r3, r2
 8003394:	3344      	adds	r3, #68	; 0x44
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	441a      	add	r2, r3
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	202c      	movs	r0, #44	; 0x2c
 80033a2:	fb00 f303 	mul.w	r3, r0, r3
 80033a6:	440b      	add	r3, r1
 80033a8:	3344      	adds	r3, #68	; 0x44
 80033aa:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	212c      	movs	r1, #44	; 0x2c
 80033b2:	fb01 f303 	mul.w	r3, r1, r3
 80033b6:	4413      	add	r3, r2
 80033b8:	3350      	adds	r3, #80	; 0x50
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	441a      	add	r2, r3
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	202c      	movs	r0, #44	; 0x2c
 80033c6:	fb00 f303 	mul.w	r3, r0, r3
 80033ca:	440b      	add	r3, r1
 80033cc:	3350      	adds	r3, #80	; 0x50
 80033ce:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	015a      	lsls	r2, r3, #5
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	4413      	add	r3, r2
 80033d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	0cdb      	lsrs	r3, r3, #19
 80033e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033e4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	212c      	movs	r1, #44	; 0x2c
 80033ec:	fb01 f303 	mul.w	r3, r1, r3
 80033f0:	4413      	add	r3, r2
 80033f2:	3340      	adds	r3, #64	; 0x40
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d13c      	bne.n	8003478 <HCD_RXQLVL_IRQHandler+0x19a>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d039      	beq.n	8003478 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	4413      	add	r3, r2
 800340c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800341a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003422:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	4413      	add	r3, r2
 800342c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003430:	461a      	mov	r2, r3
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	212c      	movs	r1, #44	; 0x2c
 800343c:	fb01 f303 	mul.w	r3, r1, r3
 8003440:	4413      	add	r3, r2
 8003442:	3354      	adds	r3, #84	; 0x54
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	f083 0301 	eor.w	r3, r3, #1
 800344a:	b2d8      	uxtb	r0, r3
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	212c      	movs	r1, #44	; 0x2c
 8003452:	fb01 f303 	mul.w	r3, r1, r3
 8003456:	4413      	add	r3, r2
 8003458:	3354      	adds	r3, #84	; 0x54
 800345a:	4602      	mov	r2, r0
 800345c:	701a      	strb	r2, [r3, #0]
      break;
 800345e:	e00b      	b.n	8003478 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	212c      	movs	r1, #44	; 0x2c
 8003466:	fb01 f303 	mul.w	r3, r1, r3
 800346a:	4413      	add	r3, r2
 800346c:	3360      	adds	r3, #96	; 0x60
 800346e:	2204      	movs	r2, #4
 8003470:	701a      	strb	r2, [r3, #0]
      break;
 8003472:	e001      	b.n	8003478 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003474:	bf00      	nop
 8003476:	e000      	b.n	800347a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003478:	bf00      	nop
  }
}
 800347a:	bf00      	nop
 800347c:	3728      	adds	r7, #40	; 0x28
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b086      	sub	sp, #24
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80034ae:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d10b      	bne.n	80034d2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d102      	bne.n	80034ca <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f007 fcdb 	bl	800ae80 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	f043 0302 	orr.w	r3, r3, #2
 80034d0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d132      	bne.n	8003542 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f043 0308 	orr.w	r3, r3, #8
 80034e2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f003 0304 	and.w	r3, r3, #4
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d126      	bne.n	800353c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d113      	bne.n	800351e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80034fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003500:	d106      	bne.n	8003510 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2102      	movs	r1, #2
 8003508:	4618      	mov	r0, r3
 800350a:	f004 fef5 	bl	80082f8 <USB_InitFSLSPClkSel>
 800350e:	e011      	b.n	8003534 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2101      	movs	r1, #1
 8003516:	4618      	mov	r0, r3
 8003518:	f004 feee 	bl	80082f8 <USB_InitFSLSPClkSel>
 800351c:	e00a      	b.n	8003534 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d106      	bne.n	8003534 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800352c:	461a      	mov	r2, r3
 800352e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003532:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f007 fccd 	bl	800aed4 <HAL_HCD_PortEnabled_Callback>
 800353a:	e002      	b.n	8003542 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f007 fcd7 	bl	800aef0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b20      	cmp	r3, #32
 800354a:	d103      	bne.n	8003554 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f043 0320 	orr.w	r3, r3, #32
 8003552:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800355a:	461a      	mov	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	6013      	str	r3, [r2, #0]
}
 8003560:	bf00      	nop
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e12b      	b.n	80037d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7fd fd4e 	bl	8001030 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2224      	movs	r2, #36	; 0x24
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0201 	bic.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035cc:	f002 f9ba 	bl	8005944 <HAL_RCC_GetPCLK1Freq>
 80035d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	4a81      	ldr	r2, [pc, #516]	; (80037dc <HAL_I2C_Init+0x274>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d807      	bhi.n	80035ec <HAL_I2C_Init+0x84>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4a80      	ldr	r2, [pc, #512]	; (80037e0 <HAL_I2C_Init+0x278>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	bf94      	ite	ls
 80035e4:	2301      	movls	r3, #1
 80035e6:	2300      	movhi	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	e006      	b.n	80035fa <HAL_I2C_Init+0x92>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4a7d      	ldr	r2, [pc, #500]	; (80037e4 <HAL_I2C_Init+0x27c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	bf94      	ite	ls
 80035f4:	2301      	movls	r3, #1
 80035f6:	2300      	movhi	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e0e7      	b.n	80037d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4a78      	ldr	r2, [pc, #480]	; (80037e8 <HAL_I2C_Init+0x280>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	0c9b      	lsrs	r3, r3, #18
 800360c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	430a      	orrs	r2, r1
 8003620:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	4a6a      	ldr	r2, [pc, #424]	; (80037dc <HAL_I2C_Init+0x274>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d802      	bhi.n	800363c <HAL_I2C_Init+0xd4>
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	3301      	adds	r3, #1
 800363a:	e009      	b.n	8003650 <HAL_I2C_Init+0xe8>
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003642:	fb02 f303 	mul.w	r3, r2, r3
 8003646:	4a69      	ldr	r2, [pc, #420]	; (80037ec <HAL_I2C_Init+0x284>)
 8003648:	fba2 2303 	umull	r2, r3, r2, r3
 800364c:	099b      	lsrs	r3, r3, #6
 800364e:	3301      	adds	r3, #1
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	430b      	orrs	r3, r1
 8003656:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003662:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	495c      	ldr	r1, [pc, #368]	; (80037dc <HAL_I2C_Init+0x274>)
 800366c:	428b      	cmp	r3, r1
 800366e:	d819      	bhi.n	80036a4 <HAL_I2C_Init+0x13c>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	1e59      	subs	r1, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	fbb1 f3f3 	udiv	r3, r1, r3
 800367e:	1c59      	adds	r1, r3, #1
 8003680:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003684:	400b      	ands	r3, r1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_I2C_Init+0x138>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1e59      	subs	r1, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	fbb1 f3f3 	udiv	r3, r1, r3
 8003698:	3301      	adds	r3, #1
 800369a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369e:	e051      	b.n	8003744 <HAL_I2C_Init+0x1dc>
 80036a0:	2304      	movs	r3, #4
 80036a2:	e04f      	b.n	8003744 <HAL_I2C_Init+0x1dc>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d111      	bne.n	80036d0 <HAL_I2C_Init+0x168>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	1e58      	subs	r0, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6859      	ldr	r1, [r3, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	440b      	add	r3, r1
 80036ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80036be:	3301      	adds	r3, #1
 80036c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	e012      	b.n	80036f6 <HAL_I2C_Init+0x18e>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	1e58      	subs	r0, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6859      	ldr	r1, [r3, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	0099      	lsls	r1, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036e6:	3301      	adds	r3, #1
 80036e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	bf0c      	ite	eq
 80036f0:	2301      	moveq	r3, #1
 80036f2:	2300      	movne	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <HAL_I2C_Init+0x196>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e022      	b.n	8003744 <HAL_I2C_Init+0x1dc>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10e      	bne.n	8003724 <HAL_I2C_Init+0x1bc>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1e58      	subs	r0, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6859      	ldr	r1, [r3, #4]
 800370e:	460b      	mov	r3, r1
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	440b      	add	r3, r1
 8003714:	fbb0 f3f3 	udiv	r3, r0, r3
 8003718:	3301      	adds	r3, #1
 800371a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003722:	e00f      	b.n	8003744 <HAL_I2C_Init+0x1dc>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	1e58      	subs	r0, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6859      	ldr	r1, [r3, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	0099      	lsls	r1, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	fbb0 f3f3 	udiv	r3, r0, r3
 800373a:	3301      	adds	r3, #1
 800373c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003740:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	6809      	ldr	r1, [r1, #0]
 8003748:	4313      	orrs	r3, r2
 800374a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69da      	ldr	r2, [r3, #28]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003772:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6911      	ldr	r1, [r2, #16]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	68d2      	ldr	r2, [r2, #12]
 800377e:	4311      	orrs	r1, r2
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	430b      	orrs	r3, r1
 8003786:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695a      	ldr	r2, [r3, #20]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	000186a0 	.word	0x000186a0
 80037e0:	001e847f 	.word	0x001e847f
 80037e4:	003d08ff 	.word	0x003d08ff
 80037e8:	431bde83 	.word	0x431bde83
 80037ec:	10624dd3 	.word	0x10624dd3

080037f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	607a      	str	r2, [r7, #4]
 80037fa:	461a      	mov	r2, r3
 80037fc:	460b      	mov	r3, r1
 80037fe:	817b      	strh	r3, [r7, #10]
 8003800:	4613      	mov	r3, r2
 8003802:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003804:	f7fd ff1c 	bl	8001640 <HAL_GetTick>
 8003808:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b20      	cmp	r3, #32
 8003814:	f040 80e0 	bne.w	80039d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	2319      	movs	r3, #25
 800381e:	2201      	movs	r2, #1
 8003820:	4970      	ldr	r1, [pc, #448]	; (80039e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 fda0 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800382e:	2302      	movs	r3, #2
 8003830:	e0d3      	b.n	80039da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_I2C_Master_Transmit+0x50>
 800383c:	2302      	movs	r3, #2
 800383e:	e0cc      	b.n	80039da <HAL_I2C_Master_Transmit+0x1ea>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b01      	cmp	r3, #1
 8003854:	d007      	beq.n	8003866 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 0201 	orr.w	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003874:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2221      	movs	r2, #33	; 0x21
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2210      	movs	r2, #16
 8003882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	893a      	ldrh	r2, [r7, #8]
 8003896:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4a50      	ldr	r2, [pc, #320]	; (80039e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80038a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038a8:	8979      	ldrh	r1, [r7, #10]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	6a3a      	ldr	r2, [r7, #32]
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 fbf0 	bl	8004094 <I2C_MasterRequestWrite>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e08d      	b.n	80039da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038be:	2300      	movs	r3, #0
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80038d4:	e066      	b.n	80039a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	6a39      	ldr	r1, [r7, #32]
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 fe1a 	bl	8004514 <I2C_WaitOnTXEFlagUntilTimeout>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00d      	beq.n	8003902 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d107      	bne.n	80038fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e06b      	b.n	80039da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	781a      	ldrb	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b04      	cmp	r3, #4
 800393e:	d11b      	bne.n	8003978 <HAL_I2C_Master_Transmit+0x188>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003944:	2b00      	cmp	r3, #0
 8003946:	d017      	beq.n	8003978 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	781a      	ldrb	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	1c5a      	adds	r2, r3, #1
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003962:	b29b      	uxth	r3, r3
 8003964:	3b01      	subs	r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	6a39      	ldr	r1, [r7, #32]
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 fe0a 	bl	8004596 <I2C_WaitOnBTFFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00d      	beq.n	80039a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	2b04      	cmp	r3, #4
 800398e:	d107      	bne.n	80039a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e01a      	b.n	80039da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d194      	bne.n	80038d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039d4:	2300      	movs	r3, #0
 80039d6:	e000      	b.n	80039da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80039d8:	2302      	movs	r3, #2
  }
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	00100002 	.word	0x00100002
 80039e8:	ffff0000 	.word	0xffff0000

080039ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08c      	sub	sp, #48	; 0x30
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	4608      	mov	r0, r1
 80039f6:	4611      	mov	r1, r2
 80039f8:	461a      	mov	r2, r3
 80039fa:	4603      	mov	r3, r0
 80039fc:	817b      	strh	r3, [r7, #10]
 80039fe:	460b      	mov	r3, r1
 8003a00:	813b      	strh	r3, [r7, #8]
 8003a02:	4613      	mov	r3, r2
 8003a04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a06:	f7fd fe1b 	bl	8001640 <HAL_GetTick>
 8003a0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b20      	cmp	r3, #32
 8003a16:	f040 8208 	bne.w	8003e2a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	2319      	movs	r3, #25
 8003a20:	2201      	movs	r2, #1
 8003a22:	497b      	ldr	r1, [pc, #492]	; (8003c10 <HAL_I2C_Mem_Read+0x224>)
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 fc9f 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003a30:	2302      	movs	r3, #2
 8003a32:	e1fb      	b.n	8003e2c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d101      	bne.n	8003a42 <HAL_I2C_Mem_Read+0x56>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e1f4      	b.n	8003e2c <HAL_I2C_Mem_Read+0x440>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d007      	beq.n	8003a68 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2222      	movs	r2, #34	; 0x22
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2240      	movs	r2, #64	; 0x40
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003a98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4a5b      	ldr	r2, [pc, #364]	; (8003c14 <HAL_I2C_Mem_Read+0x228>)
 8003aa8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003aaa:	88f8      	ldrh	r0, [r7, #6]
 8003aac:	893a      	ldrh	r2, [r7, #8]
 8003aae:	8979      	ldrh	r1, [r7, #10]
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	9301      	str	r3, [sp, #4]
 8003ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	4603      	mov	r3, r0
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 fb6c 	bl	8004198 <I2C_RequestMemoryRead>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e1b0      	b.n	8003e2c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d113      	bne.n	8003afa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	623b      	str	r3, [r7, #32]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	623b      	str	r3, [r7, #32]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	623b      	str	r3, [r7, #32]
 8003ae6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	e184      	b.n	8003e04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d11b      	bne.n	8003b3a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b12:	2300      	movs	r3, #0
 8003b14:	61fb      	str	r3, [r7, #28]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	61fb      	str	r3, [r7, #28]
 8003b26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	e164      	b.n	8003e04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d11b      	bne.n	8003b7a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b62:	2300      	movs	r3, #0
 8003b64:	61bb      	str	r3, [r7, #24]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	61bb      	str	r3, [r7, #24]
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	e144      	b.n	8003e04 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b90:	e138      	b.n	8003e04 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	f200 80f1 	bhi.w	8003d7e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d123      	bne.n	8003bec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 fd35 	bl	8004618 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e139      	b.n	8003e2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bea:	e10b      	b.n	8003e04 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d14e      	bne.n	8003c92 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	4906      	ldr	r1, [pc, #24]	; (8003c18 <HAL_I2C_Mem_Read+0x22c>)
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 fbb2 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d008      	beq.n	8003c1c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e10e      	b.n	8003e2c <HAL_I2C_Mem_Read+0x440>
 8003c0e:	bf00      	nop
 8003c10:	00100002 	.word	0x00100002
 8003c14:	ffff0000 	.word	0xffff0000
 8003c18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691a      	ldr	r2, [r3, #16]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c90:	e0b8      	b.n	8003e04 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	2200      	movs	r2, #0
 8003c9a:	4966      	ldr	r1, [pc, #408]	; (8003e34 <HAL_I2C_Mem_Read+0x448>)
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 fb63 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0bf      	b.n	8003e2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	494f      	ldr	r1, [pc, #316]	; (8003e34 <HAL_I2C_Mem_Read+0x448>)
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 fb35 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e091      	b.n	8003e2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	691a      	ldr	r2, [r3, #16]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d7c:	e042      	b.n	8003e04 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 fc48 	bl	8004618 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e04c      	b.n	8003e2c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d118      	bne.n	8003e04 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f47f aec2 	bne.w	8003b92 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	e000      	b.n	8003e2c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003e2a:	2302      	movs	r3, #2
  }
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3728      	adds	r7, #40	; 0x28
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	00010004 	.word	0x00010004

08003e38 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b08a      	sub	sp, #40	; 0x28
 8003e3c:	af02      	add	r7, sp, #8
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	607a      	str	r2, [r7, #4]
 8003e42:	603b      	str	r3, [r7, #0]
 8003e44:	460b      	mov	r3, r1
 8003e46:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003e48:	f7fd fbfa 	bl	8001640 <HAL_GetTick>
 8003e4c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	f040 8111 	bne.w	8004082 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	2319      	movs	r3, #25
 8003e66:	2201      	movs	r2, #1
 8003e68:	4988      	ldr	r1, [pc, #544]	; (800408c <HAL_I2C_IsDeviceReady+0x254>)
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 fa7c 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003e76:	2302      	movs	r3, #2
 8003e78:	e104      	b.n	8004084 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <HAL_I2C_IsDeviceReady+0x50>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e0fd      	b.n	8004084 <HAL_I2C_IsDeviceReady+0x24c>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d007      	beq.n	8003eae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0201 	orr.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ebc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2224      	movs	r2, #36	; 0x24
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4a70      	ldr	r2, [pc, #448]	; (8004090 <HAL_I2C_IsDeviceReady+0x258>)
 8003ed0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ee0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 fa3a 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00d      	beq.n	8003f16 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f08:	d103      	bne.n	8003f12 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e0b6      	b.n	8004084 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f16:	897b      	ldrh	r3, [r7, #10]
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f24:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003f26:	f7fd fb8b 	bl	8001640 <HAL_GetTick>
 8003f2a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	bf0c      	ite	eq
 8003f3a:	2301      	moveq	r3, #1
 8003f3c:	2300      	movne	r3, #0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f50:	bf0c      	ite	eq
 8003f52:	2301      	moveq	r3, #1
 8003f54:	2300      	movne	r3, #0
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f5a:	e025      	b.n	8003fa8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f5c:	f7fd fb70 	bl	8001640 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d302      	bcc.n	8003f72 <HAL_I2C_IsDeviceReady+0x13a>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d103      	bne.n	8003f7a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	22a0      	movs	r2, #160	; 0xa0
 8003f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	bf0c      	ite	eq
 8003f88:	2301      	moveq	r3, #1
 8003f8a:	2300      	movne	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f9e:	bf0c      	ite	eq
 8003fa0:	2301      	moveq	r3, #1
 8003fa2:	2300      	movne	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2ba0      	cmp	r3, #160	; 0xa0
 8003fb2:	d005      	beq.n	8003fc0 <HAL_I2C_IsDeviceReady+0x188>
 8003fb4:	7dfb      	ldrb	r3, [r7, #23]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d102      	bne.n	8003fc0 <HAL_I2C_IsDeviceReady+0x188>
 8003fba:	7dbb      	ldrb	r3, [r7, #22]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0cd      	beq.n	8003f5c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d129      	bne.n	800402a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	613b      	str	r3, [r7, #16]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	613b      	str	r3, [r7, #16]
 8003ffa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	2319      	movs	r3, #25
 8004002:	2201      	movs	r2, #1
 8004004:	4921      	ldr	r1, [pc, #132]	; (800408c <HAL_I2C_IsDeviceReady+0x254>)
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 f9ae 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e036      	b.n	8004084 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2220      	movs	r2, #32
 800401a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	e02c      	b.n	8004084 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004038:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004042:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	2319      	movs	r3, #25
 800404a:	2201      	movs	r2, #1
 800404c:	490f      	ldr	r1, [pc, #60]	; (800408c <HAL_I2C_IsDeviceReady+0x254>)
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 f98a 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e012      	b.n	8004084 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	3301      	adds	r3, #1
 8004062:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	429a      	cmp	r2, r3
 800406a:	f4ff af32 	bcc.w	8003ed2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2220      	movs	r2, #32
 8004072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004082:	2302      	movs	r3, #2
  }
}
 8004084:	4618      	mov	r0, r3
 8004086:	3720      	adds	r7, #32
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	00100002 	.word	0x00100002
 8004090:	ffff0000 	.word	0xffff0000

08004094 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af02      	add	r7, sp, #8
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	607a      	str	r2, [r7, #4]
 800409e:	603b      	str	r3, [r7, #0]
 80040a0:	460b      	mov	r3, r1
 80040a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d006      	beq.n	80040be <I2C_MasterRequestWrite+0x2a>
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d003      	beq.n	80040be <I2C_MasterRequestWrite+0x2a>
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040bc:	d108      	bne.n	80040d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	e00b      	b.n	80040e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	2b12      	cmp	r3, #18
 80040d6:	d107      	bne.n	80040e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f937 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00d      	beq.n	800411c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800410e:	d103      	bne.n	8004118 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004116:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e035      	b.n	8004188 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004124:	d108      	bne.n	8004138 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004126:	897b      	ldrh	r3, [r7, #10]
 8004128:	b2db      	uxtb	r3, r3
 800412a:	461a      	mov	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004134:	611a      	str	r2, [r3, #16]
 8004136:	e01b      	b.n	8004170 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004138:	897b      	ldrh	r3, [r7, #10]
 800413a:	11db      	asrs	r3, r3, #7
 800413c:	b2db      	uxtb	r3, r3
 800413e:	f003 0306 	and.w	r3, r3, #6
 8004142:	b2db      	uxtb	r3, r3
 8004144:	f063 030f 	orn	r3, r3, #15
 8004148:	b2da      	uxtb	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	490e      	ldr	r1, [pc, #56]	; (8004190 <I2C_MasterRequestWrite+0xfc>)
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 f95d 	bl	8004416 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e010      	b.n	8004188 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004166:	897b      	ldrh	r3, [r7, #10]
 8004168:	b2da      	uxtb	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	4907      	ldr	r1, [pc, #28]	; (8004194 <I2C_MasterRequestWrite+0x100>)
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 f94d 	bl	8004416 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	00010008 	.word	0x00010008
 8004194:	00010002 	.word	0x00010002

08004198 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af02      	add	r7, sp, #8
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	4608      	mov	r0, r1
 80041a2:	4611      	mov	r1, r2
 80041a4:	461a      	mov	r2, r3
 80041a6:	4603      	mov	r3, r0
 80041a8:	817b      	strh	r3, [r7, #10]
 80041aa:	460b      	mov	r3, r1
 80041ac:	813b      	strh	r3, [r7, #8]
 80041ae:	4613      	mov	r3, r2
 80041b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	2200      	movs	r2, #0
 80041da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 f8c2 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00d      	beq.n	8004206 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f8:	d103      	bne.n	8004202 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004200:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e0aa      	b.n	800435c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004206:	897b      	ldrh	r3, [r7, #10]
 8004208:	b2db      	uxtb	r3, r3
 800420a:	461a      	mov	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004214:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	6a3a      	ldr	r2, [r7, #32]
 800421a:	4952      	ldr	r1, [pc, #328]	; (8004364 <I2C_RequestMemoryRead+0x1cc>)
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f8fa 	bl	8004416 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e097      	b.n	800435c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004244:	6a39      	ldr	r1, [r7, #32]
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 f964 	bl	8004514 <I2C_WaitOnTXEFlagUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00d      	beq.n	800426e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	2b04      	cmp	r3, #4
 8004258:	d107      	bne.n	800426a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004268:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e076      	b.n	800435c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800426e:	88fb      	ldrh	r3, [r7, #6]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d105      	bne.n	8004280 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004274:	893b      	ldrh	r3, [r7, #8]
 8004276:	b2da      	uxtb	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	611a      	str	r2, [r3, #16]
 800427e:	e021      	b.n	80042c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004280:	893b      	ldrh	r3, [r7, #8]
 8004282:	0a1b      	lsrs	r3, r3, #8
 8004284:	b29b      	uxth	r3, r3
 8004286:	b2da      	uxtb	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800428e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004290:	6a39      	ldr	r1, [r7, #32]
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 f93e 	bl	8004514 <I2C_WaitOnTXEFlagUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00d      	beq.n	80042ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d107      	bne.n	80042b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e050      	b.n	800435c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042ba:	893b      	ldrh	r3, [r7, #8]
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c6:	6a39      	ldr	r1, [r7, #32]
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f923 	bl	8004514 <I2C_WaitOnTXEFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00d      	beq.n	80042f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d107      	bne.n	80042ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e035      	b.n	800435c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	2200      	movs	r2, #0
 8004308:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f82b 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00d      	beq.n	8004334 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004326:	d103      	bne.n	8004330 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800432e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e013      	b.n	800435c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004334:	897b      	ldrh	r3, [r7, #10]
 8004336:	b2db      	uxtb	r3, r3
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	b2da      	uxtb	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	6a3a      	ldr	r2, [r7, #32]
 8004348:	4906      	ldr	r1, [pc, #24]	; (8004364 <I2C_RequestMemoryRead+0x1cc>)
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 f863 	bl	8004416 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3718      	adds	r7, #24
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	00010002 	.word	0x00010002

08004368 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	4613      	mov	r3, r2
 8004376:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004378:	e025      	b.n	80043c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004380:	d021      	beq.n	80043c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004382:	f7fd f95d 	bl	8001640 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d302      	bcc.n	8004398 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d116      	bne.n	80043c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	f043 0220 	orr.w	r2, r3, #32
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e023      	b.n	800440e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	0c1b      	lsrs	r3, r3, #16
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d10d      	bne.n	80043ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	43da      	mvns	r2, r3
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	4013      	ands	r3, r2
 80043dc:	b29b      	uxth	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	bf0c      	ite	eq
 80043e2:	2301      	moveq	r3, #1
 80043e4:	2300      	movne	r3, #0
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	461a      	mov	r2, r3
 80043ea:	e00c      	b.n	8004406 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	43da      	mvns	r2, r3
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	4013      	ands	r3, r2
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	bf0c      	ite	eq
 80043fe:	2301      	moveq	r3, #1
 8004400:	2300      	movne	r3, #0
 8004402:	b2db      	uxtb	r3, r3
 8004404:	461a      	mov	r2, r3
 8004406:	79fb      	ldrb	r3, [r7, #7]
 8004408:	429a      	cmp	r2, r3
 800440a:	d0b6      	beq.n	800437a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b084      	sub	sp, #16
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
 8004422:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004424:	e051      	b.n	80044ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004434:	d123      	bne.n	800447e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004444:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800444e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2220      	movs	r2, #32
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	f043 0204 	orr.w	r2, r3, #4
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e046      	b.n	800450c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004484:	d021      	beq.n	80044ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004486:	f7fd f8db 	bl	8001640 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	429a      	cmp	r2, r3
 8004494:	d302      	bcc.n	800449c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d116      	bne.n	80044ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	f043 0220 	orr.w	r2, r3, #32
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e020      	b.n	800450c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	0c1b      	lsrs	r3, r3, #16
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d10c      	bne.n	80044ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	43da      	mvns	r2, r3
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4013      	ands	r3, r2
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	bf14      	ite	ne
 80044e6:	2301      	movne	r3, #1
 80044e8:	2300      	moveq	r3, #0
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	e00b      	b.n	8004506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	43da      	mvns	r2, r3
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	4013      	ands	r3, r2
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	bf14      	ite	ne
 8004500:	2301      	movne	r3, #1
 8004502:	2300      	moveq	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d18d      	bne.n	8004426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004520:	e02d      	b.n	800457e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 f8ce 	bl	80046c4 <I2C_IsAcknowledgeFailed>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e02d      	b.n	800458e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004538:	d021      	beq.n	800457e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453a:	f7fd f881 	bl	8001640 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	429a      	cmp	r2, r3
 8004548:	d302      	bcc.n	8004550 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d116      	bne.n	800457e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2220      	movs	r2, #32
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	f043 0220 	orr.w	r2, r3, #32
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e007      	b.n	800458e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004588:	2b80      	cmp	r3, #128	; 0x80
 800458a:	d1ca      	bne.n	8004522 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b084      	sub	sp, #16
 800459a:	af00      	add	r7, sp, #0
 800459c:	60f8      	str	r0, [r7, #12]
 800459e:	60b9      	str	r1, [r7, #8]
 80045a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045a2:	e02d      	b.n	8004600 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 f88d 	bl	80046c4 <I2C_IsAcknowledgeFailed>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e02d      	b.n	8004610 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ba:	d021      	beq.n	8004600 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045bc:	f7fd f840 	bl	8001640 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d302      	bcc.n	80045d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d116      	bne.n	8004600 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	f043 0220 	orr.w	r2, r3, #32
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e007      	b.n	8004610 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b04      	cmp	r3, #4
 800460c:	d1ca      	bne.n	80045a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004624:	e042      	b.n	80046ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	f003 0310 	and.w	r3, r3, #16
 8004630:	2b10      	cmp	r3, #16
 8004632:	d119      	bne.n	8004668 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0210 	mvn.w	r2, #16
 800463c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e029      	b.n	80046bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004668:	f7fc ffea 	bl	8001640 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	429a      	cmp	r2, r3
 8004676:	d302      	bcc.n	800467e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d116      	bne.n	80046ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	f043 0220 	orr.w	r2, r3, #32
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e007      	b.n	80046bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b6:	2b40      	cmp	r3, #64	; 0x40
 80046b8:	d1b5      	bne.n	8004626 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046da:	d11b      	bne.n	8004714 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	f043 0204 	orr.w	r2, r3, #4
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e000      	b.n	8004716 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
	...

08004724 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b088      	sub	sp, #32
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e128      	b.n	8004988 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d109      	bne.n	8004756 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a90      	ldr	r2, [pc, #576]	; (8004990 <HAL_I2S_Init+0x26c>)
 800474e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7fc fcb5 	bl	80010c0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2202      	movs	r2, #2
 800475a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6812      	ldr	r2, [r2, #0]
 8004768:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800476c:	f023 030f 	bic.w	r3, r3, #15
 8004770:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2202      	movs	r2, #2
 8004778:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	2b02      	cmp	r3, #2
 8004780:	d060      	beq.n	8004844 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d102      	bne.n	8004790 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800478a:	2310      	movs	r3, #16
 800478c:	617b      	str	r3, [r7, #20]
 800478e:	e001      	b.n	8004794 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004790:	2320      	movs	r3, #32
 8004792:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2b20      	cmp	r3, #32
 800479a:	d802      	bhi.n	80047a2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80047a2:	2001      	movs	r0, #1
 80047a4:	f001 f9d8 	bl	8005b58 <HAL_RCCEx_GetPeriphCLKFreq>
 80047a8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047b2:	d125      	bne.n	8004800 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d010      	beq.n	80047de <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80047c6:	4613      	mov	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	461a      	mov	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d8:	3305      	adds	r3, #5
 80047da:	613b      	str	r3, [r7, #16]
 80047dc:	e01f      	b.n	800481e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80047e8:	4613      	mov	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	461a      	mov	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fa:	3305      	adds	r3, #5
 80047fc:	613b      	str	r3, [r7, #16]
 80047fe:	e00e      	b.n	800481e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	fbb2 f2f3 	udiv	r2, r2, r3
 8004808:	4613      	mov	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	461a      	mov	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	fbb2 f3f3 	udiv	r3, r2, r3
 800481a:	3305      	adds	r3, #5
 800481c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	4a5c      	ldr	r2, [pc, #368]	; (8004994 <HAL_I2S_Init+0x270>)
 8004822:	fba2 2303 	umull	r2, r3, r2, r3
 8004826:	08db      	lsrs	r3, r3, #3
 8004828:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	085b      	lsrs	r3, r3, #1
 800483a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	021b      	lsls	r3, r3, #8
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	e003      	b.n	800484c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004844:	2302      	movs	r3, #2
 8004846:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d902      	bls.n	8004858 <HAL_I2S_Init+0x134>
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	2bff      	cmp	r3, #255	; 0xff
 8004856:	d907      	bls.n	8004868 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485c:	f043 0210 	orr.w	r2, r3, #16
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e08f      	b.n	8004988 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	ea42 0103 	orr.w	r1, r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69fa      	ldr	r2, [r7, #28]
 8004878:	430a      	orrs	r2, r1
 800487a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004886:	f023 030f 	bic.w	r3, r3, #15
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6851      	ldr	r1, [r2, #4]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6892      	ldr	r2, [r2, #8]
 8004892:	4311      	orrs	r1, r2
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	68d2      	ldr	r2, [r2, #12]
 8004898:	4311      	orrs	r1, r2
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6992      	ldr	r2, [r2, #24]
 800489e:	430a      	orrs	r2, r1
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048aa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d161      	bne.n	8004978 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a38      	ldr	r2, [pc, #224]	; (8004998 <HAL_I2S_Init+0x274>)
 80048b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a37      	ldr	r2, [pc, #220]	; (800499c <HAL_I2S_Init+0x278>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d101      	bne.n	80048c8 <HAL_I2S_Init+0x1a4>
 80048c4:	4b36      	ldr	r3, [pc, #216]	; (80049a0 <HAL_I2S_Init+0x27c>)
 80048c6:	e001      	b.n	80048cc <HAL_I2S_Init+0x1a8>
 80048c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6812      	ldr	r2, [r2, #0]
 80048d2:	4932      	ldr	r1, [pc, #200]	; (800499c <HAL_I2S_Init+0x278>)
 80048d4:	428a      	cmp	r2, r1
 80048d6:	d101      	bne.n	80048dc <HAL_I2S_Init+0x1b8>
 80048d8:	4a31      	ldr	r2, [pc, #196]	; (80049a0 <HAL_I2S_Init+0x27c>)
 80048da:	e001      	b.n	80048e0 <HAL_I2S_Init+0x1bc>
 80048dc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80048e0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80048e4:	f023 030f 	bic.w	r3, r3, #15
 80048e8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a2b      	ldr	r2, [pc, #172]	; (800499c <HAL_I2S_Init+0x278>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d101      	bne.n	80048f8 <HAL_I2S_Init+0x1d4>
 80048f4:	4b2a      	ldr	r3, [pc, #168]	; (80049a0 <HAL_I2S_Init+0x27c>)
 80048f6:	e001      	b.n	80048fc <HAL_I2S_Init+0x1d8>
 80048f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048fc:	2202      	movs	r2, #2
 80048fe:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a25      	ldr	r2, [pc, #148]	; (800499c <HAL_I2S_Init+0x278>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d101      	bne.n	800490e <HAL_I2S_Init+0x1ea>
 800490a:	4b25      	ldr	r3, [pc, #148]	; (80049a0 <HAL_I2S_Init+0x27c>)
 800490c:	e001      	b.n	8004912 <HAL_I2S_Init+0x1ee>
 800490e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800491e:	d003      	beq.n	8004928 <HAL_I2S_Init+0x204>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d103      	bne.n	8004930 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004928:	f44f 7380 	mov.w	r3, #256	; 0x100
 800492c:	613b      	str	r3, [r7, #16]
 800492e:	e001      	b.n	8004934 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004930:	2300      	movs	r3, #0
 8004932:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800493e:	4313      	orrs	r3, r2
 8004940:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004948:	4313      	orrs	r3, r2
 800494a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004952:	4313      	orrs	r3, r2
 8004954:	b29a      	uxth	r2, r3
 8004956:	897b      	ldrh	r3, [r7, #10]
 8004958:	4313      	orrs	r3, r2
 800495a:	b29b      	uxth	r3, r3
 800495c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004960:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a0d      	ldr	r2, [pc, #52]	; (800499c <HAL_I2S_Init+0x278>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d101      	bne.n	8004970 <HAL_I2S_Init+0x24c>
 800496c:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <HAL_I2S_Init+0x27c>)
 800496e:	e001      	b.n	8004974 <HAL_I2S_Init+0x250>
 8004970:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004974:	897a      	ldrh	r2, [r7, #10]
 8004976:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3720      	adds	r7, #32
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	08004a9b 	.word	0x08004a9b
 8004994:	cccccccd 	.word	0xcccccccd
 8004998:	08004bb1 	.word	0x08004bb1
 800499c:	40003800 	.word	0x40003800
 80049a0:	40003400 	.word	0x40003400

080049a4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	881a      	ldrh	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	1c9a      	adds	r2, r3, #2
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10e      	bne.n	8004a34 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a24:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7ff ffb8 	bl	80049a4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004a34:	bf00      	nop
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4e:	b292      	uxth	r2, r2
 8004a50:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a56:	1c9a      	adds	r2, r3, #2
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	3b01      	subs	r3, #1
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10e      	bne.n	8004a92 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a82:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7ff ff93 	bl	80049b8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004a92:	bf00      	nop
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b086      	sub	sp, #24
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d13a      	bne.n	8004b2c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d109      	bne.n	8004ad4 <I2S_IRQHandler+0x3a>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aca:	2b40      	cmp	r3, #64	; 0x40
 8004acc:	d102      	bne.n	8004ad4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7ff ffb4 	bl	8004a3c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ada:	2b40      	cmp	r3, #64	; 0x40
 8004adc:	d126      	bne.n	8004b2c <I2S_IRQHandler+0x92>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f003 0320 	and.w	r3, r3, #32
 8004ae8:	2b20      	cmp	r3, #32
 8004aea:	d11f      	bne.n	8004b2c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004afa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004afc:	2300      	movs	r3, #0
 8004afe:	613b      	str	r3, [r7, #16]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	613b      	str	r3, [r7, #16]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	613b      	str	r3, [r7, #16]
 8004b10:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1e:	f043 0202 	orr.w	r2, r3, #2
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7ff ff50 	bl	80049cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b03      	cmp	r3, #3
 8004b36:	d136      	bne.n	8004ba6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d109      	bne.n	8004b56 <I2S_IRQHandler+0xbc>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4c:	2b80      	cmp	r3, #128	; 0x80
 8004b4e:	d102      	bne.n	8004b56 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7ff ff45 	bl	80049e0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d122      	bne.n	8004ba6 <I2S_IRQHandler+0x10c>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f003 0320 	and.w	r3, r3, #32
 8004b6a:	2b20      	cmp	r3, #32
 8004b6c:	d11b      	bne.n	8004ba6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b7c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b98:	f043 0204 	orr.w	r2, r3, #4
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff ff13 	bl	80049cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ba6:	bf00      	nop
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a92      	ldr	r2, [pc, #584]	; (8004e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d101      	bne.n	8004bce <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004bca:	4b92      	ldr	r3, [pc, #584]	; (8004e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004bcc:	e001      	b.n	8004bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004bce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a8b      	ldr	r2, [pc, #556]	; (8004e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d101      	bne.n	8004bec <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004be8:	4b8a      	ldr	r3, [pc, #552]	; (8004e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004bea:	e001      	b.n	8004bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004bec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bfc:	d004      	beq.n	8004c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f040 8099 	bne.w	8004d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d107      	bne.n	8004c22 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f925 	bl	8004e6c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d107      	bne.n	8004c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d002      	beq.n	8004c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f9c8 	bl	8004fcc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c42:	2b40      	cmp	r3, #64	; 0x40
 8004c44:	d13a      	bne.n	8004cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	f003 0320 	and.w	r3, r3, #32
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d035      	beq.n	8004cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a6e      	ldr	r2, [pc, #440]	; (8004e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d101      	bne.n	8004c5e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004c5a:	4b6e      	ldr	r3, [pc, #440]	; (8004e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c5c:	e001      	b.n	8004c62 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004c5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4969      	ldr	r1, [pc, #420]	; (8004e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c6a:	428b      	cmp	r3, r1
 8004c6c:	d101      	bne.n	8004c72 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004c6e:	4b69      	ldr	r3, [pc, #420]	; (8004e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c70:	e001      	b.n	8004c76 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004c72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c7a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c8a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cae:	f043 0202 	orr.w	r2, r3, #2
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7ff fe88 	bl	80049cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	2b08      	cmp	r3, #8
 8004cc4:	f040 80c3 	bne.w	8004e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 80bd 	beq.w	8004e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ce2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a49      	ldr	r2, [pc, #292]	; (8004e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d101      	bne.n	8004cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004cee:	4b49      	ldr	r3, [pc, #292]	; (8004e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cf0:	e001      	b.n	8004cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004cf2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4944      	ldr	r1, [pc, #272]	; (8004e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cfe:	428b      	cmp	r3, r1
 8004d00:	d101      	bne.n	8004d06 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004d02:	4b44      	ldr	r3, [pc, #272]	; (8004e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d04:	e001      	b.n	8004d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004d06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d0e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004d10:	2300      	movs	r3, #0
 8004d12:	60bb      	str	r3, [r7, #8]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	60bb      	str	r3, [r7, #8]
 8004d1c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2a:	f043 0204 	orr.w	r2, r3, #4
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7ff fe4a 	bl	80049cc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d38:	e089      	b.n	8004e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d107      	bne.n	8004d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f8be 	bl	8004ed0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d107      	bne.n	8004d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f8fd 	bl	8004f68 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d74:	2b40      	cmp	r3, #64	; 0x40
 8004d76:	d12f      	bne.n	8004dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f003 0320 	and.w	r3, r3, #32
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d02a      	beq.n	8004dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d90:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a1e      	ldr	r2, [pc, #120]	; (8004e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d101      	bne.n	8004da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004d9c:	4b1d      	ldr	r3, [pc, #116]	; (8004e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d9e:	e001      	b.n	8004da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004da0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4919      	ldr	r1, [pc, #100]	; (8004e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004dac:	428b      	cmp	r3, r1
 8004dae:	d101      	bne.n	8004db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004db0:	4b18      	ldr	r3, [pc, #96]	; (8004e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004db2:	e001      	b.n	8004db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004db4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004db8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004dbc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dca:	f043 0202 	orr.w	r2, r3, #2
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7ff fdfa 	bl	80049cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d136      	bne.n	8004e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f003 0320 	and.w	r3, r3, #32
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d031      	beq.n	8004e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a07      	ldr	r2, [pc, #28]	; (8004e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d101      	bne.n	8004dfa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004df6:	4b07      	ldr	r3, [pc, #28]	; (8004e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004df8:	e001      	b.n	8004dfe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004dfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4902      	ldr	r1, [pc, #8]	; (8004e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e06:	428b      	cmp	r3, r1
 8004e08:	d106      	bne.n	8004e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004e0a:	4b02      	ldr	r3, [pc, #8]	; (8004e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e0c:	e006      	b.n	8004e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004e0e:	bf00      	nop
 8004e10:	40003800 	.word	0x40003800
 8004e14:	40003400 	.word	0x40003400
 8004e18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e20:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e30:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3e:	f043 0204 	orr.w	r2, r3, #4
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7ff fdc0 	bl	80049cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e4c:	e000      	b.n	8004e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e4e:	bf00      	nop
}
 8004e50:	bf00      	nop
 8004e52:	3720      	adds	r7, #32
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	1c99      	adds	r1, r3, #2
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	6251      	str	r1, [r2, #36]	; 0x24
 8004e7e:	881a      	ldrh	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d113      	bne.n	8004ec6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004eac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d106      	bne.n	8004ec6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7ff ffc9 	bl	8004e58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ec6:	bf00      	nop
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
	...

08004ed0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	1c99      	adds	r1, r3, #2
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6251      	str	r1, [r2, #36]	; 0x24
 8004ee2:	8819      	ldrh	r1, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a1d      	ldr	r2, [pc, #116]	; (8004f60 <I2SEx_TxISR_I2SExt+0x90>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d101      	bne.n	8004ef2 <I2SEx_TxISR_I2SExt+0x22>
 8004eee:	4b1d      	ldr	r3, [pc, #116]	; (8004f64 <I2SEx_TxISR_I2SExt+0x94>)
 8004ef0:	e001      	b.n	8004ef6 <I2SEx_TxISR_I2SExt+0x26>
 8004ef2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ef6:	460a      	mov	r2, r1
 8004ef8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d121      	bne.n	8004f56 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a12      	ldr	r2, [pc, #72]	; (8004f60 <I2SEx_TxISR_I2SExt+0x90>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d101      	bne.n	8004f20 <I2SEx_TxISR_I2SExt+0x50>
 8004f1c:	4b11      	ldr	r3, [pc, #68]	; (8004f64 <I2SEx_TxISR_I2SExt+0x94>)
 8004f1e:	e001      	b.n	8004f24 <I2SEx_TxISR_I2SExt+0x54>
 8004f20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	490d      	ldr	r1, [pc, #52]	; (8004f60 <I2SEx_TxISR_I2SExt+0x90>)
 8004f2c:	428b      	cmp	r3, r1
 8004f2e:	d101      	bne.n	8004f34 <I2SEx_TxISR_I2SExt+0x64>
 8004f30:	4b0c      	ldr	r3, [pc, #48]	; (8004f64 <I2SEx_TxISR_I2SExt+0x94>)
 8004f32:	e001      	b.n	8004f38 <I2SEx_TxISR_I2SExt+0x68>
 8004f34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f3c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d106      	bne.n	8004f56 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7ff ff81 	bl	8004e58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f56:	bf00      	nop
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	40003800 	.word	0x40003800
 8004f64:	40003400 	.word	0x40003400

08004f68 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68d8      	ldr	r0, [r3, #12]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7a:	1c99      	adds	r1, r3, #2
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004f80:	b282      	uxth	r2, r0
 8004f82:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d113      	bne.n	8004fc4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004faa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7ff ff4a 	bl	8004e58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004fc4:	bf00      	nop
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a20      	ldr	r2, [pc, #128]	; (800505c <I2SEx_RxISR_I2SExt+0x90>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d101      	bne.n	8004fe2 <I2SEx_RxISR_I2SExt+0x16>
 8004fde:	4b20      	ldr	r3, [pc, #128]	; (8005060 <I2SEx_RxISR_I2SExt+0x94>)
 8004fe0:	e001      	b.n	8004fe6 <I2SEx_RxISR_I2SExt+0x1a>
 8004fe2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fe6:	68d8      	ldr	r0, [r3, #12]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fec:	1c99      	adds	r1, r3, #2
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004ff2:	b282      	uxth	r2, r0
 8004ff4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005008:	b29b      	uxth	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d121      	bne.n	8005052 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a12      	ldr	r2, [pc, #72]	; (800505c <I2SEx_RxISR_I2SExt+0x90>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d101      	bne.n	800501c <I2SEx_RxISR_I2SExt+0x50>
 8005018:	4b11      	ldr	r3, [pc, #68]	; (8005060 <I2SEx_RxISR_I2SExt+0x94>)
 800501a:	e001      	b.n	8005020 <I2SEx_RxISR_I2SExt+0x54>
 800501c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	490d      	ldr	r1, [pc, #52]	; (800505c <I2SEx_RxISR_I2SExt+0x90>)
 8005028:	428b      	cmp	r3, r1
 800502a:	d101      	bne.n	8005030 <I2SEx_RxISR_I2SExt+0x64>
 800502c:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <I2SEx_RxISR_I2SExt+0x94>)
 800502e:	e001      	b.n	8005034 <I2SEx_RxISR_I2SExt+0x68>
 8005030:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005034:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005038:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503e:	b29b      	uxth	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	d106      	bne.n	8005052 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7ff ff03 	bl	8004e58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005052:	bf00      	nop
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	40003800 	.word	0x40003800
 8005060:	40003400 	.word	0x40003400

08005064 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e267      	b.n	8005546 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d075      	beq.n	800516e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005082:	4b88      	ldr	r3, [pc, #544]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 030c 	and.w	r3, r3, #12
 800508a:	2b04      	cmp	r3, #4
 800508c:	d00c      	beq.n	80050a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800508e:	4b85      	ldr	r3, [pc, #532]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005096:	2b08      	cmp	r3, #8
 8005098:	d112      	bne.n	80050c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800509a:	4b82      	ldr	r3, [pc, #520]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050a6:	d10b      	bne.n	80050c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050a8:	4b7e      	ldr	r3, [pc, #504]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d05b      	beq.n	800516c <HAL_RCC_OscConfig+0x108>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d157      	bne.n	800516c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e242      	b.n	8005546 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c8:	d106      	bne.n	80050d8 <HAL_RCC_OscConfig+0x74>
 80050ca:	4b76      	ldr	r3, [pc, #472]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a75      	ldr	r2, [pc, #468]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 80050d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d4:	6013      	str	r3, [r2, #0]
 80050d6:	e01d      	b.n	8005114 <HAL_RCC_OscConfig+0xb0>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050e0:	d10c      	bne.n	80050fc <HAL_RCC_OscConfig+0x98>
 80050e2:	4b70      	ldr	r3, [pc, #448]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a6f      	ldr	r2, [pc, #444]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 80050e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050ec:	6013      	str	r3, [r2, #0]
 80050ee:	4b6d      	ldr	r3, [pc, #436]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a6c      	ldr	r2, [pc, #432]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 80050f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f8:	6013      	str	r3, [r2, #0]
 80050fa:	e00b      	b.n	8005114 <HAL_RCC_OscConfig+0xb0>
 80050fc:	4b69      	ldr	r3, [pc, #420]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a68      	ldr	r2, [pc, #416]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 8005102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005106:	6013      	str	r3, [r2, #0]
 8005108:	4b66      	ldr	r3, [pc, #408]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a65      	ldr	r2, [pc, #404]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 800510e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005112:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d013      	beq.n	8005144 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800511c:	f7fc fa90 	bl	8001640 <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005124:	f7fc fa8c 	bl	8001640 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b64      	cmp	r3, #100	; 0x64
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e207      	b.n	8005546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005136:	4b5b      	ldr	r3, [pc, #364]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0f0      	beq.n	8005124 <HAL_RCC_OscConfig+0xc0>
 8005142:	e014      	b.n	800516e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005144:	f7fc fa7c 	bl	8001640 <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800514c:	f7fc fa78 	bl	8001640 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b64      	cmp	r3, #100	; 0x64
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e1f3      	b.n	8005546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800515e:	4b51      	ldr	r3, [pc, #324]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1f0      	bne.n	800514c <HAL_RCC_OscConfig+0xe8>
 800516a:	e000      	b.n	800516e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800516c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d063      	beq.n	8005242 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800517a:	4b4a      	ldr	r3, [pc, #296]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f003 030c 	and.w	r3, r3, #12
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00b      	beq.n	800519e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005186:	4b47      	ldr	r3, [pc, #284]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800518e:	2b08      	cmp	r3, #8
 8005190:	d11c      	bne.n	80051cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005192:	4b44      	ldr	r3, [pc, #272]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d116      	bne.n	80051cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800519e:	4b41      	ldr	r3, [pc, #260]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d005      	beq.n	80051b6 <HAL_RCC_OscConfig+0x152>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d001      	beq.n	80051b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e1c7      	b.n	8005546 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b6:	4b3b      	ldr	r3, [pc, #236]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	4937      	ldr	r1, [pc, #220]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ca:	e03a      	b.n	8005242 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d020      	beq.n	8005216 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051d4:	4b34      	ldr	r3, [pc, #208]	; (80052a8 <HAL_RCC_OscConfig+0x244>)
 80051d6:	2201      	movs	r2, #1
 80051d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051da:	f7fc fa31 	bl	8001640 <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e0:	e008      	b.n	80051f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051e2:	f7fc fa2d 	bl	8001640 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e1a8      	b.n	8005546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051f4:	4b2b      	ldr	r3, [pc, #172]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0f0      	beq.n	80051e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005200:	4b28      	ldr	r3, [pc, #160]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	4925      	ldr	r1, [pc, #148]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 8005210:	4313      	orrs	r3, r2
 8005212:	600b      	str	r3, [r1, #0]
 8005214:	e015      	b.n	8005242 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005216:	4b24      	ldr	r3, [pc, #144]	; (80052a8 <HAL_RCC_OscConfig+0x244>)
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521c:	f7fc fa10 	bl	8001640 <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005224:	f7fc fa0c 	bl	8001640 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e187      	b.n	8005546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005236:	4b1b      	ldr	r3, [pc, #108]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1f0      	bne.n	8005224 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b00      	cmp	r3, #0
 800524c:	d036      	beq.n	80052bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d016      	beq.n	8005284 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005256:	4b15      	ldr	r3, [pc, #84]	; (80052ac <HAL_RCC_OscConfig+0x248>)
 8005258:	2201      	movs	r2, #1
 800525a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800525c:	f7fc f9f0 	bl	8001640 <HAL_GetTick>
 8005260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005262:	e008      	b.n	8005276 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005264:	f7fc f9ec 	bl	8001640 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e167      	b.n	8005546 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005276:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <HAL_RCC_OscConfig+0x240>)
 8005278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0f0      	beq.n	8005264 <HAL_RCC_OscConfig+0x200>
 8005282:	e01b      	b.n	80052bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005284:	4b09      	ldr	r3, [pc, #36]	; (80052ac <HAL_RCC_OscConfig+0x248>)
 8005286:	2200      	movs	r2, #0
 8005288:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800528a:	f7fc f9d9 	bl	8001640 <HAL_GetTick>
 800528e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005290:	e00e      	b.n	80052b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005292:	f7fc f9d5 	bl	8001640 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d907      	bls.n	80052b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e150      	b.n	8005546 <HAL_RCC_OscConfig+0x4e2>
 80052a4:	40023800 	.word	0x40023800
 80052a8:	42470000 	.word	0x42470000
 80052ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052b0:	4b88      	ldr	r3, [pc, #544]	; (80054d4 <HAL_RCC_OscConfig+0x470>)
 80052b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1ea      	bne.n	8005292 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 8097 	beq.w	80053f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ca:	2300      	movs	r3, #0
 80052cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ce:	4b81      	ldr	r3, [pc, #516]	; (80054d4 <HAL_RCC_OscConfig+0x470>)
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10f      	bne.n	80052fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052da:	2300      	movs	r3, #0
 80052dc:	60bb      	str	r3, [r7, #8]
 80052de:	4b7d      	ldr	r3, [pc, #500]	; (80054d4 <HAL_RCC_OscConfig+0x470>)
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	4a7c      	ldr	r2, [pc, #496]	; (80054d4 <HAL_RCC_OscConfig+0x470>)
 80052e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052e8:	6413      	str	r3, [r2, #64]	; 0x40
 80052ea:	4b7a      	ldr	r3, [pc, #488]	; (80054d4 <HAL_RCC_OscConfig+0x470>)
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f2:	60bb      	str	r3, [r7, #8]
 80052f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052f6:	2301      	movs	r3, #1
 80052f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052fa:	4b77      	ldr	r3, [pc, #476]	; (80054d8 <HAL_RCC_OscConfig+0x474>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005302:	2b00      	cmp	r3, #0
 8005304:	d118      	bne.n	8005338 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005306:	4b74      	ldr	r3, [pc, #464]	; (80054d8 <HAL_RCC_OscConfig+0x474>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a73      	ldr	r2, [pc, #460]	; (80054d8 <HAL_RCC_OscConfig+0x474>)
 800530c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005312:	f7fc f995 	bl	8001640 <HAL_GetTick>
 8005316:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005318:	e008      	b.n	800532c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800531a:	f7fc f991 	bl	8001640 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d901      	bls.n	800532c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e10c      	b.n	8005546 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800532c:	4b6a      	ldr	r3, [pc, #424]	; (80054d8 <HAL_RCC_OscConfig+0x474>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0f0      	beq.n	800531a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d106      	bne.n	800534e <HAL_RCC_OscConfig+0x2ea>
 8005340:	4b64      	ldr	r3, [pc, #400]	; (80054d4 <HAL_RCC_OscConfig+0x470>)
 8005342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005344:	4a63      	ldr	r2, [pc, #396]	; (80054d4 <HAL_RCC_OscConfig+0x470>)
 8005346:	f043 0301 	orr.w	r3, r3, #1
 800534a:	6713      	str	r3, [r2, #112]	; 0x70
 800534c:	e01c      	b.n	8005388 <HAL_RCC_OscConfig+0x324>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	2b05      	cmp	r3, #5
 8005354:	d10c      	bne.n	8005370 <HAL_RCC_OscConfig+0x30c>
 8005356:	4b5f      	ldr	r3, [pc, #380]	; (80054d4 <HAL_RCC_OscConfig+0x470>)
 8005358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535a:	4a5e      	ldr	r2, [pc, #376]	; (80054d4 <HAL_RCC_OscConfig+0x470>)
 800535c:	f043 0304 	orr.w	r3, r3, #4
 8005360:	6713      	str	r3, [r2, #112]	; 0x70
 8005362:	4b5c      	ldr	r3, [pc, #368]	; (80054d4 <HAL_RCC_OscConfig+0x470>)
 8005364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005366:	4a5b      	ldr	r2, [pc, #364]	; (80054d4 <HAL_RCC_OscConfig+0x470>)
 8005368:	f043 0301 	orr.w	r3, r3, #1
 800536c:	6713      	str	r3, [r2, #112]	; 0x70
 800536e:	e00b      	b.n	8005388 <HAL_RCC_OscConfig+0x324>
 8005370:	4b58      	ldr	r3, [pc, #352]	; (80054d4 <HAL_RCC_OscConfig+0x470>)
 8005372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005374:	4a57      	ldr	r2, [pc, #348]	; (80054d4 <HAL_RCC_OscConfig+0x470>)
 8005376:	f023 0301 	bic.w	r3, r3, #1
 800537a:	6713      	str	r3, [r2, #112]	; 0x70
 800537c:	4b55      	ldr	r3, [pc, #340]	; (80054d4 <HAL_RCC_OscConfig+0x470>)
 800537e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005380:	4a54      	ldr	r2, [pc, #336]	; (80054d4 <HAL_RCC_OscConfig+0x470>)
 8005382:	f023 0304 	bic.w	r3, r3, #4
 8005386:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d015      	beq.n	80053bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005390:	f7fc f956 	bl	8001640 <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005396:	e00a      	b.n	80053ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005398:	f7fc f952 	bl	8001640 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e0cb      	b.n	8005546 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ae:	4b49      	ldr	r3, [pc, #292]	; (80054d4 <HAL_RCC_OscConfig+0x470>)
 80053b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0ee      	beq.n	8005398 <HAL_RCC_OscConfig+0x334>
 80053ba:	e014      	b.n	80053e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053bc:	f7fc f940 	bl	8001640 <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053c2:	e00a      	b.n	80053da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053c4:	f7fc f93c 	bl	8001640 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e0b5      	b.n	8005546 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053da:	4b3e      	ldr	r3, [pc, #248]	; (80054d4 <HAL_RCC_OscConfig+0x470>)
 80053dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1ee      	bne.n	80053c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053e6:	7dfb      	ldrb	r3, [r7, #23]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d105      	bne.n	80053f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053ec:	4b39      	ldr	r3, [pc, #228]	; (80054d4 <HAL_RCC_OscConfig+0x470>)
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	4a38      	ldr	r2, [pc, #224]	; (80054d4 <HAL_RCC_OscConfig+0x470>)
 80053f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 80a1 	beq.w	8005544 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005402:	4b34      	ldr	r3, [pc, #208]	; (80054d4 <HAL_RCC_OscConfig+0x470>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f003 030c 	and.w	r3, r3, #12
 800540a:	2b08      	cmp	r3, #8
 800540c:	d05c      	beq.n	80054c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	2b02      	cmp	r3, #2
 8005414:	d141      	bne.n	800549a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005416:	4b31      	ldr	r3, [pc, #196]	; (80054dc <HAL_RCC_OscConfig+0x478>)
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800541c:	f7fc f910 	bl	8001640 <HAL_GetTick>
 8005420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005424:	f7fc f90c 	bl	8001640 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e087      	b.n	8005546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005436:	4b27      	ldr	r3, [pc, #156]	; (80054d4 <HAL_RCC_OscConfig+0x470>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1f0      	bne.n	8005424 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69da      	ldr	r2, [r3, #28]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	431a      	orrs	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	019b      	lsls	r3, r3, #6
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005458:	085b      	lsrs	r3, r3, #1
 800545a:	3b01      	subs	r3, #1
 800545c:	041b      	lsls	r3, r3, #16
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005464:	061b      	lsls	r3, r3, #24
 8005466:	491b      	ldr	r1, [pc, #108]	; (80054d4 <HAL_RCC_OscConfig+0x470>)
 8005468:	4313      	orrs	r3, r2
 800546a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800546c:	4b1b      	ldr	r3, [pc, #108]	; (80054dc <HAL_RCC_OscConfig+0x478>)
 800546e:	2201      	movs	r2, #1
 8005470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005472:	f7fc f8e5 	bl	8001640 <HAL_GetTick>
 8005476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005478:	e008      	b.n	800548c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800547a:	f7fc f8e1 	bl	8001640 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d901      	bls.n	800548c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e05c      	b.n	8005546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800548c:	4b11      	ldr	r3, [pc, #68]	; (80054d4 <HAL_RCC_OscConfig+0x470>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0f0      	beq.n	800547a <HAL_RCC_OscConfig+0x416>
 8005498:	e054      	b.n	8005544 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800549a:	4b10      	ldr	r3, [pc, #64]	; (80054dc <HAL_RCC_OscConfig+0x478>)
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a0:	f7fc f8ce 	bl	8001640 <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054a8:	f7fc f8ca 	bl	8001640 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e045      	b.n	8005546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ba:	4b06      	ldr	r3, [pc, #24]	; (80054d4 <HAL_RCC_OscConfig+0x470>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1f0      	bne.n	80054a8 <HAL_RCC_OscConfig+0x444>
 80054c6:	e03d      	b.n	8005544 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d107      	bne.n	80054e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e038      	b.n	8005546 <HAL_RCC_OscConfig+0x4e2>
 80054d4:	40023800 	.word	0x40023800
 80054d8:	40007000 	.word	0x40007000
 80054dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054e0:	4b1b      	ldr	r3, [pc, #108]	; (8005550 <HAL_RCC_OscConfig+0x4ec>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d028      	beq.n	8005540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d121      	bne.n	8005540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005506:	429a      	cmp	r2, r3
 8005508:	d11a      	bne.n	8005540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005510:	4013      	ands	r3, r2
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005516:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005518:	4293      	cmp	r3, r2
 800551a:	d111      	bne.n	8005540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005526:	085b      	lsrs	r3, r3, #1
 8005528:	3b01      	subs	r3, #1
 800552a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800552c:	429a      	cmp	r2, r3
 800552e:	d107      	bne.n	8005540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800553c:	429a      	cmp	r2, r3
 800553e:	d001      	beq.n	8005544 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e000      	b.n	8005546 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	40023800 	.word	0x40023800

08005554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e0cc      	b.n	8005702 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005568:	4b68      	ldr	r3, [pc, #416]	; (800570c <HAL_RCC_ClockConfig+0x1b8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	429a      	cmp	r2, r3
 8005574:	d90c      	bls.n	8005590 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005576:	4b65      	ldr	r3, [pc, #404]	; (800570c <HAL_RCC_ClockConfig+0x1b8>)
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800557e:	4b63      	ldr	r3, [pc, #396]	; (800570c <HAL_RCC_ClockConfig+0x1b8>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	429a      	cmp	r2, r3
 800558a:	d001      	beq.n	8005590 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e0b8      	b.n	8005702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d020      	beq.n	80055de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d005      	beq.n	80055b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055a8:	4b59      	ldr	r3, [pc, #356]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	4a58      	ldr	r2, [pc, #352]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 80055ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0308 	and.w	r3, r3, #8
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d005      	beq.n	80055cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055c0:	4b53      	ldr	r3, [pc, #332]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	4a52      	ldr	r2, [pc, #328]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 80055c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055cc:	4b50      	ldr	r3, [pc, #320]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	494d      	ldr	r1, [pc, #308]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d044      	beq.n	8005674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d107      	bne.n	8005602 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055f2:	4b47      	ldr	r3, [pc, #284]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d119      	bne.n	8005632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e07f      	b.n	8005702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	2b02      	cmp	r3, #2
 8005608:	d003      	beq.n	8005612 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800560e:	2b03      	cmp	r3, #3
 8005610:	d107      	bne.n	8005622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005612:	4b3f      	ldr	r3, [pc, #252]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d109      	bne.n	8005632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e06f      	b.n	8005702 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005622:	4b3b      	ldr	r3, [pc, #236]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e067      	b.n	8005702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005632:	4b37      	ldr	r3, [pc, #220]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f023 0203 	bic.w	r2, r3, #3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	4934      	ldr	r1, [pc, #208]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 8005640:	4313      	orrs	r3, r2
 8005642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005644:	f7fb fffc 	bl	8001640 <HAL_GetTick>
 8005648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800564a:	e00a      	b.n	8005662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800564c:	f7fb fff8 	bl	8001640 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	f241 3288 	movw	r2, #5000	; 0x1388
 800565a:	4293      	cmp	r3, r2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e04f      	b.n	8005702 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005662:	4b2b      	ldr	r3, [pc, #172]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f003 020c 	and.w	r2, r3, #12
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	429a      	cmp	r2, r3
 8005672:	d1eb      	bne.n	800564c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005674:	4b25      	ldr	r3, [pc, #148]	; (800570c <HAL_RCC_ClockConfig+0x1b8>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d20c      	bcs.n	800569c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005682:	4b22      	ldr	r3, [pc, #136]	; (800570c <HAL_RCC_ClockConfig+0x1b8>)
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800568a:	4b20      	ldr	r3, [pc, #128]	; (800570c <HAL_RCC_ClockConfig+0x1b8>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0307 	and.w	r3, r3, #7
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	429a      	cmp	r2, r3
 8005696:	d001      	beq.n	800569c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e032      	b.n	8005702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d008      	beq.n	80056ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056a8:	4b19      	ldr	r3, [pc, #100]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	4916      	ldr	r1, [pc, #88]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0308 	and.w	r3, r3, #8
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d009      	beq.n	80056da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056c6:	4b12      	ldr	r3, [pc, #72]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	490e      	ldr	r1, [pc, #56]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056da:	f000 f821 	bl	8005720 <HAL_RCC_GetSysClockFreq>
 80056de:	4602      	mov	r2, r0
 80056e0:	4b0b      	ldr	r3, [pc, #44]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	091b      	lsrs	r3, r3, #4
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	490a      	ldr	r1, [pc, #40]	; (8005714 <HAL_RCC_ClockConfig+0x1c0>)
 80056ec:	5ccb      	ldrb	r3, [r1, r3]
 80056ee:	fa22 f303 	lsr.w	r3, r2, r3
 80056f2:	4a09      	ldr	r2, [pc, #36]	; (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 80056f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056f6:	4b09      	ldr	r3, [pc, #36]	; (800571c <HAL_RCC_ClockConfig+0x1c8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7fb ff5c 	bl	80015b8 <HAL_InitTick>

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	40023c00 	.word	0x40023c00
 8005710:	40023800 	.word	0x40023800
 8005714:	0800bc90 	.word	0x0800bc90
 8005718:	20000004 	.word	0x20000004
 800571c:	20000008 	.word	0x20000008

08005720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005724:	b094      	sub	sp, #80	; 0x50
 8005726:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005728:	2300      	movs	r3, #0
 800572a:	647b      	str	r3, [r7, #68]	; 0x44
 800572c:	2300      	movs	r3, #0
 800572e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005730:	2300      	movs	r3, #0
 8005732:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005734:	2300      	movs	r3, #0
 8005736:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005738:	4b79      	ldr	r3, [pc, #484]	; (8005920 <HAL_RCC_GetSysClockFreq+0x200>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f003 030c 	and.w	r3, r3, #12
 8005740:	2b08      	cmp	r3, #8
 8005742:	d00d      	beq.n	8005760 <HAL_RCC_GetSysClockFreq+0x40>
 8005744:	2b08      	cmp	r3, #8
 8005746:	f200 80e1 	bhi.w	800590c <HAL_RCC_GetSysClockFreq+0x1ec>
 800574a:	2b00      	cmp	r3, #0
 800574c:	d002      	beq.n	8005754 <HAL_RCC_GetSysClockFreq+0x34>
 800574e:	2b04      	cmp	r3, #4
 8005750:	d003      	beq.n	800575a <HAL_RCC_GetSysClockFreq+0x3a>
 8005752:	e0db      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005754:	4b73      	ldr	r3, [pc, #460]	; (8005924 <HAL_RCC_GetSysClockFreq+0x204>)
 8005756:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005758:	e0db      	b.n	8005912 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800575a:	4b73      	ldr	r3, [pc, #460]	; (8005928 <HAL_RCC_GetSysClockFreq+0x208>)
 800575c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800575e:	e0d8      	b.n	8005912 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005760:	4b6f      	ldr	r3, [pc, #444]	; (8005920 <HAL_RCC_GetSysClockFreq+0x200>)
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005768:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800576a:	4b6d      	ldr	r3, [pc, #436]	; (8005920 <HAL_RCC_GetSysClockFreq+0x200>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d063      	beq.n	800583e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005776:	4b6a      	ldr	r3, [pc, #424]	; (8005920 <HAL_RCC_GetSysClockFreq+0x200>)
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	099b      	lsrs	r3, r3, #6
 800577c:	2200      	movs	r2, #0
 800577e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005780:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005788:	633b      	str	r3, [r7, #48]	; 0x30
 800578a:	2300      	movs	r3, #0
 800578c:	637b      	str	r3, [r7, #52]	; 0x34
 800578e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005792:	4622      	mov	r2, r4
 8005794:	462b      	mov	r3, r5
 8005796:	f04f 0000 	mov.w	r0, #0
 800579a:	f04f 0100 	mov.w	r1, #0
 800579e:	0159      	lsls	r1, r3, #5
 80057a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057a4:	0150      	lsls	r0, r2, #5
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	4621      	mov	r1, r4
 80057ac:	1a51      	subs	r1, r2, r1
 80057ae:	6139      	str	r1, [r7, #16]
 80057b0:	4629      	mov	r1, r5
 80057b2:	eb63 0301 	sbc.w	r3, r3, r1
 80057b6:	617b      	str	r3, [r7, #20]
 80057b8:	f04f 0200 	mov.w	r2, #0
 80057bc:	f04f 0300 	mov.w	r3, #0
 80057c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057c4:	4659      	mov	r1, fp
 80057c6:	018b      	lsls	r3, r1, #6
 80057c8:	4651      	mov	r1, sl
 80057ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057ce:	4651      	mov	r1, sl
 80057d0:	018a      	lsls	r2, r1, #6
 80057d2:	4651      	mov	r1, sl
 80057d4:	ebb2 0801 	subs.w	r8, r2, r1
 80057d8:	4659      	mov	r1, fp
 80057da:	eb63 0901 	sbc.w	r9, r3, r1
 80057de:	f04f 0200 	mov.w	r2, #0
 80057e2:	f04f 0300 	mov.w	r3, #0
 80057e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057f2:	4690      	mov	r8, r2
 80057f4:	4699      	mov	r9, r3
 80057f6:	4623      	mov	r3, r4
 80057f8:	eb18 0303 	adds.w	r3, r8, r3
 80057fc:	60bb      	str	r3, [r7, #8]
 80057fe:	462b      	mov	r3, r5
 8005800:	eb49 0303 	adc.w	r3, r9, r3
 8005804:	60fb      	str	r3, [r7, #12]
 8005806:	f04f 0200 	mov.w	r2, #0
 800580a:	f04f 0300 	mov.w	r3, #0
 800580e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005812:	4629      	mov	r1, r5
 8005814:	024b      	lsls	r3, r1, #9
 8005816:	4621      	mov	r1, r4
 8005818:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800581c:	4621      	mov	r1, r4
 800581e:	024a      	lsls	r2, r1, #9
 8005820:	4610      	mov	r0, r2
 8005822:	4619      	mov	r1, r3
 8005824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005826:	2200      	movs	r2, #0
 8005828:	62bb      	str	r3, [r7, #40]	; 0x28
 800582a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800582c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005830:	f7fa fd26 	bl	8000280 <__aeabi_uldivmod>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	4613      	mov	r3, r2
 800583a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800583c:	e058      	b.n	80058f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800583e:	4b38      	ldr	r3, [pc, #224]	; (8005920 <HAL_RCC_GetSysClockFreq+0x200>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	099b      	lsrs	r3, r3, #6
 8005844:	2200      	movs	r2, #0
 8005846:	4618      	mov	r0, r3
 8005848:	4611      	mov	r1, r2
 800584a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800584e:	623b      	str	r3, [r7, #32]
 8005850:	2300      	movs	r3, #0
 8005852:	627b      	str	r3, [r7, #36]	; 0x24
 8005854:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005858:	4642      	mov	r2, r8
 800585a:	464b      	mov	r3, r9
 800585c:	f04f 0000 	mov.w	r0, #0
 8005860:	f04f 0100 	mov.w	r1, #0
 8005864:	0159      	lsls	r1, r3, #5
 8005866:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800586a:	0150      	lsls	r0, r2, #5
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	4641      	mov	r1, r8
 8005872:	ebb2 0a01 	subs.w	sl, r2, r1
 8005876:	4649      	mov	r1, r9
 8005878:	eb63 0b01 	sbc.w	fp, r3, r1
 800587c:	f04f 0200 	mov.w	r2, #0
 8005880:	f04f 0300 	mov.w	r3, #0
 8005884:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005888:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800588c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005890:	ebb2 040a 	subs.w	r4, r2, sl
 8005894:	eb63 050b 	sbc.w	r5, r3, fp
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	f04f 0300 	mov.w	r3, #0
 80058a0:	00eb      	lsls	r3, r5, #3
 80058a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058a6:	00e2      	lsls	r2, r4, #3
 80058a8:	4614      	mov	r4, r2
 80058aa:	461d      	mov	r5, r3
 80058ac:	4643      	mov	r3, r8
 80058ae:	18e3      	adds	r3, r4, r3
 80058b0:	603b      	str	r3, [r7, #0]
 80058b2:	464b      	mov	r3, r9
 80058b4:	eb45 0303 	adc.w	r3, r5, r3
 80058b8:	607b      	str	r3, [r7, #4]
 80058ba:	f04f 0200 	mov.w	r2, #0
 80058be:	f04f 0300 	mov.w	r3, #0
 80058c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058c6:	4629      	mov	r1, r5
 80058c8:	028b      	lsls	r3, r1, #10
 80058ca:	4621      	mov	r1, r4
 80058cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058d0:	4621      	mov	r1, r4
 80058d2:	028a      	lsls	r2, r1, #10
 80058d4:	4610      	mov	r0, r2
 80058d6:	4619      	mov	r1, r3
 80058d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058da:	2200      	movs	r2, #0
 80058dc:	61bb      	str	r3, [r7, #24]
 80058de:	61fa      	str	r2, [r7, #28]
 80058e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058e4:	f7fa fccc 	bl	8000280 <__aeabi_uldivmod>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4613      	mov	r3, r2
 80058ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058f0:	4b0b      	ldr	r3, [pc, #44]	; (8005920 <HAL_RCC_GetSysClockFreq+0x200>)
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	0c1b      	lsrs	r3, r3, #16
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	3301      	adds	r3, #1
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005900:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005904:	fbb2 f3f3 	udiv	r3, r2, r3
 8005908:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800590a:	e002      	b.n	8005912 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800590c:	4b05      	ldr	r3, [pc, #20]	; (8005924 <HAL_RCC_GetSysClockFreq+0x204>)
 800590e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005910:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005914:	4618      	mov	r0, r3
 8005916:	3750      	adds	r7, #80	; 0x50
 8005918:	46bd      	mov	sp, r7
 800591a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800591e:	bf00      	nop
 8005920:	40023800 	.word	0x40023800
 8005924:	00f42400 	.word	0x00f42400
 8005928:	007a1200 	.word	0x007a1200

0800592c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005930:	4b03      	ldr	r3, [pc, #12]	; (8005940 <HAL_RCC_GetHCLKFreq+0x14>)
 8005932:	681b      	ldr	r3, [r3, #0]
}
 8005934:	4618      	mov	r0, r3
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	20000004 	.word	0x20000004

08005944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005948:	f7ff fff0 	bl	800592c <HAL_RCC_GetHCLKFreq>
 800594c:	4602      	mov	r2, r0
 800594e:	4b05      	ldr	r3, [pc, #20]	; (8005964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	0a9b      	lsrs	r3, r3, #10
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	4903      	ldr	r1, [pc, #12]	; (8005968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800595a:	5ccb      	ldrb	r3, [r1, r3]
 800595c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005960:	4618      	mov	r0, r3
 8005962:	bd80      	pop	{r7, pc}
 8005964:	40023800 	.word	0x40023800
 8005968:	0800bca0 	.word	0x0800bca0

0800596c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005970:	f7ff ffdc 	bl	800592c <HAL_RCC_GetHCLKFreq>
 8005974:	4602      	mov	r2, r0
 8005976:	4b05      	ldr	r3, [pc, #20]	; (800598c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	0b5b      	lsrs	r3, r3, #13
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	4903      	ldr	r1, [pc, #12]	; (8005990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005982:	5ccb      	ldrb	r3, [r1, r3]
 8005984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005988:	4618      	mov	r0, r3
 800598a:	bd80      	pop	{r7, pc}
 800598c:	40023800 	.word	0x40023800
 8005990:	0800bca0 	.word	0x0800bca0

08005994 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800599c:	2300      	movs	r3, #0
 800599e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d105      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d035      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80059bc:	4b62      	ldr	r3, [pc, #392]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80059be:	2200      	movs	r2, #0
 80059c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059c2:	f7fb fe3d 	bl	8001640 <HAL_GetTick>
 80059c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059c8:	e008      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80059ca:	f7fb fe39 	bl	8001640 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e0b0      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059dc:	4b5b      	ldr	r3, [pc, #364]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1f0      	bne.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	019a      	lsls	r2, r3, #6
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	071b      	lsls	r3, r3, #28
 80059f4:	4955      	ldr	r1, [pc, #340]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059fc:	4b52      	ldr	r3, [pc, #328]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80059fe:	2201      	movs	r2, #1
 8005a00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a02:	f7fb fe1d 	bl	8001640 <HAL_GetTick>
 8005a06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a08:	e008      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a0a:	f7fb fe19 	bl	8001640 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d901      	bls.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e090      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a1c:	4b4b      	ldr	r3, [pc, #300]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0f0      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0302 	and.w	r3, r3, #2
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 8083 	beq.w	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a36:	2300      	movs	r3, #0
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	4b44      	ldr	r3, [pc, #272]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	4a43      	ldr	r2, [pc, #268]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a44:	6413      	str	r3, [r2, #64]	; 0x40
 8005a46:	4b41      	ldr	r3, [pc, #260]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005a52:	4b3f      	ldr	r3, [pc, #252]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a3e      	ldr	r2, [pc, #248]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a5c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a5e:	f7fb fdef 	bl	8001640 <HAL_GetTick>
 8005a62:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a64:	e008      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005a66:	f7fb fdeb 	bl	8001640 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d901      	bls.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e062      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a78:	4b35      	ldr	r3, [pc, #212]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d0f0      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a84:	4b31      	ldr	r3, [pc, #196]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a8c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d02f      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d028      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005aa2:	4b2a      	ldr	r3, [pc, #168]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aaa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005aac:	4b29      	ldr	r3, [pc, #164]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005aae:	2201      	movs	r2, #1
 8005ab0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ab2:	4b28      	ldr	r3, [pc, #160]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005ab8:	4a24      	ldr	r2, [pc, #144]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005abe:	4b23      	ldr	r3, [pc, #140]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d114      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005aca:	f7fb fdb9 	bl	8001640 <HAL_GetTick>
 8005ace:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ad0:	e00a      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ad2:	f7fb fdb5 	bl	8001640 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e02a      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ae8:	4b18      	ldr	r3, [pc, #96]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0ee      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005afc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b00:	d10d      	bne.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005b02:	4b12      	ldr	r3, [pc, #72]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b16:	490d      	ldr	r1, [pc, #52]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	608b      	str	r3, [r1, #8]
 8005b1c:	e005      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005b1e:	4b0b      	ldr	r3, [pc, #44]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	4a0a      	ldr	r2, [pc, #40]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b24:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005b28:	6093      	str	r3, [r2, #8]
 8005b2a:	4b08      	ldr	r3, [pc, #32]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b36:	4905      	ldr	r1, [pc, #20]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	42470068 	.word	0x42470068
 8005b4c:	40023800 	.word	0x40023800
 8005b50:	40007000 	.word	0x40007000
 8005b54:	42470e40 	.word	0x42470e40

08005b58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005b64:	2300      	movs	r3, #0
 8005b66:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d13e      	bne.n	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005b76:	4b23      	ldr	r3, [pc, #140]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d005      	beq.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d12f      	bne.n	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005b8c:	4b1e      	ldr	r3, [pc, #120]	; (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b8e:	617b      	str	r3, [r7, #20]
          break;
 8005b90:	e02f      	b.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005b92:	4b1c      	ldr	r3, [pc, #112]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b9e:	d108      	bne.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005ba0:	4b18      	ldr	r3, [pc, #96]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ba8:	4a18      	ldr	r2, [pc, #96]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bae:	613b      	str	r3, [r7, #16]
 8005bb0:	e007      	b.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005bb2:	4b14      	ldr	r3, [pc, #80]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bba:	4a15      	ldr	r2, [pc, #84]	; (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005bc2:	4b10      	ldr	r3, [pc, #64]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bc8:	099b      	lsrs	r3, r3, #6
 8005bca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	fb02 f303 	mul.w	r3, r2, r3
 8005bd4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005bd6:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bdc:	0f1b      	lsrs	r3, r3, #28
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be8:	617b      	str	r3, [r7, #20]
          break;
 8005bea:	e002      	b.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	617b      	str	r3, [r7, #20]
          break;
 8005bf0:	bf00      	nop
        }
      }
      break;
 8005bf2:	bf00      	nop
    }
  }
  return frequency;
 8005bf4:	697b      	ldr	r3, [r7, #20]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	371c      	adds	r7, #28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	40023800 	.word	0x40023800
 8005c08:	00bb8000 	.word	0x00bb8000
 8005c0c:	007a1200 	.word	0x007a1200
 8005c10:	00f42400 	.word	0x00f42400

08005c14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e07b      	b.n	8005d1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d108      	bne.n	8005c40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c36:	d009      	beq.n	8005c4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	61da      	str	r2, [r3, #28]
 8005c3e:	e005      	b.n	8005c4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d106      	bne.n	8005c6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7fb faaa 	bl	80011c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c94:	431a      	orrs	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd0:	ea42 0103 	orr.w	r1, r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	0c1b      	lsrs	r3, r3, #16
 8005cea:	f003 0104 	and.w	r1, r3, #4
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	f003 0210 	and.w	r2, r3, #16
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69da      	ldr	r2, [r3, #28]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b082      	sub	sp, #8
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e041      	b.n	8005dbc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d106      	bne.n	8005d52 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7fb fa7f 	bl	8001250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2202      	movs	r2, #2
 8005d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	3304      	adds	r3, #4
 8005d62:	4619      	mov	r1, r3
 8005d64:	4610      	mov	r0, r2
 8005d66:	f000 fb41 	bl	80063ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d001      	beq.n	8005ddc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e046      	b.n	8005e6a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a23      	ldr	r2, [pc, #140]	; (8005e78 <HAL_TIM_Base_Start+0xb4>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d022      	beq.n	8005e34 <HAL_TIM_Base_Start+0x70>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df6:	d01d      	beq.n	8005e34 <HAL_TIM_Base_Start+0x70>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a1f      	ldr	r2, [pc, #124]	; (8005e7c <HAL_TIM_Base_Start+0xb8>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d018      	beq.n	8005e34 <HAL_TIM_Base_Start+0x70>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a1e      	ldr	r2, [pc, #120]	; (8005e80 <HAL_TIM_Base_Start+0xbc>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d013      	beq.n	8005e34 <HAL_TIM_Base_Start+0x70>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a1c      	ldr	r2, [pc, #112]	; (8005e84 <HAL_TIM_Base_Start+0xc0>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d00e      	beq.n	8005e34 <HAL_TIM_Base_Start+0x70>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a1b      	ldr	r2, [pc, #108]	; (8005e88 <HAL_TIM_Base_Start+0xc4>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d009      	beq.n	8005e34 <HAL_TIM_Base_Start+0x70>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a19      	ldr	r2, [pc, #100]	; (8005e8c <HAL_TIM_Base_Start+0xc8>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d004      	beq.n	8005e34 <HAL_TIM_Base_Start+0x70>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a18      	ldr	r2, [pc, #96]	; (8005e90 <HAL_TIM_Base_Start+0xcc>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d111      	bne.n	8005e58 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 0307 	and.w	r3, r3, #7
 8005e3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b06      	cmp	r3, #6
 8005e44:	d010      	beq.n	8005e68 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f042 0201 	orr.w	r2, r2, #1
 8005e54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e56:	e007      	b.n	8005e68 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f042 0201 	orr.w	r2, r2, #1
 8005e66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	40010000 	.word	0x40010000
 8005e7c:	40000400 	.word	0x40000400
 8005e80:	40000800 	.word	0x40000800
 8005e84:	40000c00 	.word	0x40000c00
 8005e88:	40010400 	.word	0x40010400
 8005e8c:	40014000 	.word	0x40014000
 8005e90:	40001800 	.word	0x40001800

08005e94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e041      	b.n	8005f2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d106      	bne.n	8005ec0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f839 	bl	8005f32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3304      	adds	r3, #4
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	4610      	mov	r0, r2
 8005ed4:	f000 fa8a 	bl	80063ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b083      	sub	sp, #12
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
	...

08005f48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d109      	bne.n	8005f6c <HAL_TIM_PWM_Start+0x24>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	bf14      	ite	ne
 8005f64:	2301      	movne	r3, #1
 8005f66:	2300      	moveq	r3, #0
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	e022      	b.n	8005fb2 <HAL_TIM_PWM_Start+0x6a>
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	2b04      	cmp	r3, #4
 8005f70:	d109      	bne.n	8005f86 <HAL_TIM_PWM_Start+0x3e>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	bf14      	ite	ne
 8005f7e:	2301      	movne	r3, #1
 8005f80:	2300      	moveq	r3, #0
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	e015      	b.n	8005fb2 <HAL_TIM_PWM_Start+0x6a>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b08      	cmp	r3, #8
 8005f8a:	d109      	bne.n	8005fa0 <HAL_TIM_PWM_Start+0x58>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	bf14      	ite	ne
 8005f98:	2301      	movne	r3, #1
 8005f9a:	2300      	moveq	r3, #0
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	e008      	b.n	8005fb2 <HAL_TIM_PWM_Start+0x6a>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	bf14      	ite	ne
 8005fac:	2301      	movne	r3, #1
 8005fae:	2300      	moveq	r3, #0
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e07c      	b.n	80060b4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d104      	bne.n	8005fca <HAL_TIM_PWM_Start+0x82>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fc8:	e013      	b.n	8005ff2 <HAL_TIM_PWM_Start+0xaa>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	d104      	bne.n	8005fda <HAL_TIM_PWM_Start+0x92>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fd8:	e00b      	b.n	8005ff2 <HAL_TIM_PWM_Start+0xaa>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b08      	cmp	r3, #8
 8005fde:	d104      	bne.n	8005fea <HAL_TIM_PWM_Start+0xa2>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fe8:	e003      	b.n	8005ff2 <HAL_TIM_PWM_Start+0xaa>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2202      	movs	r2, #2
 8005fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	6839      	ldr	r1, [r7, #0]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 fce0 	bl	80069c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a2d      	ldr	r2, [pc, #180]	; (80060bc <HAL_TIM_PWM_Start+0x174>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d004      	beq.n	8006014 <HAL_TIM_PWM_Start+0xcc>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a2c      	ldr	r2, [pc, #176]	; (80060c0 <HAL_TIM_PWM_Start+0x178>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d101      	bne.n	8006018 <HAL_TIM_PWM_Start+0xd0>
 8006014:	2301      	movs	r3, #1
 8006016:	e000      	b.n	800601a <HAL_TIM_PWM_Start+0xd2>
 8006018:	2300      	movs	r3, #0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d007      	beq.n	800602e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800602c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a22      	ldr	r2, [pc, #136]	; (80060bc <HAL_TIM_PWM_Start+0x174>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d022      	beq.n	800607e <HAL_TIM_PWM_Start+0x136>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006040:	d01d      	beq.n	800607e <HAL_TIM_PWM_Start+0x136>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a1f      	ldr	r2, [pc, #124]	; (80060c4 <HAL_TIM_PWM_Start+0x17c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d018      	beq.n	800607e <HAL_TIM_PWM_Start+0x136>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a1d      	ldr	r2, [pc, #116]	; (80060c8 <HAL_TIM_PWM_Start+0x180>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d013      	beq.n	800607e <HAL_TIM_PWM_Start+0x136>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a1c      	ldr	r2, [pc, #112]	; (80060cc <HAL_TIM_PWM_Start+0x184>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d00e      	beq.n	800607e <HAL_TIM_PWM_Start+0x136>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a16      	ldr	r2, [pc, #88]	; (80060c0 <HAL_TIM_PWM_Start+0x178>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d009      	beq.n	800607e <HAL_TIM_PWM_Start+0x136>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a18      	ldr	r2, [pc, #96]	; (80060d0 <HAL_TIM_PWM_Start+0x188>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d004      	beq.n	800607e <HAL_TIM_PWM_Start+0x136>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a16      	ldr	r2, [pc, #88]	; (80060d4 <HAL_TIM_PWM_Start+0x18c>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d111      	bne.n	80060a2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f003 0307 	and.w	r3, r3, #7
 8006088:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2b06      	cmp	r3, #6
 800608e:	d010      	beq.n	80060b2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0201 	orr.w	r2, r2, #1
 800609e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a0:	e007      	b.n	80060b2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f042 0201 	orr.w	r2, r2, #1
 80060b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	40010000 	.word	0x40010000
 80060c0:	40010400 	.word	0x40010400
 80060c4:	40000400 	.word	0x40000400
 80060c8:	40000800 	.word	0x40000800
 80060cc:	40000c00 	.word	0x40000c00
 80060d0:	40014000 	.word	0x40014000
 80060d4:	40001800 	.word	0x40001800

080060d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060e4:	2300      	movs	r3, #0
 80060e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d101      	bne.n	80060f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060f2:	2302      	movs	r3, #2
 80060f4:	e0ae      	b.n	8006254 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b0c      	cmp	r3, #12
 8006102:	f200 809f 	bhi.w	8006244 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006106:	a201      	add	r2, pc, #4	; (adr r2, 800610c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610c:	08006141 	.word	0x08006141
 8006110:	08006245 	.word	0x08006245
 8006114:	08006245 	.word	0x08006245
 8006118:	08006245 	.word	0x08006245
 800611c:	08006181 	.word	0x08006181
 8006120:	08006245 	.word	0x08006245
 8006124:	08006245 	.word	0x08006245
 8006128:	08006245 	.word	0x08006245
 800612c:	080061c3 	.word	0x080061c3
 8006130:	08006245 	.word	0x08006245
 8006134:	08006245 	.word	0x08006245
 8006138:	08006245 	.word	0x08006245
 800613c:	08006203 	.word	0x08006203
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68b9      	ldr	r1, [r7, #8]
 8006146:	4618      	mov	r0, r3
 8006148:	f000 f9f0 	bl	800652c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699a      	ldr	r2, [r3, #24]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0208 	orr.w	r2, r2, #8
 800615a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699a      	ldr	r2, [r3, #24]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0204 	bic.w	r2, r2, #4
 800616a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6999      	ldr	r1, [r3, #24]
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	691a      	ldr	r2, [r3, #16]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	619a      	str	r2, [r3, #24]
      break;
 800617e:	e064      	b.n	800624a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68b9      	ldr	r1, [r7, #8]
 8006186:	4618      	mov	r0, r3
 8006188:	f000 fa40 	bl	800660c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699a      	ldr	r2, [r3, #24]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800619a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	699a      	ldr	r2, [r3, #24]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6999      	ldr	r1, [r3, #24]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	021a      	lsls	r2, r3, #8
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	430a      	orrs	r2, r1
 80061be:	619a      	str	r2, [r3, #24]
      break;
 80061c0:	e043      	b.n	800624a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68b9      	ldr	r1, [r7, #8]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 fa95 	bl	80066f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69da      	ldr	r2, [r3, #28]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f042 0208 	orr.w	r2, r2, #8
 80061dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69da      	ldr	r2, [r3, #28]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 0204 	bic.w	r2, r2, #4
 80061ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69d9      	ldr	r1, [r3, #28]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	691a      	ldr	r2, [r3, #16]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	430a      	orrs	r2, r1
 80061fe:	61da      	str	r2, [r3, #28]
      break;
 8006200:	e023      	b.n	800624a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68b9      	ldr	r1, [r7, #8]
 8006208:	4618      	mov	r0, r3
 800620a:	f000 fae9 	bl	80067e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	69da      	ldr	r2, [r3, #28]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800621c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	69da      	ldr	r2, [r3, #28]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800622c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	69d9      	ldr	r1, [r3, #28]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	021a      	lsls	r2, r3, #8
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	61da      	str	r2, [r3, #28]
      break;
 8006242:	e002      	b.n	800624a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	75fb      	strb	r3, [r7, #23]
      break;
 8006248:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006252:	7dfb      	ldrb	r3, [r7, #23]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006270:	2b01      	cmp	r3, #1
 8006272:	d101      	bne.n	8006278 <HAL_TIM_ConfigClockSource+0x1c>
 8006274:	2302      	movs	r3, #2
 8006276:	e0b4      	b.n	80063e2 <HAL_TIM_ConfigClockSource+0x186>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800629e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062b0:	d03e      	beq.n	8006330 <HAL_TIM_ConfigClockSource+0xd4>
 80062b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062b6:	f200 8087 	bhi.w	80063c8 <HAL_TIM_ConfigClockSource+0x16c>
 80062ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062be:	f000 8086 	beq.w	80063ce <HAL_TIM_ConfigClockSource+0x172>
 80062c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062c6:	d87f      	bhi.n	80063c8 <HAL_TIM_ConfigClockSource+0x16c>
 80062c8:	2b70      	cmp	r3, #112	; 0x70
 80062ca:	d01a      	beq.n	8006302 <HAL_TIM_ConfigClockSource+0xa6>
 80062cc:	2b70      	cmp	r3, #112	; 0x70
 80062ce:	d87b      	bhi.n	80063c8 <HAL_TIM_ConfigClockSource+0x16c>
 80062d0:	2b60      	cmp	r3, #96	; 0x60
 80062d2:	d050      	beq.n	8006376 <HAL_TIM_ConfigClockSource+0x11a>
 80062d4:	2b60      	cmp	r3, #96	; 0x60
 80062d6:	d877      	bhi.n	80063c8 <HAL_TIM_ConfigClockSource+0x16c>
 80062d8:	2b50      	cmp	r3, #80	; 0x50
 80062da:	d03c      	beq.n	8006356 <HAL_TIM_ConfigClockSource+0xfa>
 80062dc:	2b50      	cmp	r3, #80	; 0x50
 80062de:	d873      	bhi.n	80063c8 <HAL_TIM_ConfigClockSource+0x16c>
 80062e0:	2b40      	cmp	r3, #64	; 0x40
 80062e2:	d058      	beq.n	8006396 <HAL_TIM_ConfigClockSource+0x13a>
 80062e4:	2b40      	cmp	r3, #64	; 0x40
 80062e6:	d86f      	bhi.n	80063c8 <HAL_TIM_ConfigClockSource+0x16c>
 80062e8:	2b30      	cmp	r3, #48	; 0x30
 80062ea:	d064      	beq.n	80063b6 <HAL_TIM_ConfigClockSource+0x15a>
 80062ec:	2b30      	cmp	r3, #48	; 0x30
 80062ee:	d86b      	bhi.n	80063c8 <HAL_TIM_ConfigClockSource+0x16c>
 80062f0:	2b20      	cmp	r3, #32
 80062f2:	d060      	beq.n	80063b6 <HAL_TIM_ConfigClockSource+0x15a>
 80062f4:	2b20      	cmp	r3, #32
 80062f6:	d867      	bhi.n	80063c8 <HAL_TIM_ConfigClockSource+0x16c>
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d05c      	beq.n	80063b6 <HAL_TIM_ConfigClockSource+0x15a>
 80062fc:	2b10      	cmp	r3, #16
 80062fe:	d05a      	beq.n	80063b6 <HAL_TIM_ConfigClockSource+0x15a>
 8006300:	e062      	b.n	80063c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6818      	ldr	r0, [r3, #0]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	6899      	ldr	r1, [r3, #8]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	f000 fb35 	bl	8006980 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006324:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	609a      	str	r2, [r3, #8]
      break;
 800632e:	e04f      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6818      	ldr	r0, [r3, #0]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	6899      	ldr	r1, [r3, #8]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f000 fb1e 	bl	8006980 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689a      	ldr	r2, [r3, #8]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006352:	609a      	str	r2, [r3, #8]
      break;
 8006354:	e03c      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6818      	ldr	r0, [r3, #0]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	6859      	ldr	r1, [r3, #4]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	461a      	mov	r2, r3
 8006364:	f000 fa92 	bl	800688c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2150      	movs	r1, #80	; 0x50
 800636e:	4618      	mov	r0, r3
 8006370:	f000 faeb 	bl	800694a <TIM_ITRx_SetConfig>
      break;
 8006374:	e02c      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6818      	ldr	r0, [r3, #0]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	6859      	ldr	r1, [r3, #4]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	461a      	mov	r2, r3
 8006384:	f000 fab1 	bl	80068ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2160      	movs	r1, #96	; 0x60
 800638e:	4618      	mov	r0, r3
 8006390:	f000 fadb 	bl	800694a <TIM_ITRx_SetConfig>
      break;
 8006394:	e01c      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6818      	ldr	r0, [r3, #0]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	6859      	ldr	r1, [r3, #4]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	461a      	mov	r2, r3
 80063a4:	f000 fa72 	bl	800688c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2140      	movs	r1, #64	; 0x40
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 facb 	bl	800694a <TIM_ITRx_SetConfig>
      break;
 80063b4:	e00c      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4619      	mov	r1, r3
 80063c0:	4610      	mov	r0, r2
 80063c2:	f000 fac2 	bl	800694a <TIM_ITRx_SetConfig>
      break;
 80063c6:	e003      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	73fb      	strb	r3, [r7, #15]
      break;
 80063cc:	e000      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
	...

080063ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a40      	ldr	r2, [pc, #256]	; (8006500 <TIM_Base_SetConfig+0x114>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d013      	beq.n	800642c <TIM_Base_SetConfig+0x40>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640a:	d00f      	beq.n	800642c <TIM_Base_SetConfig+0x40>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a3d      	ldr	r2, [pc, #244]	; (8006504 <TIM_Base_SetConfig+0x118>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d00b      	beq.n	800642c <TIM_Base_SetConfig+0x40>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a3c      	ldr	r2, [pc, #240]	; (8006508 <TIM_Base_SetConfig+0x11c>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d007      	beq.n	800642c <TIM_Base_SetConfig+0x40>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a3b      	ldr	r2, [pc, #236]	; (800650c <TIM_Base_SetConfig+0x120>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d003      	beq.n	800642c <TIM_Base_SetConfig+0x40>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a3a      	ldr	r2, [pc, #232]	; (8006510 <TIM_Base_SetConfig+0x124>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d108      	bne.n	800643e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a2f      	ldr	r2, [pc, #188]	; (8006500 <TIM_Base_SetConfig+0x114>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d02b      	beq.n	800649e <TIM_Base_SetConfig+0xb2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800644c:	d027      	beq.n	800649e <TIM_Base_SetConfig+0xb2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a2c      	ldr	r2, [pc, #176]	; (8006504 <TIM_Base_SetConfig+0x118>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d023      	beq.n	800649e <TIM_Base_SetConfig+0xb2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a2b      	ldr	r2, [pc, #172]	; (8006508 <TIM_Base_SetConfig+0x11c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d01f      	beq.n	800649e <TIM_Base_SetConfig+0xb2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a2a      	ldr	r2, [pc, #168]	; (800650c <TIM_Base_SetConfig+0x120>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d01b      	beq.n	800649e <TIM_Base_SetConfig+0xb2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a29      	ldr	r2, [pc, #164]	; (8006510 <TIM_Base_SetConfig+0x124>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d017      	beq.n	800649e <TIM_Base_SetConfig+0xb2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a28      	ldr	r2, [pc, #160]	; (8006514 <TIM_Base_SetConfig+0x128>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d013      	beq.n	800649e <TIM_Base_SetConfig+0xb2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a27      	ldr	r2, [pc, #156]	; (8006518 <TIM_Base_SetConfig+0x12c>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d00f      	beq.n	800649e <TIM_Base_SetConfig+0xb2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a26      	ldr	r2, [pc, #152]	; (800651c <TIM_Base_SetConfig+0x130>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d00b      	beq.n	800649e <TIM_Base_SetConfig+0xb2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a25      	ldr	r2, [pc, #148]	; (8006520 <TIM_Base_SetConfig+0x134>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d007      	beq.n	800649e <TIM_Base_SetConfig+0xb2>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a24      	ldr	r2, [pc, #144]	; (8006524 <TIM_Base_SetConfig+0x138>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d003      	beq.n	800649e <TIM_Base_SetConfig+0xb2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a23      	ldr	r2, [pc, #140]	; (8006528 <TIM_Base_SetConfig+0x13c>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d108      	bne.n	80064b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	689a      	ldr	r2, [r3, #8]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a0a      	ldr	r2, [pc, #40]	; (8006500 <TIM_Base_SetConfig+0x114>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d003      	beq.n	80064e4 <TIM_Base_SetConfig+0xf8>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a0c      	ldr	r2, [pc, #48]	; (8006510 <TIM_Base_SetConfig+0x124>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d103      	bne.n	80064ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	691a      	ldr	r2, [r3, #16]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	615a      	str	r2, [r3, #20]
}
 80064f2:	bf00      	nop
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	40010000 	.word	0x40010000
 8006504:	40000400 	.word	0x40000400
 8006508:	40000800 	.word	0x40000800
 800650c:	40000c00 	.word	0x40000c00
 8006510:	40010400 	.word	0x40010400
 8006514:	40014000 	.word	0x40014000
 8006518:	40014400 	.word	0x40014400
 800651c:	40014800 	.word	0x40014800
 8006520:	40001800 	.word	0x40001800
 8006524:	40001c00 	.word	0x40001c00
 8006528:	40002000 	.word	0x40002000

0800652c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	f023 0201 	bic.w	r2, r3, #1
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800655a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f023 0303 	bic.w	r3, r3, #3
 8006562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f023 0302 	bic.w	r3, r3, #2
 8006574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	4313      	orrs	r3, r2
 800657e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a20      	ldr	r2, [pc, #128]	; (8006604 <TIM_OC1_SetConfig+0xd8>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d003      	beq.n	8006590 <TIM_OC1_SetConfig+0x64>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a1f      	ldr	r2, [pc, #124]	; (8006608 <TIM_OC1_SetConfig+0xdc>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d10c      	bne.n	80065aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f023 0308 	bic.w	r3, r3, #8
 8006596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	4313      	orrs	r3, r2
 80065a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f023 0304 	bic.w	r3, r3, #4
 80065a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a15      	ldr	r2, [pc, #84]	; (8006604 <TIM_OC1_SetConfig+0xd8>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d003      	beq.n	80065ba <TIM_OC1_SetConfig+0x8e>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a14      	ldr	r2, [pc, #80]	; (8006608 <TIM_OC1_SetConfig+0xdc>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d111      	bne.n	80065de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	4313      	orrs	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	621a      	str	r2, [r3, #32]
}
 80065f8:	bf00      	nop
 80065fa:	371c      	adds	r7, #28
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr
 8006604:	40010000 	.word	0x40010000
 8006608:	40010400 	.word	0x40010400

0800660c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	f023 0210 	bic.w	r2, r3, #16
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800663a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	021b      	lsls	r3, r3, #8
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	4313      	orrs	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f023 0320 	bic.w	r3, r3, #32
 8006656:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	011b      	lsls	r3, r3, #4
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	4313      	orrs	r3, r2
 8006662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a22      	ldr	r2, [pc, #136]	; (80066f0 <TIM_OC2_SetConfig+0xe4>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d003      	beq.n	8006674 <TIM_OC2_SetConfig+0x68>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a21      	ldr	r2, [pc, #132]	; (80066f4 <TIM_OC2_SetConfig+0xe8>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d10d      	bne.n	8006690 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800667a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	011b      	lsls	r3, r3, #4
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800668e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a17      	ldr	r2, [pc, #92]	; (80066f0 <TIM_OC2_SetConfig+0xe4>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d003      	beq.n	80066a0 <TIM_OC2_SetConfig+0x94>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a16      	ldr	r2, [pc, #88]	; (80066f4 <TIM_OC2_SetConfig+0xe8>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d113      	bne.n	80066c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	621a      	str	r2, [r3, #32]
}
 80066e2:	bf00      	nop
 80066e4:	371c      	adds	r7, #28
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	40010000 	.word	0x40010000
 80066f4:	40010400 	.word	0x40010400

080066f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0303 	bic.w	r3, r3, #3
 800672e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	021b      	lsls	r3, r3, #8
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	4313      	orrs	r3, r2
 800674c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a21      	ldr	r2, [pc, #132]	; (80067d8 <TIM_OC3_SetConfig+0xe0>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d003      	beq.n	800675e <TIM_OC3_SetConfig+0x66>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a20      	ldr	r2, [pc, #128]	; (80067dc <TIM_OC3_SetConfig+0xe4>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d10d      	bne.n	800677a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006764:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	021b      	lsls	r3, r3, #8
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	4313      	orrs	r3, r2
 8006770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a16      	ldr	r2, [pc, #88]	; (80067d8 <TIM_OC3_SetConfig+0xe0>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d003      	beq.n	800678a <TIM_OC3_SetConfig+0x92>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a15      	ldr	r2, [pc, #84]	; (80067dc <TIM_OC3_SetConfig+0xe4>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d113      	bne.n	80067b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	011b      	lsls	r3, r3, #4
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	011b      	lsls	r3, r3, #4
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	685a      	ldr	r2, [r3, #4]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	621a      	str	r2, [r3, #32]
}
 80067cc:	bf00      	nop
 80067ce:	371c      	adds	r7, #28
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr
 80067d8:	40010000 	.word	0x40010000
 80067dc:	40010400 	.word	0x40010400

080067e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800680e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	021b      	lsls	r3, r3, #8
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	4313      	orrs	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800682a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	031b      	lsls	r3, r3, #12
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	4313      	orrs	r3, r2
 8006836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a12      	ldr	r2, [pc, #72]	; (8006884 <TIM_OC4_SetConfig+0xa4>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d003      	beq.n	8006848 <TIM_OC4_SetConfig+0x68>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a11      	ldr	r2, [pc, #68]	; (8006888 <TIM_OC4_SetConfig+0xa8>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d109      	bne.n	800685c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800684e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	019b      	lsls	r3, r3, #6
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	4313      	orrs	r3, r2
 800685a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	621a      	str	r2, [r3, #32]
}
 8006876:	bf00      	nop
 8006878:	371c      	adds	r7, #28
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	40010000 	.word	0x40010000
 8006888:	40010400 	.word	0x40010400

0800688c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800688c:	b480      	push	{r7}
 800688e:	b087      	sub	sp, #28
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	f023 0201 	bic.w	r2, r3, #1
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4313      	orrs	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f023 030a 	bic.w	r3, r3, #10
 80068c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	621a      	str	r2, [r3, #32]
}
 80068de:	bf00      	nop
 80068e0:	371c      	adds	r7, #28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b087      	sub	sp, #28
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	60f8      	str	r0, [r7, #12]
 80068f2:	60b9      	str	r1, [r7, #8]
 80068f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	f023 0210 	bic.w	r2, r3, #16
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006914:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	031b      	lsls	r3, r3, #12
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	4313      	orrs	r3, r2
 800691e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006926:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	011b      	lsls	r3, r3, #4
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	4313      	orrs	r3, r2
 8006930:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	621a      	str	r2, [r3, #32]
}
 800693e:	bf00      	nop
 8006940:	371c      	adds	r7, #28
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800694a:	b480      	push	{r7}
 800694c:	b085      	sub	sp, #20
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006960:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	f043 0307 	orr.w	r3, r3, #7
 800696c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	609a      	str	r2, [r3, #8]
}
 8006974:	bf00      	nop
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
 800698c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800699a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	021a      	lsls	r2, r3, #8
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	431a      	orrs	r2, r3
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	609a      	str	r2, [r3, #8]
}
 80069b4:	bf00      	nop
 80069b6:	371c      	adds	r7, #28
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b087      	sub	sp, #28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f003 031f 	and.w	r3, r3, #31
 80069d2:	2201      	movs	r2, #1
 80069d4:	fa02 f303 	lsl.w	r3, r2, r3
 80069d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6a1a      	ldr	r2, [r3, #32]
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	43db      	mvns	r3, r3
 80069e2:	401a      	ands	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6a1a      	ldr	r2, [r3, #32]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f003 031f 	and.w	r3, r3, #31
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	fa01 f303 	lsl.w	r3, r1, r3
 80069f8:	431a      	orrs	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	621a      	str	r2, [r3, #32]
}
 80069fe:	bf00      	nop
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
	...

08006a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d101      	bne.n	8006a24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a20:	2302      	movs	r3, #2
 8006a22:	e05a      	b.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a21      	ldr	r2, [pc, #132]	; (8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d022      	beq.n	8006aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a70:	d01d      	beq.n	8006aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a1d      	ldr	r2, [pc, #116]	; (8006aec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d018      	beq.n	8006aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a1b      	ldr	r2, [pc, #108]	; (8006af0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d013      	beq.n	8006aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a1a      	ldr	r2, [pc, #104]	; (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d00e      	beq.n	8006aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a18      	ldr	r2, [pc, #96]	; (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d009      	beq.n	8006aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a17      	ldr	r2, [pc, #92]	; (8006afc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d004      	beq.n	8006aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a15      	ldr	r2, [pc, #84]	; (8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d10c      	bne.n	8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ab4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40010000 	.word	0x40010000
 8006aec:	40000400 	.word	0x40000400
 8006af0:	40000800 	.word	0x40000800
 8006af4:	40000c00 	.word	0x40000c00
 8006af8:	40010400 	.word	0x40010400
 8006afc:	40014000 	.word	0x40014000
 8006b00:	40001800 	.word	0x40001800

08006b04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e03f      	b.n	8006b96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d106      	bne.n	8006b30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7fa fc22 	bl	8001374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2224      	movs	r2, #36	; 0x24
 8006b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68da      	ldr	r2, [r3, #12]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fe81 	bl	8007850 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	691a      	ldr	r2, [r3, #16]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	695a      	ldr	r2, [r3, #20]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68da      	ldr	r2, [r3, #12]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2220      	movs	r2, #32
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b08a      	sub	sp, #40	; 0x28
 8006ba2:	af02      	add	r7, sp, #8
 8006ba4:	60f8      	str	r0, [r7, #12]
 8006ba6:	60b9      	str	r1, [r7, #8]
 8006ba8:	603b      	str	r3, [r7, #0]
 8006baa:	4613      	mov	r3, r2
 8006bac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b20      	cmp	r3, #32
 8006bbc:	d17c      	bne.n	8006cb8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <HAL_UART_Transmit+0x2c>
 8006bc4:	88fb      	ldrh	r3, [r7, #6]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d101      	bne.n	8006bce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e075      	b.n	8006cba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d101      	bne.n	8006bdc <HAL_UART_Transmit+0x3e>
 8006bd8:	2302      	movs	r3, #2
 8006bda:	e06e      	b.n	8006cba <HAL_UART_Transmit+0x11c>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2221      	movs	r2, #33	; 0x21
 8006bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bf2:	f7fa fd25 	bl	8001640 <HAL_GetTick>
 8006bf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	88fa      	ldrh	r2, [r7, #6]
 8006bfc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	88fa      	ldrh	r2, [r7, #6]
 8006c02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c0c:	d108      	bne.n	8006c20 <HAL_UART_Transmit+0x82>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d104      	bne.n	8006c20 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006c16:	2300      	movs	r3, #0
 8006c18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	61bb      	str	r3, [r7, #24]
 8006c1e:	e003      	b.n	8006c28 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c24:	2300      	movs	r3, #0
 8006c26:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006c30:	e02a      	b.n	8006c88 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	2180      	movs	r1, #128	; 0x80
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 fbc1 	bl	80073c4 <UART_WaitOnFlagUntilTimeout>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e036      	b.n	8006cba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10b      	bne.n	8006c6a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	461a      	mov	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	3302      	adds	r3, #2
 8006c66:	61bb      	str	r3, [r7, #24]
 8006c68:	e007      	b.n	8006c7a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	781a      	ldrb	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	3301      	adds	r3, #1
 8006c78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	3b01      	subs	r3, #1
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1cf      	bne.n	8006c32 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	2140      	movs	r1, #64	; 0x40
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 fb91 	bl	80073c4 <UART_WaitOnFlagUntilTimeout>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d001      	beq.n	8006cac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e006      	b.n	8006cba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	e000      	b.n	8006cba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006cb8:	2302      	movs	r3, #2
  }
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3720      	adds	r7, #32
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b08a      	sub	sp, #40	; 0x28
 8006cc6:	af02      	add	r7, sp, #8
 8006cc8:	60f8      	str	r0, [r7, #12]
 8006cca:	60b9      	str	r1, [r7, #8]
 8006ccc:	603b      	str	r3, [r7, #0]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b20      	cmp	r3, #32
 8006ce0:	f040 808c 	bne.w	8006dfc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <HAL_UART_Receive+0x2e>
 8006cea:	88fb      	ldrh	r3, [r7, #6]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e084      	b.n	8006dfe <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d101      	bne.n	8006d02 <HAL_UART_Receive+0x40>
 8006cfe:	2302      	movs	r3, #2
 8006d00:	e07d      	b.n	8006dfe <HAL_UART_Receive+0x13c>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2222      	movs	r2, #34	; 0x22
 8006d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d1e:	f7fa fc8f 	bl	8001640 <HAL_GetTick>
 8006d22:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	88fa      	ldrh	r2, [r7, #6]
 8006d28:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	88fa      	ldrh	r2, [r7, #6]
 8006d2e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d38:	d108      	bne.n	8006d4c <HAL_UART_Receive+0x8a>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d104      	bne.n	8006d4c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006d42:	2300      	movs	r3, #0
 8006d44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	61bb      	str	r3, [r7, #24]
 8006d4a:	e003      	b.n	8006d54 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d50:	2300      	movs	r3, #0
 8006d52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006d5c:	e043      	b.n	8006de6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	2200      	movs	r2, #0
 8006d66:	2120      	movs	r1, #32
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f000 fb2b 	bl	80073c4 <UART_WaitOnFlagUntilTimeout>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d001      	beq.n	8006d78 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e042      	b.n	8006dfe <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10c      	bne.n	8006d98 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	3302      	adds	r3, #2
 8006d94:	61bb      	str	r3, [r7, #24]
 8006d96:	e01f      	b.n	8006dd8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da0:	d007      	beq.n	8006db2 <HAL_UART_Receive+0xf0>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10a      	bne.n	8006dc0 <HAL_UART_Receive+0xfe>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d106      	bne.n	8006dc0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	701a      	strb	r2, [r3, #0]
 8006dbe:	e008      	b.n	8006dd2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dcc:	b2da      	uxtb	r2, r3
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	3b01      	subs	r3, #1
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1b6      	bne.n	8006d5e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	e000      	b.n	8006dfe <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006dfc:	2302      	movs	r3, #2
  }
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3720      	adds	r7, #32
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b084      	sub	sp, #16
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	60f8      	str	r0, [r7, #12]
 8006e0e:	60b9      	str	r1, [r7, #8]
 8006e10:	4613      	mov	r3, r2
 8006e12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b20      	cmp	r3, #32
 8006e1e:	d11d      	bne.n	8006e5c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d002      	beq.n	8006e2c <HAL_UART_Receive_IT+0x26>
 8006e26:	88fb      	ldrh	r3, [r7, #6]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d101      	bne.n	8006e30 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e016      	b.n	8006e5e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d101      	bne.n	8006e3e <HAL_UART_Receive_IT+0x38>
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	e00f      	b.n	8006e5e <HAL_UART_Receive_IT+0x58>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e4c:	88fb      	ldrh	r3, [r7, #6]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	68b9      	ldr	r1, [r7, #8]
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f000 fb24 	bl	80074a0 <UART_Start_Receive_IT>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	e000      	b.n	8006e5e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006e5c:	2302      	movs	r3, #2
  }
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
	...

08006e68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b0ba      	sub	sp, #232	; 0xe8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006e94:	2300      	movs	r3, #0
 8006e96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e9e:	f003 030f 	and.w	r3, r3, #15
 8006ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006ea6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10f      	bne.n	8006ece <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eb2:	f003 0320 	and.w	r3, r3, #32
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d009      	beq.n	8006ece <HAL_UART_IRQHandler+0x66>
 8006eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ebe:	f003 0320 	and.w	r3, r3, #32
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d003      	beq.n	8006ece <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fc07 	bl	80076da <UART_Receive_IT>
      return;
 8006ecc:	e256      	b.n	800737c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006ece:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f000 80de 	beq.w	8007094 <HAL_UART_IRQHandler+0x22c>
 8006ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006edc:	f003 0301 	and.w	r3, r3, #1
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d106      	bne.n	8006ef2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ee8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 80d1 	beq.w	8007094 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00b      	beq.n	8006f16 <HAL_UART_IRQHandler+0xae>
 8006efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d005      	beq.n	8006f16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0e:	f043 0201 	orr.w	r2, r3, #1
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f1a:	f003 0304 	and.w	r3, r3, #4
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00b      	beq.n	8006f3a <HAL_UART_IRQHandler+0xd2>
 8006f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d005      	beq.n	8006f3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f32:	f043 0202 	orr.w	r2, r3, #2
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f3e:	f003 0302 	and.w	r3, r3, #2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00b      	beq.n	8006f5e <HAL_UART_IRQHandler+0xf6>
 8006f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d005      	beq.n	8006f5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f56:	f043 0204 	orr.w	r2, r3, #4
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f62:	f003 0308 	and.w	r3, r3, #8
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d011      	beq.n	8006f8e <HAL_UART_IRQHandler+0x126>
 8006f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f6e:	f003 0320 	and.w	r3, r3, #32
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d105      	bne.n	8006f82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d005      	beq.n	8006f8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	f043 0208 	orr.w	r2, r3, #8
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 81ed 	beq.w	8007372 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f9c:	f003 0320 	and.w	r3, r3, #32
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d008      	beq.n	8006fb6 <HAL_UART_IRQHandler+0x14e>
 8006fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fa8:	f003 0320 	and.w	r3, r3, #32
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 fb92 	bl	80076da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	695b      	ldr	r3, [r3, #20]
 8006fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc0:	2b40      	cmp	r3, #64	; 0x40
 8006fc2:	bf0c      	ite	eq
 8006fc4:	2301      	moveq	r3, #1
 8006fc6:	2300      	movne	r3, #0
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	f003 0308 	and.w	r3, r3, #8
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d103      	bne.n	8006fe2 <HAL_UART_IRQHandler+0x17a>
 8006fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d04f      	beq.n	8007082 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fa9a 	bl	800751c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff2:	2b40      	cmp	r3, #64	; 0x40
 8006ff4:	d141      	bne.n	800707a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3314      	adds	r3, #20
 8006ffc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007000:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007004:	e853 3f00 	ldrex	r3, [r3]
 8007008:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800700c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007014:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3314      	adds	r3, #20
 800701e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007022:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007026:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800702e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007032:	e841 2300 	strex	r3, r2, [r1]
 8007036:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800703a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1d9      	bne.n	8006ff6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007046:	2b00      	cmp	r3, #0
 8007048:	d013      	beq.n	8007072 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704e:	4a7d      	ldr	r2, [pc, #500]	; (8007244 <HAL_UART_IRQHandler+0x3dc>)
 8007050:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007056:	4618      	mov	r0, r3
 8007058:	f7fa fca3 	bl	80019a2 <HAL_DMA_Abort_IT>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d016      	beq.n	8007090 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800706c:	4610      	mov	r0, r2
 800706e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007070:	e00e      	b.n	8007090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f990 	bl	8007398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007078:	e00a      	b.n	8007090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f98c 	bl	8007398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007080:	e006      	b.n	8007090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f988 	bl	8007398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800708e:	e170      	b.n	8007372 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007090:	bf00      	nop
    return;
 8007092:	e16e      	b.n	8007372 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007098:	2b01      	cmp	r3, #1
 800709a:	f040 814a 	bne.w	8007332 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800709e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a2:	f003 0310 	and.w	r3, r3, #16
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f000 8143 	beq.w	8007332 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80070ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070b0:	f003 0310 	and.w	r3, r3, #16
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 813c 	beq.w	8007332 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070ba:	2300      	movs	r3, #0
 80070bc:	60bb      	str	r3, [r7, #8]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	60bb      	str	r3, [r7, #8]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	60bb      	str	r3, [r7, #8]
 80070ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070da:	2b40      	cmp	r3, #64	; 0x40
 80070dc:	f040 80b4 	bne.w	8007248 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 8140 	beq.w	8007376 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070fe:	429a      	cmp	r2, r3
 8007100:	f080 8139 	bcs.w	8007376 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800710a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007116:	f000 8088 	beq.w	800722a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	330c      	adds	r3, #12
 8007120:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007124:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007128:	e853 3f00 	ldrex	r3, [r3]
 800712c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007130:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007138:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	330c      	adds	r3, #12
 8007142:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007146:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800714a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007152:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007156:	e841 2300 	strex	r3, r2, [r1]
 800715a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800715e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1d9      	bne.n	800711a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3314      	adds	r3, #20
 800716c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007170:	e853 3f00 	ldrex	r3, [r3]
 8007174:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007176:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007178:	f023 0301 	bic.w	r3, r3, #1
 800717c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3314      	adds	r3, #20
 8007186:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800718a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800718e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007190:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007192:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800719c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e1      	bne.n	8007166 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3314      	adds	r3, #20
 80071a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071ac:	e853 3f00 	ldrex	r3, [r3]
 80071b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80071b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3314      	adds	r3, #20
 80071c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80071c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80071c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80071cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80071ce:	e841 2300 	strex	r3, r2, [r1]
 80071d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80071d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1e3      	bne.n	80071a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2220      	movs	r2, #32
 80071de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	330c      	adds	r3, #12
 80071ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071f2:	e853 3f00 	ldrex	r3, [r3]
 80071f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071fa:	f023 0310 	bic.w	r3, r3, #16
 80071fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	330c      	adds	r3, #12
 8007208:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800720c:	65ba      	str	r2, [r7, #88]	; 0x58
 800720e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007210:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007212:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007214:	e841 2300 	strex	r3, r2, [r1]
 8007218:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800721a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e3      	bne.n	80071e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007224:	4618      	mov	r0, r3
 8007226:	f7fa fb4c 	bl	80018c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007232:	b29b      	uxth	r3, r3
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	b29b      	uxth	r3, r3
 8007238:	4619      	mov	r1, r3
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f8b6 	bl	80073ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007240:	e099      	b.n	8007376 <HAL_UART_IRQHandler+0x50e>
 8007242:	bf00      	nop
 8007244:	080075e3 	.word	0x080075e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007250:	b29b      	uxth	r3, r3
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800725c:	b29b      	uxth	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	f000 808b 	beq.w	800737a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007264:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007268:	2b00      	cmp	r3, #0
 800726a:	f000 8086 	beq.w	800737a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	330c      	adds	r3, #12
 8007274:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007278:	e853 3f00 	ldrex	r3, [r3]
 800727c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800727e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007280:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007284:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	330c      	adds	r3, #12
 800728e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007292:	647a      	str	r2, [r7, #68]	; 0x44
 8007294:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007296:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007298:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800729a:	e841 2300 	strex	r3, r2, [r1]
 800729e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1e3      	bne.n	800726e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3314      	adds	r3, #20
 80072ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	e853 3f00 	ldrex	r3, [r3]
 80072b4:	623b      	str	r3, [r7, #32]
   return(result);
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	f023 0301 	bic.w	r3, r3, #1
 80072bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3314      	adds	r3, #20
 80072c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80072ca:	633a      	str	r2, [r7, #48]	; 0x30
 80072cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072d2:	e841 2300 	strex	r3, r2, [r1]
 80072d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1e3      	bne.n	80072a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	330c      	adds	r3, #12
 80072f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	e853 3f00 	ldrex	r3, [r3]
 80072fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f023 0310 	bic.w	r3, r3, #16
 8007302:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	330c      	adds	r3, #12
 800730c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007310:	61fa      	str	r2, [r7, #28]
 8007312:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007314:	69b9      	ldr	r1, [r7, #24]
 8007316:	69fa      	ldr	r2, [r7, #28]
 8007318:	e841 2300 	strex	r3, r2, [r1]
 800731c:	617b      	str	r3, [r7, #20]
   return(result);
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1e3      	bne.n	80072ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007324:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007328:	4619      	mov	r1, r3
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f83e 	bl	80073ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007330:	e023      	b.n	800737a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800733a:	2b00      	cmp	r3, #0
 800733c:	d009      	beq.n	8007352 <HAL_UART_IRQHandler+0x4ea>
 800733e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f95d 	bl	800760a <UART_Transmit_IT>
    return;
 8007350:	e014      	b.n	800737c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00e      	beq.n	800737c <HAL_UART_IRQHandler+0x514>
 800735e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007366:	2b00      	cmp	r3, #0
 8007368:	d008      	beq.n	800737c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f99d 	bl	80076aa <UART_EndTransmit_IT>
    return;
 8007370:	e004      	b.n	800737c <HAL_UART_IRQHandler+0x514>
    return;
 8007372:	bf00      	nop
 8007374:	e002      	b.n	800737c <HAL_UART_IRQHandler+0x514>
      return;
 8007376:	bf00      	nop
 8007378:	e000      	b.n	800737c <HAL_UART_IRQHandler+0x514>
      return;
 800737a:	bf00      	nop
  }
}
 800737c:	37e8      	adds	r7, #232	; 0xe8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop

08007384 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b090      	sub	sp, #64	; 0x40
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	603b      	str	r3, [r7, #0]
 80073d0:	4613      	mov	r3, r2
 80073d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073d4:	e050      	b.n	8007478 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073dc:	d04c      	beq.n	8007478 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80073de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d007      	beq.n	80073f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80073e4:	f7fa f92c 	bl	8001640 <HAL_GetTick>
 80073e8:	4602      	mov	r2, r0
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d241      	bcs.n	8007478 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	330c      	adds	r3, #12
 80073fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fe:	e853 3f00 	ldrex	r3, [r3]
 8007402:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007406:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800740a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	330c      	adds	r3, #12
 8007412:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007414:	637a      	str	r2, [r7, #52]	; 0x34
 8007416:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007418:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800741a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800741c:	e841 2300 	strex	r3, r2, [r1]
 8007420:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1e5      	bne.n	80073f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3314      	adds	r3, #20
 800742e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	e853 3f00 	ldrex	r3, [r3]
 8007436:	613b      	str	r3, [r7, #16]
   return(result);
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	f023 0301 	bic.w	r3, r3, #1
 800743e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	3314      	adds	r3, #20
 8007446:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007448:	623a      	str	r2, [r7, #32]
 800744a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744c:	69f9      	ldr	r1, [r7, #28]
 800744e:	6a3a      	ldr	r2, [r7, #32]
 8007450:	e841 2300 	strex	r3, r2, [r1]
 8007454:	61bb      	str	r3, [r7, #24]
   return(result);
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1e5      	bne.n	8007428 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2220      	movs	r2, #32
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2220      	movs	r2, #32
 8007468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e00f      	b.n	8007498 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	4013      	ands	r3, r2
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	429a      	cmp	r2, r3
 8007486:	bf0c      	ite	eq
 8007488:	2301      	moveq	r3, #1
 800748a:	2300      	movne	r3, #0
 800748c:	b2db      	uxtb	r3, r3
 800748e:	461a      	mov	r2, r3
 8007490:	79fb      	ldrb	r3, [r7, #7]
 8007492:	429a      	cmp	r2, r3
 8007494:	d09f      	beq.n	80073d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3740      	adds	r7, #64	; 0x40
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	4613      	mov	r3, r2
 80074ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	88fa      	ldrh	r2, [r7, #6]
 80074b8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	88fa      	ldrh	r2, [r7, #6]
 80074be:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2222      	movs	r2, #34	; 0x22
 80074ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d007      	beq.n	80074ee <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68da      	ldr	r2, [r3, #12]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074ec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	695a      	ldr	r2, [r3, #20]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f042 0201 	orr.w	r2, r2, #1
 80074fc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68da      	ldr	r2, [r3, #12]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f042 0220 	orr.w	r2, r2, #32
 800750c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3714      	adds	r7, #20
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800751c:	b480      	push	{r7}
 800751e:	b095      	sub	sp, #84	; 0x54
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	330c      	adds	r3, #12
 800752a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752e:	e853 3f00 	ldrex	r3, [r3]
 8007532:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800753a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	330c      	adds	r3, #12
 8007542:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007544:	643a      	str	r2, [r7, #64]	; 0x40
 8007546:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007548:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800754a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800754c:	e841 2300 	strex	r3, r2, [r1]
 8007550:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1e5      	bne.n	8007524 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3314      	adds	r3, #20
 800755e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007560:	6a3b      	ldr	r3, [r7, #32]
 8007562:	e853 3f00 	ldrex	r3, [r3]
 8007566:	61fb      	str	r3, [r7, #28]
   return(result);
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	f023 0301 	bic.w	r3, r3, #1
 800756e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	3314      	adds	r3, #20
 8007576:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007578:	62fa      	str	r2, [r7, #44]	; 0x2c
 800757a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800757e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007580:	e841 2300 	strex	r3, r2, [r1]
 8007584:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e5      	bne.n	8007558 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007590:	2b01      	cmp	r3, #1
 8007592:	d119      	bne.n	80075c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	330c      	adds	r3, #12
 800759a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	e853 3f00 	ldrex	r3, [r3]
 80075a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	f023 0310 	bic.w	r3, r3, #16
 80075aa:	647b      	str	r3, [r7, #68]	; 0x44
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	330c      	adds	r3, #12
 80075b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075b4:	61ba      	str	r2, [r7, #24]
 80075b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b8:	6979      	ldr	r1, [r7, #20]
 80075ba:	69ba      	ldr	r2, [r7, #24]
 80075bc:	e841 2300 	strex	r3, r2, [r1]
 80075c0:	613b      	str	r3, [r7, #16]
   return(result);
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1e5      	bne.n	8007594 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2220      	movs	r2, #32
 80075cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80075d6:	bf00      	nop
 80075d8:	3754      	adds	r7, #84	; 0x54
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b084      	sub	sp, #16
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f7ff fecb 	bl	8007398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007602:	bf00      	nop
 8007604:	3710      	adds	r7, #16
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800760a:	b480      	push	{r7}
 800760c:	b085      	sub	sp, #20
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b21      	cmp	r3, #33	; 0x21
 800761c:	d13e      	bne.n	800769c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007626:	d114      	bne.n	8007652 <UART_Transmit_IT+0x48>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d110      	bne.n	8007652 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a1b      	ldr	r3, [r3, #32]
 8007634:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	881b      	ldrh	r3, [r3, #0]
 800763a:	461a      	mov	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007644:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	1c9a      	adds	r2, r3, #2
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	621a      	str	r2, [r3, #32]
 8007650:	e008      	b.n	8007664 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	1c59      	adds	r1, r3, #1
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	6211      	str	r1, [r2, #32]
 800765c:	781a      	ldrb	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007668:	b29b      	uxth	r3, r3
 800766a:	3b01      	subs	r3, #1
 800766c:	b29b      	uxth	r3, r3
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	4619      	mov	r1, r3
 8007672:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10f      	bne.n	8007698 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68da      	ldr	r2, [r3, #12]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007686:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68da      	ldr	r2, [r3, #12]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007696:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007698:	2300      	movs	r3, #0
 800769a:	e000      	b.n	800769e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800769c:	2302      	movs	r3, #2
  }
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3714      	adds	r7, #20
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b082      	sub	sp, #8
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68da      	ldr	r2, [r3, #12]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2220      	movs	r2, #32
 80076c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7ff fe5a 	bl	8007384 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b08c      	sub	sp, #48	; 0x30
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b22      	cmp	r3, #34	; 0x22
 80076ec:	f040 80ab 	bne.w	8007846 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076f8:	d117      	bne.n	800772a <UART_Receive_IT+0x50>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d113      	bne.n	800772a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007702:	2300      	movs	r3, #0
 8007704:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	b29b      	uxth	r3, r3
 8007714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007718:	b29a      	uxth	r2, r3
 800771a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007722:	1c9a      	adds	r2, r3, #2
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	629a      	str	r2, [r3, #40]	; 0x28
 8007728:	e026      	b.n	8007778 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007730:	2300      	movs	r3, #0
 8007732:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800773c:	d007      	beq.n	800774e <UART_Receive_IT+0x74>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10a      	bne.n	800775c <UART_Receive_IT+0x82>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d106      	bne.n	800775c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	b2da      	uxtb	r2, r3
 8007756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007758:	701a      	strb	r2, [r3, #0]
 800775a:	e008      	b.n	800776e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	b2db      	uxtb	r3, r3
 8007764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007768:	b2da      	uxtb	r2, r3
 800776a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007772:	1c5a      	adds	r2, r3, #1
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800777c:	b29b      	uxth	r3, r3
 800777e:	3b01      	subs	r3, #1
 8007780:	b29b      	uxth	r3, r3
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	4619      	mov	r1, r3
 8007786:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007788:	2b00      	cmp	r3, #0
 800778a:	d15a      	bne.n	8007842 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68da      	ldr	r2, [r3, #12]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f022 0220 	bic.w	r2, r2, #32
 800779a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68da      	ldr	r2, [r3, #12]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	695a      	ldr	r2, [r3, #20]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f022 0201 	bic.w	r2, r2, #1
 80077ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2220      	movs	r2, #32
 80077c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d135      	bne.n	8007838 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	330c      	adds	r3, #12
 80077d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	e853 3f00 	ldrex	r3, [r3]
 80077e0:	613b      	str	r3, [r7, #16]
   return(result);
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	f023 0310 	bic.w	r3, r3, #16
 80077e8:	627b      	str	r3, [r7, #36]	; 0x24
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	330c      	adds	r3, #12
 80077f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077f2:	623a      	str	r2, [r7, #32]
 80077f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f6:	69f9      	ldr	r1, [r7, #28]
 80077f8:	6a3a      	ldr	r2, [r7, #32]
 80077fa:	e841 2300 	strex	r3, r2, [r1]
 80077fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1e5      	bne.n	80077d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0310 	and.w	r3, r3, #16
 8007810:	2b10      	cmp	r3, #16
 8007812:	d10a      	bne.n	800782a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007814:	2300      	movs	r3, #0
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	60fb      	str	r3, [r7, #12]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800782e:	4619      	mov	r1, r3
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff fdbb 	bl	80073ac <HAL_UARTEx_RxEventCallback>
 8007836:	e002      	b.n	800783e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7f8 ffe3 	bl	8000804 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	e002      	b.n	8007848 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	e000      	b.n	8007848 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007846:	2302      	movs	r3, #2
  }
}
 8007848:	4618      	mov	r0, r3
 800784a:	3730      	adds	r7, #48	; 0x30
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007854:	b0c0      	sub	sp, #256	; 0x100
 8007856:	af00      	add	r7, sp, #0
 8007858:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800785c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800786c:	68d9      	ldr	r1, [r3, #12]
 800786e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	ea40 0301 	orr.w	r3, r0, r1
 8007878:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800787a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800787e:	689a      	ldr	r2, [r3, #8]
 8007880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	431a      	orrs	r2, r3
 8007888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	431a      	orrs	r2, r3
 8007890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	4313      	orrs	r3, r2
 8007898:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800789c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80078a8:	f021 010c 	bic.w	r1, r1, #12
 80078ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80078b6:	430b      	orrs	r3, r1
 80078b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80078c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ca:	6999      	ldr	r1, [r3, #24]
 80078cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	ea40 0301 	orr.w	r3, r0, r1
 80078d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	4b8f      	ldr	r3, [pc, #572]	; (8007b1c <UART_SetConfig+0x2cc>)
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d005      	beq.n	80078f0 <UART_SetConfig+0xa0>
 80078e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	4b8d      	ldr	r3, [pc, #564]	; (8007b20 <UART_SetConfig+0x2d0>)
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d104      	bne.n	80078fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078f0:	f7fe f83c 	bl	800596c <HAL_RCC_GetPCLK2Freq>
 80078f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80078f8:	e003      	b.n	8007902 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078fa:	f7fe f823 	bl	8005944 <HAL_RCC_GetPCLK1Freq>
 80078fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007906:	69db      	ldr	r3, [r3, #28]
 8007908:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800790c:	f040 810c 	bne.w	8007b28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007914:	2200      	movs	r2, #0
 8007916:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800791a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800791e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007922:	4622      	mov	r2, r4
 8007924:	462b      	mov	r3, r5
 8007926:	1891      	adds	r1, r2, r2
 8007928:	65b9      	str	r1, [r7, #88]	; 0x58
 800792a:	415b      	adcs	r3, r3
 800792c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800792e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007932:	4621      	mov	r1, r4
 8007934:	eb12 0801 	adds.w	r8, r2, r1
 8007938:	4629      	mov	r1, r5
 800793a:	eb43 0901 	adc.w	r9, r3, r1
 800793e:	f04f 0200 	mov.w	r2, #0
 8007942:	f04f 0300 	mov.w	r3, #0
 8007946:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800794a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800794e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007952:	4690      	mov	r8, r2
 8007954:	4699      	mov	r9, r3
 8007956:	4623      	mov	r3, r4
 8007958:	eb18 0303 	adds.w	r3, r8, r3
 800795c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007960:	462b      	mov	r3, r5
 8007962:	eb49 0303 	adc.w	r3, r9, r3
 8007966:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800796a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007976:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800797a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800797e:	460b      	mov	r3, r1
 8007980:	18db      	adds	r3, r3, r3
 8007982:	653b      	str	r3, [r7, #80]	; 0x50
 8007984:	4613      	mov	r3, r2
 8007986:	eb42 0303 	adc.w	r3, r2, r3
 800798a:	657b      	str	r3, [r7, #84]	; 0x54
 800798c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007990:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007994:	f7f8 fc74 	bl	8000280 <__aeabi_uldivmod>
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	4b61      	ldr	r3, [pc, #388]	; (8007b24 <UART_SetConfig+0x2d4>)
 800799e:	fba3 2302 	umull	r2, r3, r3, r2
 80079a2:	095b      	lsrs	r3, r3, #5
 80079a4:	011c      	lsls	r4, r3, #4
 80079a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079aa:	2200      	movs	r2, #0
 80079ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80079b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80079b8:	4642      	mov	r2, r8
 80079ba:	464b      	mov	r3, r9
 80079bc:	1891      	adds	r1, r2, r2
 80079be:	64b9      	str	r1, [r7, #72]	; 0x48
 80079c0:	415b      	adcs	r3, r3
 80079c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80079c8:	4641      	mov	r1, r8
 80079ca:	eb12 0a01 	adds.w	sl, r2, r1
 80079ce:	4649      	mov	r1, r9
 80079d0:	eb43 0b01 	adc.w	fp, r3, r1
 80079d4:	f04f 0200 	mov.w	r2, #0
 80079d8:	f04f 0300 	mov.w	r3, #0
 80079dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80079e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80079e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079e8:	4692      	mov	sl, r2
 80079ea:	469b      	mov	fp, r3
 80079ec:	4643      	mov	r3, r8
 80079ee:	eb1a 0303 	adds.w	r3, sl, r3
 80079f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079f6:	464b      	mov	r3, r9
 80079f8:	eb4b 0303 	adc.w	r3, fp, r3
 80079fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007a10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007a14:	460b      	mov	r3, r1
 8007a16:	18db      	adds	r3, r3, r3
 8007a18:	643b      	str	r3, [r7, #64]	; 0x40
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	eb42 0303 	adc.w	r3, r2, r3
 8007a20:	647b      	str	r3, [r7, #68]	; 0x44
 8007a22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007a2a:	f7f8 fc29 	bl	8000280 <__aeabi_uldivmod>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	460b      	mov	r3, r1
 8007a32:	4611      	mov	r1, r2
 8007a34:	4b3b      	ldr	r3, [pc, #236]	; (8007b24 <UART_SetConfig+0x2d4>)
 8007a36:	fba3 2301 	umull	r2, r3, r3, r1
 8007a3a:	095b      	lsrs	r3, r3, #5
 8007a3c:	2264      	movs	r2, #100	; 0x64
 8007a3e:	fb02 f303 	mul.w	r3, r2, r3
 8007a42:	1acb      	subs	r3, r1, r3
 8007a44:	00db      	lsls	r3, r3, #3
 8007a46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007a4a:	4b36      	ldr	r3, [pc, #216]	; (8007b24 <UART_SetConfig+0x2d4>)
 8007a4c:	fba3 2302 	umull	r2, r3, r3, r2
 8007a50:	095b      	lsrs	r3, r3, #5
 8007a52:	005b      	lsls	r3, r3, #1
 8007a54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a58:	441c      	add	r4, r3
 8007a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007a68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007a6c:	4642      	mov	r2, r8
 8007a6e:	464b      	mov	r3, r9
 8007a70:	1891      	adds	r1, r2, r2
 8007a72:	63b9      	str	r1, [r7, #56]	; 0x38
 8007a74:	415b      	adcs	r3, r3
 8007a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a7c:	4641      	mov	r1, r8
 8007a7e:	1851      	adds	r1, r2, r1
 8007a80:	6339      	str	r1, [r7, #48]	; 0x30
 8007a82:	4649      	mov	r1, r9
 8007a84:	414b      	adcs	r3, r1
 8007a86:	637b      	str	r3, [r7, #52]	; 0x34
 8007a88:	f04f 0200 	mov.w	r2, #0
 8007a8c:	f04f 0300 	mov.w	r3, #0
 8007a90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007a94:	4659      	mov	r1, fp
 8007a96:	00cb      	lsls	r3, r1, #3
 8007a98:	4651      	mov	r1, sl
 8007a9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a9e:	4651      	mov	r1, sl
 8007aa0:	00ca      	lsls	r2, r1, #3
 8007aa2:	4610      	mov	r0, r2
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	4642      	mov	r2, r8
 8007aaa:	189b      	adds	r3, r3, r2
 8007aac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ab0:	464b      	mov	r3, r9
 8007ab2:	460a      	mov	r2, r1
 8007ab4:	eb42 0303 	adc.w	r3, r2, r3
 8007ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007ac8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007acc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	18db      	adds	r3, r3, r3
 8007ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	eb42 0303 	adc.w	r3, r2, r3
 8007adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ade:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ae2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007ae6:	f7f8 fbcb 	bl	8000280 <__aeabi_uldivmod>
 8007aea:	4602      	mov	r2, r0
 8007aec:	460b      	mov	r3, r1
 8007aee:	4b0d      	ldr	r3, [pc, #52]	; (8007b24 <UART_SetConfig+0x2d4>)
 8007af0:	fba3 1302 	umull	r1, r3, r3, r2
 8007af4:	095b      	lsrs	r3, r3, #5
 8007af6:	2164      	movs	r1, #100	; 0x64
 8007af8:	fb01 f303 	mul.w	r3, r1, r3
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	00db      	lsls	r3, r3, #3
 8007b00:	3332      	adds	r3, #50	; 0x32
 8007b02:	4a08      	ldr	r2, [pc, #32]	; (8007b24 <UART_SetConfig+0x2d4>)
 8007b04:	fba2 2303 	umull	r2, r3, r2, r3
 8007b08:	095b      	lsrs	r3, r3, #5
 8007b0a:	f003 0207 	and.w	r2, r3, #7
 8007b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4422      	add	r2, r4
 8007b16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b18:	e106      	b.n	8007d28 <UART_SetConfig+0x4d8>
 8007b1a:	bf00      	nop
 8007b1c:	40011000 	.word	0x40011000
 8007b20:	40011400 	.word	0x40011400
 8007b24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007b32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007b36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007b3a:	4642      	mov	r2, r8
 8007b3c:	464b      	mov	r3, r9
 8007b3e:	1891      	adds	r1, r2, r2
 8007b40:	6239      	str	r1, [r7, #32]
 8007b42:	415b      	adcs	r3, r3
 8007b44:	627b      	str	r3, [r7, #36]	; 0x24
 8007b46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b4a:	4641      	mov	r1, r8
 8007b4c:	1854      	adds	r4, r2, r1
 8007b4e:	4649      	mov	r1, r9
 8007b50:	eb43 0501 	adc.w	r5, r3, r1
 8007b54:	f04f 0200 	mov.w	r2, #0
 8007b58:	f04f 0300 	mov.w	r3, #0
 8007b5c:	00eb      	lsls	r3, r5, #3
 8007b5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b62:	00e2      	lsls	r2, r4, #3
 8007b64:	4614      	mov	r4, r2
 8007b66:	461d      	mov	r5, r3
 8007b68:	4643      	mov	r3, r8
 8007b6a:	18e3      	adds	r3, r4, r3
 8007b6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b70:	464b      	mov	r3, r9
 8007b72:	eb45 0303 	adc.w	r3, r5, r3
 8007b76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007b8a:	f04f 0200 	mov.w	r2, #0
 8007b8e:	f04f 0300 	mov.w	r3, #0
 8007b92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007b96:	4629      	mov	r1, r5
 8007b98:	008b      	lsls	r3, r1, #2
 8007b9a:	4621      	mov	r1, r4
 8007b9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	008a      	lsls	r2, r1, #2
 8007ba4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007ba8:	f7f8 fb6a 	bl	8000280 <__aeabi_uldivmod>
 8007bac:	4602      	mov	r2, r0
 8007bae:	460b      	mov	r3, r1
 8007bb0:	4b60      	ldr	r3, [pc, #384]	; (8007d34 <UART_SetConfig+0x4e4>)
 8007bb2:	fba3 2302 	umull	r2, r3, r3, r2
 8007bb6:	095b      	lsrs	r3, r3, #5
 8007bb8:	011c      	lsls	r4, r3, #4
 8007bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007bc4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007bc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007bcc:	4642      	mov	r2, r8
 8007bce:	464b      	mov	r3, r9
 8007bd0:	1891      	adds	r1, r2, r2
 8007bd2:	61b9      	str	r1, [r7, #24]
 8007bd4:	415b      	adcs	r3, r3
 8007bd6:	61fb      	str	r3, [r7, #28]
 8007bd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bdc:	4641      	mov	r1, r8
 8007bde:	1851      	adds	r1, r2, r1
 8007be0:	6139      	str	r1, [r7, #16]
 8007be2:	4649      	mov	r1, r9
 8007be4:	414b      	adcs	r3, r1
 8007be6:	617b      	str	r3, [r7, #20]
 8007be8:	f04f 0200 	mov.w	r2, #0
 8007bec:	f04f 0300 	mov.w	r3, #0
 8007bf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007bf4:	4659      	mov	r1, fp
 8007bf6:	00cb      	lsls	r3, r1, #3
 8007bf8:	4651      	mov	r1, sl
 8007bfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bfe:	4651      	mov	r1, sl
 8007c00:	00ca      	lsls	r2, r1, #3
 8007c02:	4610      	mov	r0, r2
 8007c04:	4619      	mov	r1, r3
 8007c06:	4603      	mov	r3, r0
 8007c08:	4642      	mov	r2, r8
 8007c0a:	189b      	adds	r3, r3, r2
 8007c0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c10:	464b      	mov	r3, r9
 8007c12:	460a      	mov	r2, r1
 8007c14:	eb42 0303 	adc.w	r3, r2, r3
 8007c18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007c28:	f04f 0200 	mov.w	r2, #0
 8007c2c:	f04f 0300 	mov.w	r3, #0
 8007c30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007c34:	4649      	mov	r1, r9
 8007c36:	008b      	lsls	r3, r1, #2
 8007c38:	4641      	mov	r1, r8
 8007c3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c3e:	4641      	mov	r1, r8
 8007c40:	008a      	lsls	r2, r1, #2
 8007c42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007c46:	f7f8 fb1b 	bl	8000280 <__aeabi_uldivmod>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	4611      	mov	r1, r2
 8007c50:	4b38      	ldr	r3, [pc, #224]	; (8007d34 <UART_SetConfig+0x4e4>)
 8007c52:	fba3 2301 	umull	r2, r3, r3, r1
 8007c56:	095b      	lsrs	r3, r3, #5
 8007c58:	2264      	movs	r2, #100	; 0x64
 8007c5a:	fb02 f303 	mul.w	r3, r2, r3
 8007c5e:	1acb      	subs	r3, r1, r3
 8007c60:	011b      	lsls	r3, r3, #4
 8007c62:	3332      	adds	r3, #50	; 0x32
 8007c64:	4a33      	ldr	r2, [pc, #204]	; (8007d34 <UART_SetConfig+0x4e4>)
 8007c66:	fba2 2303 	umull	r2, r3, r2, r3
 8007c6a:	095b      	lsrs	r3, r3, #5
 8007c6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c70:	441c      	add	r4, r3
 8007c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c76:	2200      	movs	r2, #0
 8007c78:	673b      	str	r3, [r7, #112]	; 0x70
 8007c7a:	677a      	str	r2, [r7, #116]	; 0x74
 8007c7c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007c80:	4642      	mov	r2, r8
 8007c82:	464b      	mov	r3, r9
 8007c84:	1891      	adds	r1, r2, r2
 8007c86:	60b9      	str	r1, [r7, #8]
 8007c88:	415b      	adcs	r3, r3
 8007c8a:	60fb      	str	r3, [r7, #12]
 8007c8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c90:	4641      	mov	r1, r8
 8007c92:	1851      	adds	r1, r2, r1
 8007c94:	6039      	str	r1, [r7, #0]
 8007c96:	4649      	mov	r1, r9
 8007c98:	414b      	adcs	r3, r1
 8007c9a:	607b      	str	r3, [r7, #4]
 8007c9c:	f04f 0200 	mov.w	r2, #0
 8007ca0:	f04f 0300 	mov.w	r3, #0
 8007ca4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007ca8:	4659      	mov	r1, fp
 8007caa:	00cb      	lsls	r3, r1, #3
 8007cac:	4651      	mov	r1, sl
 8007cae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cb2:	4651      	mov	r1, sl
 8007cb4:	00ca      	lsls	r2, r1, #3
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	4619      	mov	r1, r3
 8007cba:	4603      	mov	r3, r0
 8007cbc:	4642      	mov	r2, r8
 8007cbe:	189b      	adds	r3, r3, r2
 8007cc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cc2:	464b      	mov	r3, r9
 8007cc4:	460a      	mov	r2, r1
 8007cc6:	eb42 0303 	adc.w	r3, r2, r3
 8007cca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	663b      	str	r3, [r7, #96]	; 0x60
 8007cd6:	667a      	str	r2, [r7, #100]	; 0x64
 8007cd8:	f04f 0200 	mov.w	r2, #0
 8007cdc:	f04f 0300 	mov.w	r3, #0
 8007ce0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007ce4:	4649      	mov	r1, r9
 8007ce6:	008b      	lsls	r3, r1, #2
 8007ce8:	4641      	mov	r1, r8
 8007cea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cee:	4641      	mov	r1, r8
 8007cf0:	008a      	lsls	r2, r1, #2
 8007cf2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007cf6:	f7f8 fac3 	bl	8000280 <__aeabi_uldivmod>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4b0d      	ldr	r3, [pc, #52]	; (8007d34 <UART_SetConfig+0x4e4>)
 8007d00:	fba3 1302 	umull	r1, r3, r3, r2
 8007d04:	095b      	lsrs	r3, r3, #5
 8007d06:	2164      	movs	r1, #100	; 0x64
 8007d08:	fb01 f303 	mul.w	r3, r1, r3
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	011b      	lsls	r3, r3, #4
 8007d10:	3332      	adds	r3, #50	; 0x32
 8007d12:	4a08      	ldr	r2, [pc, #32]	; (8007d34 <UART_SetConfig+0x4e4>)
 8007d14:	fba2 2303 	umull	r2, r3, r2, r3
 8007d18:	095b      	lsrs	r3, r3, #5
 8007d1a:	f003 020f 	and.w	r2, r3, #15
 8007d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4422      	add	r2, r4
 8007d26:	609a      	str	r2, [r3, #8]
}
 8007d28:	bf00      	nop
 8007d2a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d34:	51eb851f 	.word	0x51eb851f

08007d38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d38:	b084      	sub	sp, #16
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b084      	sub	sp, #16
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
 8007d42:	f107 001c 	add.w	r0, r7, #28
 8007d46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d122      	bne.n	8007d96 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d105      	bne.n	8007d8a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f9c0 	bl	8008110 <USB_CoreReset>
 8007d90:	4603      	mov	r3, r0
 8007d92:	73fb      	strb	r3, [r7, #15]
 8007d94:	e01a      	b.n	8007dcc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f9b4 	bl	8008110 <USB_CoreReset>
 8007da8:	4603      	mov	r3, r0
 8007daa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d106      	bne.n	8007dc0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	639a      	str	r2, [r3, #56]	; 0x38
 8007dbe:	e005      	b.n	8007dcc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d10b      	bne.n	8007dea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	f043 0206 	orr.w	r2, r3, #6
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f043 0220 	orr.w	r2, r3, #32
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007df6:	b004      	add	sp, #16
 8007df8:	4770      	bx	lr

08007dfa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b083      	sub	sp, #12
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f043 0201 	orr.w	r2, r3, #1
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	f023 0201 	bic.w	r2, r3, #1
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	370c      	adds	r7, #12
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr

08007e3e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b084      	sub	sp, #16
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
 8007e46:	460b      	mov	r3, r1
 8007e48:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e5a:	78fb      	ldrb	r3, [r7, #3]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d115      	bne.n	8007e8c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007e6c:	2001      	movs	r0, #1
 8007e6e:	f7f9 fbf3 	bl	8001658 <HAL_Delay>
      ms++;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	3301      	adds	r3, #1
 8007e76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f93a 	bl	80080f2 <USB_GetMode>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d01e      	beq.n	8007ec2 <USB_SetCurrentMode+0x84>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2b31      	cmp	r3, #49	; 0x31
 8007e88:	d9f0      	bls.n	8007e6c <USB_SetCurrentMode+0x2e>
 8007e8a:	e01a      	b.n	8007ec2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e8c:	78fb      	ldrb	r3, [r7, #3]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d115      	bne.n	8007ebe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007e9e:	2001      	movs	r0, #1
 8007ea0:	f7f9 fbda 	bl	8001658 <HAL_Delay>
      ms++;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f921 	bl	80080f2 <USB_GetMode>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d005      	beq.n	8007ec2 <USB_SetCurrentMode+0x84>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2b31      	cmp	r3, #49	; 0x31
 8007eba:	d9f0      	bls.n	8007e9e <USB_SetCurrentMode+0x60>
 8007ebc:	e001      	b.n	8007ec2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e005      	b.n	8007ece <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2b32      	cmp	r3, #50	; 0x32
 8007ec6:	d101      	bne.n	8007ecc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e000      	b.n	8007ece <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
	...

08007ed8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	4a13      	ldr	r2, [pc, #76]	; (8007f3c <USB_FlushTxFifo+0x64>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d901      	bls.n	8007ef8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e01b      	b.n	8007f30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	daf2      	bge.n	8007ee6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007f00:	2300      	movs	r3, #0
 8007f02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	019b      	lsls	r3, r3, #6
 8007f08:	f043 0220 	orr.w	r2, r3, #32
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	3301      	adds	r3, #1
 8007f14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	4a08      	ldr	r2, [pc, #32]	; (8007f3c <USB_FlushTxFifo+0x64>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d901      	bls.n	8007f22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e006      	b.n	8007f30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	f003 0320 	and.w	r3, r3, #32
 8007f2a:	2b20      	cmp	r3, #32
 8007f2c:	d0f0      	beq.n	8007f10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr
 8007f3c:	00030d40 	.word	0x00030d40

08007f40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	4a11      	ldr	r2, [pc, #68]	; (8007f9c <USB_FlushRxFifo+0x5c>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d901      	bls.n	8007f5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	e018      	b.n	8007f90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	daf2      	bge.n	8007f4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007f66:	2300      	movs	r3, #0
 8007f68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2210      	movs	r2, #16
 8007f6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	3301      	adds	r3, #1
 8007f74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	4a08      	ldr	r2, [pc, #32]	; (8007f9c <USB_FlushRxFifo+0x5c>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d901      	bls.n	8007f82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e006      	b.n	8007f90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	f003 0310 	and.w	r3, r3, #16
 8007f8a:	2b10      	cmp	r3, #16
 8007f8c:	d0f0      	beq.n	8007f70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3714      	adds	r7, #20
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	00030d40 	.word	0x00030d40

08007fa0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b089      	sub	sp, #36	; 0x24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	4611      	mov	r1, r2
 8007fac:	461a      	mov	r2, r3
 8007fae:	460b      	mov	r3, r1
 8007fb0:	71fb      	strb	r3, [r7, #7]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007fbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d123      	bne.n	800800e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007fc6:	88bb      	ldrh	r3, [r7, #4]
 8007fc8:	3303      	adds	r3, #3
 8007fca:	089b      	lsrs	r3, r3, #2
 8007fcc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007fce:	2300      	movs	r3, #0
 8007fd0:	61bb      	str	r3, [r7, #24]
 8007fd2:	e018      	b.n	8008006 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007fd4:	79fb      	ldrb	r3, [r7, #7]
 8007fd6:	031a      	lsls	r2, r3, #12
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	4413      	add	r3, r2
 8007fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	3301      	adds	r3, #1
 8007fec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	3301      	adds	r3, #1
 8008004:	61bb      	str	r3, [r7, #24]
 8008006:	69ba      	ldr	r2, [r7, #24]
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	429a      	cmp	r2, r3
 800800c:	d3e2      	bcc.n	8007fd4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3724      	adds	r7, #36	; 0x24
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800801c:	b480      	push	{r7}
 800801e:	b08b      	sub	sp, #44	; 0x2c
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	4613      	mov	r3, r2
 8008028:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008032:	88fb      	ldrh	r3, [r7, #6]
 8008034:	089b      	lsrs	r3, r3, #2
 8008036:	b29b      	uxth	r3, r3
 8008038:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800803a:	88fb      	ldrh	r3, [r7, #6]
 800803c:	f003 0303 	and.w	r3, r3, #3
 8008040:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008042:	2300      	movs	r3, #0
 8008044:	623b      	str	r3, [r7, #32]
 8008046:	e014      	b.n	8008072 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008052:	601a      	str	r2, [r3, #0]
    pDest++;
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	3301      	adds	r3, #1
 8008058:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805c:	3301      	adds	r3, #1
 800805e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008062:	3301      	adds	r3, #1
 8008064:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008068:	3301      	adds	r3, #1
 800806a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800806c:	6a3b      	ldr	r3, [r7, #32]
 800806e:	3301      	adds	r3, #1
 8008070:	623b      	str	r3, [r7, #32]
 8008072:	6a3a      	ldr	r2, [r7, #32]
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	429a      	cmp	r2, r3
 8008078:	d3e6      	bcc.n	8008048 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800807a:	8bfb      	ldrh	r3, [r7, #30]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d01e      	beq.n	80080be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008080:	2300      	movs	r3, #0
 8008082:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800808a:	461a      	mov	r2, r3
 800808c:	f107 0310 	add.w	r3, r7, #16
 8008090:	6812      	ldr	r2, [r2, #0]
 8008092:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	6a3b      	ldr	r3, [r7, #32]
 8008098:	b2db      	uxtb	r3, r3
 800809a:	00db      	lsls	r3, r3, #3
 800809c:	fa22 f303 	lsr.w	r3, r2, r3
 80080a0:	b2da      	uxtb	r2, r3
 80080a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a4:	701a      	strb	r2, [r3, #0]
      i++;
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	3301      	adds	r3, #1
 80080aa:	623b      	str	r3, [r7, #32]
      pDest++;
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	3301      	adds	r3, #1
 80080b0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80080b2:	8bfb      	ldrh	r3, [r7, #30]
 80080b4:	3b01      	subs	r3, #1
 80080b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80080b8:	8bfb      	ldrh	r3, [r7, #30]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1ea      	bne.n	8008094 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80080be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	372c      	adds	r7, #44	; 0x2c
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	695b      	ldr	r3, [r3, #20]
 80080d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	699b      	ldr	r3, [r3, #24]
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	4013      	ands	r3, r2
 80080e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80080e4:	68fb      	ldr	r3, [r7, #12]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3714      	adds	r7, #20
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b083      	sub	sp, #12
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	f003 0301 	and.w	r3, r3, #1
}
 8008102:	4618      	mov	r0, r3
 8008104:	370c      	adds	r7, #12
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
	...

08008110 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008118:	2300      	movs	r3, #0
 800811a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	3301      	adds	r3, #1
 8008120:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	4a13      	ldr	r2, [pc, #76]	; (8008174 <USB_CoreReset+0x64>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d901      	bls.n	800812e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800812a:	2303      	movs	r3, #3
 800812c:	e01b      	b.n	8008166 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	2b00      	cmp	r3, #0
 8008134:	daf2      	bge.n	800811c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008136:	2300      	movs	r3, #0
 8008138:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	f043 0201 	orr.w	r2, r3, #1
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	3301      	adds	r3, #1
 800814a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	4a09      	ldr	r2, [pc, #36]	; (8008174 <USB_CoreReset+0x64>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d901      	bls.n	8008158 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	e006      	b.n	8008166 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	f003 0301 	and.w	r3, r3, #1
 8008160:	2b01      	cmp	r3, #1
 8008162:	d0f0      	beq.n	8008146 <USB_CoreReset+0x36>

  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3714      	adds	r7, #20
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	00030d40 	.word	0x00030d40

08008178 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008178:	b084      	sub	sp, #16
 800817a:	b580      	push	{r7, lr}
 800817c:	b086      	sub	sp, #24
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
 8008182:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008186:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008198:	461a      	mov	r2, r3
 800819a:	2300      	movs	r3, #0
 800819c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ae:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ba:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d018      	beq.n	8008200 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80081ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d10a      	bne.n	80081ea <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081e2:	f043 0304 	orr.w	r3, r3, #4
 80081e6:	6013      	str	r3, [r2, #0]
 80081e8:	e014      	b.n	8008214 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081f8:	f023 0304 	bic.w	r3, r3, #4
 80081fc:	6013      	str	r3, [r2, #0]
 80081fe:	e009      	b.n	8008214 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800820e:	f023 0304 	bic.w	r3, r3, #4
 8008212:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008214:	2110      	movs	r1, #16
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7ff fe5e 	bl	8007ed8 <USB_FlushTxFifo>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d001      	beq.n	8008226 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7ff fe8a 	bl	8007f40 <USB_FlushRxFifo>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d001      	beq.n	8008236 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008236:	2300      	movs	r3, #0
 8008238:	613b      	str	r3, [r7, #16]
 800823a:	e015      	b.n	8008268 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	015a      	lsls	r2, r3, #5
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4413      	add	r3, r2
 8008244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008248:	461a      	mov	r2, r3
 800824a:	f04f 33ff 	mov.w	r3, #4294967295
 800824e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	4413      	add	r3, r2
 8008258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800825c:	461a      	mov	r2, r3
 800825e:	2300      	movs	r3, #0
 8008260:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	3301      	adds	r3, #1
 8008266:	613b      	str	r3, [r7, #16]
 8008268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	429a      	cmp	r2, r3
 800826e:	d3e5      	bcc.n	800823c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f04f 32ff 	mov.w	r2, #4294967295
 800827c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00b      	beq.n	80082a2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008290:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a13      	ldr	r2, [pc, #76]	; (80082e4 <USB_HostInit+0x16c>)
 8008296:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a13      	ldr	r2, [pc, #76]	; (80082e8 <USB_HostInit+0x170>)
 800829c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80082a0:	e009      	b.n	80082b6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2280      	movs	r2, #128	; 0x80
 80082a6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a10      	ldr	r2, [pc, #64]	; (80082ec <USB_HostInit+0x174>)
 80082ac:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a0f      	ldr	r2, [pc, #60]	; (80082f0 <USB_HostInit+0x178>)
 80082b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80082b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d105      	bne.n	80082c8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	f043 0210 	orr.w	r2, r3, #16
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	699a      	ldr	r2, [r3, #24]
 80082cc:	4b09      	ldr	r3, [pc, #36]	; (80082f4 <USB_HostInit+0x17c>)
 80082ce:	4313      	orrs	r3, r2
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80082d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3718      	adds	r7, #24
 80082da:	46bd      	mov	sp, r7
 80082dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082e0:	b004      	add	sp, #16
 80082e2:	4770      	bx	lr
 80082e4:	01000200 	.word	0x01000200
 80082e8:	00e00300 	.word	0x00e00300
 80082ec:	00600080 	.word	0x00600080
 80082f0:	004000e0 	.word	0x004000e0
 80082f4:	a3200008 	.word	0xa3200008

080082f8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	460b      	mov	r3, r1
 8008302:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008316:	f023 0303 	bic.w	r3, r3, #3
 800831a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	78fb      	ldrb	r3, [r7, #3]
 8008326:	f003 0303 	and.w	r3, r3, #3
 800832a:	68f9      	ldr	r1, [r7, #12]
 800832c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008330:	4313      	orrs	r3, r2
 8008332:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008334:	78fb      	ldrb	r3, [r7, #3]
 8008336:	2b01      	cmp	r3, #1
 8008338:	d107      	bne.n	800834a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008340:	461a      	mov	r2, r3
 8008342:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008346:	6053      	str	r3, [r2, #4]
 8008348:	e009      	b.n	800835e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800834a:	78fb      	ldrb	r3, [r7, #3]
 800834c:	2b02      	cmp	r3, #2
 800834e:	d106      	bne.n	800835e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008356:	461a      	mov	r2, r3
 8008358:	f241 7370 	movw	r3, #6000	; 0x1770
 800835c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3714      	adds	r7, #20
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008378:	2300      	movs	r3, #0
 800837a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800838c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800839a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800839c:	2064      	movs	r0, #100	; 0x64
 800839e:	f7f9 f95b 	bl	8001658 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80083aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083ae:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80083b0:	200a      	movs	r0, #10
 80083b2:	f7f9 f951 	bl	8001658 <HAL_Delay>

  return HAL_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80083d0:	2300      	movs	r3, #0
 80083d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80083e4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d109      	bne.n	8008404 <USB_DriveVbus+0x44>
 80083f0:	78fb      	ldrb	r3, [r7, #3]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d106      	bne.n	8008404 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80083fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008402:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800840a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800840e:	d109      	bne.n	8008424 <USB_DriveVbus+0x64>
 8008410:	78fb      	ldrb	r3, [r7, #3]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d106      	bne.n	8008424 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800841e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008422:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3714      	adds	r7, #20
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr

08008432 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008432:	b480      	push	{r7}
 8008434:	b085      	sub	sp, #20
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800843e:	2300      	movs	r3, #0
 8008440:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	0c5b      	lsrs	r3, r3, #17
 8008450:	f003 0303 	and.w	r3, r3, #3
}
 8008454:	4618      	mov	r0, r3
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	b29b      	uxth	r3, r3
}
 8008476:	4618      	mov	r0, r3
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
	...

08008484 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b088      	sub	sp, #32
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	4608      	mov	r0, r1
 800848e:	4611      	mov	r1, r2
 8008490:	461a      	mov	r2, r3
 8008492:	4603      	mov	r3, r0
 8008494:	70fb      	strb	r3, [r7, #3]
 8008496:	460b      	mov	r3, r1
 8008498:	70bb      	strb	r3, [r7, #2]
 800849a:	4613      	mov	r3, r2
 800849c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80084a6:	78fb      	ldrb	r3, [r7, #3]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084b2:	461a      	mov	r2, r3
 80084b4:	f04f 33ff 	mov.w	r3, #4294967295
 80084b8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80084ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80084be:	2b03      	cmp	r3, #3
 80084c0:	d87e      	bhi.n	80085c0 <USB_HC_Init+0x13c>
 80084c2:	a201      	add	r2, pc, #4	; (adr r2, 80084c8 <USB_HC_Init+0x44>)
 80084c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c8:	080084d9 	.word	0x080084d9
 80084cc:	08008583 	.word	0x08008583
 80084d0:	080084d9 	.word	0x080084d9
 80084d4:	08008545 	.word	0x08008545
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80084d8:	78fb      	ldrb	r3, [r7, #3]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084e4:	461a      	mov	r2, r3
 80084e6:	f240 439d 	movw	r3, #1181	; 0x49d
 80084ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80084ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	da10      	bge.n	8008516 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80084f4:	78fb      	ldrb	r3, [r7, #3]
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	78fa      	ldrb	r2, [r7, #3]
 8008504:	0151      	lsls	r1, r2, #5
 8008506:	693a      	ldr	r2, [r7, #16]
 8008508:	440a      	add	r2, r1
 800850a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800850e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008512:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008514:	e057      	b.n	80085c6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800851a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800851e:	2b00      	cmp	r3, #0
 8008520:	d051      	beq.n	80085c6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008522:	78fb      	ldrb	r3, [r7, #3]
 8008524:	015a      	lsls	r2, r3, #5
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	4413      	add	r3, r2
 800852a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	78fa      	ldrb	r2, [r7, #3]
 8008532:	0151      	lsls	r1, r2, #5
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	440a      	add	r2, r1
 8008538:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800853c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008540:	60d3      	str	r3, [r2, #12]
      break;
 8008542:	e040      	b.n	80085c6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008544:	78fb      	ldrb	r3, [r7, #3]
 8008546:	015a      	lsls	r2, r3, #5
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	4413      	add	r3, r2
 800854c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008550:	461a      	mov	r2, r3
 8008552:	f240 639d 	movw	r3, #1693	; 0x69d
 8008556:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008558:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800855c:	2b00      	cmp	r3, #0
 800855e:	da34      	bge.n	80085ca <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008560:	78fb      	ldrb	r3, [r7, #3]
 8008562:	015a      	lsls	r2, r3, #5
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	4413      	add	r3, r2
 8008568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	78fa      	ldrb	r2, [r7, #3]
 8008570:	0151      	lsls	r1, r2, #5
 8008572:	693a      	ldr	r2, [r7, #16]
 8008574:	440a      	add	r2, r1
 8008576:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800857a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800857e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008580:	e023      	b.n	80085ca <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008582:	78fb      	ldrb	r3, [r7, #3]
 8008584:	015a      	lsls	r2, r3, #5
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	4413      	add	r3, r2
 800858a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800858e:	461a      	mov	r2, r3
 8008590:	f240 2325 	movw	r3, #549	; 0x225
 8008594:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008596:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800859a:	2b00      	cmp	r3, #0
 800859c:	da17      	bge.n	80085ce <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800859e:	78fb      	ldrb	r3, [r7, #3]
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	78fa      	ldrb	r2, [r7, #3]
 80085ae:	0151      	lsls	r1, r2, #5
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	440a      	add	r2, r1
 80085b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085b8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80085bc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80085be:	e006      	b.n	80085ce <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	77fb      	strb	r3, [r7, #31]
      break;
 80085c4:	e004      	b.n	80085d0 <USB_HC_Init+0x14c>
      break;
 80085c6:	bf00      	nop
 80085c8:	e002      	b.n	80085d0 <USB_HC_Init+0x14c>
      break;
 80085ca:	bf00      	nop
 80085cc:	e000      	b.n	80085d0 <USB_HC_Init+0x14c>
      break;
 80085ce:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80085d0:	78fb      	ldrb	r3, [r7, #3]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	78fa      	ldrb	r2, [r7, #3]
 80085e0:	0151      	lsls	r1, r2, #5
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	440a      	add	r2, r1
 80085e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085ea:	f043 0302 	orr.w	r3, r3, #2
 80085ee:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085f6:	699a      	ldr	r2, [r3, #24]
 80085f8:	78fb      	ldrb	r3, [r7, #3]
 80085fa:	f003 030f 	and.w	r3, r3, #15
 80085fe:	2101      	movs	r1, #1
 8008600:	fa01 f303 	lsl.w	r3, r1, r3
 8008604:	6939      	ldr	r1, [r7, #16]
 8008606:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800860a:	4313      	orrs	r3, r2
 800860c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800861a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800861e:	2b00      	cmp	r3, #0
 8008620:	da03      	bge.n	800862a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008626:	61bb      	str	r3, [r7, #24]
 8008628:	e001      	b.n	800862e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800862a:	2300      	movs	r3, #0
 800862c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7ff feff 	bl	8008432 <USB_GetHostSpeed>
 8008634:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008636:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800863a:	2b02      	cmp	r3, #2
 800863c:	d106      	bne.n	800864c <USB_HC_Init+0x1c8>
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2b02      	cmp	r3, #2
 8008642:	d003      	beq.n	800864c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008644:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008648:	617b      	str	r3, [r7, #20]
 800864a:	e001      	b.n	8008650 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800864c:	2300      	movs	r3, #0
 800864e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008650:	787b      	ldrb	r3, [r7, #1]
 8008652:	059b      	lsls	r3, r3, #22
 8008654:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008658:	78bb      	ldrb	r3, [r7, #2]
 800865a:	02db      	lsls	r3, r3, #11
 800865c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008660:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008662:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008666:	049b      	lsls	r3, r3, #18
 8008668:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800866c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800866e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008670:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008674:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800867a:	78fb      	ldrb	r3, [r7, #3]
 800867c:	0159      	lsls	r1, r3, #5
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	440b      	add	r3, r1
 8008682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008686:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800868c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800868e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008692:	2b03      	cmp	r3, #3
 8008694:	d003      	beq.n	800869e <USB_HC_Init+0x21a>
 8008696:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800869a:	2b01      	cmp	r3, #1
 800869c:	d10f      	bne.n	80086be <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800869e:	78fb      	ldrb	r3, [r7, #3]
 80086a0:	015a      	lsls	r2, r3, #5
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	4413      	add	r3, r2
 80086a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	78fa      	ldrb	r2, [r7, #3]
 80086ae:	0151      	lsls	r1, r2, #5
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	440a      	add	r2, r1
 80086b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086bc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80086be:	7ffb      	ldrb	r3, [r7, #31]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3720      	adds	r7, #32
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b08c      	sub	sp, #48	; 0x30
 80086cc:	af02      	add	r7, sp, #8
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	4613      	mov	r3, r2
 80086d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	785b      	ldrb	r3, [r3, #1]
 80086de:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80086e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086e4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d02d      	beq.n	800874e <USB_HC_StartXfer+0x86>
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	791b      	ldrb	r3, [r3, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d129      	bne.n	800874e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80086fa:	79fb      	ldrb	r3, [r7, #7]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d117      	bne.n	8008730 <USB_HC_StartXfer+0x68>
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	79db      	ldrb	r3, [r3, #7]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d003      	beq.n	8008710 <USB_HC_StartXfer+0x48>
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	79db      	ldrb	r3, [r3, #7]
 800870c:	2b02      	cmp	r3, #2
 800870e:	d10f      	bne.n	8008730 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	015a      	lsls	r2, r3, #5
 8008714:	6a3b      	ldr	r3, [r7, #32]
 8008716:	4413      	add	r3, r2
 8008718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	69fa      	ldr	r2, [r7, #28]
 8008720:	0151      	lsls	r1, r2, #5
 8008722:	6a3a      	ldr	r2, [r7, #32]
 8008724:	440a      	add	r2, r1
 8008726:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800872a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800872e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008730:	79fb      	ldrb	r3, [r7, #7]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10b      	bne.n	800874e <USB_HC_StartXfer+0x86>
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	795b      	ldrb	r3, [r3, #5]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d107      	bne.n	800874e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	785b      	ldrb	r3, [r3, #1]
 8008742:	4619      	mov	r1, r3
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f000 fa0f 	bl	8008b68 <USB_DoPing>
      return HAL_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	e0f8      	b.n	8008940 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	695b      	ldr	r3, [r3, #20]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d018      	beq.n	8008788 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	695b      	ldr	r3, [r3, #20]
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	8912      	ldrh	r2, [r2, #8]
 800875e:	4413      	add	r3, r2
 8008760:	3b01      	subs	r3, #1
 8008762:	68ba      	ldr	r2, [r7, #8]
 8008764:	8912      	ldrh	r2, [r2, #8]
 8008766:	fbb3 f3f2 	udiv	r3, r3, r2
 800876a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800876c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800876e:	8b7b      	ldrh	r3, [r7, #26]
 8008770:	429a      	cmp	r2, r3
 8008772:	d90b      	bls.n	800878c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008774:	8b7b      	ldrh	r3, [r7, #26]
 8008776:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008778:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	8912      	ldrh	r2, [r2, #8]
 800877e:	fb03 f202 	mul.w	r2, r3, r2
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	611a      	str	r2, [r3, #16]
 8008786:	e001      	b.n	800878c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008788:	2301      	movs	r3, #1
 800878a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	78db      	ldrb	r3, [r3, #3]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d007      	beq.n	80087a4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008794:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	8912      	ldrh	r2, [r2, #8]
 800879a:	fb03 f202 	mul.w	r2, r3, r2
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	611a      	str	r2, [r3, #16]
 80087a2:	e003      	b.n	80087ac <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	695a      	ldr	r2, [r3, #20]
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80087b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80087b6:	04d9      	lsls	r1, r3, #19
 80087b8:	4b63      	ldr	r3, [pc, #396]	; (8008948 <USB_HC_StartXfer+0x280>)
 80087ba:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087bc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	7a9b      	ldrb	r3, [r3, #10]
 80087c2:	075b      	lsls	r3, r3, #29
 80087c4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087c8:	69f9      	ldr	r1, [r7, #28]
 80087ca:	0148      	lsls	r0, r1, #5
 80087cc:	6a39      	ldr	r1, [r7, #32]
 80087ce:	4401      	add	r1, r0
 80087d0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80087d4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087d6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80087d8:	79fb      	ldrb	r3, [r7, #7]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d009      	beq.n	80087f2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	68d9      	ldr	r1, [r3, #12]
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	015a      	lsls	r2, r3, #5
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	4413      	add	r3, r2
 80087ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ee:	460a      	mov	r2, r1
 80087f0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80087f2:	6a3b      	ldr	r3, [r7, #32]
 80087f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	2b00      	cmp	r3, #0
 8008800:	bf0c      	ite	eq
 8008802:	2301      	moveq	r3, #1
 8008804:	2300      	movne	r3, #0
 8008806:	b2db      	uxtb	r3, r3
 8008808:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	015a      	lsls	r2, r3, #5
 800880e:	6a3b      	ldr	r3, [r7, #32]
 8008810:	4413      	add	r3, r2
 8008812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	69fa      	ldr	r2, [r7, #28]
 800881a:	0151      	lsls	r1, r2, #5
 800881c:	6a3a      	ldr	r2, [r7, #32]
 800881e:	440a      	add	r2, r1
 8008820:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008824:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008828:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	015a      	lsls	r2, r3, #5
 800882e:	6a3b      	ldr	r3, [r7, #32]
 8008830:	4413      	add	r3, r2
 8008832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	7e7b      	ldrb	r3, [r7, #25]
 800883a:	075b      	lsls	r3, r3, #29
 800883c:	69f9      	ldr	r1, [r7, #28]
 800883e:	0148      	lsls	r0, r1, #5
 8008840:	6a39      	ldr	r1, [r7, #32]
 8008842:	4401      	add	r1, r0
 8008844:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008848:	4313      	orrs	r3, r2
 800884a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	015a      	lsls	r2, r3, #5
 8008850:	6a3b      	ldr	r3, [r7, #32]
 8008852:	4413      	add	r3, r2
 8008854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008862:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	78db      	ldrb	r3, [r3, #3]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d004      	beq.n	8008876 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008872:	613b      	str	r3, [r7, #16]
 8008874:	e003      	b.n	800887e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800887c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008884:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	015a      	lsls	r2, r3, #5
 800888a:	6a3b      	ldr	r3, [r7, #32]
 800888c:	4413      	add	r3, r2
 800888e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008892:	461a      	mov	r2, r3
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008898:	79fb      	ldrb	r3, [r7, #7]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800889e:	2300      	movs	r3, #0
 80088a0:	e04e      	b.n	8008940 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	78db      	ldrb	r3, [r3, #3]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d149      	bne.n	800893e <USB_HC_StartXfer+0x276>
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d045      	beq.n	800893e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	79db      	ldrb	r3, [r3, #7]
 80088b6:	2b03      	cmp	r3, #3
 80088b8:	d830      	bhi.n	800891c <USB_HC_StartXfer+0x254>
 80088ba:	a201      	add	r2, pc, #4	; (adr r2, 80088c0 <USB_HC_StartXfer+0x1f8>)
 80088bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c0:	080088d1 	.word	0x080088d1
 80088c4:	080088f5 	.word	0x080088f5
 80088c8:	080088d1 	.word	0x080088d1
 80088cc:	080088f5 	.word	0x080088f5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	695b      	ldr	r3, [r3, #20]
 80088d4:	3303      	adds	r3, #3
 80088d6:	089b      	lsrs	r3, r3, #2
 80088d8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80088da:	8afa      	ldrh	r2, [r7, #22]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d91c      	bls.n	8008920 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	699b      	ldr	r3, [r3, #24]
 80088ea:	f043 0220 	orr.w	r2, r3, #32
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	619a      	str	r2, [r3, #24]
        }
        break;
 80088f2:	e015      	b.n	8008920 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	695b      	ldr	r3, [r3, #20]
 80088f8:	3303      	adds	r3, #3
 80088fa:	089b      	lsrs	r3, r3, #2
 80088fc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80088fe:	8afa      	ldrh	r2, [r7, #22]
 8008900:	6a3b      	ldr	r3, [r7, #32]
 8008902:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	b29b      	uxth	r3, r3
 800890a:	429a      	cmp	r2, r3
 800890c:	d90a      	bls.n	8008924 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	699b      	ldr	r3, [r3, #24]
 8008912:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	619a      	str	r2, [r3, #24]
        }
        break;
 800891a:	e003      	b.n	8008924 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800891c:	bf00      	nop
 800891e:	e002      	b.n	8008926 <USB_HC_StartXfer+0x25e>
        break;
 8008920:	bf00      	nop
 8008922:	e000      	b.n	8008926 <USB_HC_StartXfer+0x25e>
        break;
 8008924:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	68d9      	ldr	r1, [r3, #12]
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	785a      	ldrb	r2, [r3, #1]
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	695b      	ldr	r3, [r3, #20]
 8008932:	b29b      	uxth	r3, r3
 8008934:	2000      	movs	r0, #0
 8008936:	9000      	str	r0, [sp, #0]
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f7ff fb31 	bl	8007fa0 <USB_WritePacket>
  }

  return HAL_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3728      	adds	r7, #40	; 0x28
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	1ff80000 	.word	0x1ff80000

0800894c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800895e:	695b      	ldr	r3, [r3, #20]
 8008960:	b29b      	uxth	r3, r3
}
 8008962:	4618      	mov	r0, r3
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr

0800896e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800896e:	b480      	push	{r7}
 8008970:	b089      	sub	sp, #36	; 0x24
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
 8008976:	460b      	mov	r3, r1
 8008978:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800897e:	78fb      	ldrb	r3, [r7, #3]
 8008980:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008982:	2300      	movs	r3, #0
 8008984:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	015a      	lsls	r2, r3, #5
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	4413      	add	r3, r2
 800898e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	0c9b      	lsrs	r3, r3, #18
 8008996:	f003 0303 	and.w	r3, r3, #3
 800899a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	015a      	lsls	r2, r3, #5
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	4413      	add	r3, r2
 80089a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	0fdb      	lsrs	r3, r3, #31
 80089ac:	f003 0301 	and.w	r3, r3, #1
 80089b0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	f003 0320 	and.w	r3, r3, #32
 80089ba:	2b20      	cmp	r3, #32
 80089bc:	d104      	bne.n	80089c8 <USB_HC_Halt+0x5a>
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d101      	bne.n	80089c8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	e0c8      	b.n	8008b5a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d002      	beq.n	80089d4 <USB_HC_Halt+0x66>
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d163      	bne.n	8008a9c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	015a      	lsls	r2, r3, #5
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	69ba      	ldr	r2, [r7, #24]
 80089e4:	0151      	lsls	r1, r2, #5
 80089e6:	69fa      	ldr	r2, [r7, #28]
 80089e8:	440a      	add	r2, r1
 80089ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089f2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	f003 0320 	and.w	r3, r3, #32
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f040 80ab 	bne.w	8008b58 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d133      	bne.n	8008a76 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	015a      	lsls	r2, r3, #5
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	4413      	add	r3, r2
 8008a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	69ba      	ldr	r2, [r7, #24]
 8008a1e:	0151      	lsls	r1, r2, #5
 8008a20:	69fa      	ldr	r2, [r7, #28]
 8008a22:	440a      	add	r2, r1
 8008a24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a2c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	69ba      	ldr	r2, [r7, #24]
 8008a3e:	0151      	lsls	r1, r2, #5
 8008a40:	69fa      	ldr	r2, [r7, #28]
 8008a42:	440a      	add	r2, r1
 8008a44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a4c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	3301      	adds	r3, #1
 8008a52:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a5a:	d81d      	bhi.n	8008a98 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	015a      	lsls	r2, r3, #5
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	4413      	add	r3, r2
 8008a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a72:	d0ec      	beq.n	8008a4e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a74:	e070      	b.n	8008b58 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	015a      	lsls	r2, r3, #5
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	69ba      	ldr	r2, [r7, #24]
 8008a86:	0151      	lsls	r1, r2, #5
 8008a88:	69fa      	ldr	r2, [r7, #28]
 8008a8a:	440a      	add	r2, r1
 8008a8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a94:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a96:	e05f      	b.n	8008b58 <USB_HC_Halt+0x1ea>
            break;
 8008a98:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a9a:	e05d      	b.n	8008b58 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	015a      	lsls	r2, r3, #5
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	69ba      	ldr	r2, [r7, #24]
 8008aac:	0151      	lsls	r1, r2, #5
 8008aae:	69fa      	ldr	r2, [r7, #28]
 8008ab0:	440a      	add	r2, r1
 8008ab2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ab6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008aba:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d133      	bne.n	8008b34 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	015a      	lsls	r2, r3, #5
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	69ba      	ldr	r2, [r7, #24]
 8008adc:	0151      	lsls	r1, r2, #5
 8008ade:	69fa      	ldr	r2, [r7, #28]
 8008ae0:	440a      	add	r2, r1
 8008ae2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ae6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008aea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	015a      	lsls	r2, r3, #5
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	4413      	add	r3, r2
 8008af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	69ba      	ldr	r2, [r7, #24]
 8008afc:	0151      	lsls	r1, r2, #5
 8008afe:	69fa      	ldr	r2, [r7, #28]
 8008b00:	440a      	add	r2, r1
 8008b02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b0a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b18:	d81d      	bhi.n	8008b56 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	015a      	lsls	r2, r3, #5
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b30:	d0ec      	beq.n	8008b0c <USB_HC_Halt+0x19e>
 8008b32:	e011      	b.n	8008b58 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	015a      	lsls	r2, r3, #5
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	69ba      	ldr	r2, [r7, #24]
 8008b44:	0151      	lsls	r1, r2, #5
 8008b46:	69fa      	ldr	r2, [r7, #28]
 8008b48:	440a      	add	r2, r1
 8008b4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b52:	6013      	str	r3, [r2, #0]
 8008b54:	e000      	b.n	8008b58 <USB_HC_Halt+0x1ea>
          break;
 8008b56:	bf00      	nop
    }
  }

  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3724      	adds	r7, #36	; 0x24
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
	...

08008b68 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b087      	sub	sp, #28
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	460b      	mov	r3, r1
 8008b72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008b78:	78fb      	ldrb	r3, [r7, #3]
 8008b7a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	04da      	lsls	r2, r3, #19
 8008b84:	4b15      	ldr	r3, [pc, #84]	; (8008bdc <USB_DoPing+0x74>)
 8008b86:	4013      	ands	r3, r2
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	0151      	lsls	r1, r2, #5
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	440a      	add	r2, r1
 8008b90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b98:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	015a      	lsls	r2, r3, #5
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008bb0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008bb8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	015a      	lsls	r2, r3, #5
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	371c      	adds	r7, #28
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	1ff80000 	.word	0x1ff80000

08008be0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b088      	sub	sp, #32
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008be8:	2300      	movs	r3, #0
 8008bea:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f7ff f911 	bl	8007e1c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008bfa:	2110      	movs	r1, #16
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f7ff f96b 	bl	8007ed8 <USB_FlushTxFifo>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d001      	beq.n	8008c0c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f7ff f997 	bl	8007f40 <USB_FlushRxFifo>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d001      	beq.n	8008c1c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	61bb      	str	r3, [r7, #24]
 8008c20:	e01f      	b.n	8008c62 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	015a      	lsls	r2, r3, #5
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	4413      	add	r3, r2
 8008c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c38:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c40:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c48:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	015a      	lsls	r2, r3, #5
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	4413      	add	r3, r2
 8008c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c56:	461a      	mov	r2, r3
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	61bb      	str	r3, [r7, #24]
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	2b0f      	cmp	r3, #15
 8008c66:	d9dc      	bls.n	8008c22 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008c68:	2300      	movs	r3, #0
 8008c6a:	61bb      	str	r3, [r7, #24]
 8008c6c:	e034      	b.n	8008cd8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	015a      	lsls	r2, r3, #5
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	4413      	add	r3, r2
 8008c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c84:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c8c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c94:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	015a      	lsls	r2, r3, #5
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	3301      	adds	r3, #1
 8008cac:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cb4:	d80c      	bhi.n	8008cd0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	015a      	lsls	r2, r3, #5
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ccc:	d0ec      	beq.n	8008ca8 <USB_StopHost+0xc8>
 8008cce:	e000      	b.n	8008cd2 <USB_StopHost+0xf2>
        break;
 8008cd0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	61bb      	str	r3, [r7, #24]
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	2b0f      	cmp	r3, #15
 8008cdc:	d9c7      	bls.n	8008c6e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8008cea:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f04f 32ff 	mov.w	r2, #4294967295
 8008cf2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7ff f880 	bl	8007dfa <USB_EnableGlobalInt>

  return ret;
 8008cfa:	7ffb      	ldrb	r3, [r7, #31]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3720      	adds	r7, #32
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008d04:	b590      	push	{r4, r7, lr}
 8008d06:	b089      	sub	sp, #36	; 0x24
 8008d08:	af04      	add	r7, sp, #16
 8008d0a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	2202      	movs	r2, #2
 8008d10:	2102      	movs	r1, #2
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fc66 	bl	80095e4 <USBH_FindInterface>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008d1c:	7bfb      	ldrb	r3, [r7, #15]
 8008d1e:	2bff      	cmp	r3, #255	; 0xff
 8008d20:	d002      	beq.n	8008d28 <USBH_CDC_InterfaceInit+0x24>
 8008d22:	7bfb      	ldrb	r3, [r7, #15]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d901      	bls.n	8008d2c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008d28:	2302      	movs	r3, #2
 8008d2a:	e13d      	b.n	8008fa8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008d2c:	7bfb      	ldrb	r3, [r7, #15]
 8008d2e:	4619      	mov	r1, r3
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fc3b 	bl	80095ac <USBH_SelectInterface>
 8008d36:	4603      	mov	r3, r0
 8008d38:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008d3a:	7bbb      	ldrb	r3, [r7, #14]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d001      	beq.n	8008d44 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008d40:	2302      	movs	r3, #2
 8008d42:	e131      	b.n	8008fa8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008d4a:	2050      	movs	r0, #80	; 0x50
 8008d4c:	f002 fad2 	bl	800b2f4 <malloc>
 8008d50:	4603      	mov	r3, r0
 8008d52:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d5a:	69db      	ldr	r3, [r3, #28]
 8008d5c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d101      	bne.n	8008d68 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008d64:	2302      	movs	r3, #2
 8008d66:	e11f      	b.n	8008fa8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008d68:	2250      	movs	r2, #80	; 0x50
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	68b8      	ldr	r0, [r7, #8]
 8008d6e:	f002 fb9d 	bl	800b4ac <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	211a      	movs	r1, #26
 8008d78:	fb01 f303 	mul.w	r3, r1, r3
 8008d7c:	4413      	add	r3, r2
 8008d7e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	b25b      	sxtb	r3, r3
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	da15      	bge.n	8008db6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008d8a:	7bfb      	ldrb	r3, [r7, #15]
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	211a      	movs	r1, #26
 8008d90:	fb01 f303 	mul.w	r3, r1, r3
 8008d94:	4413      	add	r3, r2
 8008d96:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008d9a:	781a      	ldrb	r2, [r3, #0]
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	211a      	movs	r1, #26
 8008da6:	fb01 f303 	mul.w	r3, r1, r3
 8008daa:	4413      	add	r3, r2
 8008dac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008db0:	881a      	ldrh	r2, [r3, #0]
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	785b      	ldrb	r3, [r3, #1]
 8008dba:	4619      	mov	r1, r3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f001 ff2e 	bl	800ac1e <USBH_AllocPipe>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	7819      	ldrb	r1, [r3, #0]
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	7858      	ldrb	r0, [r3, #1]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	8952      	ldrh	r2, [r2, #10]
 8008de2:	9202      	str	r2, [sp, #8]
 8008de4:	2203      	movs	r2, #3
 8008de6:	9201      	str	r2, [sp, #4]
 8008de8:	9300      	str	r3, [sp, #0]
 8008dea:	4623      	mov	r3, r4
 8008dec:	4602      	mov	r2, r0
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f001 fee6 	bl	800abc0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f002 f9f5 	bl	800b1ec <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008e02:	2300      	movs	r3, #0
 8008e04:	2200      	movs	r2, #0
 8008e06:	210a      	movs	r1, #10
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 fbeb 	bl	80095e4 <USBH_FindInterface>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
 8008e14:	2bff      	cmp	r3, #255	; 0xff
 8008e16:	d002      	beq.n	8008e1e <USBH_CDC_InterfaceInit+0x11a>
 8008e18:	7bfb      	ldrb	r3, [r7, #15]
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d901      	bls.n	8008e22 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008e1e:	2302      	movs	r3, #2
 8008e20:	e0c2      	b.n	8008fa8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008e22:	7bfb      	ldrb	r3, [r7, #15]
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	211a      	movs	r1, #26
 8008e28:	fb01 f303 	mul.w	r3, r1, r3
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	b25b      	sxtb	r3, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	da16      	bge.n	8008e68 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008e3a:	7bfb      	ldrb	r3, [r7, #15]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	211a      	movs	r1, #26
 8008e40:	fb01 f303 	mul.w	r3, r1, r3
 8008e44:	4413      	add	r3, r2
 8008e46:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008e4a:	781a      	ldrb	r2, [r3, #0]
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008e50:	7bfb      	ldrb	r3, [r7, #15]
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	211a      	movs	r1, #26
 8008e56:	fb01 f303 	mul.w	r3, r1, r3
 8008e5a:	4413      	add	r3, r2
 8008e5c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008e60:	881a      	ldrh	r2, [r3, #0]
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	835a      	strh	r2, [r3, #26]
 8008e66:	e015      	b.n	8008e94 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	211a      	movs	r1, #26
 8008e6e:	fb01 f303 	mul.w	r3, r1, r3
 8008e72:	4413      	add	r3, r2
 8008e74:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008e78:	781a      	ldrb	r2, [r3, #0]
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008e7e:	7bfb      	ldrb	r3, [r7, #15]
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	211a      	movs	r1, #26
 8008e84:	fb01 f303 	mul.w	r3, r1, r3
 8008e88:	4413      	add	r3, r2
 8008e8a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008e8e:	881a      	ldrh	r2, [r3, #0]
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	211a      	movs	r1, #26
 8008e9a:	fb01 f303 	mul.w	r3, r1, r3
 8008e9e:	4413      	add	r3, r2
 8008ea0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	b25b      	sxtb	r3, r3
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	da16      	bge.n	8008eda <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008eac:	7bfb      	ldrb	r3, [r7, #15]
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	211a      	movs	r1, #26
 8008eb2:	fb01 f303 	mul.w	r3, r1, r3
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008ebc:	781a      	ldrb	r2, [r3, #0]
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008ec2:	7bfb      	ldrb	r3, [r7, #15]
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	211a      	movs	r1, #26
 8008ec8:	fb01 f303 	mul.w	r3, r1, r3
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008ed2:	881a      	ldrh	r2, [r3, #0]
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	835a      	strh	r2, [r3, #26]
 8008ed8:	e015      	b.n	8008f06 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008eda:	7bfb      	ldrb	r3, [r7, #15]
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	211a      	movs	r1, #26
 8008ee0:	fb01 f303 	mul.w	r3, r1, r3
 8008ee4:	4413      	add	r3, r2
 8008ee6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008eea:	781a      	ldrb	r2, [r3, #0]
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008ef0:	7bfb      	ldrb	r3, [r7, #15]
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	211a      	movs	r1, #26
 8008ef6:	fb01 f303 	mul.w	r3, r1, r3
 8008efa:	4413      	add	r3, r2
 8008efc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008f00:	881a      	ldrh	r2, [r3, #0]
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	7b9b      	ldrb	r3, [r3, #14]
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f001 fe86 	bl	800ac1e <USBH_AllocPipe>
 8008f12:	4603      	mov	r3, r0
 8008f14:	461a      	mov	r2, r3
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	7bdb      	ldrb	r3, [r3, #15]
 8008f1e:	4619      	mov	r1, r3
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f001 fe7c 	bl	800ac1e <USBH_AllocPipe>
 8008f26:	4603      	mov	r3, r0
 8008f28:	461a      	mov	r2, r3
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	7b59      	ldrb	r1, [r3, #13]
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	7b98      	ldrb	r0, [r3, #14]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	8b12      	ldrh	r2, [r2, #24]
 8008f46:	9202      	str	r2, [sp, #8]
 8008f48:	2202      	movs	r2, #2
 8008f4a:	9201      	str	r2, [sp, #4]
 8008f4c:	9300      	str	r3, [sp, #0]
 8008f4e:	4623      	mov	r3, r4
 8008f50:	4602      	mov	r2, r0
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f001 fe34 	bl	800abc0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	7b19      	ldrb	r1, [r3, #12]
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	7bd8      	ldrb	r0, [r3, #15]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	8b52      	ldrh	r2, [r2, #26]
 8008f70:	9202      	str	r2, [sp, #8]
 8008f72:	2202      	movs	r2, #2
 8008f74:	9201      	str	r2, [sp, #4]
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	4623      	mov	r3, r4
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f001 fe1f 	bl	800abc0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	2200      	movs	r2, #0
 8008f86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	7b5b      	ldrb	r3, [r3, #13]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	4619      	mov	r1, r3
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f002 f92a 	bl	800b1ec <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	7b1b      	ldrb	r3, [r3, #12]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f002 f923 	bl	800b1ec <USBH_LL_SetToggle>

  return USBH_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3714      	adds	r7, #20
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd90      	pop	{r4, r7, pc}

08008fb0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fbe:	69db      	ldr	r3, [r3, #28]
 8008fc0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00e      	beq.n	8008fe8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	4619      	mov	r1, r3
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f001 fe14 	bl	800abfe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	4619      	mov	r1, r3
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f001 fe3f 	bl	800ac60 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	7b1b      	ldrb	r3, [r3, #12]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00e      	beq.n	800900e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	7b1b      	ldrb	r3, [r3, #12]
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f001 fe01 	bl	800abfe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	7b1b      	ldrb	r3, [r3, #12]
 8009000:	4619      	mov	r1, r3
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f001 fe2c 	bl	800ac60 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	7b5b      	ldrb	r3, [r3, #13]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00e      	beq.n	8009034 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	7b5b      	ldrb	r3, [r3, #13]
 800901a:	4619      	mov	r1, r3
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f001 fdee 	bl	800abfe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	7b5b      	ldrb	r3, [r3, #13]
 8009026:	4619      	mov	r1, r3
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f001 fe19 	bl	800ac60 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800903a:	69db      	ldr	r3, [r3, #28]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d00b      	beq.n	8009058 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009046:	69db      	ldr	r3, [r3, #28]
 8009048:	4618      	mov	r0, r3
 800904a:	f002 f95b 	bl	800b304 <free>
    phost->pActiveClass->pData = 0U;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009054:	2200      	movs	r2, #0
 8009056:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b084      	sub	sp, #16
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009070:	69db      	ldr	r3, [r3, #28]
 8009072:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	3340      	adds	r3, #64	; 0x40
 8009078:	4619      	mov	r1, r3
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f8b1 	bl	80091e2 <GetLineCoding>
 8009080:	4603      	mov	r3, r0
 8009082:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009084:	7afb      	ldrb	r3, [r7, #11]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d105      	bne.n	8009096 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009090:	2102      	movs	r1, #2
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009096:	7afb      	ldrb	r3, [r7, #11]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80090a8:	2301      	movs	r3, #1
 80090aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80090ac:	2300      	movs	r3, #0
 80090ae:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090b6:	69db      	ldr	r3, [r3, #28]
 80090b8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80090c0:	2b04      	cmp	r3, #4
 80090c2:	d877      	bhi.n	80091b4 <USBH_CDC_Process+0x114>
 80090c4:	a201      	add	r2, pc, #4	; (adr r2, 80090cc <USBH_CDC_Process+0x2c>)
 80090c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ca:	bf00      	nop
 80090cc:	080090e1 	.word	0x080090e1
 80090d0:	080090e7 	.word	0x080090e7
 80090d4:	08009117 	.word	0x08009117
 80090d8:	0800918b 	.word	0x0800918b
 80090dc:	08009199 	.word	0x08009199
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80090e0:	2300      	movs	r3, #0
 80090e2:	73fb      	strb	r3, [r7, #15]
      break;
 80090e4:	e06d      	b.n	80091c2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 f897 	bl	8009220 <SetLineCoding>
 80090f2:	4603      	mov	r3, r0
 80090f4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80090f6:	7bbb      	ldrb	r3, [r7, #14]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d104      	bne.n	8009106 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	2202      	movs	r2, #2
 8009100:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009104:	e058      	b.n	80091b8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009106:	7bbb      	ldrb	r3, [r7, #14]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d055      	beq.n	80091b8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	2204      	movs	r2, #4
 8009110:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009114:	e050      	b.n	80091b8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	3340      	adds	r3, #64	; 0x40
 800911a:	4619      	mov	r1, r3
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 f860 	bl	80091e2 <GetLineCoding>
 8009122:	4603      	mov	r3, r0
 8009124:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009126:	7bbb      	ldrb	r3, [r7, #14]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d126      	bne.n	800917a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	2200      	movs	r2, #0
 8009130:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800913e:	791b      	ldrb	r3, [r3, #4]
 8009140:	429a      	cmp	r2, r3
 8009142:	d13b      	bne.n	80091bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800914e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009150:	429a      	cmp	r2, r3
 8009152:	d133      	bne.n	80091bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800915e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009160:	429a      	cmp	r2, r3
 8009162:	d12b      	bne.n	80091bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800916c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800916e:	429a      	cmp	r2, r3
 8009170:	d124      	bne.n	80091bc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 f958 	bl	8009428 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009178:	e020      	b.n	80091bc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800917a:	7bbb      	ldrb	r3, [r7, #14]
 800917c:	2b01      	cmp	r3, #1
 800917e:	d01d      	beq.n	80091bc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	2204      	movs	r2, #4
 8009184:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009188:	e018      	b.n	80091bc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 f867 	bl	800925e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 f8da 	bl	800934a <CDC_ProcessReception>
      break;
 8009196:	e014      	b.n	80091c2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009198:	2100      	movs	r1, #0
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 ffef 	bl	800a17e <USBH_ClrFeature>
 80091a0:	4603      	mov	r3, r0
 80091a2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80091a4:	7bbb      	ldrb	r3, [r7, #14]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d10a      	bne.n	80091c0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80091b2:	e005      	b.n	80091c0 <USBH_CDC_Process+0x120>

    default:
      break;
 80091b4:	bf00      	nop
 80091b6:	e004      	b.n	80091c2 <USBH_CDC_Process+0x122>
      break;
 80091b8:	bf00      	nop
 80091ba:	e002      	b.n	80091c2 <USBH_CDC_Process+0x122>
      break;
 80091bc:	bf00      	nop
 80091be:	e000      	b.n	80091c2 <USBH_CDC_Process+0x122>
      break;
 80091c0:	bf00      	nop

  }

  return status;
 80091c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3710      	adds	r7, #16
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	370c      	adds	r7, #12
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr

080091e2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b082      	sub	sp, #8
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	22a1      	movs	r2, #161	; 0xa1
 80091f0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2221      	movs	r2, #33	; 0x21
 80091f6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2207      	movs	r2, #7
 8009208:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	2207      	movs	r2, #7
 800920e:	4619      	mov	r1, r3
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f001 fa83 	bl	800a71c <USBH_CtlReq>
 8009216:	4603      	mov	r3, r0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3708      	adds	r7, #8
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2221      	movs	r2, #33	; 0x21
 800922e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2220      	movs	r2, #32
 8009234:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2207      	movs	r2, #7
 8009246:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	2207      	movs	r2, #7
 800924c:	4619      	mov	r1, r3
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f001 fa64 	bl	800a71c <USBH_CtlReq>
 8009254:	4603      	mov	r3, r0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b086      	sub	sp, #24
 8009262:	af02      	add	r7, sp, #8
 8009264:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800926c:	69db      	ldr	r3, [r3, #28]
 800926e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009270:	2300      	movs	r3, #0
 8009272:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800927a:	2b01      	cmp	r3, #1
 800927c:	d002      	beq.n	8009284 <CDC_ProcessTransmission+0x26>
 800927e:	2b02      	cmp	r3, #2
 8009280:	d023      	beq.n	80092ca <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009282:	e05e      	b.n	8009342 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	8b12      	ldrh	r2, [r2, #24]
 800928c:	4293      	cmp	r3, r2
 800928e:	d90b      	bls.n	80092a8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	69d9      	ldr	r1, [r3, #28]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	8b1a      	ldrh	r2, [r3, #24]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	7b5b      	ldrb	r3, [r3, #13]
 800929c:	2001      	movs	r0, #1
 800929e:	9000      	str	r0, [sp, #0]
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f001 fc4a 	bl	800ab3a <USBH_BulkSendData>
 80092a6:	e00b      	b.n	80092c0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	7b5b      	ldrb	r3, [r3, #13]
 80092b6:	2001      	movs	r0, #1
 80092b8:	9000      	str	r0, [sp, #0]
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f001 fc3d 	bl	800ab3a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2202      	movs	r2, #2
 80092c4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80092c8:	e03b      	b.n	8009342 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	7b5b      	ldrb	r3, [r3, #13]
 80092ce:	4619      	mov	r1, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f001 ff61 	bl	800b198 <USBH_LL_GetURBState>
 80092d6:	4603      	mov	r3, r0
 80092d8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80092da:	7afb      	ldrb	r3, [r7, #11]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d128      	bne.n	8009332 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	8b12      	ldrh	r2, [r2, #24]
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d90e      	bls.n	800930a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	8b12      	ldrh	r2, [r2, #24]
 80092f4:	1a9a      	subs	r2, r3, r2
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	69db      	ldr	r3, [r3, #28]
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	8b12      	ldrh	r2, [r2, #24]
 8009302:	441a      	add	r2, r3
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	61da      	str	r2, [r3, #28]
 8009308:	e002      	b.n	8009310 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2200      	movs	r2, #0
 800930e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009314:	2b00      	cmp	r3, #0
 8009316:	d004      	beq.n	8009322 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009320:	e00e      	b.n	8009340 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f868 	bl	8009400 <USBH_CDC_TransmitCallback>
      break;
 8009330:	e006      	b.n	8009340 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009332:	7afb      	ldrb	r3, [r7, #11]
 8009334:	2b02      	cmp	r3, #2
 8009336:	d103      	bne.n	8009340 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009340:	bf00      	nop
  }
}
 8009342:	bf00      	nop
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b086      	sub	sp, #24
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009358:	69db      	ldr	r3, [r3, #28]
 800935a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800935c:	2300      	movs	r3, #0
 800935e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009366:	2b03      	cmp	r3, #3
 8009368:	d002      	beq.n	8009370 <CDC_ProcessReception+0x26>
 800936a:	2b04      	cmp	r3, #4
 800936c:	d00e      	beq.n	800938c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800936e:	e043      	b.n	80093f8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	6a19      	ldr	r1, [r3, #32]
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	8b5a      	ldrh	r2, [r3, #26]
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	7b1b      	ldrb	r3, [r3, #12]
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f001 fc01 	bl	800ab84 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2204      	movs	r2, #4
 8009386:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800938a:	e035      	b.n	80093f8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	7b1b      	ldrb	r3, [r3, #12]
 8009390:	4619      	mov	r1, r3
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f001 ff00 	bl	800b198 <USBH_LL_GetURBState>
 8009398:	4603      	mov	r3, r0
 800939a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800939c:	7cfb      	ldrb	r3, [r7, #19]
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d129      	bne.n	80093f6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	7b1b      	ldrb	r3, [r3, #12]
 80093a6:	4619      	mov	r1, r3
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f001 fe63 	bl	800b074 <USBH_LL_GetLastXferSize>
 80093ae:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b4:	68fa      	ldr	r2, [r7, #12]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d016      	beq.n	80093e8 <CDC_ProcessReception+0x9e>
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	8b5b      	ldrh	r3, [r3, #26]
 80093be:	461a      	mov	r2, r3
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d910      	bls.n	80093e8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	1ad2      	subs	r2, r2, r3
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	6a1a      	ldr	r2, [r3, #32]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	441a      	add	r2, r3
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	2203      	movs	r2, #3
 80093e2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80093e6:	e006      	b.n	80093f6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 f80f 	bl	8009414 <USBH_CDC_ReceiveCallback>
      break;
 80093f6:	bf00      	nop
  }
}
 80093f8:	bf00      	nop
 80093fa:	3718      	adds	r7, #24
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800941c:	bf00      	nop
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	4613      	mov	r3, r2
 8009448:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d101      	bne.n	8009454 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009450:	2302      	movs	r3, #2
 8009452:	e029      	b.n	80094a8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	79fa      	ldrb	r2, [r7, #7]
 8009458:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2200      	movs	r2, #0
 8009460:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2200      	movs	r2, #0
 8009468:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f000 f81f 	bl	80094b0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2200      	movs	r2, #0
 8009476:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d003      	beq.n	80094a0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f001 fd33 	bl	800af0c <USBH_LL_Init>

  return USBH_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80094b8:	2300      	movs	r3, #0
 80094ba:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80094bc:	2300      	movs	r3, #0
 80094be:	60fb      	str	r3, [r7, #12]
 80094c0:	e009      	b.n	80094d6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	33e0      	adds	r3, #224	; 0xe0
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4413      	add	r3, r2
 80094cc:	2200      	movs	r2, #0
 80094ce:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	3301      	adds	r3, #1
 80094d4:	60fb      	str	r3, [r7, #12]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2b0f      	cmp	r3, #15
 80094da:	d9f2      	bls.n	80094c2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80094dc:	2300      	movs	r3, #0
 80094de:	60fb      	str	r3, [r7, #12]
 80094e0:	e009      	b.n	80094f6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	4413      	add	r3, r2
 80094e8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80094ec:	2200      	movs	r2, #0
 80094ee:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	3301      	adds	r3, #1
 80094f4:	60fb      	str	r3, [r7, #12]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094fc:	d3f1      	bcc.n	80094e2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2201      	movs	r2, #1
 800950e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2240      	movs	r2, #64	; 0x40
 8009522:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2201      	movs	r2, #1
 8009536:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800954a:	2300      	movs	r3, #0
}
 800954c:	4618      	mov	r0, r3
 800954e:	3714      	adds	r7, #20
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009562:	2300      	movs	r3, #0
 8009564:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d016      	beq.n	800959a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009572:	2b00      	cmp	r3, #0
 8009574:	d10e      	bne.n	8009594 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800957c:	1c59      	adds	r1, r3, #1
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	33de      	adds	r3, #222	; 0xde
 8009588:	6839      	ldr	r1, [r7, #0]
 800958a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800958e:	2300      	movs	r3, #0
 8009590:	73fb      	strb	r3, [r7, #15]
 8009592:	e004      	b.n	800959e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009594:	2302      	movs	r3, #2
 8009596:	73fb      	strb	r3, [r7, #15]
 8009598:	e001      	b.n	800959e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800959a:	2302      	movs	r3, #2
 800959c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800959e:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3714      	adds	r7, #20
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	460b      	mov	r3, r1
 80095b6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80095b8:	2300      	movs	r3, #0
 80095ba:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80095c2:	78fa      	ldrb	r2, [r7, #3]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d204      	bcs.n	80095d2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	78fa      	ldrb	r2, [r7, #3]
 80095cc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80095d0:	e001      	b.n	80095d6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80095d2:	2302      	movs	r3, #2
 80095d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80095d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3714      	adds	r7, #20
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b087      	sub	sp, #28
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	4608      	mov	r0, r1
 80095ee:	4611      	mov	r1, r2
 80095f0:	461a      	mov	r2, r3
 80095f2:	4603      	mov	r3, r0
 80095f4:	70fb      	strb	r3, [r7, #3]
 80095f6:	460b      	mov	r3, r1
 80095f8:	70bb      	strb	r3, [r7, #2]
 80095fa:	4613      	mov	r3, r2
 80095fc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80095fe:	2300      	movs	r3, #0
 8009600:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009602:	2300      	movs	r3, #0
 8009604:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800960c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800960e:	e025      	b.n	800965c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009610:	7dfb      	ldrb	r3, [r7, #23]
 8009612:	221a      	movs	r2, #26
 8009614:	fb02 f303 	mul.w	r3, r2, r3
 8009618:	3308      	adds	r3, #8
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	4413      	add	r3, r2
 800961e:	3302      	adds	r3, #2
 8009620:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	795b      	ldrb	r3, [r3, #5]
 8009626:	78fa      	ldrb	r2, [r7, #3]
 8009628:	429a      	cmp	r2, r3
 800962a:	d002      	beq.n	8009632 <USBH_FindInterface+0x4e>
 800962c:	78fb      	ldrb	r3, [r7, #3]
 800962e:	2bff      	cmp	r3, #255	; 0xff
 8009630:	d111      	bne.n	8009656 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009636:	78ba      	ldrb	r2, [r7, #2]
 8009638:	429a      	cmp	r2, r3
 800963a:	d002      	beq.n	8009642 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800963c:	78bb      	ldrb	r3, [r7, #2]
 800963e:	2bff      	cmp	r3, #255	; 0xff
 8009640:	d109      	bne.n	8009656 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009646:	787a      	ldrb	r2, [r7, #1]
 8009648:	429a      	cmp	r2, r3
 800964a:	d002      	beq.n	8009652 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800964c:	787b      	ldrb	r3, [r7, #1]
 800964e:	2bff      	cmp	r3, #255	; 0xff
 8009650:	d101      	bne.n	8009656 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009652:	7dfb      	ldrb	r3, [r7, #23]
 8009654:	e006      	b.n	8009664 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009656:	7dfb      	ldrb	r3, [r7, #23]
 8009658:	3301      	adds	r3, #1
 800965a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800965c:	7dfb      	ldrb	r3, [r7, #23]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d9d6      	bls.n	8009610 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009662:	23ff      	movs	r3, #255	; 0xff
}
 8009664:	4618      	mov	r0, r3
 8009666:	371c      	adds	r7, #28
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f001 fc83 	bl	800af84 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800967e:	2101      	movs	r1, #1
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f001 fd9c 	bl	800b1be <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3708      	adds	r7, #8
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b088      	sub	sp, #32
 8009694:	af04      	add	r7, sp, #16
 8009696:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009698:	2302      	movs	r3, #2
 800969a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800969c:	2300      	movs	r3, #0
 800969e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d102      	bne.n	80096b2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2203      	movs	r2, #3
 80096b0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	2b0b      	cmp	r3, #11
 80096ba:	f200 81be 	bhi.w	8009a3a <USBH_Process+0x3aa>
 80096be:	a201      	add	r2, pc, #4	; (adr r2, 80096c4 <USBH_Process+0x34>)
 80096c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c4:	080096f5 	.word	0x080096f5
 80096c8:	08009727 	.word	0x08009727
 80096cc:	0800978f 	.word	0x0800978f
 80096d0:	080099d5 	.word	0x080099d5
 80096d4:	08009a3b 	.word	0x08009a3b
 80096d8:	08009833 	.word	0x08009833
 80096dc:	0800997b 	.word	0x0800997b
 80096e0:	08009869 	.word	0x08009869
 80096e4:	08009889 	.word	0x08009889
 80096e8:	080098a9 	.word	0x080098a9
 80096ec:	080098ed 	.word	0x080098ed
 80096f0:	080099bd 	.word	0x080099bd
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	f000 819e 	beq.w	8009a3e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2201      	movs	r2, #1
 8009706:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009708:	20c8      	movs	r0, #200	; 0xc8
 800970a:	f001 fd9f 	bl	800b24c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f001 fc95 	bl	800b03e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009724:	e18b      	b.n	8009a3e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800972c:	2b01      	cmp	r3, #1
 800972e:	d107      	bne.n	8009740 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2202      	movs	r2, #2
 800973c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800973e:	e18d      	b.n	8009a5c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009746:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800974a:	d914      	bls.n	8009776 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009752:	3301      	adds	r3, #1
 8009754:	b2da      	uxtb	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009762:	2b03      	cmp	r3, #3
 8009764:	d903      	bls.n	800976e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	220d      	movs	r2, #13
 800976a:	701a      	strb	r2, [r3, #0]
      break;
 800976c:	e176      	b.n	8009a5c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	701a      	strb	r2, [r3, #0]
      break;
 8009774:	e172      	b.n	8009a5c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800977c:	f103 020a 	add.w	r2, r3, #10
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009786:	200a      	movs	r0, #10
 8009788:	f001 fd60 	bl	800b24c <USBH_Delay>
      break;
 800978c:	e166      	b.n	8009a5c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009794:	2b00      	cmp	r3, #0
 8009796:	d005      	beq.n	80097a4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800979e:	2104      	movs	r1, #4
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80097a4:	2064      	movs	r0, #100	; 0x64
 80097a6:	f001 fd51 	bl	800b24c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f001 fc20 	bl	800aff0 <USBH_LL_GetSpeed>
 80097b0:	4603      	mov	r3, r0
 80097b2:	461a      	mov	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2205      	movs	r2, #5
 80097be:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80097c0:	2100      	movs	r1, #0
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f001 fa2b 	bl	800ac1e <USBH_AllocPipe>
 80097c8:	4603      	mov	r3, r0
 80097ca:	461a      	mov	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80097d0:	2180      	movs	r1, #128	; 0x80
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f001 fa23 	bl	800ac1e <USBH_AllocPipe>
 80097d8:	4603      	mov	r3, r0
 80097da:	461a      	mov	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	7919      	ldrb	r1, [r3, #4]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80097f4:	b292      	uxth	r2, r2
 80097f6:	9202      	str	r2, [sp, #8]
 80097f8:	2200      	movs	r2, #0
 80097fa:	9201      	str	r2, [sp, #4]
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	4603      	mov	r3, r0
 8009800:	2280      	movs	r2, #128	; 0x80
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f001 f9dc 	bl	800abc0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	7959      	ldrb	r1, [r3, #5]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800981c:	b292      	uxth	r2, r2
 800981e:	9202      	str	r2, [sp, #8]
 8009820:	2200      	movs	r2, #0
 8009822:	9201      	str	r2, [sp, #4]
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	4603      	mov	r3, r0
 8009828:	2200      	movs	r2, #0
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f001 f9c8 	bl	800abc0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009830:	e114      	b.n	8009a5c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 f918 	bl	8009a68 <USBH_HandleEnum>
 8009838:	4603      	mov	r3, r0
 800983a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800983c:	7bbb      	ldrb	r3, [r7, #14]
 800983e:	b2db      	uxtb	r3, r3
 8009840:	2b00      	cmp	r3, #0
 8009842:	f040 80fe 	bne.w	8009a42 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2200      	movs	r2, #0
 800984a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009854:	2b01      	cmp	r3, #1
 8009856:	d103      	bne.n	8009860 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2208      	movs	r2, #8
 800985c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800985e:	e0f0      	b.n	8009a42 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2207      	movs	r2, #7
 8009864:	701a      	strb	r2, [r3, #0]
      break;
 8009866:	e0ec      	b.n	8009a42 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800986e:	2b00      	cmp	r3, #0
 8009870:	f000 80e9 	beq.w	8009a46 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800987a:	2101      	movs	r1, #1
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2208      	movs	r2, #8
 8009884:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009886:	e0de      	b.n	8009a46 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800988e:	b29b      	uxth	r3, r3
 8009890:	4619      	mov	r1, r3
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fc2c 	bl	800a0f0 <USBH_SetCfg>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	f040 80d5 	bne.w	8009a4a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2209      	movs	r2, #9
 80098a4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80098a6:	e0d0      	b.n	8009a4a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80098ae:	f003 0320 	and.w	r3, r3, #32
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d016      	beq.n	80098e4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80098b6:	2101      	movs	r1, #1
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 fc3c 	bl	800a136 <USBH_SetFeature>
 80098be:	4603      	mov	r3, r0
 80098c0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80098c2:	7bbb      	ldrb	r3, [r7, #14]
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d103      	bne.n	80098d2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	220a      	movs	r2, #10
 80098ce:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80098d0:	e0bd      	b.n	8009a4e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80098d2:	7bbb      	ldrb	r3, [r7, #14]
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	2b03      	cmp	r3, #3
 80098d8:	f040 80b9 	bne.w	8009a4e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	220a      	movs	r2, #10
 80098e0:	701a      	strb	r2, [r3, #0]
      break;
 80098e2:	e0b4      	b.n	8009a4e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	220a      	movs	r2, #10
 80098e8:	701a      	strb	r2, [r3, #0]
      break;
 80098ea:	e0b0      	b.n	8009a4e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	f000 80ad 	beq.w	8009a52 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009900:	2300      	movs	r3, #0
 8009902:	73fb      	strb	r3, [r7, #15]
 8009904:	e016      	b.n	8009934 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009906:	7bfa      	ldrb	r2, [r7, #15]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	32de      	adds	r2, #222	; 0xde
 800990c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009910:	791a      	ldrb	r2, [r3, #4]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009918:	429a      	cmp	r2, r3
 800991a:	d108      	bne.n	800992e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800991c:	7bfa      	ldrb	r2, [r7, #15]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	32de      	adds	r2, #222	; 0xde
 8009922:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800992c:	e005      	b.n	800993a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800992e:	7bfb      	ldrb	r3, [r7, #15]
 8009930:	3301      	adds	r3, #1
 8009932:	73fb      	strb	r3, [r7, #15]
 8009934:	7bfb      	ldrb	r3, [r7, #15]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d0e5      	beq.n	8009906 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009940:	2b00      	cmp	r3, #0
 8009942:	d016      	beq.n	8009972 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	4798      	blx	r3
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d109      	bne.n	800996a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2206      	movs	r2, #6
 800995a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009962:	2103      	movs	r1, #3
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009968:	e073      	b.n	8009a52 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	220d      	movs	r2, #13
 800996e:	701a      	strb	r2, [r3, #0]
      break;
 8009970:	e06f      	b.n	8009a52 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	220d      	movs	r2, #13
 8009976:	701a      	strb	r2, [r3, #0]
      break;
 8009978:	e06b      	b.n	8009a52 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009980:	2b00      	cmp	r3, #0
 8009982:	d017      	beq.n	80099b4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	4798      	blx	r3
 8009990:	4603      	mov	r3, r0
 8009992:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009994:	7bbb      	ldrb	r3, [r7, #14]
 8009996:	b2db      	uxtb	r3, r3
 8009998:	2b00      	cmp	r3, #0
 800999a:	d103      	bne.n	80099a4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	220b      	movs	r2, #11
 80099a0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80099a2:	e058      	b.n	8009a56 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80099a4:	7bbb      	ldrb	r3, [r7, #14]
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	2b02      	cmp	r3, #2
 80099aa:	d154      	bne.n	8009a56 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	220d      	movs	r2, #13
 80099b0:	701a      	strb	r2, [r3, #0]
      break;
 80099b2:	e050      	b.n	8009a56 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	220d      	movs	r2, #13
 80099b8:	701a      	strb	r2, [r3, #0]
      break;
 80099ba:	e04c      	b.n	8009a56 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d049      	beq.n	8009a5a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099cc:	695b      	ldr	r3, [r3, #20]
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	4798      	blx	r3
      }
      break;
 80099d2:	e042      	b.n	8009a5a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f7ff fd67 	bl	80094b0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d009      	beq.n	8009a00 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d005      	beq.n	8009a16 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a10:	2105      	movs	r1, #5
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d107      	bne.n	8009a32 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f7ff fe20 	bl	8009670 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009a30:	e014      	b.n	8009a5c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f001 faa6 	bl	800af84 <USBH_LL_Start>
      break;
 8009a38:	e010      	b.n	8009a5c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8009a3a:	bf00      	nop
 8009a3c:	e00e      	b.n	8009a5c <USBH_Process+0x3cc>
      break;
 8009a3e:	bf00      	nop
 8009a40:	e00c      	b.n	8009a5c <USBH_Process+0x3cc>
      break;
 8009a42:	bf00      	nop
 8009a44:	e00a      	b.n	8009a5c <USBH_Process+0x3cc>
    break;
 8009a46:	bf00      	nop
 8009a48:	e008      	b.n	8009a5c <USBH_Process+0x3cc>
      break;
 8009a4a:	bf00      	nop
 8009a4c:	e006      	b.n	8009a5c <USBH_Process+0x3cc>
      break;
 8009a4e:	bf00      	nop
 8009a50:	e004      	b.n	8009a5c <USBH_Process+0x3cc>
      break;
 8009a52:	bf00      	nop
 8009a54:	e002      	b.n	8009a5c <USBH_Process+0x3cc>
      break;
 8009a56:	bf00      	nop
 8009a58:	e000      	b.n	8009a5c <USBH_Process+0x3cc>
      break;
 8009a5a:	bf00      	nop
  }
  return USBH_OK;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop

08009a68 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b088      	sub	sp, #32
 8009a6c:	af04      	add	r7, sp, #16
 8009a6e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009a70:	2301      	movs	r3, #1
 8009a72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009a74:	2301      	movs	r3, #1
 8009a76:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	785b      	ldrb	r3, [r3, #1]
 8009a7c:	2b07      	cmp	r3, #7
 8009a7e:	f200 81c1 	bhi.w	8009e04 <USBH_HandleEnum+0x39c>
 8009a82:	a201      	add	r2, pc, #4	; (adr r2, 8009a88 <USBH_HandleEnum+0x20>)
 8009a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a88:	08009aa9 	.word	0x08009aa9
 8009a8c:	08009b67 	.word	0x08009b67
 8009a90:	08009bd1 	.word	0x08009bd1
 8009a94:	08009c5f 	.word	0x08009c5f
 8009a98:	08009cc9 	.word	0x08009cc9
 8009a9c:	08009d39 	.word	0x08009d39
 8009aa0:	08009d7f 	.word	0x08009d7f
 8009aa4:	08009dc5 	.word	0x08009dc5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009aa8:	2108      	movs	r1, #8
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fa50 	bl	8009f50 <USBH_Get_DevDesc>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ab4:	7bbb      	ldrb	r3, [r7, #14]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d130      	bne.n	8009b1c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	7919      	ldrb	r1, [r3, #4]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009ade:	b292      	uxth	r2, r2
 8009ae0:	9202      	str	r2, [sp, #8]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	9201      	str	r2, [sp, #4]
 8009ae6:	9300      	str	r3, [sp, #0]
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2280      	movs	r2, #128	; 0x80
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f001 f867 	bl	800abc0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	7959      	ldrb	r1, [r3, #5]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b06:	b292      	uxth	r2, r2
 8009b08:	9202      	str	r2, [sp, #8]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	9201      	str	r2, [sp, #4]
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	4603      	mov	r3, r0
 8009b12:	2200      	movs	r2, #0
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f001 f853 	bl	800abc0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009b1a:	e175      	b.n	8009e08 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b1c:	7bbb      	ldrb	r3, [r7, #14]
 8009b1e:	2b03      	cmp	r3, #3
 8009b20:	f040 8172 	bne.w	8009e08 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	b2da      	uxtb	r2, r3
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b3a:	2b03      	cmp	r3, #3
 8009b3c:	d903      	bls.n	8009b46 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	220d      	movs	r2, #13
 8009b42:	701a      	strb	r2, [r3, #0]
      break;
 8009b44:	e160      	b.n	8009e08 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	795b      	ldrb	r3, [r3, #5]
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f001 f887 	bl	800ac60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	791b      	ldrb	r3, [r3, #4]
 8009b56:	4619      	mov	r1, r3
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f001 f881 	bl	800ac60 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	701a      	strb	r2, [r3, #0]
      break;
 8009b64:	e150      	b.n	8009e08 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009b66:	2112      	movs	r1, #18
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 f9f1 	bl	8009f50 <USBH_Get_DevDesc>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b72:	7bbb      	ldrb	r3, [r7, #14]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d103      	bne.n	8009b80 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2202      	movs	r2, #2
 8009b7c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009b7e:	e145      	b.n	8009e0c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b80:	7bbb      	ldrb	r3, [r7, #14]
 8009b82:	2b03      	cmp	r3, #3
 8009b84:	f040 8142 	bne.w	8009e0c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b8e:	3301      	adds	r3, #1
 8009b90:	b2da      	uxtb	r2, r3
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b9e:	2b03      	cmp	r3, #3
 8009ba0:	d903      	bls.n	8009baa <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	220d      	movs	r2, #13
 8009ba6:	701a      	strb	r2, [r3, #0]
      break;
 8009ba8:	e130      	b.n	8009e0c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	795b      	ldrb	r3, [r3, #5]
 8009bae:	4619      	mov	r1, r3
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f001 f855 	bl	800ac60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	791b      	ldrb	r3, [r3, #4]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f001 f84f 	bl	800ac60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	701a      	strb	r2, [r3, #0]
      break;
 8009bce:	e11d      	b.n	8009e0c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009bd0:	2101      	movs	r1, #1
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 fa68 	bl	800a0a8 <USBH_SetAddress>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009bdc:	7bbb      	ldrb	r3, [r7, #14]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d132      	bne.n	8009c48 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009be2:	2002      	movs	r0, #2
 8009be4:	f001 fb32 	bl	800b24c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2201      	movs	r2, #1
 8009bec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2203      	movs	r2, #3
 8009bf4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	7919      	ldrb	r1, [r3, #4]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009c0a:	b292      	uxth	r2, r2
 8009c0c:	9202      	str	r2, [sp, #8]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	9201      	str	r2, [sp, #4]
 8009c12:	9300      	str	r3, [sp, #0]
 8009c14:	4603      	mov	r3, r0
 8009c16:	2280      	movs	r2, #128	; 0x80
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 ffd1 	bl	800abc0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	7959      	ldrb	r1, [r3, #5]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009c32:	b292      	uxth	r2, r2
 8009c34:	9202      	str	r2, [sp, #8]
 8009c36:	2200      	movs	r2, #0
 8009c38:	9201      	str	r2, [sp, #4]
 8009c3a:	9300      	str	r3, [sp, #0]
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2200      	movs	r2, #0
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 ffbd 	bl	800abc0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009c46:	e0e3      	b.n	8009e10 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c48:	7bbb      	ldrb	r3, [r7, #14]
 8009c4a:	2b03      	cmp	r3, #3
 8009c4c:	f040 80e0 	bne.w	8009e10 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	220d      	movs	r2, #13
 8009c54:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	705a      	strb	r2, [r3, #1]
      break;
 8009c5c:	e0d8      	b.n	8009e10 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009c5e:	2109      	movs	r1, #9
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 f99d 	bl	8009fa0 <USBH_Get_CfgDesc>
 8009c66:	4603      	mov	r3, r0
 8009c68:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009c6a:	7bbb      	ldrb	r3, [r7, #14]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d103      	bne.n	8009c78 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2204      	movs	r2, #4
 8009c74:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009c76:	e0cd      	b.n	8009e14 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c78:	7bbb      	ldrb	r3, [r7, #14]
 8009c7a:	2b03      	cmp	r3, #3
 8009c7c:	f040 80ca 	bne.w	8009e14 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009c86:	3301      	adds	r3, #1
 8009c88:	b2da      	uxtb	r2, r3
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009c96:	2b03      	cmp	r3, #3
 8009c98:	d903      	bls.n	8009ca2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	220d      	movs	r2, #13
 8009c9e:	701a      	strb	r2, [r3, #0]
      break;
 8009ca0:	e0b8      	b.n	8009e14 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	795b      	ldrb	r3, [r3, #5]
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 ffd9 	bl	800ac60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	791b      	ldrb	r3, [r3, #4]
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 ffd3 	bl	800ac60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	701a      	strb	r2, [r3, #0]
      break;
 8009cc6:	e0a5      	b.n	8009e14 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009cce:	4619      	mov	r1, r3
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 f965 	bl	8009fa0 <USBH_Get_CfgDesc>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009cda:	7bbb      	ldrb	r3, [r7, #14]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d103      	bne.n	8009ce8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2205      	movs	r2, #5
 8009ce4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009ce6:	e097      	b.n	8009e18 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ce8:	7bbb      	ldrb	r3, [r7, #14]
 8009cea:	2b03      	cmp	r3, #3
 8009cec:	f040 8094 	bne.w	8009e18 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	b2da      	uxtb	r2, r3
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009d06:	2b03      	cmp	r3, #3
 8009d08:	d903      	bls.n	8009d12 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	220d      	movs	r2, #13
 8009d0e:	701a      	strb	r2, [r3, #0]
      break;
 8009d10:	e082      	b.n	8009e18 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	795b      	ldrb	r3, [r3, #5]
 8009d16:	4619      	mov	r1, r3
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 ffa1 	bl	800ac60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	791b      	ldrb	r3, [r3, #4]
 8009d22:	4619      	mov	r1, r3
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 ff9b 	bl	800ac60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	701a      	strb	r2, [r3, #0]
      break;
 8009d36:	e06f      	b.n	8009e18 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d019      	beq.n	8009d76 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009d4e:	23ff      	movs	r3, #255	; 0xff
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 f949 	bl	8009fe8 <USBH_Get_StringDesc>
 8009d56:	4603      	mov	r3, r0
 8009d58:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009d5a:	7bbb      	ldrb	r3, [r7, #14]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d103      	bne.n	8009d68 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2206      	movs	r2, #6
 8009d64:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009d66:	e059      	b.n	8009e1c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d68:	7bbb      	ldrb	r3, [r7, #14]
 8009d6a:	2b03      	cmp	r3, #3
 8009d6c:	d156      	bne.n	8009e1c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2206      	movs	r2, #6
 8009d72:	705a      	strb	r2, [r3, #1]
      break;
 8009d74:	e052      	b.n	8009e1c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2206      	movs	r2, #6
 8009d7a:	705a      	strb	r2, [r3, #1]
      break;
 8009d7c:	e04e      	b.n	8009e1c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d019      	beq.n	8009dbc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009d94:	23ff      	movs	r3, #255	; 0xff
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 f926 	bl	8009fe8 <USBH_Get_StringDesc>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009da0:	7bbb      	ldrb	r3, [r7, #14]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d103      	bne.n	8009dae <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2207      	movs	r2, #7
 8009daa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009dac:	e038      	b.n	8009e20 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009dae:	7bbb      	ldrb	r3, [r7, #14]
 8009db0:	2b03      	cmp	r3, #3
 8009db2:	d135      	bne.n	8009e20 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2207      	movs	r2, #7
 8009db8:	705a      	strb	r2, [r3, #1]
      break;
 8009dba:	e031      	b.n	8009e20 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2207      	movs	r2, #7
 8009dc0:	705a      	strb	r2, [r3, #1]
      break;
 8009dc2:	e02d      	b.n	8009e20 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d017      	beq.n	8009dfe <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009dda:	23ff      	movs	r3, #255	; 0xff
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 f903 	bl	8009fe8 <USBH_Get_StringDesc>
 8009de2:	4603      	mov	r3, r0
 8009de4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009de6:	7bbb      	ldrb	r3, [r7, #14]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d102      	bne.n	8009df2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009dec:	2300      	movs	r3, #0
 8009dee:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009df0:	e018      	b.n	8009e24 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009df2:	7bbb      	ldrb	r3, [r7, #14]
 8009df4:	2b03      	cmp	r3, #3
 8009df6:	d115      	bne.n	8009e24 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8009dfc:	e012      	b.n	8009e24 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	73fb      	strb	r3, [r7, #15]
      break;
 8009e02:	e00f      	b.n	8009e24 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009e04:	bf00      	nop
 8009e06:	e00e      	b.n	8009e26 <USBH_HandleEnum+0x3be>
      break;
 8009e08:	bf00      	nop
 8009e0a:	e00c      	b.n	8009e26 <USBH_HandleEnum+0x3be>
      break;
 8009e0c:	bf00      	nop
 8009e0e:	e00a      	b.n	8009e26 <USBH_HandleEnum+0x3be>
      break;
 8009e10:	bf00      	nop
 8009e12:	e008      	b.n	8009e26 <USBH_HandleEnum+0x3be>
      break;
 8009e14:	bf00      	nop
 8009e16:	e006      	b.n	8009e26 <USBH_HandleEnum+0x3be>
      break;
 8009e18:	bf00      	nop
 8009e1a:	e004      	b.n	8009e26 <USBH_HandleEnum+0x3be>
      break;
 8009e1c:	bf00      	nop
 8009e1e:	e002      	b.n	8009e26 <USBH_HandleEnum+0x3be>
      break;
 8009e20:	bf00      	nop
 8009e22:	e000      	b.n	8009e26 <USBH_HandleEnum+0x3be>
      break;
 8009e24:	bf00      	nop
  }
  return Status;
 8009e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	683a      	ldr	r2, [r7, #0]
 8009e3e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009e42:	bf00      	nop
 8009e44:	370c      	adds	r7, #12
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr

08009e4e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b082      	sub	sp, #8
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e5c:	1c5a      	adds	r2, r3, #1
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 f804 	bl	8009e72 <USBH_HandleSof>
}
 8009e6a:	bf00      	nop
 8009e6c:	3708      	adds	r7, #8
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b082      	sub	sp, #8
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	2b0b      	cmp	r3, #11
 8009e82:	d10a      	bne.n	8009e9a <USBH_HandleSof+0x28>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d005      	beq.n	8009e9a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e94:	699b      	ldr	r3, [r3, #24]
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	4798      	blx	r3
  }
}
 8009e9a:	bf00      	nop
 8009e9c:	3708      	adds	r7, #8
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	b083      	sub	sp, #12
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2201      	movs	r2, #1
 8009eae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009eb2:	bf00      	nop
}
 8009eb4:	370c      	adds	r7, #12
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr

08009ebe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009ebe:	b480      	push	{r7}
 8009ec0:	b083      	sub	sp, #12
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009ece:	bf00      	nop
}
 8009ed0:	370c      	adds	r7, #12
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr

08009eda <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009eda:	b480      	push	{r7}
 8009edc:	b083      	sub	sp, #12
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009efa:	2300      	movs	r3, #0
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2201      	movs	r2, #1
 8009f14:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f001 f846 	bl	800afba <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	791b      	ldrb	r3, [r3, #4]
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 fe93 	bl	800ac60 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	795b      	ldrb	r3, [r3, #5]
 8009f3e:	4619      	mov	r1, r3
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 fe8d 	bl	800ac60 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3708      	adds	r7, #8
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b086      	sub	sp, #24
 8009f54:	af02      	add	r7, sp, #8
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	460b      	mov	r3, r1
 8009f5a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009f62:	78fb      	ldrb	r3, [r7, #3]
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	4613      	mov	r3, r2
 8009f6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f6e:	2100      	movs	r1, #0
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 f864 	bl	800a03e <USBH_GetDescriptor>
 8009f76:	4603      	mov	r3, r0
 8009f78:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8009f7a:	7bfb      	ldrb	r3, [r7, #15]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10a      	bne.n	8009f96 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009f8c:	78fa      	ldrb	r2, [r7, #3]
 8009f8e:	b292      	uxth	r2, r2
 8009f90:	4619      	mov	r1, r3
 8009f92:	f000 f919 	bl	800a1c8 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af02      	add	r7, sp, #8
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	460b      	mov	r3, r1
 8009faa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	331c      	adds	r3, #28
 8009fb0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009fb2:	887b      	ldrh	r3, [r7, #2]
 8009fb4:	9300      	str	r3, [sp, #0]
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 f83d 	bl	800a03e <USBH_GetDescriptor>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009fc8:	7bfb      	ldrb	r3, [r7, #15]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d107      	bne.n	8009fde <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009fce:	887b      	ldrh	r3, [r7, #2]
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	68b9      	ldr	r1, [r7, #8]
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 f989 	bl	800a2ec <USBH_ParseCfgDesc>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3710      	adds	r7, #16
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b088      	sub	sp, #32
 8009fec:	af02      	add	r7, sp, #8
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	607a      	str	r2, [r7, #4]
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	72fb      	strb	r3, [r7, #11]
 8009ff8:	4613      	mov	r3, r2
 8009ffa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8009ffc:	7afb      	ldrb	r3, [r7, #11]
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a004:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a00c:	893b      	ldrh	r3, [r7, #8]
 800a00e:	9300      	str	r3, [sp, #0]
 800a010:	460b      	mov	r3, r1
 800a012:	2100      	movs	r1, #0
 800a014:	68f8      	ldr	r0, [r7, #12]
 800a016:	f000 f812 	bl	800a03e <USBH_GetDescriptor>
 800a01a:	4603      	mov	r3, r0
 800a01c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a01e:	7dfb      	ldrb	r3, [r7, #23]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d107      	bne.n	800a034 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a02a:	893a      	ldrh	r2, [r7, #8]
 800a02c:	6879      	ldr	r1, [r7, #4]
 800a02e:	4618      	mov	r0, r3
 800a030:	f000 fb26 	bl	800a680 <USBH_ParseStringDesc>
  }

  return status;
 800a034:	7dfb      	ldrb	r3, [r7, #23]
}
 800a036:	4618      	mov	r0, r3
 800a038:	3718      	adds	r7, #24
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b084      	sub	sp, #16
 800a042:	af00      	add	r7, sp, #0
 800a044:	60f8      	str	r0, [r7, #12]
 800a046:	607b      	str	r3, [r7, #4]
 800a048:	460b      	mov	r3, r1
 800a04a:	72fb      	strb	r3, [r7, #11]
 800a04c:	4613      	mov	r3, r2
 800a04e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	789b      	ldrb	r3, [r3, #2]
 800a054:	2b01      	cmp	r3, #1
 800a056:	d11c      	bne.n	800a092 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a058:	7afb      	ldrb	r3, [r7, #11]
 800a05a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a05e:	b2da      	uxtb	r2, r3
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2206      	movs	r2, #6
 800a068:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	893a      	ldrh	r2, [r7, #8]
 800a06e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a070:	893b      	ldrh	r3, [r7, #8]
 800a072:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a076:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a07a:	d104      	bne.n	800a086 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f240 4209 	movw	r2, #1033	; 0x409
 800a082:	829a      	strh	r2, [r3, #20]
 800a084:	e002      	b.n	800a08c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2200      	movs	r2, #0
 800a08a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	8b3a      	ldrh	r2, [r7, #24]
 800a090:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a092:	8b3b      	ldrh	r3, [r7, #24]
 800a094:	461a      	mov	r2, r3
 800a096:	6879      	ldr	r1, [r7, #4]
 800a098:	68f8      	ldr	r0, [r7, #12]
 800a09a:	f000 fb3f 	bl	800a71c <USBH_CtlReq>
 800a09e:	4603      	mov	r3, r0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	789b      	ldrb	r3, [r3, #2]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d10f      	bne.n	800a0dc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2205      	movs	r2, #5
 800a0c6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a0c8:	78fb      	ldrb	r3, [r7, #3]
 800a0ca:	b29a      	uxth	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a0dc:	2200      	movs	r2, #0
 800a0de:	2100      	movs	r1, #0
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 fb1b 	bl	800a71c <USBH_CtlReq>
 800a0e6:	4603      	mov	r3, r0
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	789b      	ldrb	r3, [r3, #2]
 800a100:	2b01      	cmp	r3, #1
 800a102:	d10e      	bne.n	800a122 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2209      	movs	r2, #9
 800a10e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	887a      	ldrh	r2, [r7, #2]
 800a114:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a122:	2200      	movs	r2, #0
 800a124:	2100      	movs	r1, #0
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 faf8 	bl	800a71c <USBH_CtlReq>
 800a12c:	4603      	mov	r3, r0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3708      	adds	r7, #8
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a136:	b580      	push	{r7, lr}
 800a138:	b082      	sub	sp, #8
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
 800a13e:	460b      	mov	r3, r1
 800a140:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	789b      	ldrb	r3, [r3, #2]
 800a146:	2b01      	cmp	r3, #1
 800a148:	d10f      	bne.n	800a16a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2203      	movs	r2, #3
 800a154:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a156:	78fb      	ldrb	r3, [r7, #3]
 800a158:	b29a      	uxth	r2, r3
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a16a:	2200      	movs	r2, #0
 800a16c:	2100      	movs	r1, #0
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 fad4 	bl	800a71c <USBH_CtlReq>
 800a174:	4603      	mov	r3, r0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3708      	adds	r7, #8
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b082      	sub	sp, #8
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
 800a186:	460b      	mov	r3, r1
 800a188:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	789b      	ldrb	r3, [r3, #2]
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d10f      	bne.n	800a1b2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2202      	movs	r2, #2
 800a196:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2201      	movs	r2, #1
 800a19c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a1a4:	78fb      	ldrb	r3, [r7, #3]
 800a1a6:	b29a      	uxth	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 fab0 	bl	800a71c <USBH_CtlReq>
 800a1bc:	4603      	mov	r3, r0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3708      	adds	r7, #8
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
	...

0800a1c8 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	781a      	ldrb	r2, [r3, #0]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	785a      	ldrb	r2, [r3, #1]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	3302      	adds	r3, #2
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	b29a      	uxth	r2, r3
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	3303      	adds	r3, #3
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	021b      	lsls	r3, r3, #8
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	b29a      	uxth	r2, r3
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	791a      	ldrb	r2, [r3, #4]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	795a      	ldrb	r2, [r3, #5]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	799a      	ldrb	r2, [r3, #6]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	79da      	ldrb	r2, [r3, #7]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	79db      	ldrb	r3, [r3, #7]
 800a226:	2b20      	cmp	r3, #32
 800a228:	dc0f      	bgt.n	800a24a <USBH_ParseDevDesc+0x82>
 800a22a:	2b08      	cmp	r3, #8
 800a22c:	db14      	blt.n	800a258 <USBH_ParseDevDesc+0x90>
 800a22e:	3b08      	subs	r3, #8
 800a230:	4a2d      	ldr	r2, [pc, #180]	; (800a2e8 <USBH_ParseDevDesc+0x120>)
 800a232:	fa22 f303 	lsr.w	r3, r2, r3
 800a236:	f003 0301 	and.w	r3, r3, #1
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	bf14      	ite	ne
 800a23e:	2301      	movne	r3, #1
 800a240:	2300      	moveq	r3, #0
 800a242:	b2db      	uxtb	r3, r3
 800a244:	2b00      	cmp	r3, #0
 800a246:	d102      	bne.n	800a24e <USBH_ParseDevDesc+0x86>
 800a248:	e006      	b.n	800a258 <USBH_ParseDevDesc+0x90>
 800a24a:	2b40      	cmp	r3, #64	; 0x40
 800a24c:	d104      	bne.n	800a258 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	79da      	ldrb	r2, [r3, #7]
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	71da      	strb	r2, [r3, #7]
      break;
 800a256:	e003      	b.n	800a260 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2240      	movs	r2, #64	; 0x40
 800a25c:	71da      	strb	r2, [r3, #7]
      break;
 800a25e:	bf00      	nop
  }

  if (length > 8U)
 800a260:	88fb      	ldrh	r3, [r7, #6]
 800a262:	2b08      	cmp	r3, #8
 800a264:	d939      	bls.n	800a2da <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	3308      	adds	r3, #8
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	b29a      	uxth	r2, r3
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	3309      	adds	r3, #9
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	b29b      	uxth	r3, r3
 800a276:	021b      	lsls	r3, r3, #8
 800a278:	b29b      	uxth	r3, r3
 800a27a:	4313      	orrs	r3, r2
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	330a      	adds	r3, #10
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	b29a      	uxth	r2, r3
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	330b      	adds	r3, #11
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	b29b      	uxth	r3, r3
 800a292:	021b      	lsls	r3, r3, #8
 800a294:	b29b      	uxth	r3, r3
 800a296:	4313      	orrs	r3, r2
 800a298:	b29a      	uxth	r2, r3
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	330c      	adds	r3, #12
 800a2a2:	781b      	ldrb	r3, [r3, #0]
 800a2a4:	b29a      	uxth	r2, r3
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	330d      	adds	r3, #13
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	021b      	lsls	r3, r3, #8
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	7b9a      	ldrb	r2, [r3, #14]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	7bda      	ldrb	r2, [r3, #15]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	7c1a      	ldrb	r2, [r3, #16]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	7c5a      	ldrb	r2, [r3, #17]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	745a      	strb	r2, [r3, #17]
  }
}
 800a2da:	bf00      	nop
 800a2dc:	3714      	adds	r7, #20
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop
 800a2e8:	01000101 	.word	0x01000101

0800a2ec <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b08c      	sub	sp, #48	; 0x30
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	4613      	mov	r3, r2
 800a2f8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a300:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a302:	2300      	movs	r3, #0
 800a304:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a30c:	2300      	movs	r3, #0
 800a30e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a312:	2300      	movs	r3, #0
 800a314:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	781a      	ldrb	r2, [r3, #0]
 800a320:	6a3b      	ldr	r3, [r7, #32]
 800a322:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	785a      	ldrb	r2, [r3, #1]
 800a328:	6a3b      	ldr	r3, [r7, #32]
 800a32a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	3302      	adds	r3, #2
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	b29a      	uxth	r2, r3
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	3303      	adds	r3, #3
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	021b      	lsls	r3, r3, #8
 800a33e:	b29b      	uxth	r3, r3
 800a340:	4313      	orrs	r3, r2
 800a342:	b29b      	uxth	r3, r3
 800a344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a348:	bf28      	it	cs
 800a34a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800a34e:	b29a      	uxth	r2, r3
 800a350:	6a3b      	ldr	r3, [r7, #32]
 800a352:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	791a      	ldrb	r2, [r3, #4]
 800a358:	6a3b      	ldr	r3, [r7, #32]
 800a35a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	795a      	ldrb	r2, [r3, #5]
 800a360:	6a3b      	ldr	r3, [r7, #32]
 800a362:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	799a      	ldrb	r2, [r3, #6]
 800a368:	6a3b      	ldr	r3, [r7, #32]
 800a36a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	79da      	ldrb	r2, [r3, #7]
 800a370:	6a3b      	ldr	r3, [r7, #32]
 800a372:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	7a1a      	ldrb	r2, [r3, #8]
 800a378:	6a3b      	ldr	r3, [r7, #32]
 800a37a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800a37c:	6a3b      	ldr	r3, [r7, #32]
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	2b09      	cmp	r3, #9
 800a382:	d002      	beq.n	800a38a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a384:	6a3b      	ldr	r3, [r7, #32]
 800a386:	2209      	movs	r2, #9
 800a388:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a38a:	88fb      	ldrh	r3, [r7, #6]
 800a38c:	2b09      	cmp	r3, #9
 800a38e:	f240 809d 	bls.w	800a4cc <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800a392:	2309      	movs	r3, #9
 800a394:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a396:	2300      	movs	r3, #0
 800a398:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a39a:	e081      	b.n	800a4a0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a39c:	f107 0316 	add.w	r3, r7, #22
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3a4:	f000 f99f 	bl	800a6e6 <USBH_GetNextDesc>
 800a3a8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ac:	785b      	ldrb	r3, [r3, #1]
 800a3ae:	2b04      	cmp	r3, #4
 800a3b0:	d176      	bne.n	800a4a0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	2b09      	cmp	r3, #9
 800a3b8:	d002      	beq.n	800a3c0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3bc:	2209      	movs	r2, #9
 800a3be:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a3c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3c4:	221a      	movs	r2, #26
 800a3c6:	fb02 f303 	mul.w	r3, r2, r3
 800a3ca:	3308      	adds	r3, #8
 800a3cc:	6a3a      	ldr	r2, [r7, #32]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	3302      	adds	r3, #2
 800a3d2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a3d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3d6:	69f8      	ldr	r0, [r7, #28]
 800a3d8:	f000 f87e 	bl	800a4d8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a3e6:	e043      	b.n	800a470 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a3e8:	f107 0316 	add.w	r3, r7, #22
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3f0:	f000 f979 	bl	800a6e6 <USBH_GetNextDesc>
 800a3f4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f8:	785b      	ldrb	r3, [r3, #1]
 800a3fa:	2b05      	cmp	r3, #5
 800a3fc:	d138      	bne.n	800a470 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	795b      	ldrb	r3, [r3, #5]
 800a402:	2b01      	cmp	r3, #1
 800a404:	d10f      	bne.n	800a426 <USBH_ParseCfgDesc+0x13a>
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	799b      	ldrb	r3, [r3, #6]
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d10b      	bne.n	800a426 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a40e:	69fb      	ldr	r3, [r7, #28]
 800a410:	79db      	ldrb	r3, [r3, #7]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d10f      	bne.n	800a436 <USBH_ParseCfgDesc+0x14a>
 800a416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	2b09      	cmp	r3, #9
 800a41c:	d00b      	beq.n	800a436 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800a41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a420:	2209      	movs	r2, #9
 800a422:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a424:	e007      	b.n	800a436 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800a426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	2b07      	cmp	r3, #7
 800a42c:	d004      	beq.n	800a438 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a430:	2207      	movs	r2, #7
 800a432:	701a      	strb	r2, [r3, #0]
 800a434:	e000      	b.n	800a438 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a436:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a43c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a440:	3201      	adds	r2, #1
 800a442:	00d2      	lsls	r2, r2, #3
 800a444:	211a      	movs	r1, #26
 800a446:	fb01 f303 	mul.w	r3, r1, r3
 800a44a:	4413      	add	r3, r2
 800a44c:	3308      	adds	r3, #8
 800a44e:	6a3a      	ldr	r2, [r7, #32]
 800a450:	4413      	add	r3, r2
 800a452:	3304      	adds	r3, #4
 800a454:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a458:	69b9      	ldr	r1, [r7, #24]
 800a45a:	68f8      	ldr	r0, [r7, #12]
 800a45c:	f000 f86b 	bl	800a536 <USBH_ParseEPDesc>
 800a460:	4603      	mov	r3, r0
 800a462:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a466:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a46a:	3301      	adds	r3, #1
 800a46c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a470:	69fb      	ldr	r3, [r7, #28]
 800a472:	791b      	ldrb	r3, [r3, #4]
 800a474:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a478:	429a      	cmp	r2, r3
 800a47a:	d204      	bcs.n	800a486 <USBH_ParseCfgDesc+0x19a>
 800a47c:	6a3b      	ldr	r3, [r7, #32]
 800a47e:	885a      	ldrh	r2, [r3, #2]
 800a480:	8afb      	ldrh	r3, [r7, #22]
 800a482:	429a      	cmp	r2, r3
 800a484:	d8b0      	bhi.n	800a3e8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	791b      	ldrb	r3, [r3, #4]
 800a48a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a48e:	429a      	cmp	r2, r3
 800a490:	d201      	bcs.n	800a496 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800a492:	2303      	movs	r3, #3
 800a494:	e01c      	b.n	800a4d0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800a496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a49a:	3301      	adds	r3, #1
 800a49c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a4a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d805      	bhi.n	800a4b4 <USBH_ParseCfgDesc+0x1c8>
 800a4a8:	6a3b      	ldr	r3, [r7, #32]
 800a4aa:	885a      	ldrh	r2, [r3, #2]
 800a4ac:	8afb      	ldrh	r3, [r7, #22]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	f63f af74 	bhi.w	800a39c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a4b4:	6a3b      	ldr	r3, [r7, #32]
 800a4b6:	791b      	ldrb	r3, [r3, #4]
 800a4b8:	2b02      	cmp	r3, #2
 800a4ba:	bf28      	it	cs
 800a4bc:	2302      	movcs	r3, #2
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d201      	bcs.n	800a4cc <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800a4c8:	2303      	movs	r3, #3
 800a4ca:	e001      	b.n	800a4d0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800a4cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3730      	adds	r7, #48	; 0x30
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	781a      	ldrb	r2, [r3, #0]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	785a      	ldrb	r2, [r3, #1]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	789a      	ldrb	r2, [r3, #2]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	78da      	ldrb	r2, [r3, #3]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	791a      	ldrb	r2, [r3, #4]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	795a      	ldrb	r2, [r3, #5]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	799a      	ldrb	r2, [r3, #6]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	79da      	ldrb	r2, [r3, #7]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	7a1a      	ldrb	r2, [r3, #8]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	721a      	strb	r2, [r3, #8]
}
 800a52a:	bf00      	nop
 800a52c:	370c      	adds	r7, #12
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800a536:	b480      	push	{r7}
 800a538:	b087      	sub	sp, #28
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	60f8      	str	r0, [r7, #12]
 800a53e:	60b9      	str	r1, [r7, #8]
 800a540:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a542:	2300      	movs	r3, #0
 800a544:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	781a      	ldrb	r2, [r3, #0]
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	785a      	ldrb	r2, [r3, #1]
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	789a      	ldrb	r2, [r3, #2]
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	78da      	ldrb	r2, [r3, #3]
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	3304      	adds	r3, #4
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	3305      	adds	r3, #5
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	b29b      	uxth	r3, r3
 800a576:	021b      	lsls	r3, r3, #8
 800a578:	b29b      	uxth	r3, r3
 800a57a:	4313      	orrs	r3, r2
 800a57c:	b29a      	uxth	r2, r3
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	799a      	ldrb	r2, [r3, #6]
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	889b      	ldrh	r3, [r3, #4]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d102      	bne.n	800a598 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800a592:	2303      	movs	r3, #3
 800a594:	75fb      	strb	r3, [r7, #23]
 800a596:	e033      	b.n	800a600 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	889b      	ldrh	r3, [r3, #4]
 800a59c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a5a0:	f023 0307 	bic.w	r3, r3, #7
 800a5a4:	b29a      	uxth	r2, r3
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	889b      	ldrh	r3, [r3, #4]
 800a5ae:	b21a      	sxth	r2, r3
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	3304      	adds	r3, #4
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	b299      	uxth	r1, r3
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	3305      	adds	r3, #5
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	021b      	lsls	r3, r3, #8
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	430b      	orrs	r3, r1
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d110      	bne.n	800a5f2 <USBH_ParseEPDesc+0xbc>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	3304      	adds	r3, #4
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	b299      	uxth	r1, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	3305      	adds	r3, #5
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	021b      	lsls	r3, r3, #8
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	430b      	orrs	r3, r1
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	b21b      	sxth	r3, r3
 800a5ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a5ee:	b21b      	sxth	r3, r3
 800a5f0:	e001      	b.n	800a5f6 <USBH_ParseEPDesc+0xc0>
 800a5f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	b21b      	sxth	r3, r3
 800a5fa:	b29a      	uxth	r2, r3
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a606:	2b00      	cmp	r3, #0
 800a608:	d116      	bne.n	800a638 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	78db      	ldrb	r3, [r3, #3]
 800a60e:	f003 0303 	and.w	r3, r3, #3
 800a612:	2b01      	cmp	r3, #1
 800a614:	d005      	beq.n	800a622 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	78db      	ldrb	r3, [r3, #3]
 800a61a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a61e:	2b03      	cmp	r3, #3
 800a620:	d127      	bne.n	800a672 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	799b      	ldrb	r3, [r3, #6]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d003      	beq.n	800a632 <USBH_ParseEPDesc+0xfc>
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	799b      	ldrb	r3, [r3, #6]
 800a62e:	2b10      	cmp	r3, #16
 800a630:	d91f      	bls.n	800a672 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a632:	2303      	movs	r3, #3
 800a634:	75fb      	strb	r3, [r7, #23]
 800a636:	e01c      	b.n	800a672 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	78db      	ldrb	r3, [r3, #3]
 800a63c:	f003 0303 	and.w	r3, r3, #3
 800a640:	2b01      	cmp	r3, #1
 800a642:	d10a      	bne.n	800a65a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	799b      	ldrb	r3, [r3, #6]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d003      	beq.n	800a654 <USBH_ParseEPDesc+0x11e>
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	799b      	ldrb	r3, [r3, #6]
 800a650:	2b10      	cmp	r3, #16
 800a652:	d90e      	bls.n	800a672 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a654:	2303      	movs	r3, #3
 800a656:	75fb      	strb	r3, [r7, #23]
 800a658:	e00b      	b.n	800a672 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	78db      	ldrb	r3, [r3, #3]
 800a65e:	f003 0303 	and.w	r3, r3, #3
 800a662:	2b03      	cmp	r3, #3
 800a664:	d105      	bne.n	800a672 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	799b      	ldrb	r3, [r3, #6]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d101      	bne.n	800a672 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a66e:	2303      	movs	r3, #3
 800a670:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800a672:	7dfb      	ldrb	r3, [r7, #23]
}
 800a674:	4618      	mov	r0, r3
 800a676:	371c      	adds	r7, #28
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a680:	b480      	push	{r7}
 800a682:	b087      	sub	sp, #28
 800a684:	af00      	add	r7, sp, #0
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	4613      	mov	r3, r2
 800a68c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	3301      	adds	r3, #1
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	2b03      	cmp	r3, #3
 800a696:	d120      	bne.n	800a6da <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	1e9a      	subs	r2, r3, #2
 800a69e:	88fb      	ldrh	r3, [r7, #6]
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	bf28      	it	cs
 800a6a4:	4613      	movcs	r3, r2
 800a6a6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	3302      	adds	r3, #2
 800a6ac:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	82fb      	strh	r3, [r7, #22]
 800a6b2:	e00b      	b.n	800a6cc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a6b4:	8afb      	ldrh	r3, [r7, #22]
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	781a      	ldrb	r2, [r3, #0]
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a6c6:	8afb      	ldrh	r3, [r7, #22]
 800a6c8:	3302      	adds	r3, #2
 800a6ca:	82fb      	strh	r3, [r7, #22]
 800a6cc:	8afa      	ldrh	r2, [r7, #22]
 800a6ce:	8abb      	ldrh	r3, [r7, #20]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d3ef      	bcc.n	800a6b4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	701a      	strb	r2, [r3, #0]
  }
}
 800a6da:	bf00      	nop
 800a6dc:	371c      	adds	r7, #28
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr

0800a6e6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a6e6:	b480      	push	{r7}
 800a6e8:	b085      	sub	sp, #20
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
 800a6ee:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	881a      	ldrh	r2, [r3, #0]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	4413      	add	r3, r2
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	4413      	add	r3, r2
 800a70c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a70e:	68fb      	ldr	r3, [r7, #12]
}
 800a710:	4618      	mov	r0, r3
 800a712:	3714      	adds	r7, #20
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b086      	sub	sp, #24
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	4613      	mov	r3, r2
 800a728:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a72a:	2301      	movs	r3, #1
 800a72c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	789b      	ldrb	r3, [r3, #2]
 800a732:	2b01      	cmp	r3, #1
 800a734:	d002      	beq.n	800a73c <USBH_CtlReq+0x20>
 800a736:	2b02      	cmp	r3, #2
 800a738:	d00f      	beq.n	800a75a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a73a:	e027      	b.n	800a78c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	88fa      	ldrh	r2, [r7, #6]
 800a746:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2201      	movs	r2, #1
 800a74c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2202      	movs	r2, #2
 800a752:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a754:	2301      	movs	r3, #1
 800a756:	75fb      	strb	r3, [r7, #23]
      break;
 800a758:	e018      	b.n	800a78c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a75a:	68f8      	ldr	r0, [r7, #12]
 800a75c:	f000 f81c 	bl	800a798 <USBH_HandleControl>
 800a760:	4603      	mov	r3, r0
 800a762:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a764:	7dfb      	ldrb	r3, [r7, #23]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d002      	beq.n	800a770 <USBH_CtlReq+0x54>
 800a76a:	7dfb      	ldrb	r3, [r7, #23]
 800a76c:	2b03      	cmp	r3, #3
 800a76e:	d106      	bne.n	800a77e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2201      	movs	r2, #1
 800a774:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2200      	movs	r2, #0
 800a77a:	761a      	strb	r2, [r3, #24]
      break;
 800a77c:	e005      	b.n	800a78a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a77e:	7dfb      	ldrb	r3, [r7, #23]
 800a780:	2b02      	cmp	r3, #2
 800a782:	d102      	bne.n	800a78a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2201      	movs	r2, #1
 800a788:	709a      	strb	r2, [r3, #2]
      break;
 800a78a:	bf00      	nop
  }
  return status;
 800a78c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3718      	adds	r7, #24
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
	...

0800a798 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b086      	sub	sp, #24
 800a79c:	af02      	add	r7, sp, #8
 800a79e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	7e1b      	ldrb	r3, [r3, #24]
 800a7ac:	3b01      	subs	r3, #1
 800a7ae:	2b0a      	cmp	r3, #10
 800a7b0:	f200 8156 	bhi.w	800aa60 <USBH_HandleControl+0x2c8>
 800a7b4:	a201      	add	r2, pc, #4	; (adr r2, 800a7bc <USBH_HandleControl+0x24>)
 800a7b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ba:	bf00      	nop
 800a7bc:	0800a7e9 	.word	0x0800a7e9
 800a7c0:	0800a803 	.word	0x0800a803
 800a7c4:	0800a86d 	.word	0x0800a86d
 800a7c8:	0800a893 	.word	0x0800a893
 800a7cc:	0800a8cb 	.word	0x0800a8cb
 800a7d0:	0800a8f5 	.word	0x0800a8f5
 800a7d4:	0800a947 	.word	0x0800a947
 800a7d8:	0800a969 	.word	0x0800a969
 800a7dc:	0800a9a5 	.word	0x0800a9a5
 800a7e0:	0800a9cb 	.word	0x0800a9cb
 800a7e4:	0800aa09 	.word	0x0800aa09
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f103 0110 	add.w	r1, r3, #16
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	795b      	ldrb	r3, [r3, #5]
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 f943 	bl	800aa80 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2202      	movs	r2, #2
 800a7fe:	761a      	strb	r2, [r3, #24]
      break;
 800a800:	e139      	b.n	800aa76 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	795b      	ldrb	r3, [r3, #5]
 800a806:	4619      	mov	r1, r3
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 fcc5 	bl	800b198 <USBH_LL_GetURBState>
 800a80e:	4603      	mov	r3, r0
 800a810:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a812:	7bbb      	ldrb	r3, [r7, #14]
 800a814:	2b01      	cmp	r3, #1
 800a816:	d11e      	bne.n	800a856 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	7c1b      	ldrb	r3, [r3, #16]
 800a81c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a820:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	8adb      	ldrh	r3, [r3, #22]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d00a      	beq.n	800a840 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a82a:	7b7b      	ldrb	r3, [r7, #13]
 800a82c:	2b80      	cmp	r3, #128	; 0x80
 800a82e:	d103      	bne.n	800a838 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2203      	movs	r2, #3
 800a834:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a836:	e115      	b.n	800aa64 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2205      	movs	r2, #5
 800a83c:	761a      	strb	r2, [r3, #24]
      break;
 800a83e:	e111      	b.n	800aa64 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a840:	7b7b      	ldrb	r3, [r7, #13]
 800a842:	2b80      	cmp	r3, #128	; 0x80
 800a844:	d103      	bne.n	800a84e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2209      	movs	r2, #9
 800a84a:	761a      	strb	r2, [r3, #24]
      break;
 800a84c:	e10a      	b.n	800aa64 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2207      	movs	r2, #7
 800a852:	761a      	strb	r2, [r3, #24]
      break;
 800a854:	e106      	b.n	800aa64 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a856:	7bbb      	ldrb	r3, [r7, #14]
 800a858:	2b04      	cmp	r3, #4
 800a85a:	d003      	beq.n	800a864 <USBH_HandleControl+0xcc>
 800a85c:	7bbb      	ldrb	r3, [r7, #14]
 800a85e:	2b02      	cmp	r3, #2
 800a860:	f040 8100 	bne.w	800aa64 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	220b      	movs	r2, #11
 800a868:	761a      	strb	r2, [r3, #24]
      break;
 800a86a:	e0fb      	b.n	800aa64 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a872:	b29a      	uxth	r2, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6899      	ldr	r1, [r3, #8]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	899a      	ldrh	r2, [r3, #12]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	791b      	ldrb	r3, [r3, #4]
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 f93a 	bl	800aafe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2204      	movs	r2, #4
 800a88e:	761a      	strb	r2, [r3, #24]
      break;
 800a890:	e0f1      	b.n	800aa76 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	791b      	ldrb	r3, [r3, #4]
 800a896:	4619      	mov	r1, r3
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 fc7d 	bl	800b198 <USBH_LL_GetURBState>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a8a2:	7bbb      	ldrb	r3, [r7, #14]
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d102      	bne.n	800a8ae <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2209      	movs	r2, #9
 800a8ac:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a8ae:	7bbb      	ldrb	r3, [r7, #14]
 800a8b0:	2b05      	cmp	r3, #5
 800a8b2:	d102      	bne.n	800a8ba <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a8b4:	2303      	movs	r3, #3
 800a8b6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a8b8:	e0d6      	b.n	800aa68 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a8ba:	7bbb      	ldrb	r3, [r7, #14]
 800a8bc:	2b04      	cmp	r3, #4
 800a8be:	f040 80d3 	bne.w	800aa68 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	220b      	movs	r2, #11
 800a8c6:	761a      	strb	r2, [r3, #24]
      break;
 800a8c8:	e0ce      	b.n	800aa68 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6899      	ldr	r1, [r3, #8]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	899a      	ldrh	r2, [r3, #12]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	795b      	ldrb	r3, [r3, #5]
 800a8d6:	2001      	movs	r0, #1
 800a8d8:	9000      	str	r0, [sp, #0]
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 f8ea 	bl	800aab4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a8e6:	b29a      	uxth	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2206      	movs	r2, #6
 800a8f0:	761a      	strb	r2, [r3, #24]
      break;
 800a8f2:	e0c0      	b.n	800aa76 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	795b      	ldrb	r3, [r3, #5]
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 fc4c 	bl	800b198 <USBH_LL_GetURBState>
 800a900:	4603      	mov	r3, r0
 800a902:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a904:	7bbb      	ldrb	r3, [r7, #14]
 800a906:	2b01      	cmp	r3, #1
 800a908:	d103      	bne.n	800a912 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2207      	movs	r2, #7
 800a90e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a910:	e0ac      	b.n	800aa6c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a912:	7bbb      	ldrb	r3, [r7, #14]
 800a914:	2b05      	cmp	r3, #5
 800a916:	d105      	bne.n	800a924 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	220c      	movs	r2, #12
 800a91c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a91e:	2303      	movs	r3, #3
 800a920:	73fb      	strb	r3, [r7, #15]
      break;
 800a922:	e0a3      	b.n	800aa6c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a924:	7bbb      	ldrb	r3, [r7, #14]
 800a926:	2b02      	cmp	r3, #2
 800a928:	d103      	bne.n	800a932 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2205      	movs	r2, #5
 800a92e:	761a      	strb	r2, [r3, #24]
      break;
 800a930:	e09c      	b.n	800aa6c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a932:	7bbb      	ldrb	r3, [r7, #14]
 800a934:	2b04      	cmp	r3, #4
 800a936:	f040 8099 	bne.w	800aa6c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	220b      	movs	r2, #11
 800a93e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a940:	2302      	movs	r3, #2
 800a942:	73fb      	strb	r3, [r7, #15]
      break;
 800a944:	e092      	b.n	800aa6c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	791b      	ldrb	r3, [r3, #4]
 800a94a:	2200      	movs	r2, #0
 800a94c:	2100      	movs	r1, #0
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 f8d5 	bl	800aafe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a95a:	b29a      	uxth	r2, r3
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2208      	movs	r2, #8
 800a964:	761a      	strb	r2, [r3, #24]

      break;
 800a966:	e086      	b.n	800aa76 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	791b      	ldrb	r3, [r3, #4]
 800a96c:	4619      	mov	r1, r3
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 fc12 	bl	800b198 <USBH_LL_GetURBState>
 800a974:	4603      	mov	r3, r0
 800a976:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a978:	7bbb      	ldrb	r3, [r7, #14]
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d105      	bne.n	800a98a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	220d      	movs	r2, #13
 800a982:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a984:	2300      	movs	r3, #0
 800a986:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a988:	e072      	b.n	800aa70 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a98a:	7bbb      	ldrb	r3, [r7, #14]
 800a98c:	2b04      	cmp	r3, #4
 800a98e:	d103      	bne.n	800a998 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	220b      	movs	r2, #11
 800a994:	761a      	strb	r2, [r3, #24]
      break;
 800a996:	e06b      	b.n	800aa70 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a998:	7bbb      	ldrb	r3, [r7, #14]
 800a99a:	2b05      	cmp	r3, #5
 800a99c:	d168      	bne.n	800aa70 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a99e:	2303      	movs	r3, #3
 800a9a0:	73fb      	strb	r3, [r7, #15]
      break;
 800a9a2:	e065      	b.n	800aa70 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	795b      	ldrb	r3, [r3, #5]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	9200      	str	r2, [sp, #0]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	2100      	movs	r1, #0
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 f87f 	bl	800aab4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a9bc:	b29a      	uxth	r2, r3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	220a      	movs	r2, #10
 800a9c6:	761a      	strb	r2, [r3, #24]
      break;
 800a9c8:	e055      	b.n	800aa76 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	795b      	ldrb	r3, [r3, #5]
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 fbe1 	bl	800b198 <USBH_LL_GetURBState>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a9da:	7bbb      	ldrb	r3, [r7, #14]
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d105      	bne.n	800a9ec <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	220d      	movs	r2, #13
 800a9e8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a9ea:	e043      	b.n	800aa74 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a9ec:	7bbb      	ldrb	r3, [r7, #14]
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d103      	bne.n	800a9fa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2209      	movs	r2, #9
 800a9f6:	761a      	strb	r2, [r3, #24]
      break;
 800a9f8:	e03c      	b.n	800aa74 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a9fa:	7bbb      	ldrb	r3, [r7, #14]
 800a9fc:	2b04      	cmp	r3, #4
 800a9fe:	d139      	bne.n	800aa74 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	220b      	movs	r2, #11
 800aa04:	761a      	strb	r2, [r3, #24]
      break;
 800aa06:	e035      	b.n	800aa74 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	7e5b      	ldrb	r3, [r3, #25]
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	b2da      	uxtb	r2, r3
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	765a      	strb	r2, [r3, #25]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	7e5b      	ldrb	r3, [r3, #25]
 800aa18:	2b02      	cmp	r3, #2
 800aa1a:	d806      	bhi.n	800aa2a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2201      	movs	r2, #1
 800aa26:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800aa28:	e025      	b.n	800aa76 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa30:	2106      	movs	r1, #6
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	795b      	ldrb	r3, [r3, #5]
 800aa40:	4619      	mov	r1, r3
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 f90c 	bl	800ac60 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	791b      	ldrb	r3, [r3, #4]
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 f906 	bl	800ac60 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800aa5a:	2302      	movs	r3, #2
 800aa5c:	73fb      	strb	r3, [r7, #15]
      break;
 800aa5e:	e00a      	b.n	800aa76 <USBH_HandleControl+0x2de>

    default:
      break;
 800aa60:	bf00      	nop
 800aa62:	e008      	b.n	800aa76 <USBH_HandleControl+0x2de>
      break;
 800aa64:	bf00      	nop
 800aa66:	e006      	b.n	800aa76 <USBH_HandleControl+0x2de>
      break;
 800aa68:	bf00      	nop
 800aa6a:	e004      	b.n	800aa76 <USBH_HandleControl+0x2de>
      break;
 800aa6c:	bf00      	nop
 800aa6e:	e002      	b.n	800aa76 <USBH_HandleControl+0x2de>
      break;
 800aa70:	bf00      	nop
 800aa72:	e000      	b.n	800aa76 <USBH_HandleControl+0x2de>
      break;
 800aa74:	bf00      	nop
  }

  return status;
 800aa76:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3710      	adds	r7, #16
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b088      	sub	sp, #32
 800aa84:	af04      	add	r7, sp, #16
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa8e:	79f9      	ldrb	r1, [r7, #7]
 800aa90:	2300      	movs	r3, #0
 800aa92:	9303      	str	r3, [sp, #12]
 800aa94:	2308      	movs	r3, #8
 800aa96:	9302      	str	r3, [sp, #8]
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	9301      	str	r3, [sp, #4]
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	68f8      	ldr	r0, [r7, #12]
 800aaa6:	f000 fb46 	bl	800b136 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3710      	adds	r7, #16
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b088      	sub	sp, #32
 800aab8:	af04      	add	r7, sp, #16
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	4611      	mov	r1, r2
 800aac0:	461a      	mov	r2, r3
 800aac2:	460b      	mov	r3, r1
 800aac4:	80fb      	strh	r3, [r7, #6]
 800aac6:	4613      	mov	r3, r2
 800aac8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d001      	beq.n	800aad8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800aad4:	2300      	movs	r3, #0
 800aad6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aad8:	7979      	ldrb	r1, [r7, #5]
 800aada:	7e3b      	ldrb	r3, [r7, #24]
 800aadc:	9303      	str	r3, [sp, #12]
 800aade:	88fb      	ldrh	r3, [r7, #6]
 800aae0:	9302      	str	r3, [sp, #8]
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	9301      	str	r3, [sp, #4]
 800aae6:	2301      	movs	r3, #1
 800aae8:	9300      	str	r3, [sp, #0]
 800aaea:	2300      	movs	r3, #0
 800aaec:	2200      	movs	r2, #0
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	f000 fb21 	bl	800b136 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3710      	adds	r7, #16
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b088      	sub	sp, #32
 800ab02:	af04      	add	r7, sp, #16
 800ab04:	60f8      	str	r0, [r7, #12]
 800ab06:	60b9      	str	r1, [r7, #8]
 800ab08:	4611      	mov	r1, r2
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	80fb      	strh	r3, [r7, #6]
 800ab10:	4613      	mov	r3, r2
 800ab12:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ab14:	7979      	ldrb	r1, [r7, #5]
 800ab16:	2300      	movs	r3, #0
 800ab18:	9303      	str	r3, [sp, #12]
 800ab1a:	88fb      	ldrh	r3, [r7, #6]
 800ab1c:	9302      	str	r3, [sp, #8]
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	9301      	str	r3, [sp, #4]
 800ab22:	2301      	movs	r3, #1
 800ab24:	9300      	str	r3, [sp, #0]
 800ab26:	2300      	movs	r3, #0
 800ab28:	2201      	movs	r2, #1
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f000 fb03 	bl	800b136 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ab30:	2300      	movs	r3, #0

}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3710      	adds	r7, #16
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ab3a:	b580      	push	{r7, lr}
 800ab3c:	b088      	sub	sp, #32
 800ab3e:	af04      	add	r7, sp, #16
 800ab40:	60f8      	str	r0, [r7, #12]
 800ab42:	60b9      	str	r1, [r7, #8]
 800ab44:	4611      	mov	r1, r2
 800ab46:	461a      	mov	r2, r3
 800ab48:	460b      	mov	r3, r1
 800ab4a:	80fb      	strh	r3, [r7, #6]
 800ab4c:	4613      	mov	r3, r2
 800ab4e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d001      	beq.n	800ab5e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ab5e:	7979      	ldrb	r1, [r7, #5]
 800ab60:	7e3b      	ldrb	r3, [r7, #24]
 800ab62:	9303      	str	r3, [sp, #12]
 800ab64:	88fb      	ldrh	r3, [r7, #6]
 800ab66:	9302      	str	r3, [sp, #8]
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	9301      	str	r3, [sp, #4]
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	2302      	movs	r3, #2
 800ab72:	2200      	movs	r2, #0
 800ab74:	68f8      	ldr	r0, [r7, #12]
 800ab76:	f000 fade 	bl	800b136 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ab7a:	2300      	movs	r3, #0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3710      	adds	r7, #16
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b088      	sub	sp, #32
 800ab88:	af04      	add	r7, sp, #16
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	4611      	mov	r1, r2
 800ab90:	461a      	mov	r2, r3
 800ab92:	460b      	mov	r3, r1
 800ab94:	80fb      	strh	r3, [r7, #6]
 800ab96:	4613      	mov	r3, r2
 800ab98:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ab9a:	7979      	ldrb	r1, [r7, #5]
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	9303      	str	r3, [sp, #12]
 800aba0:	88fb      	ldrh	r3, [r7, #6]
 800aba2:	9302      	str	r3, [sp, #8]
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	9301      	str	r3, [sp, #4]
 800aba8:	2301      	movs	r3, #1
 800abaa:	9300      	str	r3, [sp, #0]
 800abac:	2302      	movs	r3, #2
 800abae:	2201      	movs	r2, #1
 800abb0:	68f8      	ldr	r0, [r7, #12]
 800abb2:	f000 fac0 	bl	800b136 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800abb6:	2300      	movs	r3, #0
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3710      	adds	r7, #16
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af04      	add	r7, sp, #16
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	4608      	mov	r0, r1
 800abca:	4611      	mov	r1, r2
 800abcc:	461a      	mov	r2, r3
 800abce:	4603      	mov	r3, r0
 800abd0:	70fb      	strb	r3, [r7, #3]
 800abd2:	460b      	mov	r3, r1
 800abd4:	70bb      	strb	r3, [r7, #2]
 800abd6:	4613      	mov	r3, r2
 800abd8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800abda:	7878      	ldrb	r0, [r7, #1]
 800abdc:	78ba      	ldrb	r2, [r7, #2]
 800abde:	78f9      	ldrb	r1, [r7, #3]
 800abe0:	8b3b      	ldrh	r3, [r7, #24]
 800abe2:	9302      	str	r3, [sp, #8]
 800abe4:	7d3b      	ldrb	r3, [r7, #20]
 800abe6:	9301      	str	r3, [sp, #4]
 800abe8:	7c3b      	ldrb	r3, [r7, #16]
 800abea:	9300      	str	r3, [sp, #0]
 800abec:	4603      	mov	r3, r0
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 fa53 	bl	800b09a <USBH_LL_OpenPipe>

  return USBH_OK;
 800abf4:	2300      	movs	r3, #0
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3708      	adds	r7, #8
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}

0800abfe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800abfe:	b580      	push	{r7, lr}
 800ac00:	b082      	sub	sp, #8
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
 800ac06:	460b      	mov	r3, r1
 800ac08:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ac0a:	78fb      	ldrb	r3, [r7, #3]
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 fa72 	bl	800b0f8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3708      	adds	r7, #8
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b084      	sub	sp, #16
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
 800ac26:	460b      	mov	r3, r1
 800ac28:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 f836 	bl	800ac9c <USBH_GetFreePipe>
 800ac30:	4603      	mov	r3, r0
 800ac32:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ac34:	89fb      	ldrh	r3, [r7, #14]
 800ac36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d00a      	beq.n	800ac54 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ac3e:	78fa      	ldrb	r2, [r7, #3]
 800ac40:	89fb      	ldrh	r3, [r7, #14]
 800ac42:	f003 030f 	and.w	r3, r3, #15
 800ac46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac4a:	6879      	ldr	r1, [r7, #4]
 800ac4c:	33e0      	adds	r3, #224	; 0xe0
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	440b      	add	r3, r1
 800ac52:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ac54:	89fb      	ldrh	r3, [r7, #14]
 800ac56:	b2db      	uxtb	r3, r3
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b083      	sub	sp, #12
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	460b      	mov	r3, r1
 800ac6a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ac6c:	78fb      	ldrb	r3, [r7, #3]
 800ac6e:	2b0f      	cmp	r3, #15
 800ac70:	d80d      	bhi.n	800ac8e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ac72:	78fb      	ldrb	r3, [r7, #3]
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	33e0      	adds	r3, #224	; 0xe0
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	4413      	add	r3, r2
 800ac7c:	685a      	ldr	r2, [r3, #4]
 800ac7e:	78fb      	ldrb	r3, [r7, #3]
 800ac80:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ac84:	6879      	ldr	r1, [r7, #4]
 800ac86:	33e0      	adds	r3, #224	; 0xe0
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	440b      	add	r3, r1
 800ac8c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ac8e:	2300      	movs	r3, #0
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	370c      	adds	r7, #12
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800aca4:	2300      	movs	r3, #0
 800aca6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800aca8:	2300      	movs	r3, #0
 800acaa:	73fb      	strb	r3, [r7, #15]
 800acac:	e00f      	b.n	800acce <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800acae:	7bfb      	ldrb	r3, [r7, #15]
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	33e0      	adds	r3, #224	; 0xe0
 800acb4:	009b      	lsls	r3, r3, #2
 800acb6:	4413      	add	r3, r2
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d102      	bne.n	800acc8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800acc2:	7bfb      	ldrb	r3, [r7, #15]
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	e007      	b.n	800acd8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800acc8:	7bfb      	ldrb	r3, [r7, #15]
 800acca:	3301      	adds	r3, #1
 800accc:	73fb      	strb	r3, [r7, #15]
 800acce:	7bfb      	ldrb	r3, [r7, #15]
 800acd0:	2b0f      	cmp	r3, #15
 800acd2:	d9ec      	bls.n	800acae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800acd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3714      	adds	r7, #20
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ace8:	2201      	movs	r2, #1
 800acea:	490e      	ldr	r1, [pc, #56]	; (800ad24 <MX_USB_HOST_Init+0x40>)
 800acec:	480e      	ldr	r0, [pc, #56]	; (800ad28 <MX_USB_HOST_Init+0x44>)
 800acee:	f7fe fba5 	bl	800943c <USBH_Init>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d001      	beq.n	800acfc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800acf8:	f7f6 f96c 	bl	8000fd4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800acfc:	490b      	ldr	r1, [pc, #44]	; (800ad2c <MX_USB_HOST_Init+0x48>)
 800acfe:	480a      	ldr	r0, [pc, #40]	; (800ad28 <MX_USB_HOST_Init+0x44>)
 800ad00:	f7fe fc2a 	bl	8009558 <USBH_RegisterClass>
 800ad04:	4603      	mov	r3, r0
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d001      	beq.n	800ad0e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ad0a:	f7f6 f963 	bl	8000fd4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ad0e:	4806      	ldr	r0, [pc, #24]	; (800ad28 <MX_USB_HOST_Init+0x44>)
 800ad10:	f7fe fcae 	bl	8009670 <USBH_Start>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d001      	beq.n	800ad1e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ad1a:	f7f6 f95b 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ad1e:	bf00      	nop
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	0800ad45 	.word	0x0800ad45
 800ad28:	20000328 	.word	0x20000328
 800ad2c:	20000010 	.word	0x20000010

0800ad30 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ad34:	4802      	ldr	r0, [pc, #8]	; (800ad40 <MX_USB_HOST_Process+0x10>)
 800ad36:	f7fe fcab 	bl	8009690 <USBH_Process>
}
 800ad3a:	bf00      	nop
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	20000328 	.word	0x20000328

0800ad44 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ad50:	78fb      	ldrb	r3, [r7, #3]
 800ad52:	3b01      	subs	r3, #1
 800ad54:	2b04      	cmp	r3, #4
 800ad56:	d819      	bhi.n	800ad8c <USBH_UserProcess+0x48>
 800ad58:	a201      	add	r2, pc, #4	; (adr r2, 800ad60 <USBH_UserProcess+0x1c>)
 800ad5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad5e:	bf00      	nop
 800ad60:	0800ad8d 	.word	0x0800ad8d
 800ad64:	0800ad7d 	.word	0x0800ad7d
 800ad68:	0800ad8d 	.word	0x0800ad8d
 800ad6c:	0800ad85 	.word	0x0800ad85
 800ad70:	0800ad75 	.word	0x0800ad75
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ad74:	4b09      	ldr	r3, [pc, #36]	; (800ad9c <USBH_UserProcess+0x58>)
 800ad76:	2203      	movs	r2, #3
 800ad78:	701a      	strb	r2, [r3, #0]
  break;
 800ad7a:	e008      	b.n	800ad8e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ad7c:	4b07      	ldr	r3, [pc, #28]	; (800ad9c <USBH_UserProcess+0x58>)
 800ad7e:	2202      	movs	r2, #2
 800ad80:	701a      	strb	r2, [r3, #0]
  break;
 800ad82:	e004      	b.n	800ad8e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ad84:	4b05      	ldr	r3, [pc, #20]	; (800ad9c <USBH_UserProcess+0x58>)
 800ad86:	2201      	movs	r2, #1
 800ad88:	701a      	strb	r2, [r3, #0]
  break;
 800ad8a:	e000      	b.n	800ad8e <USBH_UserProcess+0x4a>

  default:
  break;
 800ad8c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ad8e:	bf00      	nop
 800ad90:	370c      	adds	r7, #12
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop
 800ad9c:	20000700 	.word	0x20000700

0800ada0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b08a      	sub	sp, #40	; 0x28
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ada8:	f107 0314 	add.w	r3, r7, #20
 800adac:	2200      	movs	r2, #0
 800adae:	601a      	str	r2, [r3, #0]
 800adb0:	605a      	str	r2, [r3, #4]
 800adb2:	609a      	str	r2, [r3, #8]
 800adb4:	60da      	str	r2, [r3, #12]
 800adb6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800adc0:	d147      	bne.n	800ae52 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800adc2:	2300      	movs	r3, #0
 800adc4:	613b      	str	r3, [r7, #16]
 800adc6:	4b25      	ldr	r3, [pc, #148]	; (800ae5c <HAL_HCD_MspInit+0xbc>)
 800adc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adca:	4a24      	ldr	r2, [pc, #144]	; (800ae5c <HAL_HCD_MspInit+0xbc>)
 800adcc:	f043 0301 	orr.w	r3, r3, #1
 800add0:	6313      	str	r3, [r2, #48]	; 0x30
 800add2:	4b22      	ldr	r3, [pc, #136]	; (800ae5c <HAL_HCD_MspInit+0xbc>)
 800add4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800add6:	f003 0301 	and.w	r3, r3, #1
 800adda:	613b      	str	r3, [r7, #16]
 800addc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800adde:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ade2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ade4:	2300      	movs	r3, #0
 800ade6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ade8:	2300      	movs	r3, #0
 800adea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800adec:	f107 0314 	add.w	r3, r7, #20
 800adf0:	4619      	mov	r1, r3
 800adf2:	481b      	ldr	r0, [pc, #108]	; (800ae60 <HAL_HCD_MspInit+0xc0>)
 800adf4:	f7f6 fdf8 	bl	80019e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800adf8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800adfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adfe:	2302      	movs	r3, #2
 800ae00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae02:	2300      	movs	r3, #0
 800ae04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae06:	2300      	movs	r3, #0
 800ae08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ae0a:	230a      	movs	r3, #10
 800ae0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae0e:	f107 0314 	add.w	r3, r7, #20
 800ae12:	4619      	mov	r1, r3
 800ae14:	4812      	ldr	r0, [pc, #72]	; (800ae60 <HAL_HCD_MspInit+0xc0>)
 800ae16:	f7f6 fde7 	bl	80019e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ae1a:	4b10      	ldr	r3, [pc, #64]	; (800ae5c <HAL_HCD_MspInit+0xbc>)
 800ae1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae1e:	4a0f      	ldr	r2, [pc, #60]	; (800ae5c <HAL_HCD_MspInit+0xbc>)
 800ae20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae24:	6353      	str	r3, [r2, #52]	; 0x34
 800ae26:	2300      	movs	r3, #0
 800ae28:	60fb      	str	r3, [r7, #12]
 800ae2a:	4b0c      	ldr	r3, [pc, #48]	; (800ae5c <HAL_HCD_MspInit+0xbc>)
 800ae2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae2e:	4a0b      	ldr	r2, [pc, #44]	; (800ae5c <HAL_HCD_MspInit+0xbc>)
 800ae30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ae34:	6453      	str	r3, [r2, #68]	; 0x44
 800ae36:	4b09      	ldr	r3, [pc, #36]	; (800ae5c <HAL_HCD_MspInit+0xbc>)
 800ae38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae3e:	60fb      	str	r3, [r7, #12]
 800ae40:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ae42:	2200      	movs	r2, #0
 800ae44:	2100      	movs	r1, #0
 800ae46:	2043      	movs	r0, #67	; 0x43
 800ae48:	f7f6 fd05 	bl	8001856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ae4c:	2043      	movs	r0, #67	; 0x43
 800ae4e:	f7f6 fd1e 	bl	800188e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ae52:	bf00      	nop
 800ae54:	3728      	adds	r7, #40	; 0x28
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	40023800 	.word	0x40023800
 800ae60:	40020000 	.word	0x40020000

0800ae64 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7fe ffeb 	bl	8009e4e <USBH_LL_IncTimer>
}
 800ae78:	bf00      	nop
 800ae7a:	3708      	adds	r7, #8
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7ff f823 	bl	8009eda <USBH_LL_Connect>
}
 800ae94:	bf00      	nop
 800ae96:	3708      	adds	r7, #8
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7ff f82c 	bl	8009f08 <USBH_LL_Disconnect>
}
 800aeb0:	bf00      	nop
 800aeb2:	3708      	adds	r7, #8
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	460b      	mov	r3, r1
 800aec2:	70fb      	strb	r3, [r7, #3]
 800aec4:	4613      	mov	r3, r2
 800aec6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800aec8:	bf00      	nop
 800aeca:	370c      	adds	r7, #12
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7fe ffdd 	bl	8009ea2 <USBH_LL_PortEnabled>
}
 800aee8:	bf00      	nop
 800aeea:	3708      	adds	r7, #8
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aefe:	4618      	mov	r0, r3
 800af00:	f7fe ffdd 	bl	8009ebe <USBH_LL_PortDisabled>
}
 800af04:	bf00      	nop
 800af06:	3708      	adds	r7, #8
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	d12a      	bne.n	800af74 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800af1e:	4a18      	ldr	r2, [pc, #96]	; (800af80 <USBH_LL_Init+0x74>)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	4a15      	ldr	r2, [pc, #84]	; (800af80 <USBH_LL_Init+0x74>)
 800af2a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800af2e:	4b14      	ldr	r3, [pc, #80]	; (800af80 <USBH_LL_Init+0x74>)
 800af30:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800af34:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800af36:	4b12      	ldr	r3, [pc, #72]	; (800af80 <USBH_LL_Init+0x74>)
 800af38:	2208      	movs	r2, #8
 800af3a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800af3c:	4b10      	ldr	r3, [pc, #64]	; (800af80 <USBH_LL_Init+0x74>)
 800af3e:	2201      	movs	r2, #1
 800af40:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800af42:	4b0f      	ldr	r3, [pc, #60]	; (800af80 <USBH_LL_Init+0x74>)
 800af44:	2200      	movs	r2, #0
 800af46:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800af48:	4b0d      	ldr	r3, [pc, #52]	; (800af80 <USBH_LL_Init+0x74>)
 800af4a:	2202      	movs	r2, #2
 800af4c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800af4e:	4b0c      	ldr	r3, [pc, #48]	; (800af80 <USBH_LL_Init+0x74>)
 800af50:	2200      	movs	r2, #0
 800af52:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800af54:	480a      	ldr	r0, [pc, #40]	; (800af80 <USBH_LL_Init+0x74>)
 800af56:	f7f6 fefc 	bl	8001d52 <HAL_HCD_Init>
 800af5a:	4603      	mov	r3, r0
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d001      	beq.n	800af64 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800af60:	f7f6 f838 	bl	8000fd4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800af64:	4806      	ldr	r0, [pc, #24]	; (800af80 <USBH_LL_Init+0x74>)
 800af66:	f7f7 fae0 	bl	800252a <HAL_HCD_GetCurrentFrame>
 800af6a:	4603      	mov	r3, r0
 800af6c:	4619      	mov	r1, r3
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f7fe ff5e 	bl	8009e30 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800af74:	2300      	movs	r3, #0
}
 800af76:	4618      	mov	r0, r3
 800af78:	3708      	adds	r7, #8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	20000704 	.word	0x20000704

0800af84 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af8c:	2300      	movs	r3, #0
 800af8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af90:	2300      	movs	r3, #0
 800af92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7f7 fa4f 	bl	800243e <HAL_HCD_Start>
 800afa0:	4603      	mov	r3, r0
 800afa2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800afa4:	7bfb      	ldrb	r3, [r7, #15]
 800afa6:	4618      	mov	r0, r3
 800afa8:	f000 f95c 	bl	800b264 <USBH_Get_USB_Status>
 800afac:	4603      	mov	r3, r0
 800afae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3710      	adds	r7, #16
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b084      	sub	sp, #16
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afc2:	2300      	movs	r3, #0
 800afc4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800afc6:	2300      	movs	r3, #0
 800afc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7f7 fa57 	bl	8002484 <HAL_HCD_Stop>
 800afd6:	4603      	mov	r3, r0
 800afd8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800afda:	7bfb      	ldrb	r3, [r7, #15]
 800afdc:	4618      	mov	r0, r3
 800afde:	f000 f941 	bl	800b264 <USBH_Get_USB_Status>
 800afe2:	4603      	mov	r3, r0
 800afe4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afe6:	7bbb      	ldrb	r3, [r7, #14]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3710      	adds	r7, #16
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800aff8:	2301      	movs	r3, #1
 800affa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b002:	4618      	mov	r0, r3
 800b004:	f7f7 fa9f 	bl	8002546 <HAL_HCD_GetCurrentSpeed>
 800b008:	4603      	mov	r3, r0
 800b00a:	2b02      	cmp	r3, #2
 800b00c:	d00c      	beq.n	800b028 <USBH_LL_GetSpeed+0x38>
 800b00e:	2b02      	cmp	r3, #2
 800b010:	d80d      	bhi.n	800b02e <USBH_LL_GetSpeed+0x3e>
 800b012:	2b00      	cmp	r3, #0
 800b014:	d002      	beq.n	800b01c <USBH_LL_GetSpeed+0x2c>
 800b016:	2b01      	cmp	r3, #1
 800b018:	d003      	beq.n	800b022 <USBH_LL_GetSpeed+0x32>
 800b01a:	e008      	b.n	800b02e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b01c:	2300      	movs	r3, #0
 800b01e:	73fb      	strb	r3, [r7, #15]
    break;
 800b020:	e008      	b.n	800b034 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b022:	2301      	movs	r3, #1
 800b024:	73fb      	strb	r3, [r7, #15]
    break;
 800b026:	e005      	b.n	800b034 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b028:	2302      	movs	r3, #2
 800b02a:	73fb      	strb	r3, [r7, #15]
    break;
 800b02c:	e002      	b.n	800b034 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b02e:	2301      	movs	r3, #1
 800b030:	73fb      	strb	r3, [r7, #15]
    break;
 800b032:	bf00      	nop
  }
  return  speed;
 800b034:	7bfb      	ldrb	r3, [r7, #15]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3710      	adds	r7, #16
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b084      	sub	sp, #16
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b046:	2300      	movs	r3, #0
 800b048:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b04a:	2300      	movs	r3, #0
 800b04c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b054:	4618      	mov	r0, r3
 800b056:	f7f7 fa32 	bl	80024be <HAL_HCD_ResetPort>
 800b05a:	4603      	mov	r3, r0
 800b05c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b05e:	7bfb      	ldrb	r3, [r7, #15]
 800b060:	4618      	mov	r0, r3
 800b062:	f000 f8ff 	bl	800b264 <USBH_Get_USB_Status>
 800b066:	4603      	mov	r3, r0
 800b068:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b06a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3710      	adds	r7, #16
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	460b      	mov	r3, r1
 800b07e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b086:	78fa      	ldrb	r2, [r7, #3]
 800b088:	4611      	mov	r1, r2
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7f7 fa39 	bl	8002502 <HAL_HCD_HC_GetXferCount>
 800b090:	4603      	mov	r3, r0
}
 800b092:	4618      	mov	r0, r3
 800b094:	3708      	adds	r7, #8
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b09a:	b590      	push	{r4, r7, lr}
 800b09c:	b089      	sub	sp, #36	; 0x24
 800b09e:	af04      	add	r7, sp, #16
 800b0a0:	6078      	str	r0, [r7, #4]
 800b0a2:	4608      	mov	r0, r1
 800b0a4:	4611      	mov	r1, r2
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	70fb      	strb	r3, [r7, #3]
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	70bb      	strb	r3, [r7, #2]
 800b0b0:	4613      	mov	r3, r2
 800b0b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b0c2:	787c      	ldrb	r4, [r7, #1]
 800b0c4:	78ba      	ldrb	r2, [r7, #2]
 800b0c6:	78f9      	ldrb	r1, [r7, #3]
 800b0c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b0ca:	9302      	str	r3, [sp, #8]
 800b0cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b0d0:	9301      	str	r3, [sp, #4]
 800b0d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b0d6:	9300      	str	r3, [sp, #0]
 800b0d8:	4623      	mov	r3, r4
 800b0da:	f7f6 fe9c 	bl	8001e16 <HAL_HCD_HC_Init>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b0e2:	7bfb      	ldrb	r3, [r7, #15]
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f000 f8bd 	bl	800b264 <USBH_Get_USB_Status>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3714      	adds	r7, #20
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd90      	pop	{r4, r7, pc}

0800b0f8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	460b      	mov	r3, r1
 800b102:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b104:	2300      	movs	r3, #0
 800b106:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b108:	2300      	movs	r3, #0
 800b10a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b112:	78fa      	ldrb	r2, [r7, #3]
 800b114:	4611      	mov	r1, r2
 800b116:	4618      	mov	r0, r3
 800b118:	f7f6 ff0c 	bl	8001f34 <HAL_HCD_HC_Halt>
 800b11c:	4603      	mov	r3, r0
 800b11e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b120:	7bfb      	ldrb	r3, [r7, #15]
 800b122:	4618      	mov	r0, r3
 800b124:	f000 f89e 	bl	800b264 <USBH_Get_USB_Status>
 800b128:	4603      	mov	r3, r0
 800b12a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b12c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b136:	b590      	push	{r4, r7, lr}
 800b138:	b089      	sub	sp, #36	; 0x24
 800b13a:	af04      	add	r7, sp, #16
 800b13c:	6078      	str	r0, [r7, #4]
 800b13e:	4608      	mov	r0, r1
 800b140:	4611      	mov	r1, r2
 800b142:	461a      	mov	r2, r3
 800b144:	4603      	mov	r3, r0
 800b146:	70fb      	strb	r3, [r7, #3]
 800b148:	460b      	mov	r3, r1
 800b14a:	70bb      	strb	r3, [r7, #2]
 800b14c:	4613      	mov	r3, r2
 800b14e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b150:	2300      	movs	r3, #0
 800b152:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b154:	2300      	movs	r3, #0
 800b156:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b15e:	787c      	ldrb	r4, [r7, #1]
 800b160:	78ba      	ldrb	r2, [r7, #2]
 800b162:	78f9      	ldrb	r1, [r7, #3]
 800b164:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b168:	9303      	str	r3, [sp, #12]
 800b16a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b16c:	9302      	str	r3, [sp, #8]
 800b16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b170:	9301      	str	r3, [sp, #4]
 800b172:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b176:	9300      	str	r3, [sp, #0]
 800b178:	4623      	mov	r3, r4
 800b17a:	f7f6 feff 	bl	8001f7c <HAL_HCD_HC_SubmitRequest>
 800b17e:	4603      	mov	r3, r0
 800b180:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b182:	7bfb      	ldrb	r3, [r7, #15]
 800b184:	4618      	mov	r0, r3
 800b186:	f000 f86d 	bl	800b264 <USBH_Get_USB_Status>
 800b18a:	4603      	mov	r3, r0
 800b18c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b18e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b190:	4618      	mov	r0, r3
 800b192:	3714      	adds	r7, #20
 800b194:	46bd      	mov	sp, r7
 800b196:	bd90      	pop	{r4, r7, pc}

0800b198 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b1aa:	78fa      	ldrb	r2, [r7, #3]
 800b1ac:	4611      	mov	r1, r2
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7f7 f993 	bl	80024da <HAL_HCD_HC_GetURBState>
 800b1b4:	4603      	mov	r3, r0
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3708      	adds	r7, #8
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b082      	sub	sp, #8
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d103      	bne.n	800b1dc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b1d4:	78fb      	ldrb	r3, [r7, #3]
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f000 f870 	bl	800b2bc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b1dc:	20c8      	movs	r0, #200	; 0xc8
 800b1de:	f7f6 fa3b 	bl	8001658 <HAL_Delay>
  return USBH_OK;
 800b1e2:	2300      	movs	r3, #0
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3708      	adds	r7, #8
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b085      	sub	sp, #20
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	70fb      	strb	r3, [r7, #3]
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b202:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b204:	78fb      	ldrb	r3, [r7, #3]
 800b206:	68fa      	ldr	r2, [r7, #12]
 800b208:	212c      	movs	r1, #44	; 0x2c
 800b20a:	fb01 f303 	mul.w	r3, r1, r3
 800b20e:	4413      	add	r3, r2
 800b210:	333b      	adds	r3, #59	; 0x3b
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d009      	beq.n	800b22c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b218:	78fb      	ldrb	r3, [r7, #3]
 800b21a:	68fa      	ldr	r2, [r7, #12]
 800b21c:	212c      	movs	r1, #44	; 0x2c
 800b21e:	fb01 f303 	mul.w	r3, r1, r3
 800b222:	4413      	add	r3, r2
 800b224:	3354      	adds	r3, #84	; 0x54
 800b226:	78ba      	ldrb	r2, [r7, #2]
 800b228:	701a      	strb	r2, [r3, #0]
 800b22a:	e008      	b.n	800b23e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b22c:	78fb      	ldrb	r3, [r7, #3]
 800b22e:	68fa      	ldr	r2, [r7, #12]
 800b230:	212c      	movs	r1, #44	; 0x2c
 800b232:	fb01 f303 	mul.w	r3, r1, r3
 800b236:	4413      	add	r3, r2
 800b238:	3355      	adds	r3, #85	; 0x55
 800b23a:	78ba      	ldrb	r2, [r7, #2]
 800b23c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b23e:	2300      	movs	r3, #0
}
 800b240:	4618      	mov	r0, r3
 800b242:	3714      	adds	r7, #20
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f7f6 f9ff 	bl	8001658 <HAL_Delay>
}
 800b25a:	bf00      	nop
 800b25c:	3708      	adds	r7, #8
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
	...

0800b264 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b264:	b480      	push	{r7}
 800b266:	b085      	sub	sp, #20
 800b268:	af00      	add	r7, sp, #0
 800b26a:	4603      	mov	r3, r0
 800b26c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b26e:	2300      	movs	r3, #0
 800b270:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b272:	79fb      	ldrb	r3, [r7, #7]
 800b274:	2b03      	cmp	r3, #3
 800b276:	d817      	bhi.n	800b2a8 <USBH_Get_USB_Status+0x44>
 800b278:	a201      	add	r2, pc, #4	; (adr r2, 800b280 <USBH_Get_USB_Status+0x1c>)
 800b27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b27e:	bf00      	nop
 800b280:	0800b291 	.word	0x0800b291
 800b284:	0800b297 	.word	0x0800b297
 800b288:	0800b29d 	.word	0x0800b29d
 800b28c:	0800b2a3 	.word	0x0800b2a3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b290:	2300      	movs	r3, #0
 800b292:	73fb      	strb	r3, [r7, #15]
    break;
 800b294:	e00b      	b.n	800b2ae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b296:	2302      	movs	r3, #2
 800b298:	73fb      	strb	r3, [r7, #15]
    break;
 800b29a:	e008      	b.n	800b2ae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b29c:	2301      	movs	r3, #1
 800b29e:	73fb      	strb	r3, [r7, #15]
    break;
 800b2a0:	e005      	b.n	800b2ae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b2a2:	2302      	movs	r3, #2
 800b2a4:	73fb      	strb	r3, [r7, #15]
    break;
 800b2a6:	e002      	b.n	800b2ae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b2a8:	2302      	movs	r3, #2
 800b2aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b2ac:	bf00      	nop
  }
  return usb_status;
 800b2ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3714      	adds	r7, #20
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b084      	sub	sp, #16
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b2c6:	79fb      	ldrb	r3, [r7, #7]
 800b2c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b2ca:	79fb      	ldrb	r3, [r7, #7]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d102      	bne.n	800b2d6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	73fb      	strb	r3, [r7, #15]
 800b2d4:	e001      	b.n	800b2da <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b2da:	7bfb      	ldrb	r3, [r7, #15]
 800b2dc:	461a      	mov	r2, r3
 800b2de:	2101      	movs	r1, #1
 800b2e0:	4803      	ldr	r0, [pc, #12]	; (800b2f0 <MX_DriverVbusFS+0x34>)
 800b2e2:	f7f6 fd1d 	bl	8001d20 <HAL_GPIO_WritePin>
}
 800b2e6:	bf00      	nop
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	40020800 	.word	0x40020800

0800b2f4 <malloc>:
 800b2f4:	4b02      	ldr	r3, [pc, #8]	; (800b300 <malloc+0xc>)
 800b2f6:	4601      	mov	r1, r0
 800b2f8:	6818      	ldr	r0, [r3, #0]
 800b2fa:	f000 b82b 	b.w	800b354 <_malloc_r>
 800b2fe:	bf00      	nop
 800b300:	2000007c 	.word	0x2000007c

0800b304 <free>:
 800b304:	4b02      	ldr	r3, [pc, #8]	; (800b310 <free+0xc>)
 800b306:	4601      	mov	r1, r0
 800b308:	6818      	ldr	r0, [r3, #0]
 800b30a:	f000 b913 	b.w	800b534 <_free_r>
 800b30e:	bf00      	nop
 800b310:	2000007c 	.word	0x2000007c

0800b314 <sbrk_aligned>:
 800b314:	b570      	push	{r4, r5, r6, lr}
 800b316:	4e0e      	ldr	r6, [pc, #56]	; (800b350 <sbrk_aligned+0x3c>)
 800b318:	460c      	mov	r4, r1
 800b31a:	6831      	ldr	r1, [r6, #0]
 800b31c:	4605      	mov	r5, r0
 800b31e:	b911      	cbnz	r1, 800b326 <sbrk_aligned+0x12>
 800b320:	f000 f8cc 	bl	800b4bc <_sbrk_r>
 800b324:	6030      	str	r0, [r6, #0]
 800b326:	4621      	mov	r1, r4
 800b328:	4628      	mov	r0, r5
 800b32a:	f000 f8c7 	bl	800b4bc <_sbrk_r>
 800b32e:	1c43      	adds	r3, r0, #1
 800b330:	d00a      	beq.n	800b348 <sbrk_aligned+0x34>
 800b332:	1cc4      	adds	r4, r0, #3
 800b334:	f024 0403 	bic.w	r4, r4, #3
 800b338:	42a0      	cmp	r0, r4
 800b33a:	d007      	beq.n	800b34c <sbrk_aligned+0x38>
 800b33c:	1a21      	subs	r1, r4, r0
 800b33e:	4628      	mov	r0, r5
 800b340:	f000 f8bc 	bl	800b4bc <_sbrk_r>
 800b344:	3001      	adds	r0, #1
 800b346:	d101      	bne.n	800b34c <sbrk_aligned+0x38>
 800b348:	f04f 34ff 	mov.w	r4, #4294967295
 800b34c:	4620      	mov	r0, r4
 800b34e:	bd70      	pop	{r4, r5, r6, pc}
 800b350:	20000a0c 	.word	0x20000a0c

0800b354 <_malloc_r>:
 800b354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b358:	1ccd      	adds	r5, r1, #3
 800b35a:	f025 0503 	bic.w	r5, r5, #3
 800b35e:	3508      	adds	r5, #8
 800b360:	2d0c      	cmp	r5, #12
 800b362:	bf38      	it	cc
 800b364:	250c      	movcc	r5, #12
 800b366:	2d00      	cmp	r5, #0
 800b368:	4607      	mov	r7, r0
 800b36a:	db01      	blt.n	800b370 <_malloc_r+0x1c>
 800b36c:	42a9      	cmp	r1, r5
 800b36e:	d905      	bls.n	800b37c <_malloc_r+0x28>
 800b370:	230c      	movs	r3, #12
 800b372:	603b      	str	r3, [r7, #0]
 800b374:	2600      	movs	r6, #0
 800b376:	4630      	mov	r0, r6
 800b378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b37c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b450 <_malloc_r+0xfc>
 800b380:	f000 f868 	bl	800b454 <__malloc_lock>
 800b384:	f8d8 3000 	ldr.w	r3, [r8]
 800b388:	461c      	mov	r4, r3
 800b38a:	bb5c      	cbnz	r4, 800b3e4 <_malloc_r+0x90>
 800b38c:	4629      	mov	r1, r5
 800b38e:	4638      	mov	r0, r7
 800b390:	f7ff ffc0 	bl	800b314 <sbrk_aligned>
 800b394:	1c43      	adds	r3, r0, #1
 800b396:	4604      	mov	r4, r0
 800b398:	d155      	bne.n	800b446 <_malloc_r+0xf2>
 800b39a:	f8d8 4000 	ldr.w	r4, [r8]
 800b39e:	4626      	mov	r6, r4
 800b3a0:	2e00      	cmp	r6, #0
 800b3a2:	d145      	bne.n	800b430 <_malloc_r+0xdc>
 800b3a4:	2c00      	cmp	r4, #0
 800b3a6:	d048      	beq.n	800b43a <_malloc_r+0xe6>
 800b3a8:	6823      	ldr	r3, [r4, #0]
 800b3aa:	4631      	mov	r1, r6
 800b3ac:	4638      	mov	r0, r7
 800b3ae:	eb04 0903 	add.w	r9, r4, r3
 800b3b2:	f000 f883 	bl	800b4bc <_sbrk_r>
 800b3b6:	4581      	cmp	r9, r0
 800b3b8:	d13f      	bne.n	800b43a <_malloc_r+0xe6>
 800b3ba:	6821      	ldr	r1, [r4, #0]
 800b3bc:	1a6d      	subs	r5, r5, r1
 800b3be:	4629      	mov	r1, r5
 800b3c0:	4638      	mov	r0, r7
 800b3c2:	f7ff ffa7 	bl	800b314 <sbrk_aligned>
 800b3c6:	3001      	adds	r0, #1
 800b3c8:	d037      	beq.n	800b43a <_malloc_r+0xe6>
 800b3ca:	6823      	ldr	r3, [r4, #0]
 800b3cc:	442b      	add	r3, r5
 800b3ce:	6023      	str	r3, [r4, #0]
 800b3d0:	f8d8 3000 	ldr.w	r3, [r8]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d038      	beq.n	800b44a <_malloc_r+0xf6>
 800b3d8:	685a      	ldr	r2, [r3, #4]
 800b3da:	42a2      	cmp	r2, r4
 800b3dc:	d12b      	bne.n	800b436 <_malloc_r+0xe2>
 800b3de:	2200      	movs	r2, #0
 800b3e0:	605a      	str	r2, [r3, #4]
 800b3e2:	e00f      	b.n	800b404 <_malloc_r+0xb0>
 800b3e4:	6822      	ldr	r2, [r4, #0]
 800b3e6:	1b52      	subs	r2, r2, r5
 800b3e8:	d41f      	bmi.n	800b42a <_malloc_r+0xd6>
 800b3ea:	2a0b      	cmp	r2, #11
 800b3ec:	d917      	bls.n	800b41e <_malloc_r+0xca>
 800b3ee:	1961      	adds	r1, r4, r5
 800b3f0:	42a3      	cmp	r3, r4
 800b3f2:	6025      	str	r5, [r4, #0]
 800b3f4:	bf18      	it	ne
 800b3f6:	6059      	strne	r1, [r3, #4]
 800b3f8:	6863      	ldr	r3, [r4, #4]
 800b3fa:	bf08      	it	eq
 800b3fc:	f8c8 1000 	streq.w	r1, [r8]
 800b400:	5162      	str	r2, [r4, r5]
 800b402:	604b      	str	r3, [r1, #4]
 800b404:	4638      	mov	r0, r7
 800b406:	f104 060b 	add.w	r6, r4, #11
 800b40a:	f000 f829 	bl	800b460 <__malloc_unlock>
 800b40e:	f026 0607 	bic.w	r6, r6, #7
 800b412:	1d23      	adds	r3, r4, #4
 800b414:	1af2      	subs	r2, r6, r3
 800b416:	d0ae      	beq.n	800b376 <_malloc_r+0x22>
 800b418:	1b9b      	subs	r3, r3, r6
 800b41a:	50a3      	str	r3, [r4, r2]
 800b41c:	e7ab      	b.n	800b376 <_malloc_r+0x22>
 800b41e:	42a3      	cmp	r3, r4
 800b420:	6862      	ldr	r2, [r4, #4]
 800b422:	d1dd      	bne.n	800b3e0 <_malloc_r+0x8c>
 800b424:	f8c8 2000 	str.w	r2, [r8]
 800b428:	e7ec      	b.n	800b404 <_malloc_r+0xb0>
 800b42a:	4623      	mov	r3, r4
 800b42c:	6864      	ldr	r4, [r4, #4]
 800b42e:	e7ac      	b.n	800b38a <_malloc_r+0x36>
 800b430:	4634      	mov	r4, r6
 800b432:	6876      	ldr	r6, [r6, #4]
 800b434:	e7b4      	b.n	800b3a0 <_malloc_r+0x4c>
 800b436:	4613      	mov	r3, r2
 800b438:	e7cc      	b.n	800b3d4 <_malloc_r+0x80>
 800b43a:	230c      	movs	r3, #12
 800b43c:	603b      	str	r3, [r7, #0]
 800b43e:	4638      	mov	r0, r7
 800b440:	f000 f80e 	bl	800b460 <__malloc_unlock>
 800b444:	e797      	b.n	800b376 <_malloc_r+0x22>
 800b446:	6025      	str	r5, [r4, #0]
 800b448:	e7dc      	b.n	800b404 <_malloc_r+0xb0>
 800b44a:	605b      	str	r3, [r3, #4]
 800b44c:	deff      	udf	#255	; 0xff
 800b44e:	bf00      	nop
 800b450:	20000a08 	.word	0x20000a08

0800b454 <__malloc_lock>:
 800b454:	4801      	ldr	r0, [pc, #4]	; (800b45c <__malloc_lock+0x8>)
 800b456:	f000 b86b 	b.w	800b530 <__retarget_lock_acquire_recursive>
 800b45a:	bf00      	nop
 800b45c:	20000b4c 	.word	0x20000b4c

0800b460 <__malloc_unlock>:
 800b460:	4801      	ldr	r0, [pc, #4]	; (800b468 <__malloc_unlock+0x8>)
 800b462:	f000 b866 	b.w	800b532 <__retarget_lock_release_recursive>
 800b466:	bf00      	nop
 800b468:	20000b4c 	.word	0x20000b4c

0800b46c <siprintf>:
 800b46c:	b40e      	push	{r1, r2, r3}
 800b46e:	b500      	push	{lr}
 800b470:	b09c      	sub	sp, #112	; 0x70
 800b472:	ab1d      	add	r3, sp, #116	; 0x74
 800b474:	9002      	str	r0, [sp, #8]
 800b476:	9006      	str	r0, [sp, #24]
 800b478:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b47c:	4809      	ldr	r0, [pc, #36]	; (800b4a4 <siprintf+0x38>)
 800b47e:	9107      	str	r1, [sp, #28]
 800b480:	9104      	str	r1, [sp, #16]
 800b482:	4909      	ldr	r1, [pc, #36]	; (800b4a8 <siprintf+0x3c>)
 800b484:	f853 2b04 	ldr.w	r2, [r3], #4
 800b488:	9105      	str	r1, [sp, #20]
 800b48a:	6800      	ldr	r0, [r0, #0]
 800b48c:	9301      	str	r3, [sp, #4]
 800b48e:	a902      	add	r1, sp, #8
 800b490:	f000 f8f6 	bl	800b680 <_svfiprintf_r>
 800b494:	9b02      	ldr	r3, [sp, #8]
 800b496:	2200      	movs	r2, #0
 800b498:	701a      	strb	r2, [r3, #0]
 800b49a:	b01c      	add	sp, #112	; 0x70
 800b49c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4a0:	b003      	add	sp, #12
 800b4a2:	4770      	bx	lr
 800b4a4:	2000007c 	.word	0x2000007c
 800b4a8:	ffff0208 	.word	0xffff0208

0800b4ac <memset>:
 800b4ac:	4402      	add	r2, r0
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d100      	bne.n	800b4b6 <memset+0xa>
 800b4b4:	4770      	bx	lr
 800b4b6:	f803 1b01 	strb.w	r1, [r3], #1
 800b4ba:	e7f9      	b.n	800b4b0 <memset+0x4>

0800b4bc <_sbrk_r>:
 800b4bc:	b538      	push	{r3, r4, r5, lr}
 800b4be:	4d06      	ldr	r5, [pc, #24]	; (800b4d8 <_sbrk_r+0x1c>)
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	4604      	mov	r4, r0
 800b4c4:	4608      	mov	r0, r1
 800b4c6:	602b      	str	r3, [r5, #0]
 800b4c8:	f7f5 ffe2 	bl	8001490 <_sbrk>
 800b4cc:	1c43      	adds	r3, r0, #1
 800b4ce:	d102      	bne.n	800b4d6 <_sbrk_r+0x1a>
 800b4d0:	682b      	ldr	r3, [r5, #0]
 800b4d2:	b103      	cbz	r3, 800b4d6 <_sbrk_r+0x1a>
 800b4d4:	6023      	str	r3, [r4, #0]
 800b4d6:	bd38      	pop	{r3, r4, r5, pc}
 800b4d8:	20000b48 	.word	0x20000b48

0800b4dc <__errno>:
 800b4dc:	4b01      	ldr	r3, [pc, #4]	; (800b4e4 <__errno+0x8>)
 800b4de:	6818      	ldr	r0, [r3, #0]
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop
 800b4e4:	2000007c 	.word	0x2000007c

0800b4e8 <__libc_init_array>:
 800b4e8:	b570      	push	{r4, r5, r6, lr}
 800b4ea:	4d0d      	ldr	r5, [pc, #52]	; (800b520 <__libc_init_array+0x38>)
 800b4ec:	4c0d      	ldr	r4, [pc, #52]	; (800b524 <__libc_init_array+0x3c>)
 800b4ee:	1b64      	subs	r4, r4, r5
 800b4f0:	10a4      	asrs	r4, r4, #2
 800b4f2:	2600      	movs	r6, #0
 800b4f4:	42a6      	cmp	r6, r4
 800b4f6:	d109      	bne.n	800b50c <__libc_init_array+0x24>
 800b4f8:	4d0b      	ldr	r5, [pc, #44]	; (800b528 <__libc_init_array+0x40>)
 800b4fa:	4c0c      	ldr	r4, [pc, #48]	; (800b52c <__libc_init_array+0x44>)
 800b4fc:	f000 fbae 	bl	800bc5c <_init>
 800b500:	1b64      	subs	r4, r4, r5
 800b502:	10a4      	asrs	r4, r4, #2
 800b504:	2600      	movs	r6, #0
 800b506:	42a6      	cmp	r6, r4
 800b508:	d105      	bne.n	800b516 <__libc_init_array+0x2e>
 800b50a:	bd70      	pop	{r4, r5, r6, pc}
 800b50c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b510:	4798      	blx	r3
 800b512:	3601      	adds	r6, #1
 800b514:	e7ee      	b.n	800b4f4 <__libc_init_array+0xc>
 800b516:	f855 3b04 	ldr.w	r3, [r5], #4
 800b51a:	4798      	blx	r3
 800b51c:	3601      	adds	r6, #1
 800b51e:	e7f2      	b.n	800b506 <__libc_init_array+0x1e>
 800b520:	0800bce4 	.word	0x0800bce4
 800b524:	0800bce4 	.word	0x0800bce4
 800b528:	0800bce4 	.word	0x0800bce4
 800b52c:	0800bce8 	.word	0x0800bce8

0800b530 <__retarget_lock_acquire_recursive>:
 800b530:	4770      	bx	lr

0800b532 <__retarget_lock_release_recursive>:
 800b532:	4770      	bx	lr

0800b534 <_free_r>:
 800b534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b536:	2900      	cmp	r1, #0
 800b538:	d044      	beq.n	800b5c4 <_free_r+0x90>
 800b53a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b53e:	9001      	str	r0, [sp, #4]
 800b540:	2b00      	cmp	r3, #0
 800b542:	f1a1 0404 	sub.w	r4, r1, #4
 800b546:	bfb8      	it	lt
 800b548:	18e4      	addlt	r4, r4, r3
 800b54a:	f7ff ff83 	bl	800b454 <__malloc_lock>
 800b54e:	4a1e      	ldr	r2, [pc, #120]	; (800b5c8 <_free_r+0x94>)
 800b550:	9801      	ldr	r0, [sp, #4]
 800b552:	6813      	ldr	r3, [r2, #0]
 800b554:	b933      	cbnz	r3, 800b564 <_free_r+0x30>
 800b556:	6063      	str	r3, [r4, #4]
 800b558:	6014      	str	r4, [r2, #0]
 800b55a:	b003      	add	sp, #12
 800b55c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b560:	f7ff bf7e 	b.w	800b460 <__malloc_unlock>
 800b564:	42a3      	cmp	r3, r4
 800b566:	d908      	bls.n	800b57a <_free_r+0x46>
 800b568:	6825      	ldr	r5, [r4, #0]
 800b56a:	1961      	adds	r1, r4, r5
 800b56c:	428b      	cmp	r3, r1
 800b56e:	bf01      	itttt	eq
 800b570:	6819      	ldreq	r1, [r3, #0]
 800b572:	685b      	ldreq	r3, [r3, #4]
 800b574:	1949      	addeq	r1, r1, r5
 800b576:	6021      	streq	r1, [r4, #0]
 800b578:	e7ed      	b.n	800b556 <_free_r+0x22>
 800b57a:	461a      	mov	r2, r3
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	b10b      	cbz	r3, 800b584 <_free_r+0x50>
 800b580:	42a3      	cmp	r3, r4
 800b582:	d9fa      	bls.n	800b57a <_free_r+0x46>
 800b584:	6811      	ldr	r1, [r2, #0]
 800b586:	1855      	adds	r5, r2, r1
 800b588:	42a5      	cmp	r5, r4
 800b58a:	d10b      	bne.n	800b5a4 <_free_r+0x70>
 800b58c:	6824      	ldr	r4, [r4, #0]
 800b58e:	4421      	add	r1, r4
 800b590:	1854      	adds	r4, r2, r1
 800b592:	42a3      	cmp	r3, r4
 800b594:	6011      	str	r1, [r2, #0]
 800b596:	d1e0      	bne.n	800b55a <_free_r+0x26>
 800b598:	681c      	ldr	r4, [r3, #0]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	6053      	str	r3, [r2, #4]
 800b59e:	440c      	add	r4, r1
 800b5a0:	6014      	str	r4, [r2, #0]
 800b5a2:	e7da      	b.n	800b55a <_free_r+0x26>
 800b5a4:	d902      	bls.n	800b5ac <_free_r+0x78>
 800b5a6:	230c      	movs	r3, #12
 800b5a8:	6003      	str	r3, [r0, #0]
 800b5aa:	e7d6      	b.n	800b55a <_free_r+0x26>
 800b5ac:	6825      	ldr	r5, [r4, #0]
 800b5ae:	1961      	adds	r1, r4, r5
 800b5b0:	428b      	cmp	r3, r1
 800b5b2:	bf04      	itt	eq
 800b5b4:	6819      	ldreq	r1, [r3, #0]
 800b5b6:	685b      	ldreq	r3, [r3, #4]
 800b5b8:	6063      	str	r3, [r4, #4]
 800b5ba:	bf04      	itt	eq
 800b5bc:	1949      	addeq	r1, r1, r5
 800b5be:	6021      	streq	r1, [r4, #0]
 800b5c0:	6054      	str	r4, [r2, #4]
 800b5c2:	e7ca      	b.n	800b55a <_free_r+0x26>
 800b5c4:	b003      	add	sp, #12
 800b5c6:	bd30      	pop	{r4, r5, pc}
 800b5c8:	20000a08 	.word	0x20000a08

0800b5cc <__ssputs_r>:
 800b5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5d0:	688e      	ldr	r6, [r1, #8]
 800b5d2:	461f      	mov	r7, r3
 800b5d4:	42be      	cmp	r6, r7
 800b5d6:	680b      	ldr	r3, [r1, #0]
 800b5d8:	4682      	mov	sl, r0
 800b5da:	460c      	mov	r4, r1
 800b5dc:	4690      	mov	r8, r2
 800b5de:	d82c      	bhi.n	800b63a <__ssputs_r+0x6e>
 800b5e0:	898a      	ldrh	r2, [r1, #12]
 800b5e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b5e6:	d026      	beq.n	800b636 <__ssputs_r+0x6a>
 800b5e8:	6965      	ldr	r5, [r4, #20]
 800b5ea:	6909      	ldr	r1, [r1, #16]
 800b5ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5f0:	eba3 0901 	sub.w	r9, r3, r1
 800b5f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5f8:	1c7b      	adds	r3, r7, #1
 800b5fa:	444b      	add	r3, r9
 800b5fc:	106d      	asrs	r5, r5, #1
 800b5fe:	429d      	cmp	r5, r3
 800b600:	bf38      	it	cc
 800b602:	461d      	movcc	r5, r3
 800b604:	0553      	lsls	r3, r2, #21
 800b606:	d527      	bpl.n	800b658 <__ssputs_r+0x8c>
 800b608:	4629      	mov	r1, r5
 800b60a:	f7ff fea3 	bl	800b354 <_malloc_r>
 800b60e:	4606      	mov	r6, r0
 800b610:	b360      	cbz	r0, 800b66c <__ssputs_r+0xa0>
 800b612:	6921      	ldr	r1, [r4, #16]
 800b614:	464a      	mov	r2, r9
 800b616:	f000 fadb 	bl	800bbd0 <memcpy>
 800b61a:	89a3      	ldrh	r3, [r4, #12]
 800b61c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b624:	81a3      	strh	r3, [r4, #12]
 800b626:	6126      	str	r6, [r4, #16]
 800b628:	6165      	str	r5, [r4, #20]
 800b62a:	444e      	add	r6, r9
 800b62c:	eba5 0509 	sub.w	r5, r5, r9
 800b630:	6026      	str	r6, [r4, #0]
 800b632:	60a5      	str	r5, [r4, #8]
 800b634:	463e      	mov	r6, r7
 800b636:	42be      	cmp	r6, r7
 800b638:	d900      	bls.n	800b63c <__ssputs_r+0x70>
 800b63a:	463e      	mov	r6, r7
 800b63c:	6820      	ldr	r0, [r4, #0]
 800b63e:	4632      	mov	r2, r6
 800b640:	4641      	mov	r1, r8
 800b642:	f000 faab 	bl	800bb9c <memmove>
 800b646:	68a3      	ldr	r3, [r4, #8]
 800b648:	1b9b      	subs	r3, r3, r6
 800b64a:	60a3      	str	r3, [r4, #8]
 800b64c:	6823      	ldr	r3, [r4, #0]
 800b64e:	4433      	add	r3, r6
 800b650:	6023      	str	r3, [r4, #0]
 800b652:	2000      	movs	r0, #0
 800b654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b658:	462a      	mov	r2, r5
 800b65a:	f000 fac7 	bl	800bbec <_realloc_r>
 800b65e:	4606      	mov	r6, r0
 800b660:	2800      	cmp	r0, #0
 800b662:	d1e0      	bne.n	800b626 <__ssputs_r+0x5a>
 800b664:	6921      	ldr	r1, [r4, #16]
 800b666:	4650      	mov	r0, sl
 800b668:	f7ff ff64 	bl	800b534 <_free_r>
 800b66c:	230c      	movs	r3, #12
 800b66e:	f8ca 3000 	str.w	r3, [sl]
 800b672:	89a3      	ldrh	r3, [r4, #12]
 800b674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b678:	81a3      	strh	r3, [r4, #12]
 800b67a:	f04f 30ff 	mov.w	r0, #4294967295
 800b67e:	e7e9      	b.n	800b654 <__ssputs_r+0x88>

0800b680 <_svfiprintf_r>:
 800b680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b684:	4698      	mov	r8, r3
 800b686:	898b      	ldrh	r3, [r1, #12]
 800b688:	061b      	lsls	r3, r3, #24
 800b68a:	b09d      	sub	sp, #116	; 0x74
 800b68c:	4607      	mov	r7, r0
 800b68e:	460d      	mov	r5, r1
 800b690:	4614      	mov	r4, r2
 800b692:	d50e      	bpl.n	800b6b2 <_svfiprintf_r+0x32>
 800b694:	690b      	ldr	r3, [r1, #16]
 800b696:	b963      	cbnz	r3, 800b6b2 <_svfiprintf_r+0x32>
 800b698:	2140      	movs	r1, #64	; 0x40
 800b69a:	f7ff fe5b 	bl	800b354 <_malloc_r>
 800b69e:	6028      	str	r0, [r5, #0]
 800b6a0:	6128      	str	r0, [r5, #16]
 800b6a2:	b920      	cbnz	r0, 800b6ae <_svfiprintf_r+0x2e>
 800b6a4:	230c      	movs	r3, #12
 800b6a6:	603b      	str	r3, [r7, #0]
 800b6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ac:	e0d0      	b.n	800b850 <_svfiprintf_r+0x1d0>
 800b6ae:	2340      	movs	r3, #64	; 0x40
 800b6b0:	616b      	str	r3, [r5, #20]
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b6b6:	2320      	movs	r3, #32
 800b6b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6c0:	2330      	movs	r3, #48	; 0x30
 800b6c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b868 <_svfiprintf_r+0x1e8>
 800b6c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6ca:	f04f 0901 	mov.w	r9, #1
 800b6ce:	4623      	mov	r3, r4
 800b6d0:	469a      	mov	sl, r3
 800b6d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6d6:	b10a      	cbz	r2, 800b6dc <_svfiprintf_r+0x5c>
 800b6d8:	2a25      	cmp	r2, #37	; 0x25
 800b6da:	d1f9      	bne.n	800b6d0 <_svfiprintf_r+0x50>
 800b6dc:	ebba 0b04 	subs.w	fp, sl, r4
 800b6e0:	d00b      	beq.n	800b6fa <_svfiprintf_r+0x7a>
 800b6e2:	465b      	mov	r3, fp
 800b6e4:	4622      	mov	r2, r4
 800b6e6:	4629      	mov	r1, r5
 800b6e8:	4638      	mov	r0, r7
 800b6ea:	f7ff ff6f 	bl	800b5cc <__ssputs_r>
 800b6ee:	3001      	adds	r0, #1
 800b6f0:	f000 80a9 	beq.w	800b846 <_svfiprintf_r+0x1c6>
 800b6f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6f6:	445a      	add	r2, fp
 800b6f8:	9209      	str	r2, [sp, #36]	; 0x24
 800b6fa:	f89a 3000 	ldrb.w	r3, [sl]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	f000 80a1 	beq.w	800b846 <_svfiprintf_r+0x1c6>
 800b704:	2300      	movs	r3, #0
 800b706:	f04f 32ff 	mov.w	r2, #4294967295
 800b70a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b70e:	f10a 0a01 	add.w	sl, sl, #1
 800b712:	9304      	str	r3, [sp, #16]
 800b714:	9307      	str	r3, [sp, #28]
 800b716:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b71a:	931a      	str	r3, [sp, #104]	; 0x68
 800b71c:	4654      	mov	r4, sl
 800b71e:	2205      	movs	r2, #5
 800b720:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b724:	4850      	ldr	r0, [pc, #320]	; (800b868 <_svfiprintf_r+0x1e8>)
 800b726:	f7f4 fd5b 	bl	80001e0 <memchr>
 800b72a:	9a04      	ldr	r2, [sp, #16]
 800b72c:	b9d8      	cbnz	r0, 800b766 <_svfiprintf_r+0xe6>
 800b72e:	06d0      	lsls	r0, r2, #27
 800b730:	bf44      	itt	mi
 800b732:	2320      	movmi	r3, #32
 800b734:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b738:	0711      	lsls	r1, r2, #28
 800b73a:	bf44      	itt	mi
 800b73c:	232b      	movmi	r3, #43	; 0x2b
 800b73e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b742:	f89a 3000 	ldrb.w	r3, [sl]
 800b746:	2b2a      	cmp	r3, #42	; 0x2a
 800b748:	d015      	beq.n	800b776 <_svfiprintf_r+0xf6>
 800b74a:	9a07      	ldr	r2, [sp, #28]
 800b74c:	4654      	mov	r4, sl
 800b74e:	2000      	movs	r0, #0
 800b750:	f04f 0c0a 	mov.w	ip, #10
 800b754:	4621      	mov	r1, r4
 800b756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b75a:	3b30      	subs	r3, #48	; 0x30
 800b75c:	2b09      	cmp	r3, #9
 800b75e:	d94d      	bls.n	800b7fc <_svfiprintf_r+0x17c>
 800b760:	b1b0      	cbz	r0, 800b790 <_svfiprintf_r+0x110>
 800b762:	9207      	str	r2, [sp, #28]
 800b764:	e014      	b.n	800b790 <_svfiprintf_r+0x110>
 800b766:	eba0 0308 	sub.w	r3, r0, r8
 800b76a:	fa09 f303 	lsl.w	r3, r9, r3
 800b76e:	4313      	orrs	r3, r2
 800b770:	9304      	str	r3, [sp, #16]
 800b772:	46a2      	mov	sl, r4
 800b774:	e7d2      	b.n	800b71c <_svfiprintf_r+0x9c>
 800b776:	9b03      	ldr	r3, [sp, #12]
 800b778:	1d19      	adds	r1, r3, #4
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	9103      	str	r1, [sp, #12]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	bfbb      	ittet	lt
 800b782:	425b      	neglt	r3, r3
 800b784:	f042 0202 	orrlt.w	r2, r2, #2
 800b788:	9307      	strge	r3, [sp, #28]
 800b78a:	9307      	strlt	r3, [sp, #28]
 800b78c:	bfb8      	it	lt
 800b78e:	9204      	strlt	r2, [sp, #16]
 800b790:	7823      	ldrb	r3, [r4, #0]
 800b792:	2b2e      	cmp	r3, #46	; 0x2e
 800b794:	d10c      	bne.n	800b7b0 <_svfiprintf_r+0x130>
 800b796:	7863      	ldrb	r3, [r4, #1]
 800b798:	2b2a      	cmp	r3, #42	; 0x2a
 800b79a:	d134      	bne.n	800b806 <_svfiprintf_r+0x186>
 800b79c:	9b03      	ldr	r3, [sp, #12]
 800b79e:	1d1a      	adds	r2, r3, #4
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	9203      	str	r2, [sp, #12]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	bfb8      	it	lt
 800b7a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b7ac:	3402      	adds	r4, #2
 800b7ae:	9305      	str	r3, [sp, #20]
 800b7b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b878 <_svfiprintf_r+0x1f8>
 800b7b4:	7821      	ldrb	r1, [r4, #0]
 800b7b6:	2203      	movs	r2, #3
 800b7b8:	4650      	mov	r0, sl
 800b7ba:	f7f4 fd11 	bl	80001e0 <memchr>
 800b7be:	b138      	cbz	r0, 800b7d0 <_svfiprintf_r+0x150>
 800b7c0:	9b04      	ldr	r3, [sp, #16]
 800b7c2:	eba0 000a 	sub.w	r0, r0, sl
 800b7c6:	2240      	movs	r2, #64	; 0x40
 800b7c8:	4082      	lsls	r2, r0
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	3401      	adds	r4, #1
 800b7ce:	9304      	str	r3, [sp, #16]
 800b7d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7d4:	4825      	ldr	r0, [pc, #148]	; (800b86c <_svfiprintf_r+0x1ec>)
 800b7d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7da:	2206      	movs	r2, #6
 800b7dc:	f7f4 fd00 	bl	80001e0 <memchr>
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	d038      	beq.n	800b856 <_svfiprintf_r+0x1d6>
 800b7e4:	4b22      	ldr	r3, [pc, #136]	; (800b870 <_svfiprintf_r+0x1f0>)
 800b7e6:	bb1b      	cbnz	r3, 800b830 <_svfiprintf_r+0x1b0>
 800b7e8:	9b03      	ldr	r3, [sp, #12]
 800b7ea:	3307      	adds	r3, #7
 800b7ec:	f023 0307 	bic.w	r3, r3, #7
 800b7f0:	3308      	adds	r3, #8
 800b7f2:	9303      	str	r3, [sp, #12]
 800b7f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7f6:	4433      	add	r3, r6
 800b7f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b7fa:	e768      	b.n	800b6ce <_svfiprintf_r+0x4e>
 800b7fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b800:	460c      	mov	r4, r1
 800b802:	2001      	movs	r0, #1
 800b804:	e7a6      	b.n	800b754 <_svfiprintf_r+0xd4>
 800b806:	2300      	movs	r3, #0
 800b808:	3401      	adds	r4, #1
 800b80a:	9305      	str	r3, [sp, #20]
 800b80c:	4619      	mov	r1, r3
 800b80e:	f04f 0c0a 	mov.w	ip, #10
 800b812:	4620      	mov	r0, r4
 800b814:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b818:	3a30      	subs	r2, #48	; 0x30
 800b81a:	2a09      	cmp	r2, #9
 800b81c:	d903      	bls.n	800b826 <_svfiprintf_r+0x1a6>
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d0c6      	beq.n	800b7b0 <_svfiprintf_r+0x130>
 800b822:	9105      	str	r1, [sp, #20]
 800b824:	e7c4      	b.n	800b7b0 <_svfiprintf_r+0x130>
 800b826:	fb0c 2101 	mla	r1, ip, r1, r2
 800b82a:	4604      	mov	r4, r0
 800b82c:	2301      	movs	r3, #1
 800b82e:	e7f0      	b.n	800b812 <_svfiprintf_r+0x192>
 800b830:	ab03      	add	r3, sp, #12
 800b832:	9300      	str	r3, [sp, #0]
 800b834:	462a      	mov	r2, r5
 800b836:	4b0f      	ldr	r3, [pc, #60]	; (800b874 <_svfiprintf_r+0x1f4>)
 800b838:	a904      	add	r1, sp, #16
 800b83a:	4638      	mov	r0, r7
 800b83c:	f3af 8000 	nop.w
 800b840:	1c42      	adds	r2, r0, #1
 800b842:	4606      	mov	r6, r0
 800b844:	d1d6      	bne.n	800b7f4 <_svfiprintf_r+0x174>
 800b846:	89ab      	ldrh	r3, [r5, #12]
 800b848:	065b      	lsls	r3, r3, #25
 800b84a:	f53f af2d 	bmi.w	800b6a8 <_svfiprintf_r+0x28>
 800b84e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b850:	b01d      	add	sp, #116	; 0x74
 800b852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b856:	ab03      	add	r3, sp, #12
 800b858:	9300      	str	r3, [sp, #0]
 800b85a:	462a      	mov	r2, r5
 800b85c:	4b05      	ldr	r3, [pc, #20]	; (800b874 <_svfiprintf_r+0x1f4>)
 800b85e:	a904      	add	r1, sp, #16
 800b860:	4638      	mov	r0, r7
 800b862:	f000 f879 	bl	800b958 <_printf_i>
 800b866:	e7eb      	b.n	800b840 <_svfiprintf_r+0x1c0>
 800b868:	0800bca8 	.word	0x0800bca8
 800b86c:	0800bcb2 	.word	0x0800bcb2
 800b870:	00000000 	.word	0x00000000
 800b874:	0800b5cd 	.word	0x0800b5cd
 800b878:	0800bcae 	.word	0x0800bcae

0800b87c <_printf_common>:
 800b87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b880:	4616      	mov	r6, r2
 800b882:	4699      	mov	r9, r3
 800b884:	688a      	ldr	r2, [r1, #8]
 800b886:	690b      	ldr	r3, [r1, #16]
 800b888:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b88c:	4293      	cmp	r3, r2
 800b88e:	bfb8      	it	lt
 800b890:	4613      	movlt	r3, r2
 800b892:	6033      	str	r3, [r6, #0]
 800b894:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b898:	4607      	mov	r7, r0
 800b89a:	460c      	mov	r4, r1
 800b89c:	b10a      	cbz	r2, 800b8a2 <_printf_common+0x26>
 800b89e:	3301      	adds	r3, #1
 800b8a0:	6033      	str	r3, [r6, #0]
 800b8a2:	6823      	ldr	r3, [r4, #0]
 800b8a4:	0699      	lsls	r1, r3, #26
 800b8a6:	bf42      	ittt	mi
 800b8a8:	6833      	ldrmi	r3, [r6, #0]
 800b8aa:	3302      	addmi	r3, #2
 800b8ac:	6033      	strmi	r3, [r6, #0]
 800b8ae:	6825      	ldr	r5, [r4, #0]
 800b8b0:	f015 0506 	ands.w	r5, r5, #6
 800b8b4:	d106      	bne.n	800b8c4 <_printf_common+0x48>
 800b8b6:	f104 0a19 	add.w	sl, r4, #25
 800b8ba:	68e3      	ldr	r3, [r4, #12]
 800b8bc:	6832      	ldr	r2, [r6, #0]
 800b8be:	1a9b      	subs	r3, r3, r2
 800b8c0:	42ab      	cmp	r3, r5
 800b8c2:	dc26      	bgt.n	800b912 <_printf_common+0x96>
 800b8c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b8c8:	1e13      	subs	r3, r2, #0
 800b8ca:	6822      	ldr	r2, [r4, #0]
 800b8cc:	bf18      	it	ne
 800b8ce:	2301      	movne	r3, #1
 800b8d0:	0692      	lsls	r2, r2, #26
 800b8d2:	d42b      	bmi.n	800b92c <_printf_common+0xb0>
 800b8d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b8d8:	4649      	mov	r1, r9
 800b8da:	4638      	mov	r0, r7
 800b8dc:	47c0      	blx	r8
 800b8de:	3001      	adds	r0, #1
 800b8e0:	d01e      	beq.n	800b920 <_printf_common+0xa4>
 800b8e2:	6823      	ldr	r3, [r4, #0]
 800b8e4:	6922      	ldr	r2, [r4, #16]
 800b8e6:	f003 0306 	and.w	r3, r3, #6
 800b8ea:	2b04      	cmp	r3, #4
 800b8ec:	bf02      	ittt	eq
 800b8ee:	68e5      	ldreq	r5, [r4, #12]
 800b8f0:	6833      	ldreq	r3, [r6, #0]
 800b8f2:	1aed      	subeq	r5, r5, r3
 800b8f4:	68a3      	ldr	r3, [r4, #8]
 800b8f6:	bf0c      	ite	eq
 800b8f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8fc:	2500      	movne	r5, #0
 800b8fe:	4293      	cmp	r3, r2
 800b900:	bfc4      	itt	gt
 800b902:	1a9b      	subgt	r3, r3, r2
 800b904:	18ed      	addgt	r5, r5, r3
 800b906:	2600      	movs	r6, #0
 800b908:	341a      	adds	r4, #26
 800b90a:	42b5      	cmp	r5, r6
 800b90c:	d11a      	bne.n	800b944 <_printf_common+0xc8>
 800b90e:	2000      	movs	r0, #0
 800b910:	e008      	b.n	800b924 <_printf_common+0xa8>
 800b912:	2301      	movs	r3, #1
 800b914:	4652      	mov	r2, sl
 800b916:	4649      	mov	r1, r9
 800b918:	4638      	mov	r0, r7
 800b91a:	47c0      	blx	r8
 800b91c:	3001      	adds	r0, #1
 800b91e:	d103      	bne.n	800b928 <_printf_common+0xac>
 800b920:	f04f 30ff 	mov.w	r0, #4294967295
 800b924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b928:	3501      	adds	r5, #1
 800b92a:	e7c6      	b.n	800b8ba <_printf_common+0x3e>
 800b92c:	18e1      	adds	r1, r4, r3
 800b92e:	1c5a      	adds	r2, r3, #1
 800b930:	2030      	movs	r0, #48	; 0x30
 800b932:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b936:	4422      	add	r2, r4
 800b938:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b93c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b940:	3302      	adds	r3, #2
 800b942:	e7c7      	b.n	800b8d4 <_printf_common+0x58>
 800b944:	2301      	movs	r3, #1
 800b946:	4622      	mov	r2, r4
 800b948:	4649      	mov	r1, r9
 800b94a:	4638      	mov	r0, r7
 800b94c:	47c0      	blx	r8
 800b94e:	3001      	adds	r0, #1
 800b950:	d0e6      	beq.n	800b920 <_printf_common+0xa4>
 800b952:	3601      	adds	r6, #1
 800b954:	e7d9      	b.n	800b90a <_printf_common+0x8e>
	...

0800b958 <_printf_i>:
 800b958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b95c:	7e0f      	ldrb	r7, [r1, #24]
 800b95e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b960:	2f78      	cmp	r7, #120	; 0x78
 800b962:	4691      	mov	r9, r2
 800b964:	4680      	mov	r8, r0
 800b966:	460c      	mov	r4, r1
 800b968:	469a      	mov	sl, r3
 800b96a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b96e:	d807      	bhi.n	800b980 <_printf_i+0x28>
 800b970:	2f62      	cmp	r7, #98	; 0x62
 800b972:	d80a      	bhi.n	800b98a <_printf_i+0x32>
 800b974:	2f00      	cmp	r7, #0
 800b976:	f000 80d4 	beq.w	800bb22 <_printf_i+0x1ca>
 800b97a:	2f58      	cmp	r7, #88	; 0x58
 800b97c:	f000 80c0 	beq.w	800bb00 <_printf_i+0x1a8>
 800b980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b984:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b988:	e03a      	b.n	800ba00 <_printf_i+0xa8>
 800b98a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b98e:	2b15      	cmp	r3, #21
 800b990:	d8f6      	bhi.n	800b980 <_printf_i+0x28>
 800b992:	a101      	add	r1, pc, #4	; (adr r1, 800b998 <_printf_i+0x40>)
 800b994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b998:	0800b9f1 	.word	0x0800b9f1
 800b99c:	0800ba05 	.word	0x0800ba05
 800b9a0:	0800b981 	.word	0x0800b981
 800b9a4:	0800b981 	.word	0x0800b981
 800b9a8:	0800b981 	.word	0x0800b981
 800b9ac:	0800b981 	.word	0x0800b981
 800b9b0:	0800ba05 	.word	0x0800ba05
 800b9b4:	0800b981 	.word	0x0800b981
 800b9b8:	0800b981 	.word	0x0800b981
 800b9bc:	0800b981 	.word	0x0800b981
 800b9c0:	0800b981 	.word	0x0800b981
 800b9c4:	0800bb09 	.word	0x0800bb09
 800b9c8:	0800ba31 	.word	0x0800ba31
 800b9cc:	0800bac3 	.word	0x0800bac3
 800b9d0:	0800b981 	.word	0x0800b981
 800b9d4:	0800b981 	.word	0x0800b981
 800b9d8:	0800bb2b 	.word	0x0800bb2b
 800b9dc:	0800b981 	.word	0x0800b981
 800b9e0:	0800ba31 	.word	0x0800ba31
 800b9e4:	0800b981 	.word	0x0800b981
 800b9e8:	0800b981 	.word	0x0800b981
 800b9ec:	0800bacb 	.word	0x0800bacb
 800b9f0:	682b      	ldr	r3, [r5, #0]
 800b9f2:	1d1a      	adds	r2, r3, #4
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	602a      	str	r2, [r5, #0]
 800b9f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba00:	2301      	movs	r3, #1
 800ba02:	e09f      	b.n	800bb44 <_printf_i+0x1ec>
 800ba04:	6820      	ldr	r0, [r4, #0]
 800ba06:	682b      	ldr	r3, [r5, #0]
 800ba08:	0607      	lsls	r7, r0, #24
 800ba0a:	f103 0104 	add.w	r1, r3, #4
 800ba0e:	6029      	str	r1, [r5, #0]
 800ba10:	d501      	bpl.n	800ba16 <_printf_i+0xbe>
 800ba12:	681e      	ldr	r6, [r3, #0]
 800ba14:	e003      	b.n	800ba1e <_printf_i+0xc6>
 800ba16:	0646      	lsls	r6, r0, #25
 800ba18:	d5fb      	bpl.n	800ba12 <_printf_i+0xba>
 800ba1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ba1e:	2e00      	cmp	r6, #0
 800ba20:	da03      	bge.n	800ba2a <_printf_i+0xd2>
 800ba22:	232d      	movs	r3, #45	; 0x2d
 800ba24:	4276      	negs	r6, r6
 800ba26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba2a:	485a      	ldr	r0, [pc, #360]	; (800bb94 <_printf_i+0x23c>)
 800ba2c:	230a      	movs	r3, #10
 800ba2e:	e012      	b.n	800ba56 <_printf_i+0xfe>
 800ba30:	682b      	ldr	r3, [r5, #0]
 800ba32:	6820      	ldr	r0, [r4, #0]
 800ba34:	1d19      	adds	r1, r3, #4
 800ba36:	6029      	str	r1, [r5, #0]
 800ba38:	0605      	lsls	r5, r0, #24
 800ba3a:	d501      	bpl.n	800ba40 <_printf_i+0xe8>
 800ba3c:	681e      	ldr	r6, [r3, #0]
 800ba3e:	e002      	b.n	800ba46 <_printf_i+0xee>
 800ba40:	0641      	lsls	r1, r0, #25
 800ba42:	d5fb      	bpl.n	800ba3c <_printf_i+0xe4>
 800ba44:	881e      	ldrh	r6, [r3, #0]
 800ba46:	4853      	ldr	r0, [pc, #332]	; (800bb94 <_printf_i+0x23c>)
 800ba48:	2f6f      	cmp	r7, #111	; 0x6f
 800ba4a:	bf0c      	ite	eq
 800ba4c:	2308      	moveq	r3, #8
 800ba4e:	230a      	movne	r3, #10
 800ba50:	2100      	movs	r1, #0
 800ba52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba56:	6865      	ldr	r5, [r4, #4]
 800ba58:	60a5      	str	r5, [r4, #8]
 800ba5a:	2d00      	cmp	r5, #0
 800ba5c:	bfa2      	ittt	ge
 800ba5e:	6821      	ldrge	r1, [r4, #0]
 800ba60:	f021 0104 	bicge.w	r1, r1, #4
 800ba64:	6021      	strge	r1, [r4, #0]
 800ba66:	b90e      	cbnz	r6, 800ba6c <_printf_i+0x114>
 800ba68:	2d00      	cmp	r5, #0
 800ba6a:	d04b      	beq.n	800bb04 <_printf_i+0x1ac>
 800ba6c:	4615      	mov	r5, r2
 800ba6e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ba72:	fb03 6711 	mls	r7, r3, r1, r6
 800ba76:	5dc7      	ldrb	r7, [r0, r7]
 800ba78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ba7c:	4637      	mov	r7, r6
 800ba7e:	42bb      	cmp	r3, r7
 800ba80:	460e      	mov	r6, r1
 800ba82:	d9f4      	bls.n	800ba6e <_printf_i+0x116>
 800ba84:	2b08      	cmp	r3, #8
 800ba86:	d10b      	bne.n	800baa0 <_printf_i+0x148>
 800ba88:	6823      	ldr	r3, [r4, #0]
 800ba8a:	07de      	lsls	r6, r3, #31
 800ba8c:	d508      	bpl.n	800baa0 <_printf_i+0x148>
 800ba8e:	6923      	ldr	r3, [r4, #16]
 800ba90:	6861      	ldr	r1, [r4, #4]
 800ba92:	4299      	cmp	r1, r3
 800ba94:	bfde      	ittt	le
 800ba96:	2330      	movle	r3, #48	; 0x30
 800ba98:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ba9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800baa0:	1b52      	subs	r2, r2, r5
 800baa2:	6122      	str	r2, [r4, #16]
 800baa4:	f8cd a000 	str.w	sl, [sp]
 800baa8:	464b      	mov	r3, r9
 800baaa:	aa03      	add	r2, sp, #12
 800baac:	4621      	mov	r1, r4
 800baae:	4640      	mov	r0, r8
 800bab0:	f7ff fee4 	bl	800b87c <_printf_common>
 800bab4:	3001      	adds	r0, #1
 800bab6:	d14a      	bne.n	800bb4e <_printf_i+0x1f6>
 800bab8:	f04f 30ff 	mov.w	r0, #4294967295
 800babc:	b004      	add	sp, #16
 800babe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bac2:	6823      	ldr	r3, [r4, #0]
 800bac4:	f043 0320 	orr.w	r3, r3, #32
 800bac8:	6023      	str	r3, [r4, #0]
 800baca:	4833      	ldr	r0, [pc, #204]	; (800bb98 <_printf_i+0x240>)
 800bacc:	2778      	movs	r7, #120	; 0x78
 800bace:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bad2:	6823      	ldr	r3, [r4, #0]
 800bad4:	6829      	ldr	r1, [r5, #0]
 800bad6:	061f      	lsls	r7, r3, #24
 800bad8:	f851 6b04 	ldr.w	r6, [r1], #4
 800badc:	d402      	bmi.n	800bae4 <_printf_i+0x18c>
 800bade:	065f      	lsls	r7, r3, #25
 800bae0:	bf48      	it	mi
 800bae2:	b2b6      	uxthmi	r6, r6
 800bae4:	07df      	lsls	r7, r3, #31
 800bae6:	bf48      	it	mi
 800bae8:	f043 0320 	orrmi.w	r3, r3, #32
 800baec:	6029      	str	r1, [r5, #0]
 800baee:	bf48      	it	mi
 800baf0:	6023      	strmi	r3, [r4, #0]
 800baf2:	b91e      	cbnz	r6, 800bafc <_printf_i+0x1a4>
 800baf4:	6823      	ldr	r3, [r4, #0]
 800baf6:	f023 0320 	bic.w	r3, r3, #32
 800bafa:	6023      	str	r3, [r4, #0]
 800bafc:	2310      	movs	r3, #16
 800bafe:	e7a7      	b.n	800ba50 <_printf_i+0xf8>
 800bb00:	4824      	ldr	r0, [pc, #144]	; (800bb94 <_printf_i+0x23c>)
 800bb02:	e7e4      	b.n	800bace <_printf_i+0x176>
 800bb04:	4615      	mov	r5, r2
 800bb06:	e7bd      	b.n	800ba84 <_printf_i+0x12c>
 800bb08:	682b      	ldr	r3, [r5, #0]
 800bb0a:	6826      	ldr	r6, [r4, #0]
 800bb0c:	6961      	ldr	r1, [r4, #20]
 800bb0e:	1d18      	adds	r0, r3, #4
 800bb10:	6028      	str	r0, [r5, #0]
 800bb12:	0635      	lsls	r5, r6, #24
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	d501      	bpl.n	800bb1c <_printf_i+0x1c4>
 800bb18:	6019      	str	r1, [r3, #0]
 800bb1a:	e002      	b.n	800bb22 <_printf_i+0x1ca>
 800bb1c:	0670      	lsls	r0, r6, #25
 800bb1e:	d5fb      	bpl.n	800bb18 <_printf_i+0x1c0>
 800bb20:	8019      	strh	r1, [r3, #0]
 800bb22:	2300      	movs	r3, #0
 800bb24:	6123      	str	r3, [r4, #16]
 800bb26:	4615      	mov	r5, r2
 800bb28:	e7bc      	b.n	800baa4 <_printf_i+0x14c>
 800bb2a:	682b      	ldr	r3, [r5, #0]
 800bb2c:	1d1a      	adds	r2, r3, #4
 800bb2e:	602a      	str	r2, [r5, #0]
 800bb30:	681d      	ldr	r5, [r3, #0]
 800bb32:	6862      	ldr	r2, [r4, #4]
 800bb34:	2100      	movs	r1, #0
 800bb36:	4628      	mov	r0, r5
 800bb38:	f7f4 fb52 	bl	80001e0 <memchr>
 800bb3c:	b108      	cbz	r0, 800bb42 <_printf_i+0x1ea>
 800bb3e:	1b40      	subs	r0, r0, r5
 800bb40:	6060      	str	r0, [r4, #4]
 800bb42:	6863      	ldr	r3, [r4, #4]
 800bb44:	6123      	str	r3, [r4, #16]
 800bb46:	2300      	movs	r3, #0
 800bb48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb4c:	e7aa      	b.n	800baa4 <_printf_i+0x14c>
 800bb4e:	6923      	ldr	r3, [r4, #16]
 800bb50:	462a      	mov	r2, r5
 800bb52:	4649      	mov	r1, r9
 800bb54:	4640      	mov	r0, r8
 800bb56:	47d0      	blx	sl
 800bb58:	3001      	adds	r0, #1
 800bb5a:	d0ad      	beq.n	800bab8 <_printf_i+0x160>
 800bb5c:	6823      	ldr	r3, [r4, #0]
 800bb5e:	079b      	lsls	r3, r3, #30
 800bb60:	d413      	bmi.n	800bb8a <_printf_i+0x232>
 800bb62:	68e0      	ldr	r0, [r4, #12]
 800bb64:	9b03      	ldr	r3, [sp, #12]
 800bb66:	4298      	cmp	r0, r3
 800bb68:	bfb8      	it	lt
 800bb6a:	4618      	movlt	r0, r3
 800bb6c:	e7a6      	b.n	800babc <_printf_i+0x164>
 800bb6e:	2301      	movs	r3, #1
 800bb70:	4632      	mov	r2, r6
 800bb72:	4649      	mov	r1, r9
 800bb74:	4640      	mov	r0, r8
 800bb76:	47d0      	blx	sl
 800bb78:	3001      	adds	r0, #1
 800bb7a:	d09d      	beq.n	800bab8 <_printf_i+0x160>
 800bb7c:	3501      	adds	r5, #1
 800bb7e:	68e3      	ldr	r3, [r4, #12]
 800bb80:	9903      	ldr	r1, [sp, #12]
 800bb82:	1a5b      	subs	r3, r3, r1
 800bb84:	42ab      	cmp	r3, r5
 800bb86:	dcf2      	bgt.n	800bb6e <_printf_i+0x216>
 800bb88:	e7eb      	b.n	800bb62 <_printf_i+0x20a>
 800bb8a:	2500      	movs	r5, #0
 800bb8c:	f104 0619 	add.w	r6, r4, #25
 800bb90:	e7f5      	b.n	800bb7e <_printf_i+0x226>
 800bb92:	bf00      	nop
 800bb94:	0800bcb9 	.word	0x0800bcb9
 800bb98:	0800bcca 	.word	0x0800bcca

0800bb9c <memmove>:
 800bb9c:	4288      	cmp	r0, r1
 800bb9e:	b510      	push	{r4, lr}
 800bba0:	eb01 0402 	add.w	r4, r1, r2
 800bba4:	d902      	bls.n	800bbac <memmove+0x10>
 800bba6:	4284      	cmp	r4, r0
 800bba8:	4623      	mov	r3, r4
 800bbaa:	d807      	bhi.n	800bbbc <memmove+0x20>
 800bbac:	1e43      	subs	r3, r0, #1
 800bbae:	42a1      	cmp	r1, r4
 800bbb0:	d008      	beq.n	800bbc4 <memmove+0x28>
 800bbb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbba:	e7f8      	b.n	800bbae <memmove+0x12>
 800bbbc:	4402      	add	r2, r0
 800bbbe:	4601      	mov	r1, r0
 800bbc0:	428a      	cmp	r2, r1
 800bbc2:	d100      	bne.n	800bbc6 <memmove+0x2a>
 800bbc4:	bd10      	pop	{r4, pc}
 800bbc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bbca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bbce:	e7f7      	b.n	800bbc0 <memmove+0x24>

0800bbd0 <memcpy>:
 800bbd0:	440a      	add	r2, r1
 800bbd2:	4291      	cmp	r1, r2
 800bbd4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bbd8:	d100      	bne.n	800bbdc <memcpy+0xc>
 800bbda:	4770      	bx	lr
 800bbdc:	b510      	push	{r4, lr}
 800bbde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbe2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbe6:	4291      	cmp	r1, r2
 800bbe8:	d1f9      	bne.n	800bbde <memcpy+0xe>
 800bbea:	bd10      	pop	{r4, pc}

0800bbec <_realloc_r>:
 800bbec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbf0:	4680      	mov	r8, r0
 800bbf2:	4614      	mov	r4, r2
 800bbf4:	460e      	mov	r6, r1
 800bbf6:	b921      	cbnz	r1, 800bc02 <_realloc_r+0x16>
 800bbf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbfc:	4611      	mov	r1, r2
 800bbfe:	f7ff bba9 	b.w	800b354 <_malloc_r>
 800bc02:	b92a      	cbnz	r2, 800bc10 <_realloc_r+0x24>
 800bc04:	f7ff fc96 	bl	800b534 <_free_r>
 800bc08:	4625      	mov	r5, r4
 800bc0a:	4628      	mov	r0, r5
 800bc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc10:	f000 f81b 	bl	800bc4a <_malloc_usable_size_r>
 800bc14:	4284      	cmp	r4, r0
 800bc16:	4607      	mov	r7, r0
 800bc18:	d802      	bhi.n	800bc20 <_realloc_r+0x34>
 800bc1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc1e:	d812      	bhi.n	800bc46 <_realloc_r+0x5a>
 800bc20:	4621      	mov	r1, r4
 800bc22:	4640      	mov	r0, r8
 800bc24:	f7ff fb96 	bl	800b354 <_malloc_r>
 800bc28:	4605      	mov	r5, r0
 800bc2a:	2800      	cmp	r0, #0
 800bc2c:	d0ed      	beq.n	800bc0a <_realloc_r+0x1e>
 800bc2e:	42bc      	cmp	r4, r7
 800bc30:	4622      	mov	r2, r4
 800bc32:	4631      	mov	r1, r6
 800bc34:	bf28      	it	cs
 800bc36:	463a      	movcs	r2, r7
 800bc38:	f7ff ffca 	bl	800bbd0 <memcpy>
 800bc3c:	4631      	mov	r1, r6
 800bc3e:	4640      	mov	r0, r8
 800bc40:	f7ff fc78 	bl	800b534 <_free_r>
 800bc44:	e7e1      	b.n	800bc0a <_realloc_r+0x1e>
 800bc46:	4635      	mov	r5, r6
 800bc48:	e7df      	b.n	800bc0a <_realloc_r+0x1e>

0800bc4a <_malloc_usable_size_r>:
 800bc4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc4e:	1f18      	subs	r0, r3, #4
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	bfbc      	itt	lt
 800bc54:	580b      	ldrlt	r3, [r1, r0]
 800bc56:	18c0      	addlt	r0, r0, r3
 800bc58:	4770      	bx	lr
	...

0800bc5c <_init>:
 800bc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc5e:	bf00      	nop
 800bc60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc62:	bc08      	pop	{r3}
 800bc64:	469e      	mov	lr, r3
 800bc66:	4770      	bx	lr

0800bc68 <_fini>:
 800bc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc6a:	bf00      	nop
 800bc6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc6e:	bc08      	pop	{r3}
 800bc70:	469e      	mov	lr, r3
 800bc72:	4770      	bx	lr
