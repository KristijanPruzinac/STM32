
Project 7 - Gimbal control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f28  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08005fe8  08005fe8  00015fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006134  08006134  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006134  08006134  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006134  08006134  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006134  08006134  00016134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006138  08006138  00016138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800613c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  2000000c  08006148  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08006148  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001450d  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002864  00000000  00000000  00034584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d0  00000000  00000000  00036de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000edf  00000000  00000000  000380b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001558c  00000000  00000000  00038f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017026  00000000  00000000  0004e523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008972b  00000000  00000000  00065549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004700  00000000  00000000  000eec74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000f3374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005fd0 	.word	0x08005fd0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08005fd0 	.word	0x08005fd0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	; 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f000 fe52 	bl	8000ed0 <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 fdb5 	bl	8000da0 <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	; 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 fc0f 	bl	8000a60 <__aeabi_fsub>
 8000242:	f000 fdad 	bl	8000da0 <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	; 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fadd>:
 8000250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000252:	4647      	mov	r7, r8
 8000254:	46ce      	mov	lr, r9
 8000256:	024a      	lsls	r2, r1, #9
 8000258:	0243      	lsls	r3, r0, #9
 800025a:	0045      	lsls	r5, r0, #1
 800025c:	0fc4      	lsrs	r4, r0, #31
 800025e:	0a50      	lsrs	r0, r2, #9
 8000260:	4680      	mov	r8, r0
 8000262:	0048      	lsls	r0, r1, #1
 8000264:	0a5b      	lsrs	r3, r3, #9
 8000266:	0e00      	lsrs	r0, r0, #24
 8000268:	0992      	lsrs	r2, r2, #6
 800026a:	4694      	mov	ip, r2
 800026c:	b580      	push	{r7, lr}
 800026e:	001e      	movs	r6, r3
 8000270:	4681      	mov	r9, r0
 8000272:	0002      	movs	r2, r0
 8000274:	0e2d      	lsrs	r5, r5, #24
 8000276:	00df      	lsls	r7, r3, #3
 8000278:	0fc9      	lsrs	r1, r1, #31
 800027a:	428c      	cmp	r4, r1
 800027c:	d024      	beq.n	80002c8 <__aeabi_fadd+0x78>
 800027e:	1a28      	subs	r0, r5, r0
 8000280:	2800      	cmp	r0, #0
 8000282:	dd0e      	ble.n	80002a2 <__aeabi_fadd+0x52>
 8000284:	2a00      	cmp	r2, #0
 8000286:	d13e      	bne.n	8000306 <__aeabi_fadd+0xb6>
 8000288:	4662      	mov	r2, ip
 800028a:	2a00      	cmp	r2, #0
 800028c:	d100      	bne.n	8000290 <__aeabi_fadd+0x40>
 800028e:	e0fd      	b.n	800048c <__aeabi_fadd+0x23c>
 8000290:	1e42      	subs	r2, r0, #1
 8000292:	2801      	cmp	r0, #1
 8000294:	d100      	bne.n	8000298 <__aeabi_fadd+0x48>
 8000296:	e137      	b.n	8000508 <__aeabi_fadd+0x2b8>
 8000298:	28ff      	cmp	r0, #255	; 0xff
 800029a:	d100      	bne.n	800029e <__aeabi_fadd+0x4e>
 800029c:	e0a9      	b.n	80003f2 <__aeabi_fadd+0x1a2>
 800029e:	0010      	movs	r0, r2
 80002a0:	e039      	b.n	8000316 <__aeabi_fadd+0xc6>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	d063      	beq.n	800036e <__aeabi_fadd+0x11e>
 80002a6:	464b      	mov	r3, r9
 80002a8:	1b52      	subs	r2, r2, r5
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	d000      	beq.n	80002b0 <__aeabi_fadd+0x60>
 80002ae:	e0e0      	b.n	8000472 <__aeabi_fadd+0x222>
 80002b0:	2f00      	cmp	r7, #0
 80002b2:	d100      	bne.n	80002b6 <__aeabi_fadd+0x66>
 80002b4:	e0ce      	b.n	8000454 <__aeabi_fadd+0x204>
 80002b6:	1e53      	subs	r3, r2, #1
 80002b8:	2a01      	cmp	r2, #1
 80002ba:	d100      	bne.n	80002be <__aeabi_fadd+0x6e>
 80002bc:	e155      	b.n	800056a <__aeabi_fadd+0x31a>
 80002be:	2aff      	cmp	r2, #255	; 0xff
 80002c0:	d100      	bne.n	80002c4 <__aeabi_fadd+0x74>
 80002c2:	e094      	b.n	80003ee <__aeabi_fadd+0x19e>
 80002c4:	001a      	movs	r2, r3
 80002c6:	e0d9      	b.n	800047c <__aeabi_fadd+0x22c>
 80002c8:	1a2a      	subs	r2, r5, r0
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	dc00      	bgt.n	80002d0 <__aeabi_fadd+0x80>
 80002ce:	e099      	b.n	8000404 <__aeabi_fadd+0x1b4>
 80002d0:	2800      	cmp	r0, #0
 80002d2:	d062      	beq.n	800039a <__aeabi_fadd+0x14a>
 80002d4:	2dff      	cmp	r5, #255	; 0xff
 80002d6:	d100      	bne.n	80002da <__aeabi_fadd+0x8a>
 80002d8:	e08b      	b.n	80003f2 <__aeabi_fadd+0x1a2>
 80002da:	2380      	movs	r3, #128	; 0x80
 80002dc:	4661      	mov	r1, ip
 80002de:	04db      	lsls	r3, r3, #19
 80002e0:	4319      	orrs	r1, r3
 80002e2:	468c      	mov	ip, r1
 80002e4:	2a1b      	cmp	r2, #27
 80002e6:	dc00      	bgt.n	80002ea <__aeabi_fadd+0x9a>
 80002e8:	e0d2      	b.n	8000490 <__aeabi_fadd+0x240>
 80002ea:	2301      	movs	r3, #1
 80002ec:	19db      	adds	r3, r3, r7
 80002ee:	015a      	lsls	r2, r3, #5
 80002f0:	d56a      	bpl.n	80003c8 <__aeabi_fadd+0x178>
 80002f2:	3501      	adds	r5, #1
 80002f4:	2dff      	cmp	r5, #255	; 0xff
 80002f6:	d05b      	beq.n	80003b0 <__aeabi_fadd+0x160>
 80002f8:	2201      	movs	r2, #1
 80002fa:	49a3      	ldr	r1, [pc, #652]	; (8000588 <__aeabi_fadd+0x338>)
 80002fc:	401a      	ands	r2, r3
 80002fe:	085b      	lsrs	r3, r3, #1
 8000300:	400b      	ands	r3, r1
 8000302:	4313      	orrs	r3, r2
 8000304:	e01c      	b.n	8000340 <__aeabi_fadd+0xf0>
 8000306:	2dff      	cmp	r5, #255	; 0xff
 8000308:	d100      	bne.n	800030c <__aeabi_fadd+0xbc>
 800030a:	e072      	b.n	80003f2 <__aeabi_fadd+0x1a2>
 800030c:	2380      	movs	r3, #128	; 0x80
 800030e:	4662      	mov	r2, ip
 8000310:	04db      	lsls	r3, r3, #19
 8000312:	431a      	orrs	r2, r3
 8000314:	4694      	mov	ip, r2
 8000316:	281b      	cmp	r0, #27
 8000318:	dc00      	bgt.n	800031c <__aeabi_fadd+0xcc>
 800031a:	e090      	b.n	800043e <__aeabi_fadd+0x1ee>
 800031c:	2301      	movs	r3, #1
 800031e:	1afb      	subs	r3, r7, r3
 8000320:	015a      	lsls	r2, r3, #5
 8000322:	d551      	bpl.n	80003c8 <__aeabi_fadd+0x178>
 8000324:	019b      	lsls	r3, r3, #6
 8000326:	099e      	lsrs	r6, r3, #6
 8000328:	0030      	movs	r0, r6
 800032a:	f000 fddb 	bl	8000ee4 <__clzsi2>
 800032e:	0033      	movs	r3, r6
 8000330:	3805      	subs	r0, #5
 8000332:	4083      	lsls	r3, r0
 8000334:	4285      	cmp	r5, r0
 8000336:	dc00      	bgt.n	800033a <__aeabi_fadd+0xea>
 8000338:	e075      	b.n	8000426 <__aeabi_fadd+0x1d6>
 800033a:	4a94      	ldr	r2, [pc, #592]	; (800058c <__aeabi_fadd+0x33c>)
 800033c:	1a2d      	subs	r5, r5, r0
 800033e:	4013      	ands	r3, r2
 8000340:	075a      	lsls	r2, r3, #29
 8000342:	d004      	beq.n	800034e <__aeabi_fadd+0xfe>
 8000344:	220f      	movs	r2, #15
 8000346:	401a      	ands	r2, r3
 8000348:	2a04      	cmp	r2, #4
 800034a:	d000      	beq.n	800034e <__aeabi_fadd+0xfe>
 800034c:	3304      	adds	r3, #4
 800034e:	015a      	lsls	r2, r3, #5
 8000350:	d53c      	bpl.n	80003cc <__aeabi_fadd+0x17c>
 8000352:	1c68      	adds	r0, r5, #1
 8000354:	2dfe      	cmp	r5, #254	; 0xfe
 8000356:	d02b      	beq.n	80003b0 <__aeabi_fadd+0x160>
 8000358:	019b      	lsls	r3, r3, #6
 800035a:	0a5e      	lsrs	r6, r3, #9
 800035c:	b2c0      	uxtb	r0, r0
 800035e:	05c0      	lsls	r0, r0, #23
 8000360:	4330      	orrs	r0, r6
 8000362:	07e4      	lsls	r4, r4, #31
 8000364:	4320      	orrs	r0, r4
 8000366:	bcc0      	pop	{r6, r7}
 8000368:	46b9      	mov	r9, r7
 800036a:	46b0      	mov	r8, r6
 800036c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800036e:	20fe      	movs	r0, #254	; 0xfe
 8000370:	1c6a      	adds	r2, r5, #1
 8000372:	4210      	tst	r0, r2
 8000374:	d172      	bne.n	800045c <__aeabi_fadd+0x20c>
 8000376:	2d00      	cmp	r5, #0
 8000378:	d000      	beq.n	800037c <__aeabi_fadd+0x12c>
 800037a:	e0ae      	b.n	80004da <__aeabi_fadd+0x28a>
 800037c:	2f00      	cmp	r7, #0
 800037e:	d100      	bne.n	8000382 <__aeabi_fadd+0x132>
 8000380:	e0ec      	b.n	800055c <__aeabi_fadd+0x30c>
 8000382:	4663      	mov	r3, ip
 8000384:	2000      	movs	r0, #0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d0e9      	beq.n	800035e <__aeabi_fadd+0x10e>
 800038a:	1afb      	subs	r3, r7, r3
 800038c:	015a      	lsls	r2, r3, #5
 800038e:	d400      	bmi.n	8000392 <__aeabi_fadd+0x142>
 8000390:	e0f3      	b.n	800057a <__aeabi_fadd+0x32a>
 8000392:	4663      	mov	r3, ip
 8000394:	000c      	movs	r4, r1
 8000396:	1bdb      	subs	r3, r3, r7
 8000398:	e7d2      	b.n	8000340 <__aeabi_fadd+0xf0>
 800039a:	4661      	mov	r1, ip
 800039c:	2900      	cmp	r1, #0
 800039e:	d05b      	beq.n	8000458 <__aeabi_fadd+0x208>
 80003a0:	1e51      	subs	r1, r2, #1
 80003a2:	2a01      	cmp	r2, #1
 80003a4:	d100      	bne.n	80003a8 <__aeabi_fadd+0x158>
 80003a6:	e0a7      	b.n	80004f8 <__aeabi_fadd+0x2a8>
 80003a8:	2aff      	cmp	r2, #255	; 0xff
 80003aa:	d022      	beq.n	80003f2 <__aeabi_fadd+0x1a2>
 80003ac:	000a      	movs	r2, r1
 80003ae:	e799      	b.n	80002e4 <__aeabi_fadd+0x94>
 80003b0:	20ff      	movs	r0, #255	; 0xff
 80003b2:	2600      	movs	r6, #0
 80003b4:	e7d3      	b.n	800035e <__aeabi_fadd+0x10e>
 80003b6:	21fe      	movs	r1, #254	; 0xfe
 80003b8:	1c6a      	adds	r2, r5, #1
 80003ba:	4211      	tst	r1, r2
 80003bc:	d073      	beq.n	80004a6 <__aeabi_fadd+0x256>
 80003be:	2aff      	cmp	r2, #255	; 0xff
 80003c0:	d0f6      	beq.n	80003b0 <__aeabi_fadd+0x160>
 80003c2:	0015      	movs	r5, r2
 80003c4:	4467      	add	r7, ip
 80003c6:	087b      	lsrs	r3, r7, #1
 80003c8:	075a      	lsls	r2, r3, #29
 80003ca:	d1bb      	bne.n	8000344 <__aeabi_fadd+0xf4>
 80003cc:	08db      	lsrs	r3, r3, #3
 80003ce:	2dff      	cmp	r5, #255	; 0xff
 80003d0:	d00f      	beq.n	80003f2 <__aeabi_fadd+0x1a2>
 80003d2:	025b      	lsls	r3, r3, #9
 80003d4:	0a5e      	lsrs	r6, r3, #9
 80003d6:	b2e8      	uxtb	r0, r5
 80003d8:	e7c1      	b.n	800035e <__aeabi_fadd+0x10e>
 80003da:	4662      	mov	r2, ip
 80003dc:	2a00      	cmp	r2, #0
 80003de:	d008      	beq.n	80003f2 <__aeabi_fadd+0x1a2>
 80003e0:	2280      	movs	r2, #128	; 0x80
 80003e2:	03d2      	lsls	r2, r2, #15
 80003e4:	4213      	tst	r3, r2
 80003e6:	d004      	beq.n	80003f2 <__aeabi_fadd+0x1a2>
 80003e8:	4640      	mov	r0, r8
 80003ea:	4210      	tst	r0, r2
 80003ec:	d101      	bne.n	80003f2 <__aeabi_fadd+0x1a2>
 80003ee:	000c      	movs	r4, r1
 80003f0:	4643      	mov	r3, r8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d0dc      	beq.n	80003b0 <__aeabi_fadd+0x160>
 80003f6:	2680      	movs	r6, #128	; 0x80
 80003f8:	03f6      	lsls	r6, r6, #15
 80003fa:	431e      	orrs	r6, r3
 80003fc:	0276      	lsls	r6, r6, #9
 80003fe:	20ff      	movs	r0, #255	; 0xff
 8000400:	0a76      	lsrs	r6, r6, #9
 8000402:	e7ac      	b.n	800035e <__aeabi_fadd+0x10e>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d0d6      	beq.n	80003b6 <__aeabi_fadd+0x166>
 8000408:	1b42      	subs	r2, r0, r5
 800040a:	2d00      	cmp	r5, #0
 800040c:	d05c      	beq.n	80004c8 <__aeabi_fadd+0x278>
 800040e:	28ff      	cmp	r0, #255	; 0xff
 8000410:	d0ee      	beq.n	80003f0 <__aeabi_fadd+0x1a0>
 8000412:	2380      	movs	r3, #128	; 0x80
 8000414:	04db      	lsls	r3, r3, #19
 8000416:	431f      	orrs	r7, r3
 8000418:	2a1b      	cmp	r2, #27
 800041a:	dc00      	bgt.n	800041e <__aeabi_fadd+0x1ce>
 800041c:	e082      	b.n	8000524 <__aeabi_fadd+0x2d4>
 800041e:	2301      	movs	r3, #1
 8000420:	464d      	mov	r5, r9
 8000422:	4463      	add	r3, ip
 8000424:	e763      	b.n	80002ee <__aeabi_fadd+0x9e>
 8000426:	2220      	movs	r2, #32
 8000428:	1b40      	subs	r0, r0, r5
 800042a:	3001      	adds	r0, #1
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	0019      	movs	r1, r3
 8000430:	4093      	lsls	r3, r2
 8000432:	40c1      	lsrs	r1, r0
 8000434:	1e5a      	subs	r2, r3, #1
 8000436:	4193      	sbcs	r3, r2
 8000438:	2500      	movs	r5, #0
 800043a:	430b      	orrs	r3, r1
 800043c:	e780      	b.n	8000340 <__aeabi_fadd+0xf0>
 800043e:	2320      	movs	r3, #32
 8000440:	4661      	mov	r1, ip
 8000442:	1a1b      	subs	r3, r3, r0
 8000444:	4099      	lsls	r1, r3
 8000446:	4662      	mov	r2, ip
 8000448:	000b      	movs	r3, r1
 800044a:	40c2      	lsrs	r2, r0
 800044c:	1e59      	subs	r1, r3, #1
 800044e:	418b      	sbcs	r3, r1
 8000450:	4313      	orrs	r3, r2
 8000452:	e764      	b.n	800031e <__aeabi_fadd+0xce>
 8000454:	000c      	movs	r4, r1
 8000456:	4643      	mov	r3, r8
 8000458:	0015      	movs	r5, r2
 800045a:	e7b8      	b.n	80003ce <__aeabi_fadd+0x17e>
 800045c:	4663      	mov	r3, ip
 800045e:	1afe      	subs	r6, r7, r3
 8000460:	0173      	lsls	r3, r6, #5
 8000462:	d445      	bmi.n	80004f0 <__aeabi_fadd+0x2a0>
 8000464:	2e00      	cmp	r6, #0
 8000466:	d000      	beq.n	800046a <__aeabi_fadd+0x21a>
 8000468:	e75e      	b.n	8000328 <__aeabi_fadd+0xd8>
 800046a:	2400      	movs	r4, #0
 800046c:	2000      	movs	r0, #0
 800046e:	2600      	movs	r6, #0
 8000470:	e775      	b.n	800035e <__aeabi_fadd+0x10e>
 8000472:	2bff      	cmp	r3, #255	; 0xff
 8000474:	d0bb      	beq.n	80003ee <__aeabi_fadd+0x19e>
 8000476:	2380      	movs	r3, #128	; 0x80
 8000478:	04db      	lsls	r3, r3, #19
 800047a:	431f      	orrs	r7, r3
 800047c:	2a1b      	cmp	r2, #27
 800047e:	dd47      	ble.n	8000510 <__aeabi_fadd+0x2c0>
 8000480:	2301      	movs	r3, #1
 8000482:	4662      	mov	r2, ip
 8000484:	000c      	movs	r4, r1
 8000486:	464d      	mov	r5, r9
 8000488:	1ad3      	subs	r3, r2, r3
 800048a:	e749      	b.n	8000320 <__aeabi_fadd+0xd0>
 800048c:	0005      	movs	r5, r0
 800048e:	e79e      	b.n	80003ce <__aeabi_fadd+0x17e>
 8000490:	4661      	mov	r1, ip
 8000492:	2320      	movs	r3, #32
 8000494:	40d1      	lsrs	r1, r2
 8000496:	1a9b      	subs	r3, r3, r2
 8000498:	4662      	mov	r2, ip
 800049a:	409a      	lsls	r2, r3
 800049c:	0013      	movs	r3, r2
 800049e:	1e5a      	subs	r2, r3, #1
 80004a0:	4193      	sbcs	r3, r2
 80004a2:	430b      	orrs	r3, r1
 80004a4:	e722      	b.n	80002ec <__aeabi_fadd+0x9c>
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d146      	bne.n	8000538 <__aeabi_fadd+0x2e8>
 80004aa:	2f00      	cmp	r7, #0
 80004ac:	d062      	beq.n	8000574 <__aeabi_fadd+0x324>
 80004ae:	4663      	mov	r3, ip
 80004b0:	2000      	movs	r0, #0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d100      	bne.n	80004b8 <__aeabi_fadd+0x268>
 80004b6:	e752      	b.n	800035e <__aeabi_fadd+0x10e>
 80004b8:	003b      	movs	r3, r7
 80004ba:	4463      	add	r3, ip
 80004bc:	015a      	lsls	r2, r3, #5
 80004be:	d583      	bpl.n	80003c8 <__aeabi_fadd+0x178>
 80004c0:	4a32      	ldr	r2, [pc, #200]	; (800058c <__aeabi_fadd+0x33c>)
 80004c2:	3501      	adds	r5, #1
 80004c4:	4013      	ands	r3, r2
 80004c6:	e77f      	b.n	80003c8 <__aeabi_fadd+0x178>
 80004c8:	2f00      	cmp	r7, #0
 80004ca:	d0c4      	beq.n	8000456 <__aeabi_fadd+0x206>
 80004cc:	1e53      	subs	r3, r2, #1
 80004ce:	2a01      	cmp	r2, #1
 80004d0:	d012      	beq.n	80004f8 <__aeabi_fadd+0x2a8>
 80004d2:	2aff      	cmp	r2, #255	; 0xff
 80004d4:	d08c      	beq.n	80003f0 <__aeabi_fadd+0x1a0>
 80004d6:	001a      	movs	r2, r3
 80004d8:	e79e      	b.n	8000418 <__aeabi_fadd+0x1c8>
 80004da:	2f00      	cmp	r7, #0
 80004dc:	d000      	beq.n	80004e0 <__aeabi_fadd+0x290>
 80004de:	e77c      	b.n	80003da <__aeabi_fadd+0x18a>
 80004e0:	4663      	mov	r3, ip
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d183      	bne.n	80003ee <__aeabi_fadd+0x19e>
 80004e6:	2680      	movs	r6, #128	; 0x80
 80004e8:	2400      	movs	r4, #0
 80004ea:	20ff      	movs	r0, #255	; 0xff
 80004ec:	03f6      	lsls	r6, r6, #15
 80004ee:	e736      	b.n	800035e <__aeabi_fadd+0x10e>
 80004f0:	4663      	mov	r3, ip
 80004f2:	000c      	movs	r4, r1
 80004f4:	1bde      	subs	r6, r3, r7
 80004f6:	e717      	b.n	8000328 <__aeabi_fadd+0xd8>
 80004f8:	003b      	movs	r3, r7
 80004fa:	4463      	add	r3, ip
 80004fc:	2501      	movs	r5, #1
 80004fe:	015a      	lsls	r2, r3, #5
 8000500:	d400      	bmi.n	8000504 <__aeabi_fadd+0x2b4>
 8000502:	e761      	b.n	80003c8 <__aeabi_fadd+0x178>
 8000504:	2502      	movs	r5, #2
 8000506:	e6f7      	b.n	80002f8 <__aeabi_fadd+0xa8>
 8000508:	4663      	mov	r3, ip
 800050a:	2501      	movs	r5, #1
 800050c:	1afb      	subs	r3, r7, r3
 800050e:	e707      	b.n	8000320 <__aeabi_fadd+0xd0>
 8000510:	2320      	movs	r3, #32
 8000512:	1a9b      	subs	r3, r3, r2
 8000514:	0038      	movs	r0, r7
 8000516:	409f      	lsls	r7, r3
 8000518:	003b      	movs	r3, r7
 800051a:	40d0      	lsrs	r0, r2
 800051c:	1e5a      	subs	r2, r3, #1
 800051e:	4193      	sbcs	r3, r2
 8000520:	4303      	orrs	r3, r0
 8000522:	e7ae      	b.n	8000482 <__aeabi_fadd+0x232>
 8000524:	2320      	movs	r3, #32
 8000526:	1a9b      	subs	r3, r3, r2
 8000528:	0039      	movs	r1, r7
 800052a:	409f      	lsls	r7, r3
 800052c:	003b      	movs	r3, r7
 800052e:	40d1      	lsrs	r1, r2
 8000530:	1e5a      	subs	r2, r3, #1
 8000532:	4193      	sbcs	r3, r2
 8000534:	430b      	orrs	r3, r1
 8000536:	e773      	b.n	8000420 <__aeabi_fadd+0x1d0>
 8000538:	2f00      	cmp	r7, #0
 800053a:	d100      	bne.n	800053e <__aeabi_fadd+0x2ee>
 800053c:	e758      	b.n	80003f0 <__aeabi_fadd+0x1a0>
 800053e:	4662      	mov	r2, ip
 8000540:	2a00      	cmp	r2, #0
 8000542:	d100      	bne.n	8000546 <__aeabi_fadd+0x2f6>
 8000544:	e755      	b.n	80003f2 <__aeabi_fadd+0x1a2>
 8000546:	2280      	movs	r2, #128	; 0x80
 8000548:	03d2      	lsls	r2, r2, #15
 800054a:	4213      	tst	r3, r2
 800054c:	d100      	bne.n	8000550 <__aeabi_fadd+0x300>
 800054e:	e750      	b.n	80003f2 <__aeabi_fadd+0x1a2>
 8000550:	4641      	mov	r1, r8
 8000552:	4211      	tst	r1, r2
 8000554:	d000      	beq.n	8000558 <__aeabi_fadd+0x308>
 8000556:	e74c      	b.n	80003f2 <__aeabi_fadd+0x1a2>
 8000558:	4643      	mov	r3, r8
 800055a:	e74a      	b.n	80003f2 <__aeabi_fadd+0x1a2>
 800055c:	4663      	mov	r3, ip
 800055e:	2b00      	cmp	r3, #0
 8000560:	d083      	beq.n	800046a <__aeabi_fadd+0x21a>
 8000562:	000c      	movs	r4, r1
 8000564:	4646      	mov	r6, r8
 8000566:	2000      	movs	r0, #0
 8000568:	e6f9      	b.n	800035e <__aeabi_fadd+0x10e>
 800056a:	4663      	mov	r3, ip
 800056c:	000c      	movs	r4, r1
 800056e:	1bdb      	subs	r3, r3, r7
 8000570:	3501      	adds	r5, #1
 8000572:	e6d5      	b.n	8000320 <__aeabi_fadd+0xd0>
 8000574:	4646      	mov	r6, r8
 8000576:	2000      	movs	r0, #0
 8000578:	e6f1      	b.n	800035e <__aeabi_fadd+0x10e>
 800057a:	2b00      	cmp	r3, #0
 800057c:	d000      	beq.n	8000580 <__aeabi_fadd+0x330>
 800057e:	e723      	b.n	80003c8 <__aeabi_fadd+0x178>
 8000580:	2400      	movs	r4, #0
 8000582:	2600      	movs	r6, #0
 8000584:	e6eb      	b.n	800035e <__aeabi_fadd+0x10e>
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	7dffffff 	.word	0x7dffffff
 800058c:	fbffffff 	.word	0xfbffffff

08000590 <__aeabi_fdiv>:
 8000590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000592:	464f      	mov	r7, r9
 8000594:	4646      	mov	r6, r8
 8000596:	46d6      	mov	lr, sl
 8000598:	0245      	lsls	r5, r0, #9
 800059a:	b5c0      	push	{r6, r7, lr}
 800059c:	0047      	lsls	r7, r0, #1
 800059e:	1c0c      	adds	r4, r1, #0
 80005a0:	0a6d      	lsrs	r5, r5, #9
 80005a2:	0e3f      	lsrs	r7, r7, #24
 80005a4:	0fc6      	lsrs	r6, r0, #31
 80005a6:	2f00      	cmp	r7, #0
 80005a8:	d100      	bne.n	80005ac <__aeabi_fdiv+0x1c>
 80005aa:	e06f      	b.n	800068c <__aeabi_fdiv+0xfc>
 80005ac:	2fff      	cmp	r7, #255	; 0xff
 80005ae:	d100      	bne.n	80005b2 <__aeabi_fdiv+0x22>
 80005b0:	e074      	b.n	800069c <__aeabi_fdiv+0x10c>
 80005b2:	2300      	movs	r3, #0
 80005b4:	2280      	movs	r2, #128	; 0x80
 80005b6:	4699      	mov	r9, r3
 80005b8:	469a      	mov	sl, r3
 80005ba:	00ed      	lsls	r5, r5, #3
 80005bc:	04d2      	lsls	r2, r2, #19
 80005be:	4315      	orrs	r5, r2
 80005c0:	3f7f      	subs	r7, #127	; 0x7f
 80005c2:	0263      	lsls	r3, r4, #9
 80005c4:	0a5b      	lsrs	r3, r3, #9
 80005c6:	4698      	mov	r8, r3
 80005c8:	0063      	lsls	r3, r4, #1
 80005ca:	0e1b      	lsrs	r3, r3, #24
 80005cc:	0fe4      	lsrs	r4, r4, #31
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d04d      	beq.n	800066e <__aeabi_fdiv+0xde>
 80005d2:	2bff      	cmp	r3, #255	; 0xff
 80005d4:	d045      	beq.n	8000662 <__aeabi_fdiv+0xd2>
 80005d6:	4642      	mov	r2, r8
 80005d8:	2180      	movs	r1, #128	; 0x80
 80005da:	00d2      	lsls	r2, r2, #3
 80005dc:	04c9      	lsls	r1, r1, #19
 80005de:	4311      	orrs	r1, r2
 80005e0:	4688      	mov	r8, r1
 80005e2:	2200      	movs	r2, #0
 80005e4:	3b7f      	subs	r3, #127	; 0x7f
 80005e6:	0031      	movs	r1, r6
 80005e8:	1aff      	subs	r7, r7, r3
 80005ea:	464b      	mov	r3, r9
 80005ec:	4061      	eors	r1, r4
 80005ee:	b2c9      	uxtb	r1, r1
 80005f0:	2b0f      	cmp	r3, #15
 80005f2:	d900      	bls.n	80005f6 <__aeabi_fdiv+0x66>
 80005f4:	e0b8      	b.n	8000768 <__aeabi_fdiv+0x1d8>
 80005f6:	4870      	ldr	r0, [pc, #448]	; (80007b8 <__aeabi_fdiv+0x228>)
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	58c3      	ldr	r3, [r0, r3]
 80005fc:	469f      	mov	pc, r3
 80005fe:	2300      	movs	r3, #0
 8000600:	4698      	mov	r8, r3
 8000602:	0026      	movs	r6, r4
 8000604:	4645      	mov	r5, r8
 8000606:	4692      	mov	sl, r2
 8000608:	4653      	mov	r3, sl
 800060a:	2b02      	cmp	r3, #2
 800060c:	d100      	bne.n	8000610 <__aeabi_fdiv+0x80>
 800060e:	e08d      	b.n	800072c <__aeabi_fdiv+0x19c>
 8000610:	2b03      	cmp	r3, #3
 8000612:	d100      	bne.n	8000616 <__aeabi_fdiv+0x86>
 8000614:	e0a1      	b.n	800075a <__aeabi_fdiv+0x1ca>
 8000616:	2b01      	cmp	r3, #1
 8000618:	d018      	beq.n	800064c <__aeabi_fdiv+0xbc>
 800061a:	003b      	movs	r3, r7
 800061c:	337f      	adds	r3, #127	; 0x7f
 800061e:	2b00      	cmp	r3, #0
 8000620:	dd6d      	ble.n	80006fe <__aeabi_fdiv+0x16e>
 8000622:	076a      	lsls	r2, r5, #29
 8000624:	d004      	beq.n	8000630 <__aeabi_fdiv+0xa0>
 8000626:	220f      	movs	r2, #15
 8000628:	402a      	ands	r2, r5
 800062a:	2a04      	cmp	r2, #4
 800062c:	d000      	beq.n	8000630 <__aeabi_fdiv+0xa0>
 800062e:	3504      	adds	r5, #4
 8000630:	012a      	lsls	r2, r5, #4
 8000632:	d503      	bpl.n	800063c <__aeabi_fdiv+0xac>
 8000634:	4b61      	ldr	r3, [pc, #388]	; (80007bc <__aeabi_fdiv+0x22c>)
 8000636:	401d      	ands	r5, r3
 8000638:	003b      	movs	r3, r7
 800063a:	3380      	adds	r3, #128	; 0x80
 800063c:	2bfe      	cmp	r3, #254	; 0xfe
 800063e:	dd00      	ble.n	8000642 <__aeabi_fdiv+0xb2>
 8000640:	e074      	b.n	800072c <__aeabi_fdiv+0x19c>
 8000642:	01aa      	lsls	r2, r5, #6
 8000644:	0a52      	lsrs	r2, r2, #9
 8000646:	b2d8      	uxtb	r0, r3
 8000648:	e002      	b.n	8000650 <__aeabi_fdiv+0xc0>
 800064a:	000e      	movs	r6, r1
 800064c:	2000      	movs	r0, #0
 800064e:	2200      	movs	r2, #0
 8000650:	05c0      	lsls	r0, r0, #23
 8000652:	07f6      	lsls	r6, r6, #31
 8000654:	4310      	orrs	r0, r2
 8000656:	4330      	orrs	r0, r6
 8000658:	bce0      	pop	{r5, r6, r7}
 800065a:	46ba      	mov	sl, r7
 800065c:	46b1      	mov	r9, r6
 800065e:	46a8      	mov	r8, r5
 8000660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000662:	4643      	mov	r3, r8
 8000664:	2b00      	cmp	r3, #0
 8000666:	d13f      	bne.n	80006e8 <__aeabi_fdiv+0x158>
 8000668:	2202      	movs	r2, #2
 800066a:	3fff      	subs	r7, #255	; 0xff
 800066c:	e003      	b.n	8000676 <__aeabi_fdiv+0xe6>
 800066e:	4643      	mov	r3, r8
 8000670:	2b00      	cmp	r3, #0
 8000672:	d12d      	bne.n	80006d0 <__aeabi_fdiv+0x140>
 8000674:	2201      	movs	r2, #1
 8000676:	0031      	movs	r1, r6
 8000678:	464b      	mov	r3, r9
 800067a:	4061      	eors	r1, r4
 800067c:	b2c9      	uxtb	r1, r1
 800067e:	4313      	orrs	r3, r2
 8000680:	2b0f      	cmp	r3, #15
 8000682:	d838      	bhi.n	80006f6 <__aeabi_fdiv+0x166>
 8000684:	484e      	ldr	r0, [pc, #312]	; (80007c0 <__aeabi_fdiv+0x230>)
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	58c3      	ldr	r3, [r0, r3]
 800068a:	469f      	mov	pc, r3
 800068c:	2d00      	cmp	r5, #0
 800068e:	d113      	bne.n	80006b8 <__aeabi_fdiv+0x128>
 8000690:	2304      	movs	r3, #4
 8000692:	4699      	mov	r9, r3
 8000694:	3b03      	subs	r3, #3
 8000696:	2700      	movs	r7, #0
 8000698:	469a      	mov	sl, r3
 800069a:	e792      	b.n	80005c2 <__aeabi_fdiv+0x32>
 800069c:	2d00      	cmp	r5, #0
 800069e:	d105      	bne.n	80006ac <__aeabi_fdiv+0x11c>
 80006a0:	2308      	movs	r3, #8
 80006a2:	4699      	mov	r9, r3
 80006a4:	3b06      	subs	r3, #6
 80006a6:	27ff      	movs	r7, #255	; 0xff
 80006a8:	469a      	mov	sl, r3
 80006aa:	e78a      	b.n	80005c2 <__aeabi_fdiv+0x32>
 80006ac:	230c      	movs	r3, #12
 80006ae:	4699      	mov	r9, r3
 80006b0:	3b09      	subs	r3, #9
 80006b2:	27ff      	movs	r7, #255	; 0xff
 80006b4:	469a      	mov	sl, r3
 80006b6:	e784      	b.n	80005c2 <__aeabi_fdiv+0x32>
 80006b8:	0028      	movs	r0, r5
 80006ba:	f000 fc13 	bl	8000ee4 <__clzsi2>
 80006be:	2776      	movs	r7, #118	; 0x76
 80006c0:	1f43      	subs	r3, r0, #5
 80006c2:	409d      	lsls	r5, r3
 80006c4:	2300      	movs	r3, #0
 80006c6:	427f      	negs	r7, r7
 80006c8:	4699      	mov	r9, r3
 80006ca:	469a      	mov	sl, r3
 80006cc:	1a3f      	subs	r7, r7, r0
 80006ce:	e778      	b.n	80005c2 <__aeabi_fdiv+0x32>
 80006d0:	4640      	mov	r0, r8
 80006d2:	f000 fc07 	bl	8000ee4 <__clzsi2>
 80006d6:	4642      	mov	r2, r8
 80006d8:	1f43      	subs	r3, r0, #5
 80006da:	409a      	lsls	r2, r3
 80006dc:	2376      	movs	r3, #118	; 0x76
 80006de:	425b      	negs	r3, r3
 80006e0:	4690      	mov	r8, r2
 80006e2:	1a1b      	subs	r3, r3, r0
 80006e4:	2200      	movs	r2, #0
 80006e6:	e77e      	b.n	80005e6 <__aeabi_fdiv+0x56>
 80006e8:	2303      	movs	r3, #3
 80006ea:	464a      	mov	r2, r9
 80006ec:	431a      	orrs	r2, r3
 80006ee:	4691      	mov	r9, r2
 80006f0:	33fc      	adds	r3, #252	; 0xfc
 80006f2:	2203      	movs	r2, #3
 80006f4:	e777      	b.n	80005e6 <__aeabi_fdiv+0x56>
 80006f6:	000e      	movs	r6, r1
 80006f8:	20ff      	movs	r0, #255	; 0xff
 80006fa:	2200      	movs	r2, #0
 80006fc:	e7a8      	b.n	8000650 <__aeabi_fdiv+0xc0>
 80006fe:	2201      	movs	r2, #1
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	2b1b      	cmp	r3, #27
 8000704:	dca2      	bgt.n	800064c <__aeabi_fdiv+0xbc>
 8000706:	379e      	adds	r7, #158	; 0x9e
 8000708:	002a      	movs	r2, r5
 800070a:	40bd      	lsls	r5, r7
 800070c:	40da      	lsrs	r2, r3
 800070e:	1e6b      	subs	r3, r5, #1
 8000710:	419d      	sbcs	r5, r3
 8000712:	4315      	orrs	r5, r2
 8000714:	076a      	lsls	r2, r5, #29
 8000716:	d004      	beq.n	8000722 <__aeabi_fdiv+0x192>
 8000718:	220f      	movs	r2, #15
 800071a:	402a      	ands	r2, r5
 800071c:	2a04      	cmp	r2, #4
 800071e:	d000      	beq.n	8000722 <__aeabi_fdiv+0x192>
 8000720:	3504      	adds	r5, #4
 8000722:	016a      	lsls	r2, r5, #5
 8000724:	d544      	bpl.n	80007b0 <__aeabi_fdiv+0x220>
 8000726:	2001      	movs	r0, #1
 8000728:	2200      	movs	r2, #0
 800072a:	e791      	b.n	8000650 <__aeabi_fdiv+0xc0>
 800072c:	20ff      	movs	r0, #255	; 0xff
 800072e:	2200      	movs	r2, #0
 8000730:	e78e      	b.n	8000650 <__aeabi_fdiv+0xc0>
 8000732:	2280      	movs	r2, #128	; 0x80
 8000734:	2600      	movs	r6, #0
 8000736:	20ff      	movs	r0, #255	; 0xff
 8000738:	03d2      	lsls	r2, r2, #15
 800073a:	e789      	b.n	8000650 <__aeabi_fdiv+0xc0>
 800073c:	2300      	movs	r3, #0
 800073e:	4698      	mov	r8, r3
 8000740:	2280      	movs	r2, #128	; 0x80
 8000742:	03d2      	lsls	r2, r2, #15
 8000744:	4215      	tst	r5, r2
 8000746:	d008      	beq.n	800075a <__aeabi_fdiv+0x1ca>
 8000748:	4643      	mov	r3, r8
 800074a:	4213      	tst	r3, r2
 800074c:	d105      	bne.n	800075a <__aeabi_fdiv+0x1ca>
 800074e:	431a      	orrs	r2, r3
 8000750:	0252      	lsls	r2, r2, #9
 8000752:	0026      	movs	r6, r4
 8000754:	20ff      	movs	r0, #255	; 0xff
 8000756:	0a52      	lsrs	r2, r2, #9
 8000758:	e77a      	b.n	8000650 <__aeabi_fdiv+0xc0>
 800075a:	2280      	movs	r2, #128	; 0x80
 800075c:	03d2      	lsls	r2, r2, #15
 800075e:	432a      	orrs	r2, r5
 8000760:	0252      	lsls	r2, r2, #9
 8000762:	20ff      	movs	r0, #255	; 0xff
 8000764:	0a52      	lsrs	r2, r2, #9
 8000766:	e773      	b.n	8000650 <__aeabi_fdiv+0xc0>
 8000768:	4642      	mov	r2, r8
 800076a:	016b      	lsls	r3, r5, #5
 800076c:	0155      	lsls	r5, r2, #5
 800076e:	42ab      	cmp	r3, r5
 8000770:	d21a      	bcs.n	80007a8 <__aeabi_fdiv+0x218>
 8000772:	201b      	movs	r0, #27
 8000774:	2200      	movs	r2, #0
 8000776:	3f01      	subs	r7, #1
 8000778:	2601      	movs	r6, #1
 800077a:	001c      	movs	r4, r3
 800077c:	0052      	lsls	r2, r2, #1
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	2c00      	cmp	r4, #0
 8000782:	db01      	blt.n	8000788 <__aeabi_fdiv+0x1f8>
 8000784:	429d      	cmp	r5, r3
 8000786:	d801      	bhi.n	800078c <__aeabi_fdiv+0x1fc>
 8000788:	1b5b      	subs	r3, r3, r5
 800078a:	4332      	orrs	r2, r6
 800078c:	3801      	subs	r0, #1
 800078e:	2800      	cmp	r0, #0
 8000790:	d1f3      	bne.n	800077a <__aeabi_fdiv+0x1ea>
 8000792:	1e58      	subs	r0, r3, #1
 8000794:	4183      	sbcs	r3, r0
 8000796:	4313      	orrs	r3, r2
 8000798:	001d      	movs	r5, r3
 800079a:	003b      	movs	r3, r7
 800079c:	337f      	adds	r3, #127	; 0x7f
 800079e:	000e      	movs	r6, r1
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dd00      	ble.n	80007a6 <__aeabi_fdiv+0x216>
 80007a4:	e73d      	b.n	8000622 <__aeabi_fdiv+0x92>
 80007a6:	e7aa      	b.n	80006fe <__aeabi_fdiv+0x16e>
 80007a8:	201a      	movs	r0, #26
 80007aa:	2201      	movs	r2, #1
 80007ac:	1b5b      	subs	r3, r3, r5
 80007ae:	e7e3      	b.n	8000778 <__aeabi_fdiv+0x1e8>
 80007b0:	01aa      	lsls	r2, r5, #6
 80007b2:	2000      	movs	r0, #0
 80007b4:	0a52      	lsrs	r2, r2, #9
 80007b6:	e74b      	b.n	8000650 <__aeabi_fdiv+0xc0>
 80007b8:	08005fe8 	.word	0x08005fe8
 80007bc:	f7ffffff 	.word	0xf7ffffff
 80007c0:	08006028 	.word	0x08006028

080007c4 <__aeabi_fmul>:
 80007c4:	0243      	lsls	r3, r0, #9
 80007c6:	0a5b      	lsrs	r3, r3, #9
 80007c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ca:	464f      	mov	r7, r9
 80007cc:	4646      	mov	r6, r8
 80007ce:	4699      	mov	r9, r3
 80007d0:	46d6      	mov	lr, sl
 80007d2:	0fc3      	lsrs	r3, r0, #31
 80007d4:	0045      	lsls	r5, r0, #1
 80007d6:	4698      	mov	r8, r3
 80007d8:	b5c0      	push	{r6, r7, lr}
 80007da:	464b      	mov	r3, r9
 80007dc:	1c0f      	adds	r7, r1, #0
 80007de:	0e2d      	lsrs	r5, r5, #24
 80007e0:	d100      	bne.n	80007e4 <__aeabi_fmul+0x20>
 80007e2:	e0cb      	b.n	800097c <__aeabi_fmul+0x1b8>
 80007e4:	2dff      	cmp	r5, #255	; 0xff
 80007e6:	d100      	bne.n	80007ea <__aeabi_fmul+0x26>
 80007e8:	e0cf      	b.n	800098a <__aeabi_fmul+0x1c6>
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	00db      	lsls	r3, r3, #3
 80007ee:	04d2      	lsls	r2, r2, #19
 80007f0:	431a      	orrs	r2, r3
 80007f2:	2300      	movs	r3, #0
 80007f4:	4691      	mov	r9, r2
 80007f6:	2600      	movs	r6, #0
 80007f8:	469a      	mov	sl, r3
 80007fa:	3d7f      	subs	r5, #127	; 0x7f
 80007fc:	027c      	lsls	r4, r7, #9
 80007fe:	007b      	lsls	r3, r7, #1
 8000800:	0a64      	lsrs	r4, r4, #9
 8000802:	0e1b      	lsrs	r3, r3, #24
 8000804:	0fff      	lsrs	r7, r7, #31
 8000806:	2b00      	cmp	r3, #0
 8000808:	d100      	bne.n	800080c <__aeabi_fmul+0x48>
 800080a:	e0a9      	b.n	8000960 <__aeabi_fmul+0x19c>
 800080c:	2bff      	cmp	r3, #255	; 0xff
 800080e:	d011      	beq.n	8000834 <__aeabi_fmul+0x70>
 8000810:	2280      	movs	r2, #128	; 0x80
 8000812:	00e4      	lsls	r4, r4, #3
 8000814:	04d2      	lsls	r2, r2, #19
 8000816:	4314      	orrs	r4, r2
 8000818:	4642      	mov	r2, r8
 800081a:	3b7f      	subs	r3, #127	; 0x7f
 800081c:	195b      	adds	r3, r3, r5
 800081e:	407a      	eors	r2, r7
 8000820:	2000      	movs	r0, #0
 8000822:	b2d2      	uxtb	r2, r2
 8000824:	1c5d      	adds	r5, r3, #1
 8000826:	2e0a      	cmp	r6, #10
 8000828:	dd13      	ble.n	8000852 <__aeabi_fmul+0x8e>
 800082a:	003a      	movs	r2, r7
 800082c:	2e0b      	cmp	r6, #11
 800082e:	d047      	beq.n	80008c0 <__aeabi_fmul+0xfc>
 8000830:	4647      	mov	r7, r8
 8000832:	e03f      	b.n	80008b4 <__aeabi_fmul+0xf0>
 8000834:	002b      	movs	r3, r5
 8000836:	33ff      	adds	r3, #255	; 0xff
 8000838:	2c00      	cmp	r4, #0
 800083a:	d11e      	bne.n	800087a <__aeabi_fmul+0xb6>
 800083c:	2202      	movs	r2, #2
 800083e:	4316      	orrs	r6, r2
 8000840:	4642      	mov	r2, r8
 8000842:	3501      	adds	r5, #1
 8000844:	407a      	eors	r2, r7
 8000846:	b2d2      	uxtb	r2, r2
 8000848:	35ff      	adds	r5, #255	; 0xff
 800084a:	2e0a      	cmp	r6, #10
 800084c:	dd00      	ble.n	8000850 <__aeabi_fmul+0x8c>
 800084e:	e0e4      	b.n	8000a1a <__aeabi_fmul+0x256>
 8000850:	2002      	movs	r0, #2
 8000852:	2e02      	cmp	r6, #2
 8000854:	dc1c      	bgt.n	8000890 <__aeabi_fmul+0xcc>
 8000856:	3e01      	subs	r6, #1
 8000858:	2e01      	cmp	r6, #1
 800085a:	d842      	bhi.n	80008e2 <__aeabi_fmul+0x11e>
 800085c:	2802      	cmp	r0, #2
 800085e:	d03d      	beq.n	80008dc <__aeabi_fmul+0x118>
 8000860:	2801      	cmp	r0, #1
 8000862:	d166      	bne.n	8000932 <__aeabi_fmul+0x16e>
 8000864:	2000      	movs	r0, #0
 8000866:	2100      	movs	r1, #0
 8000868:	05c0      	lsls	r0, r0, #23
 800086a:	4308      	orrs	r0, r1
 800086c:	07d2      	lsls	r2, r2, #31
 800086e:	4310      	orrs	r0, r2
 8000870:	bce0      	pop	{r5, r6, r7}
 8000872:	46ba      	mov	sl, r7
 8000874:	46b1      	mov	r9, r6
 8000876:	46a8      	mov	r8, r5
 8000878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800087a:	2203      	movs	r2, #3
 800087c:	4316      	orrs	r6, r2
 800087e:	4642      	mov	r2, r8
 8000880:	3501      	adds	r5, #1
 8000882:	407a      	eors	r2, r7
 8000884:	b2d2      	uxtb	r2, r2
 8000886:	35ff      	adds	r5, #255	; 0xff
 8000888:	2e0a      	cmp	r6, #10
 800088a:	dd00      	ble.n	800088e <__aeabi_fmul+0xca>
 800088c:	e0e4      	b.n	8000a58 <__aeabi_fmul+0x294>
 800088e:	2003      	movs	r0, #3
 8000890:	2101      	movs	r1, #1
 8000892:	40b1      	lsls	r1, r6
 8000894:	26a6      	movs	r6, #166	; 0xa6
 8000896:	00f6      	lsls	r6, r6, #3
 8000898:	4231      	tst	r1, r6
 800089a:	d10a      	bne.n	80008b2 <__aeabi_fmul+0xee>
 800089c:	2690      	movs	r6, #144	; 0x90
 800089e:	00b6      	lsls	r6, r6, #2
 80008a0:	4231      	tst	r1, r6
 80008a2:	d116      	bne.n	80008d2 <__aeabi_fmul+0x10e>
 80008a4:	3eb9      	subs	r6, #185	; 0xb9
 80008a6:	3eff      	subs	r6, #255	; 0xff
 80008a8:	420e      	tst	r6, r1
 80008aa:	d01a      	beq.n	80008e2 <__aeabi_fmul+0x11e>
 80008ac:	46a1      	mov	r9, r4
 80008ae:	4682      	mov	sl, r0
 80008b0:	e000      	b.n	80008b4 <__aeabi_fmul+0xf0>
 80008b2:	0017      	movs	r7, r2
 80008b4:	4653      	mov	r3, sl
 80008b6:	003a      	movs	r2, r7
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d00f      	beq.n	80008dc <__aeabi_fmul+0x118>
 80008bc:	464c      	mov	r4, r9
 80008be:	4650      	mov	r0, sl
 80008c0:	2803      	cmp	r0, #3
 80008c2:	d1cd      	bne.n	8000860 <__aeabi_fmul+0x9c>
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	03c9      	lsls	r1, r1, #15
 80008c8:	4321      	orrs	r1, r4
 80008ca:	0249      	lsls	r1, r1, #9
 80008cc:	20ff      	movs	r0, #255	; 0xff
 80008ce:	0a49      	lsrs	r1, r1, #9
 80008d0:	e7ca      	b.n	8000868 <__aeabi_fmul+0xa4>
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	2200      	movs	r2, #0
 80008d6:	20ff      	movs	r0, #255	; 0xff
 80008d8:	03c9      	lsls	r1, r1, #15
 80008da:	e7c5      	b.n	8000868 <__aeabi_fmul+0xa4>
 80008dc:	20ff      	movs	r0, #255	; 0xff
 80008de:	2100      	movs	r1, #0
 80008e0:	e7c2      	b.n	8000868 <__aeabi_fmul+0xa4>
 80008e2:	0c20      	lsrs	r0, r4, #16
 80008e4:	4649      	mov	r1, r9
 80008e6:	0424      	lsls	r4, r4, #16
 80008e8:	0c24      	lsrs	r4, r4, #16
 80008ea:	0027      	movs	r7, r4
 80008ec:	0c0e      	lsrs	r6, r1, #16
 80008ee:	0409      	lsls	r1, r1, #16
 80008f0:	0c09      	lsrs	r1, r1, #16
 80008f2:	4374      	muls	r4, r6
 80008f4:	434f      	muls	r7, r1
 80008f6:	4346      	muls	r6, r0
 80008f8:	4348      	muls	r0, r1
 80008fa:	0c39      	lsrs	r1, r7, #16
 80008fc:	1900      	adds	r0, r0, r4
 80008fe:	1809      	adds	r1, r1, r0
 8000900:	428c      	cmp	r4, r1
 8000902:	d903      	bls.n	800090c <__aeabi_fmul+0x148>
 8000904:	2080      	movs	r0, #128	; 0x80
 8000906:	0240      	lsls	r0, r0, #9
 8000908:	4684      	mov	ip, r0
 800090a:	4466      	add	r6, ip
 800090c:	043f      	lsls	r7, r7, #16
 800090e:	0408      	lsls	r0, r1, #16
 8000910:	0c3f      	lsrs	r7, r7, #16
 8000912:	19c0      	adds	r0, r0, r7
 8000914:	0184      	lsls	r4, r0, #6
 8000916:	1e67      	subs	r7, r4, #1
 8000918:	41bc      	sbcs	r4, r7
 800091a:	0c09      	lsrs	r1, r1, #16
 800091c:	0e80      	lsrs	r0, r0, #26
 800091e:	1989      	adds	r1, r1, r6
 8000920:	4304      	orrs	r4, r0
 8000922:	0189      	lsls	r1, r1, #6
 8000924:	430c      	orrs	r4, r1
 8000926:	0109      	lsls	r1, r1, #4
 8000928:	d571      	bpl.n	8000a0e <__aeabi_fmul+0x24a>
 800092a:	2301      	movs	r3, #1
 800092c:	0861      	lsrs	r1, r4, #1
 800092e:	401c      	ands	r4, r3
 8000930:	430c      	orrs	r4, r1
 8000932:	002b      	movs	r3, r5
 8000934:	337f      	adds	r3, #127	; 0x7f
 8000936:	2b00      	cmp	r3, #0
 8000938:	dd51      	ble.n	80009de <__aeabi_fmul+0x21a>
 800093a:	0761      	lsls	r1, r4, #29
 800093c:	d004      	beq.n	8000948 <__aeabi_fmul+0x184>
 800093e:	210f      	movs	r1, #15
 8000940:	4021      	ands	r1, r4
 8000942:	2904      	cmp	r1, #4
 8000944:	d000      	beq.n	8000948 <__aeabi_fmul+0x184>
 8000946:	3404      	adds	r4, #4
 8000948:	0121      	lsls	r1, r4, #4
 800094a:	d503      	bpl.n	8000954 <__aeabi_fmul+0x190>
 800094c:	4b43      	ldr	r3, [pc, #268]	; (8000a5c <__aeabi_fmul+0x298>)
 800094e:	401c      	ands	r4, r3
 8000950:	002b      	movs	r3, r5
 8000952:	3380      	adds	r3, #128	; 0x80
 8000954:	2bfe      	cmp	r3, #254	; 0xfe
 8000956:	dcc1      	bgt.n	80008dc <__aeabi_fmul+0x118>
 8000958:	01a1      	lsls	r1, r4, #6
 800095a:	0a49      	lsrs	r1, r1, #9
 800095c:	b2d8      	uxtb	r0, r3
 800095e:	e783      	b.n	8000868 <__aeabi_fmul+0xa4>
 8000960:	2c00      	cmp	r4, #0
 8000962:	d12c      	bne.n	80009be <__aeabi_fmul+0x1fa>
 8000964:	2301      	movs	r3, #1
 8000966:	4642      	mov	r2, r8
 8000968:	431e      	orrs	r6, r3
 800096a:	002b      	movs	r3, r5
 800096c:	407a      	eors	r2, r7
 800096e:	2001      	movs	r0, #1
 8000970:	b2d2      	uxtb	r2, r2
 8000972:	1c5d      	adds	r5, r3, #1
 8000974:	2e0a      	cmp	r6, #10
 8000976:	dd00      	ble.n	800097a <__aeabi_fmul+0x1b6>
 8000978:	e757      	b.n	800082a <__aeabi_fmul+0x66>
 800097a:	e76a      	b.n	8000852 <__aeabi_fmul+0x8e>
 800097c:	2b00      	cmp	r3, #0
 800097e:	d110      	bne.n	80009a2 <__aeabi_fmul+0x1de>
 8000980:	2301      	movs	r3, #1
 8000982:	2604      	movs	r6, #4
 8000984:	2500      	movs	r5, #0
 8000986:	469a      	mov	sl, r3
 8000988:	e738      	b.n	80007fc <__aeabi_fmul+0x38>
 800098a:	2b00      	cmp	r3, #0
 800098c:	d104      	bne.n	8000998 <__aeabi_fmul+0x1d4>
 800098e:	2302      	movs	r3, #2
 8000990:	2608      	movs	r6, #8
 8000992:	25ff      	movs	r5, #255	; 0xff
 8000994:	469a      	mov	sl, r3
 8000996:	e731      	b.n	80007fc <__aeabi_fmul+0x38>
 8000998:	2303      	movs	r3, #3
 800099a:	260c      	movs	r6, #12
 800099c:	25ff      	movs	r5, #255	; 0xff
 800099e:	469a      	mov	sl, r3
 80009a0:	e72c      	b.n	80007fc <__aeabi_fmul+0x38>
 80009a2:	4648      	mov	r0, r9
 80009a4:	f000 fa9e 	bl	8000ee4 <__clzsi2>
 80009a8:	464a      	mov	r2, r9
 80009aa:	1f43      	subs	r3, r0, #5
 80009ac:	2576      	movs	r5, #118	; 0x76
 80009ae:	409a      	lsls	r2, r3
 80009b0:	2300      	movs	r3, #0
 80009b2:	426d      	negs	r5, r5
 80009b4:	4691      	mov	r9, r2
 80009b6:	2600      	movs	r6, #0
 80009b8:	469a      	mov	sl, r3
 80009ba:	1a2d      	subs	r5, r5, r0
 80009bc:	e71e      	b.n	80007fc <__aeabi_fmul+0x38>
 80009be:	0020      	movs	r0, r4
 80009c0:	f000 fa90 	bl	8000ee4 <__clzsi2>
 80009c4:	4642      	mov	r2, r8
 80009c6:	1f43      	subs	r3, r0, #5
 80009c8:	409c      	lsls	r4, r3
 80009ca:	1a2b      	subs	r3, r5, r0
 80009cc:	3b76      	subs	r3, #118	; 0x76
 80009ce:	407a      	eors	r2, r7
 80009d0:	2000      	movs	r0, #0
 80009d2:	b2d2      	uxtb	r2, r2
 80009d4:	1c5d      	adds	r5, r3, #1
 80009d6:	2e0a      	cmp	r6, #10
 80009d8:	dd00      	ble.n	80009dc <__aeabi_fmul+0x218>
 80009da:	e726      	b.n	800082a <__aeabi_fmul+0x66>
 80009dc:	e739      	b.n	8000852 <__aeabi_fmul+0x8e>
 80009de:	2101      	movs	r1, #1
 80009e0:	1acb      	subs	r3, r1, r3
 80009e2:	2b1b      	cmp	r3, #27
 80009e4:	dd00      	ble.n	80009e8 <__aeabi_fmul+0x224>
 80009e6:	e73d      	b.n	8000864 <__aeabi_fmul+0xa0>
 80009e8:	359e      	adds	r5, #158	; 0x9e
 80009ea:	0021      	movs	r1, r4
 80009ec:	40ac      	lsls	r4, r5
 80009ee:	40d9      	lsrs	r1, r3
 80009f0:	1e63      	subs	r3, r4, #1
 80009f2:	419c      	sbcs	r4, r3
 80009f4:	4321      	orrs	r1, r4
 80009f6:	074b      	lsls	r3, r1, #29
 80009f8:	d004      	beq.n	8000a04 <__aeabi_fmul+0x240>
 80009fa:	230f      	movs	r3, #15
 80009fc:	400b      	ands	r3, r1
 80009fe:	2b04      	cmp	r3, #4
 8000a00:	d000      	beq.n	8000a04 <__aeabi_fmul+0x240>
 8000a02:	3104      	adds	r1, #4
 8000a04:	014b      	lsls	r3, r1, #5
 8000a06:	d504      	bpl.n	8000a12 <__aeabi_fmul+0x24e>
 8000a08:	2001      	movs	r0, #1
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	e72c      	b.n	8000868 <__aeabi_fmul+0xa4>
 8000a0e:	001d      	movs	r5, r3
 8000a10:	e78f      	b.n	8000932 <__aeabi_fmul+0x16e>
 8000a12:	0189      	lsls	r1, r1, #6
 8000a14:	2000      	movs	r0, #0
 8000a16:	0a49      	lsrs	r1, r1, #9
 8000a18:	e726      	b.n	8000868 <__aeabi_fmul+0xa4>
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	2e0f      	cmp	r6, #15
 8000a1e:	d10c      	bne.n	8000a3a <__aeabi_fmul+0x276>
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	464b      	mov	r3, r9
 8000a24:	03c9      	lsls	r1, r1, #15
 8000a26:	420b      	tst	r3, r1
 8000a28:	d00d      	beq.n	8000a46 <__aeabi_fmul+0x282>
 8000a2a:	420c      	tst	r4, r1
 8000a2c:	d10b      	bne.n	8000a46 <__aeabi_fmul+0x282>
 8000a2e:	4321      	orrs	r1, r4
 8000a30:	0249      	lsls	r1, r1, #9
 8000a32:	003a      	movs	r2, r7
 8000a34:	20ff      	movs	r0, #255	; 0xff
 8000a36:	0a49      	lsrs	r1, r1, #9
 8000a38:	e716      	b.n	8000868 <__aeabi_fmul+0xa4>
 8000a3a:	2e0b      	cmp	r6, #11
 8000a3c:	d000      	beq.n	8000a40 <__aeabi_fmul+0x27c>
 8000a3e:	e6f7      	b.n	8000830 <__aeabi_fmul+0x6c>
 8000a40:	46a1      	mov	r9, r4
 8000a42:	469a      	mov	sl, r3
 8000a44:	e736      	b.n	80008b4 <__aeabi_fmul+0xf0>
 8000a46:	2180      	movs	r1, #128	; 0x80
 8000a48:	464b      	mov	r3, r9
 8000a4a:	03c9      	lsls	r1, r1, #15
 8000a4c:	4319      	orrs	r1, r3
 8000a4e:	0249      	lsls	r1, r1, #9
 8000a50:	4642      	mov	r2, r8
 8000a52:	20ff      	movs	r0, #255	; 0xff
 8000a54:	0a49      	lsrs	r1, r1, #9
 8000a56:	e707      	b.n	8000868 <__aeabi_fmul+0xa4>
 8000a58:	2303      	movs	r3, #3
 8000a5a:	e7df      	b.n	8000a1c <__aeabi_fmul+0x258>
 8000a5c:	f7ffffff 	.word	0xf7ffffff

08000a60 <__aeabi_fsub>:
 8000a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a62:	46c6      	mov	lr, r8
 8000a64:	0243      	lsls	r3, r0, #9
 8000a66:	0a5b      	lsrs	r3, r3, #9
 8000a68:	0045      	lsls	r5, r0, #1
 8000a6a:	00da      	lsls	r2, r3, #3
 8000a6c:	0fc4      	lsrs	r4, r0, #31
 8000a6e:	0248      	lsls	r0, r1, #9
 8000a70:	004f      	lsls	r7, r1, #1
 8000a72:	4694      	mov	ip, r2
 8000a74:	0a42      	lsrs	r2, r0, #9
 8000a76:	001e      	movs	r6, r3
 8000a78:	4690      	mov	r8, r2
 8000a7a:	b500      	push	{lr}
 8000a7c:	0e2d      	lsrs	r5, r5, #24
 8000a7e:	0e3f      	lsrs	r7, r7, #24
 8000a80:	0fc9      	lsrs	r1, r1, #31
 8000a82:	0980      	lsrs	r0, r0, #6
 8000a84:	2fff      	cmp	r7, #255	; 0xff
 8000a86:	d059      	beq.n	8000b3c <__aeabi_fsub+0xdc>
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4051      	eors	r1, r2
 8000a8c:	428c      	cmp	r4, r1
 8000a8e:	d039      	beq.n	8000b04 <__aeabi_fsub+0xa4>
 8000a90:	1bea      	subs	r2, r5, r7
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	dd58      	ble.n	8000b48 <__aeabi_fsub+0xe8>
 8000a96:	2f00      	cmp	r7, #0
 8000a98:	d068      	beq.n	8000b6c <__aeabi_fsub+0x10c>
 8000a9a:	2dff      	cmp	r5, #255	; 0xff
 8000a9c:	d100      	bne.n	8000aa0 <__aeabi_fsub+0x40>
 8000a9e:	e0d1      	b.n	8000c44 <__aeabi_fsub+0x1e4>
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	04db      	lsls	r3, r3, #19
 8000aa4:	4318      	orrs	r0, r3
 8000aa6:	2a1b      	cmp	r2, #27
 8000aa8:	dc00      	bgt.n	8000aac <__aeabi_fsub+0x4c>
 8000aaa:	e0e3      	b.n	8000c74 <__aeabi_fsub+0x214>
 8000aac:	2301      	movs	r3, #1
 8000aae:	4662      	mov	r2, ip
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	015a      	lsls	r2, r3, #5
 8000ab4:	d400      	bmi.n	8000ab8 <__aeabi_fsub+0x58>
 8000ab6:	e0ac      	b.n	8000c12 <__aeabi_fsub+0x1b2>
 8000ab8:	019b      	lsls	r3, r3, #6
 8000aba:	099e      	lsrs	r6, r3, #6
 8000abc:	0030      	movs	r0, r6
 8000abe:	f000 fa11 	bl	8000ee4 <__clzsi2>
 8000ac2:	0033      	movs	r3, r6
 8000ac4:	3805      	subs	r0, #5
 8000ac6:	4083      	lsls	r3, r0
 8000ac8:	4285      	cmp	r5, r0
 8000aca:	dc00      	bgt.n	8000ace <__aeabi_fsub+0x6e>
 8000acc:	e0c6      	b.n	8000c5c <__aeabi_fsub+0x1fc>
 8000ace:	4ab2      	ldr	r2, [pc, #712]	; (8000d98 <__aeabi_fsub+0x338>)
 8000ad0:	1a2d      	subs	r5, r5, r0
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	075a      	lsls	r2, r3, #29
 8000ad6:	d004      	beq.n	8000ae2 <__aeabi_fsub+0x82>
 8000ad8:	220f      	movs	r2, #15
 8000ada:	401a      	ands	r2, r3
 8000adc:	2a04      	cmp	r2, #4
 8000ade:	d000      	beq.n	8000ae2 <__aeabi_fsub+0x82>
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	015a      	lsls	r2, r3, #5
 8000ae4:	d400      	bmi.n	8000ae8 <__aeabi_fsub+0x88>
 8000ae6:	e097      	b.n	8000c18 <__aeabi_fsub+0x1b8>
 8000ae8:	1c6a      	adds	r2, r5, #1
 8000aea:	2dfe      	cmp	r5, #254	; 0xfe
 8000aec:	d100      	bne.n	8000af0 <__aeabi_fsub+0x90>
 8000aee:	e084      	b.n	8000bfa <__aeabi_fsub+0x19a>
 8000af0:	019b      	lsls	r3, r3, #6
 8000af2:	0a5e      	lsrs	r6, r3, #9
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	05d0      	lsls	r0, r2, #23
 8000af8:	4330      	orrs	r0, r6
 8000afa:	07e4      	lsls	r4, r4, #31
 8000afc:	4320      	orrs	r0, r4
 8000afe:	bc80      	pop	{r7}
 8000b00:	46b8      	mov	r8, r7
 8000b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b04:	1bea      	subs	r2, r5, r7
 8000b06:	2a00      	cmp	r2, #0
 8000b08:	dd41      	ble.n	8000b8e <__aeabi_fsub+0x12e>
 8000b0a:	2f00      	cmp	r7, #0
 8000b0c:	d06b      	beq.n	8000be6 <__aeabi_fsub+0x186>
 8000b0e:	2dff      	cmp	r5, #255	; 0xff
 8000b10:	d100      	bne.n	8000b14 <__aeabi_fsub+0xb4>
 8000b12:	e097      	b.n	8000c44 <__aeabi_fsub+0x1e4>
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	04db      	lsls	r3, r3, #19
 8000b18:	4318      	orrs	r0, r3
 8000b1a:	2a1b      	cmp	r2, #27
 8000b1c:	dc00      	bgt.n	8000b20 <__aeabi_fsub+0xc0>
 8000b1e:	e0cc      	b.n	8000cba <__aeabi_fsub+0x25a>
 8000b20:	2301      	movs	r3, #1
 8000b22:	4463      	add	r3, ip
 8000b24:	015a      	lsls	r2, r3, #5
 8000b26:	d574      	bpl.n	8000c12 <__aeabi_fsub+0x1b2>
 8000b28:	3501      	adds	r5, #1
 8000b2a:	2dff      	cmp	r5, #255	; 0xff
 8000b2c:	d065      	beq.n	8000bfa <__aeabi_fsub+0x19a>
 8000b2e:	2201      	movs	r2, #1
 8000b30:	499a      	ldr	r1, [pc, #616]	; (8000d9c <__aeabi_fsub+0x33c>)
 8000b32:	401a      	ands	r2, r3
 8000b34:	085b      	lsrs	r3, r3, #1
 8000b36:	400b      	ands	r3, r1
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	e7cb      	b.n	8000ad4 <__aeabi_fsub+0x74>
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	d01f      	beq.n	8000b80 <__aeabi_fsub+0x120>
 8000b40:	428c      	cmp	r4, r1
 8000b42:	d022      	beq.n	8000b8a <__aeabi_fsub+0x12a>
 8000b44:	002a      	movs	r2, r5
 8000b46:	3aff      	subs	r2, #255	; 0xff
 8000b48:	2a00      	cmp	r2, #0
 8000b4a:	d035      	beq.n	8000bb8 <__aeabi_fsub+0x158>
 8000b4c:	1b7a      	subs	r2, r7, r5
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	d000      	beq.n	8000b54 <__aeabi_fsub+0xf4>
 8000b52:	e099      	b.n	8000c88 <__aeabi_fsub+0x228>
 8000b54:	4663      	mov	r3, ip
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d100      	bne.n	8000b5c <__aeabi_fsub+0xfc>
 8000b5a:	e0dd      	b.n	8000d18 <__aeabi_fsub+0x2b8>
 8000b5c:	1e53      	subs	r3, r2, #1
 8000b5e:	2a01      	cmp	r2, #1
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fsub+0x104>
 8000b62:	e105      	b.n	8000d70 <__aeabi_fsub+0x310>
 8000b64:	2aff      	cmp	r2, #255	; 0xff
 8000b66:	d06b      	beq.n	8000c40 <__aeabi_fsub+0x1e0>
 8000b68:	001a      	movs	r2, r3
 8000b6a:	e094      	b.n	8000c96 <__aeabi_fsub+0x236>
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	d073      	beq.n	8000c58 <__aeabi_fsub+0x1f8>
 8000b70:	1e51      	subs	r1, r2, #1
 8000b72:	2a01      	cmp	r2, #1
 8000b74:	d100      	bne.n	8000b78 <__aeabi_fsub+0x118>
 8000b76:	e0df      	b.n	8000d38 <__aeabi_fsub+0x2d8>
 8000b78:	2aff      	cmp	r2, #255	; 0xff
 8000b7a:	d063      	beq.n	8000c44 <__aeabi_fsub+0x1e4>
 8000b7c:	000a      	movs	r2, r1
 8000b7e:	e792      	b.n	8000aa6 <__aeabi_fsub+0x46>
 8000b80:	2201      	movs	r2, #1
 8000b82:	4051      	eors	r1, r2
 8000b84:	42a1      	cmp	r1, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_fsub+0x12a>
 8000b88:	e782      	b.n	8000a90 <__aeabi_fsub+0x30>
 8000b8a:	002a      	movs	r2, r5
 8000b8c:	3aff      	subs	r2, #255	; 0xff
 8000b8e:	2a00      	cmp	r2, #0
 8000b90:	d036      	beq.n	8000c00 <__aeabi_fsub+0x1a0>
 8000b92:	1b7a      	subs	r2, r7, r5
 8000b94:	2d00      	cmp	r5, #0
 8000b96:	d100      	bne.n	8000b9a <__aeabi_fsub+0x13a>
 8000b98:	e0aa      	b.n	8000cf0 <__aeabi_fsub+0x290>
 8000b9a:	2fff      	cmp	r7, #255	; 0xff
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_fsub+0x140>
 8000b9e:	e0da      	b.n	8000d56 <__aeabi_fsub+0x2f6>
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	4661      	mov	r1, ip
 8000ba4:	04db      	lsls	r3, r3, #19
 8000ba6:	4319      	orrs	r1, r3
 8000ba8:	468c      	mov	ip, r1
 8000baa:	2a1b      	cmp	r2, #27
 8000bac:	dc00      	bgt.n	8000bb0 <__aeabi_fsub+0x150>
 8000bae:	e0d4      	b.n	8000d5a <__aeabi_fsub+0x2fa>
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	003d      	movs	r5, r7
 8000bb4:	181b      	adds	r3, r3, r0
 8000bb6:	e7b5      	b.n	8000b24 <__aeabi_fsub+0xc4>
 8000bb8:	27fe      	movs	r7, #254	; 0xfe
 8000bba:	1c6a      	adds	r2, r5, #1
 8000bbc:	4217      	tst	r7, r2
 8000bbe:	d171      	bne.n	8000ca4 <__aeabi_fsub+0x244>
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d000      	beq.n	8000bc6 <__aeabi_fsub+0x166>
 8000bc4:	e09e      	b.n	8000d04 <__aeabi_fsub+0x2a4>
 8000bc6:	4663      	mov	r3, ip
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d100      	bne.n	8000bce <__aeabi_fsub+0x16e>
 8000bcc:	e0d5      	b.n	8000d7a <__aeabi_fsub+0x31a>
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2800      	cmp	r0, #0
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_fsub+0x176>
 8000bd4:	e78f      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000bd6:	1a1b      	subs	r3, r3, r0
 8000bd8:	015e      	lsls	r6, r3, #5
 8000bda:	d400      	bmi.n	8000bde <__aeabi_fsub+0x17e>
 8000bdc:	e0d6      	b.n	8000d8c <__aeabi_fsub+0x32c>
 8000bde:	4663      	mov	r3, ip
 8000be0:	000c      	movs	r4, r1
 8000be2:	1ac3      	subs	r3, r0, r3
 8000be4:	e776      	b.n	8000ad4 <__aeabi_fsub+0x74>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	d036      	beq.n	8000c58 <__aeabi_fsub+0x1f8>
 8000bea:	1e51      	subs	r1, r2, #1
 8000bec:	2a01      	cmp	r2, #1
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_fsub+0x192>
 8000bf0:	e09a      	b.n	8000d28 <__aeabi_fsub+0x2c8>
 8000bf2:	2aff      	cmp	r2, #255	; 0xff
 8000bf4:	d026      	beq.n	8000c44 <__aeabi_fsub+0x1e4>
 8000bf6:	000a      	movs	r2, r1
 8000bf8:	e78f      	b.n	8000b1a <__aeabi_fsub+0xba>
 8000bfa:	22ff      	movs	r2, #255	; 0xff
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	e77a      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000c00:	27fe      	movs	r7, #254	; 0xfe
 8000c02:	1c6a      	adds	r2, r5, #1
 8000c04:	4217      	tst	r7, r2
 8000c06:	d062      	beq.n	8000cce <__aeabi_fsub+0x26e>
 8000c08:	2aff      	cmp	r2, #255	; 0xff
 8000c0a:	d0f6      	beq.n	8000bfa <__aeabi_fsub+0x19a>
 8000c0c:	0015      	movs	r5, r2
 8000c0e:	4460      	add	r0, ip
 8000c10:	0843      	lsrs	r3, r0, #1
 8000c12:	075a      	lsls	r2, r3, #29
 8000c14:	d000      	beq.n	8000c18 <__aeabi_fsub+0x1b8>
 8000c16:	e75f      	b.n	8000ad8 <__aeabi_fsub+0x78>
 8000c18:	08db      	lsrs	r3, r3, #3
 8000c1a:	2dff      	cmp	r5, #255	; 0xff
 8000c1c:	d012      	beq.n	8000c44 <__aeabi_fsub+0x1e4>
 8000c1e:	025b      	lsls	r3, r3, #9
 8000c20:	0a5e      	lsrs	r6, r3, #9
 8000c22:	b2ea      	uxtb	r2, r5
 8000c24:	e767      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000c26:	4662      	mov	r2, ip
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_fsub+0x1ce>
 8000c2c:	e093      	b.n	8000d56 <__aeabi_fsub+0x2f6>
 8000c2e:	2800      	cmp	r0, #0
 8000c30:	d008      	beq.n	8000c44 <__aeabi_fsub+0x1e4>
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	03d2      	lsls	r2, r2, #15
 8000c36:	4213      	tst	r3, r2
 8000c38:	d004      	beq.n	8000c44 <__aeabi_fsub+0x1e4>
 8000c3a:	4640      	mov	r0, r8
 8000c3c:	4210      	tst	r0, r2
 8000c3e:	d101      	bne.n	8000c44 <__aeabi_fsub+0x1e4>
 8000c40:	000c      	movs	r4, r1
 8000c42:	4643      	mov	r3, r8
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d0d8      	beq.n	8000bfa <__aeabi_fsub+0x19a>
 8000c48:	2680      	movs	r6, #128	; 0x80
 8000c4a:	03f6      	lsls	r6, r6, #15
 8000c4c:	431e      	orrs	r6, r3
 8000c4e:	0276      	lsls	r6, r6, #9
 8000c50:	22ff      	movs	r2, #255	; 0xff
 8000c52:	0a76      	lsrs	r6, r6, #9
 8000c54:	e74f      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000c56:	4643      	mov	r3, r8
 8000c58:	0015      	movs	r5, r2
 8000c5a:	e7de      	b.n	8000c1a <__aeabi_fsub+0x1ba>
 8000c5c:	2220      	movs	r2, #32
 8000c5e:	1b40      	subs	r0, r0, r5
 8000c60:	3001      	adds	r0, #1
 8000c62:	1a12      	subs	r2, r2, r0
 8000c64:	0019      	movs	r1, r3
 8000c66:	4093      	lsls	r3, r2
 8000c68:	40c1      	lsrs	r1, r0
 8000c6a:	1e5a      	subs	r2, r3, #1
 8000c6c:	4193      	sbcs	r3, r2
 8000c6e:	2500      	movs	r5, #0
 8000c70:	430b      	orrs	r3, r1
 8000c72:	e72f      	b.n	8000ad4 <__aeabi_fsub+0x74>
 8000c74:	2320      	movs	r3, #32
 8000c76:	1a9b      	subs	r3, r3, r2
 8000c78:	0001      	movs	r1, r0
 8000c7a:	4098      	lsls	r0, r3
 8000c7c:	0003      	movs	r3, r0
 8000c7e:	40d1      	lsrs	r1, r2
 8000c80:	1e5a      	subs	r2, r3, #1
 8000c82:	4193      	sbcs	r3, r2
 8000c84:	430b      	orrs	r3, r1
 8000c86:	e712      	b.n	8000aae <__aeabi_fsub+0x4e>
 8000c88:	2fff      	cmp	r7, #255	; 0xff
 8000c8a:	d0d9      	beq.n	8000c40 <__aeabi_fsub+0x1e0>
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	4664      	mov	r4, ip
 8000c90:	04db      	lsls	r3, r3, #19
 8000c92:	431c      	orrs	r4, r3
 8000c94:	46a4      	mov	ip, r4
 8000c96:	2a1b      	cmp	r2, #27
 8000c98:	dd52      	ble.n	8000d40 <__aeabi_fsub+0x2e0>
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	000c      	movs	r4, r1
 8000c9e:	003d      	movs	r5, r7
 8000ca0:	1ac3      	subs	r3, r0, r3
 8000ca2:	e706      	b.n	8000ab2 <__aeabi_fsub+0x52>
 8000ca4:	4663      	mov	r3, ip
 8000ca6:	1a1e      	subs	r6, r3, r0
 8000ca8:	0173      	lsls	r3, r6, #5
 8000caa:	d439      	bmi.n	8000d20 <__aeabi_fsub+0x2c0>
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d000      	beq.n	8000cb2 <__aeabi_fsub+0x252>
 8000cb0:	e704      	b.n	8000abc <__aeabi_fsub+0x5c>
 8000cb2:	2400      	movs	r4, #0
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2600      	movs	r6, #0
 8000cb8:	e71d      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000cba:	2320      	movs	r3, #32
 8000cbc:	1a9b      	subs	r3, r3, r2
 8000cbe:	0001      	movs	r1, r0
 8000cc0:	4098      	lsls	r0, r3
 8000cc2:	0003      	movs	r3, r0
 8000cc4:	40d1      	lsrs	r1, r2
 8000cc6:	1e5a      	subs	r2, r3, #1
 8000cc8:	4193      	sbcs	r3, r2
 8000cca:	430b      	orrs	r3, r1
 8000ccc:	e729      	b.n	8000b22 <__aeabi_fsub+0xc2>
 8000cce:	2d00      	cmp	r5, #0
 8000cd0:	d1a9      	bne.n	8000c26 <__aeabi_fsub+0x1c6>
 8000cd2:	4663      	mov	r3, ip
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d056      	beq.n	8000d86 <__aeabi_fsub+0x326>
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2800      	cmp	r0, #0
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_fsub+0x280>
 8000cde:	e70a      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	4463      	add	r3, ip
 8000ce4:	015a      	lsls	r2, r3, #5
 8000ce6:	d594      	bpl.n	8000c12 <__aeabi_fsub+0x1b2>
 8000ce8:	4a2b      	ldr	r2, [pc, #172]	; (8000d98 <__aeabi_fsub+0x338>)
 8000cea:	3501      	adds	r5, #1
 8000cec:	4013      	ands	r3, r2
 8000cee:	e790      	b.n	8000c12 <__aeabi_fsub+0x1b2>
 8000cf0:	4663      	mov	r3, ip
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d0af      	beq.n	8000c56 <__aeabi_fsub+0x1f6>
 8000cf6:	1e53      	subs	r3, r2, #1
 8000cf8:	2a01      	cmp	r2, #1
 8000cfa:	d015      	beq.n	8000d28 <__aeabi_fsub+0x2c8>
 8000cfc:	2aff      	cmp	r2, #255	; 0xff
 8000cfe:	d02a      	beq.n	8000d56 <__aeabi_fsub+0x2f6>
 8000d00:	001a      	movs	r2, r3
 8000d02:	e752      	b.n	8000baa <__aeabi_fsub+0x14a>
 8000d04:	4662      	mov	r2, ip
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	d191      	bne.n	8000c2e <__aeabi_fsub+0x1ce>
 8000d0a:	2800      	cmp	r0, #0
 8000d0c:	d198      	bne.n	8000c40 <__aeabi_fsub+0x1e0>
 8000d0e:	2680      	movs	r6, #128	; 0x80
 8000d10:	2400      	movs	r4, #0
 8000d12:	22ff      	movs	r2, #255	; 0xff
 8000d14:	03f6      	lsls	r6, r6, #15
 8000d16:	e6ee      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000d18:	000c      	movs	r4, r1
 8000d1a:	4643      	mov	r3, r8
 8000d1c:	0015      	movs	r5, r2
 8000d1e:	e77c      	b.n	8000c1a <__aeabi_fsub+0x1ba>
 8000d20:	4663      	mov	r3, ip
 8000d22:	000c      	movs	r4, r1
 8000d24:	1ac6      	subs	r6, r0, r3
 8000d26:	e6c9      	b.n	8000abc <__aeabi_fsub+0x5c>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	4463      	add	r3, ip
 8000d2c:	2501      	movs	r5, #1
 8000d2e:	015a      	lsls	r2, r3, #5
 8000d30:	d400      	bmi.n	8000d34 <__aeabi_fsub+0x2d4>
 8000d32:	e76e      	b.n	8000c12 <__aeabi_fsub+0x1b2>
 8000d34:	2502      	movs	r5, #2
 8000d36:	e6fa      	b.n	8000b2e <__aeabi_fsub+0xce>
 8000d38:	4663      	mov	r3, ip
 8000d3a:	2501      	movs	r5, #1
 8000d3c:	1a1b      	subs	r3, r3, r0
 8000d3e:	e6b8      	b.n	8000ab2 <__aeabi_fsub+0x52>
 8000d40:	4664      	mov	r4, ip
 8000d42:	2320      	movs	r3, #32
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	4662      	mov	r2, ip
 8000d4a:	409a      	lsls	r2, r3
 8000d4c:	0013      	movs	r3, r2
 8000d4e:	1e5a      	subs	r2, r3, #1
 8000d50:	4193      	sbcs	r3, r2
 8000d52:	4323      	orrs	r3, r4
 8000d54:	e7a2      	b.n	8000c9c <__aeabi_fsub+0x23c>
 8000d56:	4643      	mov	r3, r8
 8000d58:	e774      	b.n	8000c44 <__aeabi_fsub+0x1e4>
 8000d5a:	4661      	mov	r1, ip
 8000d5c:	2320      	movs	r3, #32
 8000d5e:	40d1      	lsrs	r1, r2
 8000d60:	1a9b      	subs	r3, r3, r2
 8000d62:	4662      	mov	r2, ip
 8000d64:	409a      	lsls	r2, r3
 8000d66:	0013      	movs	r3, r2
 8000d68:	1e5a      	subs	r2, r3, #1
 8000d6a:	4193      	sbcs	r3, r2
 8000d6c:	430b      	orrs	r3, r1
 8000d6e:	e720      	b.n	8000bb2 <__aeabi_fsub+0x152>
 8000d70:	4663      	mov	r3, ip
 8000d72:	000c      	movs	r4, r1
 8000d74:	2501      	movs	r5, #1
 8000d76:	1ac3      	subs	r3, r0, r3
 8000d78:	e69b      	b.n	8000ab2 <__aeabi_fsub+0x52>
 8000d7a:	2800      	cmp	r0, #0
 8000d7c:	d099      	beq.n	8000cb2 <__aeabi_fsub+0x252>
 8000d7e:	000c      	movs	r4, r1
 8000d80:	4646      	mov	r6, r8
 8000d82:	2200      	movs	r2, #0
 8000d84:	e6b7      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000d86:	4646      	mov	r6, r8
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e6b4      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d000      	beq.n	8000d92 <__aeabi_fsub+0x332>
 8000d90:	e73f      	b.n	8000c12 <__aeabi_fsub+0x1b2>
 8000d92:	2400      	movs	r4, #0
 8000d94:	2600      	movs	r6, #0
 8000d96:	e6ae      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000d98:	fbffffff 	.word	0xfbffffff
 8000d9c:	7dffffff 	.word	0x7dffffff

08000da0 <__aeabi_f2iz>:
 8000da0:	0241      	lsls	r1, r0, #9
 8000da2:	0042      	lsls	r2, r0, #1
 8000da4:	0fc3      	lsrs	r3, r0, #31
 8000da6:	0a49      	lsrs	r1, r1, #9
 8000da8:	2000      	movs	r0, #0
 8000daa:	0e12      	lsrs	r2, r2, #24
 8000dac:	2a7e      	cmp	r2, #126	; 0x7e
 8000dae:	dd03      	ble.n	8000db8 <__aeabi_f2iz+0x18>
 8000db0:	2a9d      	cmp	r2, #157	; 0x9d
 8000db2:	dd02      	ble.n	8000dba <__aeabi_f2iz+0x1a>
 8000db4:	4a09      	ldr	r2, [pc, #36]	; (8000ddc <__aeabi_f2iz+0x3c>)
 8000db6:	1898      	adds	r0, r3, r2
 8000db8:	4770      	bx	lr
 8000dba:	2080      	movs	r0, #128	; 0x80
 8000dbc:	0400      	lsls	r0, r0, #16
 8000dbe:	4301      	orrs	r1, r0
 8000dc0:	2a95      	cmp	r2, #149	; 0x95
 8000dc2:	dc07      	bgt.n	8000dd4 <__aeabi_f2iz+0x34>
 8000dc4:	2096      	movs	r0, #150	; 0x96
 8000dc6:	1a82      	subs	r2, r0, r2
 8000dc8:	40d1      	lsrs	r1, r2
 8000dca:	4248      	negs	r0, r1
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1f3      	bne.n	8000db8 <__aeabi_f2iz+0x18>
 8000dd0:	0008      	movs	r0, r1
 8000dd2:	e7f1      	b.n	8000db8 <__aeabi_f2iz+0x18>
 8000dd4:	3a96      	subs	r2, #150	; 0x96
 8000dd6:	4091      	lsls	r1, r2
 8000dd8:	e7f7      	b.n	8000dca <__aeabi_f2iz+0x2a>
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	7fffffff 	.word	0x7fffffff

08000de0 <__aeabi_ui2f>:
 8000de0:	b570      	push	{r4, r5, r6, lr}
 8000de2:	1e04      	subs	r4, r0, #0
 8000de4:	d00e      	beq.n	8000e04 <__aeabi_ui2f+0x24>
 8000de6:	f000 f87d 	bl	8000ee4 <__clzsi2>
 8000dea:	239e      	movs	r3, #158	; 0x9e
 8000dec:	0001      	movs	r1, r0
 8000dee:	1a1b      	subs	r3, r3, r0
 8000df0:	2b96      	cmp	r3, #150	; 0x96
 8000df2:	dc0c      	bgt.n	8000e0e <__aeabi_ui2f+0x2e>
 8000df4:	2808      	cmp	r0, #8
 8000df6:	d02c      	beq.n	8000e52 <__aeabi_ui2f+0x72>
 8000df8:	3908      	subs	r1, #8
 8000dfa:	408c      	lsls	r4, r1
 8000dfc:	0264      	lsls	r4, r4, #9
 8000dfe:	0a64      	lsrs	r4, r4, #9
 8000e00:	b2d8      	uxtb	r0, r3
 8000e02:	e001      	b.n	8000e08 <__aeabi_ui2f+0x28>
 8000e04:	2000      	movs	r0, #0
 8000e06:	2400      	movs	r4, #0
 8000e08:	05c0      	lsls	r0, r0, #23
 8000e0a:	4320      	orrs	r0, r4
 8000e0c:	bd70      	pop	{r4, r5, r6, pc}
 8000e0e:	2b99      	cmp	r3, #153	; 0x99
 8000e10:	dd0a      	ble.n	8000e28 <__aeabi_ui2f+0x48>
 8000e12:	0002      	movs	r2, r0
 8000e14:	0020      	movs	r0, r4
 8000e16:	321b      	adds	r2, #27
 8000e18:	4090      	lsls	r0, r2
 8000e1a:	0002      	movs	r2, r0
 8000e1c:	1e50      	subs	r0, r2, #1
 8000e1e:	4182      	sbcs	r2, r0
 8000e20:	2005      	movs	r0, #5
 8000e22:	1a40      	subs	r0, r0, r1
 8000e24:	40c4      	lsrs	r4, r0
 8000e26:	4314      	orrs	r4, r2
 8000e28:	2905      	cmp	r1, #5
 8000e2a:	dc16      	bgt.n	8000e5a <__aeabi_ui2f+0x7a>
 8000e2c:	0022      	movs	r2, r4
 8000e2e:	480f      	ldr	r0, [pc, #60]	; (8000e6c <__aeabi_ui2f+0x8c>)
 8000e30:	4002      	ands	r2, r0
 8000e32:	0765      	lsls	r5, r4, #29
 8000e34:	d009      	beq.n	8000e4a <__aeabi_ui2f+0x6a>
 8000e36:	250f      	movs	r5, #15
 8000e38:	402c      	ands	r4, r5
 8000e3a:	2c04      	cmp	r4, #4
 8000e3c:	d005      	beq.n	8000e4a <__aeabi_ui2f+0x6a>
 8000e3e:	3204      	adds	r2, #4
 8000e40:	0154      	lsls	r4, r2, #5
 8000e42:	d502      	bpl.n	8000e4a <__aeabi_ui2f+0x6a>
 8000e44:	239f      	movs	r3, #159	; 0x9f
 8000e46:	4002      	ands	r2, r0
 8000e48:	1a5b      	subs	r3, r3, r1
 8000e4a:	0192      	lsls	r2, r2, #6
 8000e4c:	0a54      	lsrs	r4, r2, #9
 8000e4e:	b2d8      	uxtb	r0, r3
 8000e50:	e7da      	b.n	8000e08 <__aeabi_ui2f+0x28>
 8000e52:	0264      	lsls	r4, r4, #9
 8000e54:	2096      	movs	r0, #150	; 0x96
 8000e56:	0a64      	lsrs	r4, r4, #9
 8000e58:	e7d6      	b.n	8000e08 <__aeabi_ui2f+0x28>
 8000e5a:	1f4a      	subs	r2, r1, #5
 8000e5c:	4094      	lsls	r4, r2
 8000e5e:	0022      	movs	r2, r4
 8000e60:	4802      	ldr	r0, [pc, #8]	; (8000e6c <__aeabi_ui2f+0x8c>)
 8000e62:	4002      	ands	r2, r0
 8000e64:	0765      	lsls	r5, r4, #29
 8000e66:	d0f0      	beq.n	8000e4a <__aeabi_ui2f+0x6a>
 8000e68:	e7e5      	b.n	8000e36 <__aeabi_ui2f+0x56>
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	fbffffff 	.word	0xfbffffff

08000e70 <__aeabi_cfrcmple>:
 8000e70:	4684      	mov	ip, r0
 8000e72:	0008      	movs	r0, r1
 8000e74:	4661      	mov	r1, ip
 8000e76:	e7ff      	b.n	8000e78 <__aeabi_cfcmpeq>

08000e78 <__aeabi_cfcmpeq>:
 8000e78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000e7a:	f000 f8bd 	bl	8000ff8 <__lesf2>
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	d401      	bmi.n	8000e86 <__aeabi_cfcmpeq+0xe>
 8000e82:	2100      	movs	r1, #0
 8000e84:	42c8      	cmn	r0, r1
 8000e86:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000e88 <__aeabi_fcmpeq>:
 8000e88:	b510      	push	{r4, lr}
 8000e8a:	f000 f849 	bl	8000f20 <__eqsf2>
 8000e8e:	4240      	negs	r0, r0
 8000e90:	3001      	adds	r0, #1
 8000e92:	bd10      	pop	{r4, pc}

08000e94 <__aeabi_fcmplt>:
 8000e94:	b510      	push	{r4, lr}
 8000e96:	f000 f8af 	bl	8000ff8 <__lesf2>
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	db01      	blt.n	8000ea2 <__aeabi_fcmplt+0xe>
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	bd10      	pop	{r4, pc}
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	bd10      	pop	{r4, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)

08000ea8 <__aeabi_fcmple>:
 8000ea8:	b510      	push	{r4, lr}
 8000eaa:	f000 f8a5 	bl	8000ff8 <__lesf2>
 8000eae:	2800      	cmp	r0, #0
 8000eb0:	dd01      	ble.n	8000eb6 <__aeabi_fcmple+0xe>
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	bd10      	pop	{r4, pc}
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	bd10      	pop	{r4, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)

08000ebc <__aeabi_fcmpgt>:
 8000ebc:	b510      	push	{r4, lr}
 8000ebe:	f000 f855 	bl	8000f6c <__gesf2>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	dc01      	bgt.n	8000eca <__aeabi_fcmpgt+0xe>
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	bd10      	pop	{r4, pc}
 8000eca:	2001      	movs	r0, #1
 8000ecc:	bd10      	pop	{r4, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)

08000ed0 <__aeabi_fcmpge>:
 8000ed0:	b510      	push	{r4, lr}
 8000ed2:	f000 f84b 	bl	8000f6c <__gesf2>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	da01      	bge.n	8000ede <__aeabi_fcmpge+0xe>
 8000eda:	2000      	movs	r0, #0
 8000edc:	bd10      	pop	{r4, pc}
 8000ede:	2001      	movs	r0, #1
 8000ee0:	bd10      	pop	{r4, pc}
 8000ee2:	46c0      	nop			; (mov r8, r8)

08000ee4 <__clzsi2>:
 8000ee4:	211c      	movs	r1, #28
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	041b      	lsls	r3, r3, #16
 8000eea:	4298      	cmp	r0, r3
 8000eec:	d301      	bcc.n	8000ef2 <__clzsi2+0xe>
 8000eee:	0c00      	lsrs	r0, r0, #16
 8000ef0:	3910      	subs	r1, #16
 8000ef2:	0a1b      	lsrs	r3, r3, #8
 8000ef4:	4298      	cmp	r0, r3
 8000ef6:	d301      	bcc.n	8000efc <__clzsi2+0x18>
 8000ef8:	0a00      	lsrs	r0, r0, #8
 8000efa:	3908      	subs	r1, #8
 8000efc:	091b      	lsrs	r3, r3, #4
 8000efe:	4298      	cmp	r0, r3
 8000f00:	d301      	bcc.n	8000f06 <__clzsi2+0x22>
 8000f02:	0900      	lsrs	r0, r0, #4
 8000f04:	3904      	subs	r1, #4
 8000f06:	a202      	add	r2, pc, #8	; (adr r2, 8000f10 <__clzsi2+0x2c>)
 8000f08:	5c10      	ldrb	r0, [r2, r0]
 8000f0a:	1840      	adds	r0, r0, r1
 8000f0c:	4770      	bx	lr
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	02020304 	.word	0x02020304
 8000f14:	01010101 	.word	0x01010101
	...

08000f20 <__eqsf2>:
 8000f20:	b570      	push	{r4, r5, r6, lr}
 8000f22:	0042      	lsls	r2, r0, #1
 8000f24:	0245      	lsls	r5, r0, #9
 8000f26:	024e      	lsls	r6, r1, #9
 8000f28:	004c      	lsls	r4, r1, #1
 8000f2a:	0fc3      	lsrs	r3, r0, #31
 8000f2c:	0a6d      	lsrs	r5, r5, #9
 8000f2e:	2001      	movs	r0, #1
 8000f30:	0e12      	lsrs	r2, r2, #24
 8000f32:	0a76      	lsrs	r6, r6, #9
 8000f34:	0e24      	lsrs	r4, r4, #24
 8000f36:	0fc9      	lsrs	r1, r1, #31
 8000f38:	2aff      	cmp	r2, #255	; 0xff
 8000f3a:	d006      	beq.n	8000f4a <__eqsf2+0x2a>
 8000f3c:	2cff      	cmp	r4, #255	; 0xff
 8000f3e:	d003      	beq.n	8000f48 <__eqsf2+0x28>
 8000f40:	42a2      	cmp	r2, r4
 8000f42:	d101      	bne.n	8000f48 <__eqsf2+0x28>
 8000f44:	42b5      	cmp	r5, r6
 8000f46:	d006      	beq.n	8000f56 <__eqsf2+0x36>
 8000f48:	bd70      	pop	{r4, r5, r6, pc}
 8000f4a:	2d00      	cmp	r5, #0
 8000f4c:	d1fc      	bne.n	8000f48 <__eqsf2+0x28>
 8000f4e:	2cff      	cmp	r4, #255	; 0xff
 8000f50:	d1fa      	bne.n	8000f48 <__eqsf2+0x28>
 8000f52:	2e00      	cmp	r6, #0
 8000f54:	d1f8      	bne.n	8000f48 <__eqsf2+0x28>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d006      	beq.n	8000f68 <__eqsf2+0x48>
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	2a00      	cmp	r2, #0
 8000f5e:	d1f3      	bne.n	8000f48 <__eqsf2+0x28>
 8000f60:	0028      	movs	r0, r5
 8000f62:	1e43      	subs	r3, r0, #1
 8000f64:	4198      	sbcs	r0, r3
 8000f66:	e7ef      	b.n	8000f48 <__eqsf2+0x28>
 8000f68:	2000      	movs	r0, #0
 8000f6a:	e7ed      	b.n	8000f48 <__eqsf2+0x28>

08000f6c <__gesf2>:
 8000f6c:	b570      	push	{r4, r5, r6, lr}
 8000f6e:	0042      	lsls	r2, r0, #1
 8000f70:	0245      	lsls	r5, r0, #9
 8000f72:	024e      	lsls	r6, r1, #9
 8000f74:	004c      	lsls	r4, r1, #1
 8000f76:	0fc3      	lsrs	r3, r0, #31
 8000f78:	0a6d      	lsrs	r5, r5, #9
 8000f7a:	0e12      	lsrs	r2, r2, #24
 8000f7c:	0a76      	lsrs	r6, r6, #9
 8000f7e:	0e24      	lsrs	r4, r4, #24
 8000f80:	0fc8      	lsrs	r0, r1, #31
 8000f82:	2aff      	cmp	r2, #255	; 0xff
 8000f84:	d01b      	beq.n	8000fbe <__gesf2+0x52>
 8000f86:	2cff      	cmp	r4, #255	; 0xff
 8000f88:	d00e      	beq.n	8000fa8 <__gesf2+0x3c>
 8000f8a:	2a00      	cmp	r2, #0
 8000f8c:	d11b      	bne.n	8000fc6 <__gesf2+0x5a>
 8000f8e:	2c00      	cmp	r4, #0
 8000f90:	d101      	bne.n	8000f96 <__gesf2+0x2a>
 8000f92:	2e00      	cmp	r6, #0
 8000f94:	d01c      	beq.n	8000fd0 <__gesf2+0x64>
 8000f96:	2d00      	cmp	r5, #0
 8000f98:	d00c      	beq.n	8000fb4 <__gesf2+0x48>
 8000f9a:	4283      	cmp	r3, r0
 8000f9c:	d01c      	beq.n	8000fd8 <__gesf2+0x6c>
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	1e58      	subs	r0, r3, #1
 8000fa2:	4008      	ands	r0, r1
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	bd70      	pop	{r4, r5, r6, pc}
 8000fa8:	2e00      	cmp	r6, #0
 8000faa:	d122      	bne.n	8000ff2 <__gesf2+0x86>
 8000fac:	2a00      	cmp	r2, #0
 8000fae:	d1f4      	bne.n	8000f9a <__gesf2+0x2e>
 8000fb0:	2d00      	cmp	r5, #0
 8000fb2:	d1f2      	bne.n	8000f9a <__gesf2+0x2e>
 8000fb4:	2800      	cmp	r0, #0
 8000fb6:	d1f6      	bne.n	8000fa6 <__gesf2+0x3a>
 8000fb8:	2001      	movs	r0, #1
 8000fba:	4240      	negs	r0, r0
 8000fbc:	e7f3      	b.n	8000fa6 <__gesf2+0x3a>
 8000fbe:	2d00      	cmp	r5, #0
 8000fc0:	d117      	bne.n	8000ff2 <__gesf2+0x86>
 8000fc2:	2cff      	cmp	r4, #255	; 0xff
 8000fc4:	d0f0      	beq.n	8000fa8 <__gesf2+0x3c>
 8000fc6:	2c00      	cmp	r4, #0
 8000fc8:	d1e7      	bne.n	8000f9a <__gesf2+0x2e>
 8000fca:	2e00      	cmp	r6, #0
 8000fcc:	d1e5      	bne.n	8000f9a <__gesf2+0x2e>
 8000fce:	e7e6      	b.n	8000f9e <__gesf2+0x32>
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	2d00      	cmp	r5, #0
 8000fd4:	d0e7      	beq.n	8000fa6 <__gesf2+0x3a>
 8000fd6:	e7e2      	b.n	8000f9e <__gesf2+0x32>
 8000fd8:	42a2      	cmp	r2, r4
 8000fda:	dc05      	bgt.n	8000fe8 <__gesf2+0x7c>
 8000fdc:	dbea      	blt.n	8000fb4 <__gesf2+0x48>
 8000fde:	42b5      	cmp	r5, r6
 8000fe0:	d802      	bhi.n	8000fe8 <__gesf2+0x7c>
 8000fe2:	d3e7      	bcc.n	8000fb4 <__gesf2+0x48>
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	e7de      	b.n	8000fa6 <__gesf2+0x3a>
 8000fe8:	4243      	negs	r3, r0
 8000fea:	4158      	adcs	r0, r3
 8000fec:	0040      	lsls	r0, r0, #1
 8000fee:	3801      	subs	r0, #1
 8000ff0:	e7d9      	b.n	8000fa6 <__gesf2+0x3a>
 8000ff2:	2002      	movs	r0, #2
 8000ff4:	4240      	negs	r0, r0
 8000ff6:	e7d6      	b.n	8000fa6 <__gesf2+0x3a>

08000ff8 <__lesf2>:
 8000ff8:	b570      	push	{r4, r5, r6, lr}
 8000ffa:	0042      	lsls	r2, r0, #1
 8000ffc:	0245      	lsls	r5, r0, #9
 8000ffe:	024e      	lsls	r6, r1, #9
 8001000:	004c      	lsls	r4, r1, #1
 8001002:	0fc3      	lsrs	r3, r0, #31
 8001004:	0a6d      	lsrs	r5, r5, #9
 8001006:	0e12      	lsrs	r2, r2, #24
 8001008:	0a76      	lsrs	r6, r6, #9
 800100a:	0e24      	lsrs	r4, r4, #24
 800100c:	0fc8      	lsrs	r0, r1, #31
 800100e:	2aff      	cmp	r2, #255	; 0xff
 8001010:	d00b      	beq.n	800102a <__lesf2+0x32>
 8001012:	2cff      	cmp	r4, #255	; 0xff
 8001014:	d00d      	beq.n	8001032 <__lesf2+0x3a>
 8001016:	2a00      	cmp	r2, #0
 8001018:	d11f      	bne.n	800105a <__lesf2+0x62>
 800101a:	2c00      	cmp	r4, #0
 800101c:	d116      	bne.n	800104c <__lesf2+0x54>
 800101e:	2e00      	cmp	r6, #0
 8001020:	d114      	bne.n	800104c <__lesf2+0x54>
 8001022:	2000      	movs	r0, #0
 8001024:	2d00      	cmp	r5, #0
 8001026:	d010      	beq.n	800104a <__lesf2+0x52>
 8001028:	e009      	b.n	800103e <__lesf2+0x46>
 800102a:	2d00      	cmp	r5, #0
 800102c:	d10c      	bne.n	8001048 <__lesf2+0x50>
 800102e:	2cff      	cmp	r4, #255	; 0xff
 8001030:	d113      	bne.n	800105a <__lesf2+0x62>
 8001032:	2e00      	cmp	r6, #0
 8001034:	d108      	bne.n	8001048 <__lesf2+0x50>
 8001036:	2a00      	cmp	r2, #0
 8001038:	d008      	beq.n	800104c <__lesf2+0x54>
 800103a:	4283      	cmp	r3, r0
 800103c:	d012      	beq.n	8001064 <__lesf2+0x6c>
 800103e:	2102      	movs	r1, #2
 8001040:	1e58      	subs	r0, r3, #1
 8001042:	4008      	ands	r0, r1
 8001044:	3801      	subs	r0, #1
 8001046:	e000      	b.n	800104a <__lesf2+0x52>
 8001048:	2002      	movs	r0, #2
 800104a:	bd70      	pop	{r4, r5, r6, pc}
 800104c:	2d00      	cmp	r5, #0
 800104e:	d1f4      	bne.n	800103a <__lesf2+0x42>
 8001050:	2800      	cmp	r0, #0
 8001052:	d1fa      	bne.n	800104a <__lesf2+0x52>
 8001054:	2001      	movs	r0, #1
 8001056:	4240      	negs	r0, r0
 8001058:	e7f7      	b.n	800104a <__lesf2+0x52>
 800105a:	2c00      	cmp	r4, #0
 800105c:	d1ed      	bne.n	800103a <__lesf2+0x42>
 800105e:	2e00      	cmp	r6, #0
 8001060:	d1eb      	bne.n	800103a <__lesf2+0x42>
 8001062:	e7ec      	b.n	800103e <__lesf2+0x46>
 8001064:	42a2      	cmp	r2, r4
 8001066:	dc05      	bgt.n	8001074 <__lesf2+0x7c>
 8001068:	dbf2      	blt.n	8001050 <__lesf2+0x58>
 800106a:	42b5      	cmp	r5, r6
 800106c:	d802      	bhi.n	8001074 <__lesf2+0x7c>
 800106e:	d3ef      	bcc.n	8001050 <__lesf2+0x58>
 8001070:	2000      	movs	r0, #0
 8001072:	e7ea      	b.n	800104a <__lesf2+0x52>
 8001074:	4243      	negs	r3, r0
 8001076:	4158      	adcs	r0, r3
 8001078:	0040      	lsls	r0, r0, #1
 800107a:	3801      	subs	r0, #1
 800107c:	e7e5      	b.n	800104a <__lesf2+0x52>
 800107e:	46c0      	nop			; (mov r8, r8)

08001080 <getGimbalIndex>:
char gimbal_symbols[MAX_GIMBAL_NUM];
uint32_t gimbal_positions[MAX_GIMBAL_NUM];
uint8_t gimbal_types[MAX_GIMBAL_NUM];

//========== HELPER FUNCTIONS
int8_t getGimbalIndex(char symbol){
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	0002      	movs	r2, r0
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MAX_GIMBAL_NUM; i++){
 800108c:	230f      	movs	r3, #15
 800108e:	18fb      	adds	r3, r7, r3
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
 8001094:	e012      	b.n	80010bc <getGimbalIndex+0x3c>
		if (gimbal_symbols[i] == symbol){
 8001096:	210f      	movs	r1, #15
 8001098:	187b      	adds	r3, r7, r1
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <getGimbalIndex+0x54>)
 800109e:	5cd3      	ldrb	r3, [r2, r3]
 80010a0:	1dfa      	adds	r2, r7, #7
 80010a2:	7812      	ldrb	r2, [r2, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d103      	bne.n	80010b0 <getGimbalIndex+0x30>
			return i;
 80010a8:	187b      	adds	r3, r7, r1
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	e00c      	b.n	80010ca <getGimbalIndex+0x4a>
	for (uint8_t i = 0; i < MAX_GIMBAL_NUM; i++){
 80010b0:	210f      	movs	r1, #15
 80010b2:	187b      	adds	r3, r7, r1
 80010b4:	781a      	ldrb	r2, [r3, #0]
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	3201      	adds	r2, #1
 80010ba:	701a      	strb	r2, [r3, #0]
 80010bc:	230f      	movs	r3, #15
 80010be:	18fb      	adds	r3, r7, r3
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b1d      	cmp	r3, #29
 80010c4:	d9e7      	bls.n	8001096 <getGimbalIndex+0x16>
		}
	}

	return -1;
 80010c6:	2301      	movs	r3, #1
 80010c8:	425b      	negs	r3, r3
}
 80010ca:	0018      	movs	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b004      	add	sp, #16
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	20000028 	.word	0x20000028

080010d8 <getEmptyGimbalIndex>:

int8_t getEmptyGimbalIndex(){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < MAX_GIMBAL_NUM; i++){
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	e00e      	b.n	8001104 <getEmptyGimbalIndex+0x2c>
		if (gimbal_symbols[i] == 0){
 80010e6:	1dfb      	adds	r3, r7, #7
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <getEmptyGimbalIndex+0x40>)
 80010ec:	5cd3      	ldrb	r3, [r2, r3]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d103      	bne.n	80010fa <getEmptyGimbalIndex+0x22>
			return i;
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	e00a      	b.n	8001110 <getEmptyGimbalIndex+0x38>
	for (uint8_t i = 0; i < MAX_GIMBAL_NUM; i++){
 80010fa:	1dfb      	adds	r3, r7, #7
 80010fc:	781a      	ldrb	r2, [r3, #0]
 80010fe:	1dfb      	adds	r3, r7, #7
 8001100:	3201      	adds	r2, #1
 8001102:	701a      	strb	r2, [r3, #0]
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b1d      	cmp	r3, #29
 800110a:	d9ec      	bls.n	80010e6 <getEmptyGimbalIndex+0xe>
		}
	}

	return -1;
 800110c:	2301      	movs	r3, #1
 800110e:	425b      	negs	r3, r3
}
 8001110:	0018      	movs	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	b002      	add	sp, #8
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000028 	.word	0x20000028

0800111c <normalizeValue>:

uint32_t normalizeValue(uint32_t value, uint32_t prev_min, uint32_t prev_max, uint32_t after_min, uint32_t after_max){
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	603b      	str	r3, [r7, #0]
	if (value < prev_min || value > prev_max){return 0;}
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	429a      	cmp	r2, r3
 8001130:	d303      	bcc.n	800113a <normalizeValue+0x1e>
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	429a      	cmp	r2, r3
 8001138:	d901      	bls.n	800113e <normalizeValue+0x22>
 800113a:	2300      	movs	r3, #0
 800113c:	e037      	b.n	80011ae <normalizeValue+0x92>
	if (prev_max <= prev_min || after_max <= after_min){return 0;}
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	429a      	cmp	r2, r3
 8001144:	d903      	bls.n	800114e <normalizeValue+0x32>
 8001146:	6a3a      	ldr	r2, [r7, #32]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	429a      	cmp	r2, r3
 800114c:	d801      	bhi.n	8001152 <normalizeValue+0x36>
 800114e:	2300      	movs	r3, #0
 8001150:	e02d      	b.n	80011ae <normalizeValue+0x92>

	return  (uint32_t) ( ((float)(value - prev_min) / (float)(prev_max - prev_min)) * (float)(after_max - after_min) + (float) after_min);
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	0018      	movs	r0, r3
 800115a:	f7ff fe41 	bl	8000de0 <__aeabi_ui2f>
 800115e:	1c04      	adds	r4, r0, #0
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	0018      	movs	r0, r3
 8001168:	f7ff fe3a 	bl	8000de0 <__aeabi_ui2f>
 800116c:	1c03      	adds	r3, r0, #0
 800116e:	1c19      	adds	r1, r3, #0
 8001170:	1c20      	adds	r0, r4, #0
 8001172:	f7ff fa0d 	bl	8000590 <__aeabi_fdiv>
 8001176:	1c03      	adds	r3, r0, #0
 8001178:	1c1c      	adds	r4, r3, #0
 800117a:	6a3a      	ldr	r2, [r7, #32]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	0018      	movs	r0, r3
 8001182:	f7ff fe2d 	bl	8000de0 <__aeabi_ui2f>
 8001186:	1c03      	adds	r3, r0, #0
 8001188:	1c19      	adds	r1, r3, #0
 800118a:	1c20      	adds	r0, r4, #0
 800118c:	f7ff fb1a 	bl	80007c4 <__aeabi_fmul>
 8001190:	1c03      	adds	r3, r0, #0
 8001192:	1c1c      	adds	r4, r3, #0
 8001194:	6838      	ldr	r0, [r7, #0]
 8001196:	f7ff fe23 	bl	8000de0 <__aeabi_ui2f>
 800119a:	1c03      	adds	r3, r0, #0
 800119c:	1c19      	adds	r1, r3, #0
 800119e:	1c20      	adds	r0, r4, #0
 80011a0:	f7ff f856 	bl	8000250 <__aeabi_fadd>
 80011a4:	1c03      	adds	r3, r0, #0
 80011a6:	1c18      	adds	r0, r3, #0
 80011a8:	f7ff f83a 	bl	8000220 <__aeabi_f2uiz>
 80011ac:	0003      	movs	r3, r0
}
 80011ae:	0018      	movs	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b005      	add	sp, #20
 80011b4:	bd90      	pop	{r4, r7, pc}
	...

080011b8 <initGimbals>:

//========== USER FUNCTIONS
void initGimbals(){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < MAX_GIMBAL_NUM; i++){
 80011be:	1dfb      	adds	r3, r7, #7
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
 80011c4:	e014      	b.n	80011f0 <initGimbals+0x38>
		gimbal_symbols[i] = 0;
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <initGimbals+0x4c>)
 80011cc:	2100      	movs	r1, #0
 80011ce:	54d1      	strb	r1, [r2, r3]
		gimbal_positions[i] = 0;
 80011d0:	1dfb      	adds	r3, r7, #7
 80011d2:	781a      	ldrb	r2, [r3, #0]
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <initGimbals+0x50>)
 80011d6:	0092      	lsls	r2, r2, #2
 80011d8:	2100      	movs	r1, #0
 80011da:	50d1      	str	r1, [r2, r3]
		gimbal_types[i] = 0;
 80011dc:	1dfb      	adds	r3, r7, #7
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4a0a      	ldr	r2, [pc, #40]	; (800120c <initGimbals+0x54>)
 80011e2:	2100      	movs	r1, #0
 80011e4:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < MAX_GIMBAL_NUM; i++){
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	781a      	ldrb	r2, [r3, #0]
 80011ea:	1dfb      	adds	r3, r7, #7
 80011ec:	3201      	adds	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
 80011f0:	1dfb      	adds	r3, r7, #7
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b1d      	cmp	r3, #29
 80011f6:	d9e6      	bls.n	80011c6 <initGimbals+0xe>
	}
}
 80011f8:	46c0      	nop			; (mov r8, r8)
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b002      	add	sp, #8
 8001200:	bd80      	pop	{r7, pc}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	20000028 	.word	0x20000028
 8001208:	20000048 	.word	0x20000048
 800120c:	200000c0 	.word	0x200000c0

08001210 <registerGimbal>:

void registerGimbal(char symbol, uint8_t type){
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	0002      	movs	r2, r0
 8001218:	1dfb      	adds	r3, r7, #7
 800121a:	701a      	strb	r2, [r3, #0]
 800121c:	1dbb      	adds	r3, r7, #6
 800121e:	1c0a      	adds	r2, r1, #0
 8001220:	701a      	strb	r2, [r3, #0]
	//Find empty slot
	uint8_t emptyIndex = getEmptyGimbalIndex(); if (emptyIndex == -1) {return;}
 8001222:	f7ff ff59 	bl	80010d8 <getEmptyGimbalIndex>
 8001226:	0003      	movs	r3, r0
 8001228:	001a      	movs	r2, r3
 800122a:	200f      	movs	r0, #15
 800122c:	183b      	adds	r3, r7, r0
 800122e:	701a      	strb	r2, [r3, #0]

	//Assign gimbal
	gimbal_symbols[emptyIndex] = symbol;
 8001230:	183b      	adds	r3, r7, r0
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <registerGimbal+0x60>)
 8001236:	1df9      	adds	r1, r7, #7
 8001238:	7809      	ldrb	r1, [r1, #0]
 800123a:	54d1      	strb	r1, [r2, r3]
	gimbal_positions[emptyIndex] = 600;
 800123c:	183b      	adds	r3, r7, r0
 800123e:	781a      	ldrb	r2, [r3, #0]
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <registerGimbal+0x64>)
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	2196      	movs	r1, #150	; 0x96
 8001246:	0089      	lsls	r1, r1, #2
 8001248:	50d1      	str	r1, [r2, r3]

	//Assign type
	if (type == ABSOLUTE_GIMBAL || type == PUSH_GIMBAL){
 800124a:	1dbb      	adds	r3, r7, #6
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <registerGimbal+0x4a>
 8001252:	1dbb      	adds	r3, r7, #6
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d106      	bne.n	8001268 <registerGimbal+0x58>
		gimbal_types[emptyIndex] = type;
 800125a:	230f      	movs	r3, #15
 800125c:	18fb      	adds	r3, r7, r3
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4a05      	ldr	r2, [pc, #20]	; (8001278 <registerGimbal+0x68>)
 8001262:	1db9      	adds	r1, r7, #6
 8001264:	7809      	ldrb	r1, [r1, #0]
 8001266:	54d1      	strb	r1, [r2, r3]
	}
}
 8001268:	46bd      	mov	sp, r7
 800126a:	b004      	add	sp, #16
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	20000028 	.word	0x20000028
 8001274:	20000048 	.word	0x20000048
 8001278:	200000c0 	.word	0x200000c0

0800127c <setGimbalPosition>:

	//Unregister
	gimbal_symbols[gimbalIndex] = 0;
}

void setGimbalPosition(char symbol, uint32_t position, uint32_t* writeRegister){
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b08b      	sub	sp, #44	; 0x2c
 8001280:	af02      	add	r7, sp, #8
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	210f      	movs	r1, #15
 8001288:	187b      	adds	r3, r7, r1
 800128a:	1c02      	adds	r2, r0, #0
 800128c:	701a      	strb	r2, [r3, #0]
	//Find gimbal
	uint8_t gimbalIndex = getGimbalIndex(symbol);
 800128e:	187b      	adds	r3, r7, r1
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	0018      	movs	r0, r3
 8001294:	f7ff fef4 	bl	8001080 <getGimbalIndex>
 8001298:	0003      	movs	r3, r0
 800129a:	001a      	movs	r2, r3
 800129c:	211b      	movs	r1, #27
 800129e:	187b      	adds	r3, r7, r1
 80012a0:	701a      	strb	r2, [r3, #0]

	if (gimbal_types[gimbalIndex] == ABSOLUTE_GIMBAL){
 80012a2:	187b      	adds	r3, r7, r1
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	4a4c      	ldr	r2, [pc, #304]	; (80013d8 <setGimbalPosition+0x15c>)
 80012a8:	5cd3      	ldrb	r3, [r2, r3]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d112      	bne.n	80012d4 <setGimbalPosition+0x58>
		gimbal_positions[gimbalIndex] = normalizeValue(position, 0, 4095, 400, 800);
 80012ae:	187b      	adds	r3, r7, r1
 80012b0:	781c      	ldrb	r4, [r3, #0]
 80012b2:	23c8      	movs	r3, #200	; 0xc8
 80012b4:	005a      	lsls	r2, r3, #1
 80012b6:	4949      	ldr	r1, [pc, #292]	; (80013dc <setGimbalPosition+0x160>)
 80012b8:	68b8      	ldr	r0, [r7, #8]
 80012ba:	23c8      	movs	r3, #200	; 0xc8
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	0013      	movs	r3, r2
 80012c2:	000a      	movs	r2, r1
 80012c4:	2100      	movs	r1, #0
 80012c6:	f7ff ff29 	bl	800111c <normalizeValue>
 80012ca:	0001      	movs	r1, r0
 80012cc:	4b44      	ldr	r3, [pc, #272]	; (80013e0 <setGimbalPosition+0x164>)
 80012ce:	00a2      	lsls	r2, r4, #2
 80012d0:	50d1      	str	r1, [r2, r3]
 80012d2:	e075      	b.n	80013c0 <setGimbalPosition+0x144>
	}
	else if (gimbal_types[gimbalIndex] == PUSH_GIMBAL){
 80012d4:	231b      	movs	r3, #27
 80012d6:	18fb      	adds	r3, r7, r3
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	4a3f      	ldr	r2, [pc, #252]	; (80013d8 <setGimbalPosition+0x15c>)
 80012dc:	5cd3      	ldrb	r3, [r2, r3]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d16e      	bne.n	80013c0 <setGimbalPosition+0x144>
		uint32_t normalValue = normalizeValue(position, 0, 4095, 400, 800);
 80012e2:	23c8      	movs	r3, #200	; 0xc8
 80012e4:	005a      	lsls	r2, r3, #1
 80012e6:	493d      	ldr	r1, [pc, #244]	; (80013dc <setGimbalPosition+0x160>)
 80012e8:	68b8      	ldr	r0, [r7, #8]
 80012ea:	23c8      	movs	r3, #200	; 0xc8
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	0013      	movs	r3, r2
 80012f2:	000a      	movs	r2, r1
 80012f4:	2100      	movs	r1, #0
 80012f6:	f7ff ff11 	bl	800111c <normalizeValue>
 80012fa:	0003      	movs	r3, r0
 80012fc:	617b      	str	r3, [r7, #20]
		int32_t diff = normalValue - 600;
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	4a38      	ldr	r2, [pc, #224]	; (80013e4 <setGimbalPosition+0x168>)
 8001302:	4694      	mov	ip, r2
 8001304:	4463      	add	r3, ip
 8001306:	613b      	str	r3, [r7, #16]

		for (int i = 10; i >= 2; i--){
 8001308:	230a      	movs	r3, #10
 800130a:	61fb      	str	r3, [r7, #28]
 800130c:	e032      	b.n	8001374 <setGimbalPosition+0xf8>
			if (diff >= i * 20){
 800130e:	69fa      	ldr	r2, [r7, #28]
 8001310:	0013      	movs	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	189b      	adds	r3, r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	001a      	movs	r2, r3
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4293      	cmp	r3, r2
 800131e:	db0d      	blt.n	800133c <setGimbalPosition+0xc0>
				gimbal_positions[gimbalIndex] += i * PUSH_SPEED;
 8001320:	201b      	movs	r0, #27
 8001322:	183b      	adds	r3, r7, r0
 8001324:	781a      	ldrb	r2, [r3, #0]
 8001326:	4b2e      	ldr	r3, [pc, #184]	; (80013e0 <setGimbalPosition+0x164>)
 8001328:	0092      	lsls	r2, r2, #2
 800132a:	58d1      	ldr	r1, [r2, r3]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	183a      	adds	r2, r7, r0
 8001330:	7812      	ldrb	r2, [r2, #0]
 8001332:	18c9      	adds	r1, r1, r3
 8001334:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <setGimbalPosition+0x164>)
 8001336:	0092      	lsls	r2, r2, #2
 8001338:	50d1      	str	r1, [r2, r3]
				break;
 800133a:	e01e      	b.n	800137a <setGimbalPosition+0xfe>
			}
			if (diff <= (-i) * 20){
 800133c:	69fa      	ldr	r2, [r7, #28]
 800133e:	0013      	movs	r3, r2
 8001340:	071b      	lsls	r3, r3, #28
 8001342:	1a9b      	subs	r3, r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	1a9b      	subs	r3, r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	001a      	movs	r2, r3
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4293      	cmp	r3, r2
 8001350:	dc0d      	bgt.n	800136e <setGimbalPosition+0xf2>
				gimbal_positions[gimbalIndex] -= i * PUSH_SPEED;
 8001352:	201b      	movs	r0, #27
 8001354:	183b      	adds	r3, r7, r0
 8001356:	781a      	ldrb	r2, [r3, #0]
 8001358:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <setGimbalPosition+0x164>)
 800135a:	0092      	lsls	r2, r2, #2
 800135c:	58d1      	ldr	r1, [r2, r3]
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	183a      	adds	r2, r7, r0
 8001362:	7812      	ldrb	r2, [r2, #0]
 8001364:	1ac9      	subs	r1, r1, r3
 8001366:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <setGimbalPosition+0x164>)
 8001368:	0092      	lsls	r2, r2, #2
 800136a:	50d1      	str	r1, [r2, r3]
				break;
 800136c:	e005      	b.n	800137a <setGimbalPosition+0xfe>
		for (int i = 10; i >= 2; i--){
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b01      	subs	r3, #1
 8001372:	61fb      	str	r3, [r7, #28]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	2b01      	cmp	r3, #1
 8001378:	dcc9      	bgt.n	800130e <setGimbalPosition+0x92>
			}
		}

		//Avoid overflow
		if (gimbal_positions[gimbalIndex] < 400) {
 800137a:	211b      	movs	r1, #27
 800137c:	187b      	adds	r3, r7, r1
 800137e:	781a      	ldrb	r2, [r3, #0]
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <setGimbalPosition+0x164>)
 8001382:	0092      	lsls	r2, r2, #2
 8001384:	58d2      	ldr	r2, [r2, r3]
 8001386:	23c8      	movs	r3, #200	; 0xc8
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	429a      	cmp	r2, r3
 800138c:	d207      	bcs.n	800139e <setGimbalPosition+0x122>
			gimbal_positions[gimbalIndex] = 400;
 800138e:	187b      	adds	r3, r7, r1
 8001390:	781a      	ldrb	r2, [r3, #0]
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <setGimbalPosition+0x164>)
 8001394:	0092      	lsls	r2, r2, #2
 8001396:	21c8      	movs	r1, #200	; 0xc8
 8001398:	0049      	lsls	r1, r1, #1
 800139a:	50d1      	str	r1, [r2, r3]
 800139c:	e010      	b.n	80013c0 <setGimbalPosition+0x144>
		}
		else if (gimbal_positions[gimbalIndex] > 800) {
 800139e:	211b      	movs	r1, #27
 80013a0:	187b      	adds	r3, r7, r1
 80013a2:	781a      	ldrb	r2, [r3, #0]
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <setGimbalPosition+0x164>)
 80013a6:	0092      	lsls	r2, r2, #2
 80013a8:	58d2      	ldr	r2, [r2, r3]
 80013aa:	23c8      	movs	r3, #200	; 0xc8
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d906      	bls.n	80013c0 <setGimbalPosition+0x144>
			gimbal_positions[gimbalIndex] = 800;
 80013b2:	187b      	adds	r3, r7, r1
 80013b4:	781a      	ldrb	r2, [r3, #0]
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <setGimbalPosition+0x164>)
 80013b8:	0092      	lsls	r2, r2, #2
 80013ba:	21c8      	movs	r1, #200	; 0xc8
 80013bc:	0089      	lsls	r1, r1, #2
 80013be:	50d1      	str	r1, [r2, r3]
		}
	}

	*writeRegister = gimbal_positions[gimbalIndex];
 80013c0:	231b      	movs	r3, #27
 80013c2:	18fb      	adds	r3, r7, r3
 80013c4:	781a      	ldrb	r2, [r3, #0]
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <setGimbalPosition+0x164>)
 80013c8:	0092      	lsls	r2, r2, #2
 80013ca:	58d2      	ldr	r2, [r2, r3]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	601a      	str	r2, [r3, #0]
}
 80013d0:	46c0      	nop			; (mov r8, r8)
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b009      	add	sp, #36	; 0x24
 80013d6:	bd90      	pop	{r4, r7, pc}
 80013d8:	200000c0 	.word	0x200000c0
 80013dc:	00000fff 	.word	0x00000fff
 80013e0:	20000048 	.word	0x20000048
 80013e4:	fffffda8 	.word	0xfffffda8

080013e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ec:	f000 fd59 	bl	8001ea2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f0:	f000 f84a 	bl	8001488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f4:	f000 fa6a 	bl	80018cc <MX_GPIO_Init>
  MX_DMA_Init();
 80013f8:	f000 fa4a 	bl	8001890 <MX_DMA_Init>
  MX_TIM3_Init();
 80013fc:	f000 f944 	bl	8001688 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001400:	f000 f902 	bl	8001608 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001404:	f000 fa10 	bl	8001828 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001408:	f000 f882 	bl	8001510 <MX_ADC1_Init>
  MX_TIM14_Init();
 800140c:	f000 f9bc 	bl	8001788 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <main+0x88>)
 8001412:	2100      	movs	r1, #0
 8001414:	0018      	movs	r0, r3
 8001416:	f003 fad5 	bl	80049c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <main+0x8c>)
 800141c:	2100      	movs	r1, #0
 800141e:	0018      	movs	r0, r3
 8001420:	f003 fad0 	bl	80049c4 <HAL_TIM_PWM_Start>

  HAL_ADCEx_Calibration_Start(&hadc1);
 8001424:	4b14      	ldr	r3, [pc, #80]	; (8001478 <main+0x90>)
 8001426:	0018      	movs	r0, r3
 8001428:	f001 fe7e 	bl	8003128 <HAL_ADCEx_Calibration_Start>

  initGimbals();
 800142c:	f7ff fec4 	bl	80011b8 <initGimbals>

  registerGimbal('X', ABSOLUTE_GIMBAL);
 8001430:	2100      	movs	r1, #0
 8001432:	2058      	movs	r0, #88	; 0x58
 8001434:	f7ff feec 	bl	8001210 <registerGimbal>
  registerGimbal('Z', PUSH_GIMBAL);
 8001438:	2101      	movs	r1, #1
 800143a:	205a      	movs	r0, #90	; 0x5a
 800143c:	f7ff fee8 	bl	8001210 <registerGimbal>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start_DMA(&hadc1, joystick_values, 2);
 8001440:	490e      	ldr	r1, [pc, #56]	; (800147c <main+0x94>)
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <main+0x90>)
 8001444:	2202      	movs	r2, #2
 8001446:	0018      	movs	r0, r3
 8001448:	f001 f8d6 	bl	80025f8 <HAL_ADC_Start_DMA>

	  setGimbalPosition('X', joystick_values[0], &(TIM3->CCR1));
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <main+0x94>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <main+0x98>)
 8001452:	0019      	movs	r1, r3
 8001454:	2058      	movs	r0, #88	; 0x58
 8001456:	f7ff ff11 	bl	800127c <setGimbalPosition>
	  setGimbalPosition('Z', joystick_values[1], &(TIM14->CCR1));
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <main+0x94>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	4a09      	ldr	r2, [pc, #36]	; (8001484 <main+0x9c>)
 8001460:	0019      	movs	r1, r3
 8001462:	205a      	movs	r0, #90	; 0x5a
 8001464:	f7ff ff0a 	bl	800127c <setGimbalPosition>

	  HAL_Delay(50);
 8001468:	2032      	movs	r0, #50	; 0x32
 800146a:	f000 fd97 	bl	8001f9c <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, joystick_values, 2);
 800146e:	e7e7      	b.n	8001440 <main+0x58>
 8001470:	20000240 	.word	0x20000240
 8001474:	200001f4 	.word	0x200001f4
 8001478:	200000e0 	.word	0x200000e0
 800147c:	20000320 	.word	0x20000320
 8001480:	40000434 	.word	0x40000434
 8001484:	40002034 	.word	0x40002034

08001488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	b08d      	sub	sp, #52	; 0x34
 800148c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148e:	2414      	movs	r4, #20
 8001490:	193b      	adds	r3, r7, r4
 8001492:	0018      	movs	r0, r3
 8001494:	231c      	movs	r3, #28
 8001496:	001a      	movs	r2, r3
 8001498:	2100      	movs	r1, #0
 800149a:	f004 fd6d 	bl	8005f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800149e:	003b      	movs	r3, r7
 80014a0:	0018      	movs	r0, r3
 80014a2:	2314      	movs	r3, #20
 80014a4:	001a      	movs	r2, r3
 80014a6:	2100      	movs	r1, #0
 80014a8:	f004 fd66 	bl	8005f78 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014ac:	193b      	adds	r3, r7, r4
 80014ae:	2202      	movs	r2, #2
 80014b0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b2:	193b      	adds	r3, r7, r4
 80014b4:	2280      	movs	r2, #128	; 0x80
 80014b6:	0052      	lsls	r2, r2, #1
 80014b8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80014ba:	193b      	adds	r3, r7, r4
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014c0:	193b      	adds	r3, r7, r4
 80014c2:	2240      	movs	r2, #64	; 0x40
 80014c4:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c6:	193b      	adds	r3, r7, r4
 80014c8:	0018      	movs	r0, r3
 80014ca:	f002 fd85 	bl	8003fd8 <HAL_RCC_OscConfig>
 80014ce:	1e03      	subs	r3, r0, #0
 80014d0:	d001      	beq.n	80014d6 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80014d2:	f000 fa73 	bl	80019bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d6:	003b      	movs	r3, r7
 80014d8:	2207      	movs	r2, #7
 80014da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014dc:	003b      	movs	r3, r7
 80014de:	2200      	movs	r2, #0
 80014e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80014e2:	003b      	movs	r3, r7
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80014e8:	003b      	movs	r3, r7
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80014ee:	003b      	movs	r3, r7
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014f4:	003b      	movs	r3, r7
 80014f6:	2101      	movs	r1, #1
 80014f8:	0018      	movs	r0, r3
 80014fa:	f002 ff51 	bl	80043a0 <HAL_RCC_ClockConfig>
 80014fe:	1e03      	subs	r3, r0, #0
 8001500:	d001      	beq.n	8001506 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001502:	f000 fa5b 	bl	80019bc <Error_Handler>
  }
}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	b00d      	add	sp, #52	; 0x34
 800150c:	bd90      	pop	{r4, r7, pc}
	...

08001510 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	0018      	movs	r0, r3
 800151a:	230c      	movs	r3, #12
 800151c:	001a      	movs	r2, r3
 800151e:	2100      	movs	r1, #0
 8001520:	f004 fd2a 	bl	8005f78 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001524:	4b34      	ldr	r3, [pc, #208]	; (80015f8 <MX_ADC1_Init+0xe8>)
 8001526:	4a35      	ldr	r2, [pc, #212]	; (80015fc <MX_ADC1_Init+0xec>)
 8001528:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800152a:	4b33      	ldr	r3, [pc, #204]	; (80015f8 <MX_ADC1_Init+0xe8>)
 800152c:	2280      	movs	r2, #128	; 0x80
 800152e:	05d2      	lsls	r2, r2, #23
 8001530:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001532:	4b31      	ldr	r3, [pc, #196]	; (80015f8 <MX_ADC1_Init+0xe8>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001538:	4b2f      	ldr	r3, [pc, #188]	; (80015f8 <MX_ADC1_Init+0xe8>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800153e:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <MX_ADC1_Init+0xe8>)
 8001540:	2280      	movs	r2, #128	; 0x80
 8001542:	0392      	lsls	r2, r2, #14
 8001544:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001546:	4b2c      	ldr	r3, [pc, #176]	; (80015f8 <MX_ADC1_Init+0xe8>)
 8001548:	2204      	movs	r2, #4
 800154a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800154c:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <MX_ADC1_Init+0xe8>)
 800154e:	2200      	movs	r2, #0
 8001550:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001552:	4b29      	ldr	r3, [pc, #164]	; (80015f8 <MX_ADC1_Init+0xe8>)
 8001554:	2200      	movs	r2, #0
 8001556:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001558:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <MX_ADC1_Init+0xe8>)
 800155a:	2201      	movs	r2, #1
 800155c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 800155e:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <MX_ADC1_Init+0xe8>)
 8001560:	2202      	movs	r2, #2
 8001562:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001564:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <MX_ADC1_Init+0xe8>)
 8001566:	2200      	movs	r2, #0
 8001568:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800156a:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <MX_ADC1_Init+0xe8>)
 800156c:	2200      	movs	r2, #0
 800156e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001570:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <MX_ADC1_Init+0xe8>)
 8001572:	222c      	movs	r2, #44	; 0x2c
 8001574:	2100      	movs	r1, #0
 8001576:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001578:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <MX_ADC1_Init+0xe8>)
 800157a:	2200      	movs	r2, #0
 800157c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800157e:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <MX_ADC1_Init+0xe8>)
 8001580:	2207      	movs	r2, #7
 8001582:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001584:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <MX_ADC1_Init+0xe8>)
 8001586:	2207      	movs	r2, #7
 8001588:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800158a:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <MX_ADC1_Init+0xe8>)
 800158c:	223c      	movs	r2, #60	; 0x3c
 800158e:	2100      	movs	r1, #0
 8001590:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <MX_ADC1_Init+0xe8>)
 8001594:	2200      	movs	r2, #0
 8001596:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <MX_ADC1_Init+0xe8>)
 800159a:	0018      	movs	r0, r3
 800159c:	f000 fe86 	bl	80022ac <HAL_ADC_Init>
 80015a0:	1e03      	subs	r3, r0, #0
 80015a2:	d001      	beq.n	80015a8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80015a4:	f000 fa0a 	bl	80019bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	4a15      	ldr	r2, [pc, #84]	; (8001600 <MX_ADC1_Init+0xf0>)
 80015ac:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2200      	movs	r2, #0
 80015b2:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ba:	1d3a      	adds	r2, r7, #4
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <MX_ADC1_Init+0xe8>)
 80015be:	0011      	movs	r1, r2
 80015c0:	0018      	movs	r0, r3
 80015c2:	f001 f9df 	bl	8002984 <HAL_ADC_ConfigChannel>
 80015c6:	1e03      	subs	r3, r0, #0
 80015c8:	d001      	beq.n	80015ce <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80015ca:	f000 f9f7 	bl	80019bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	4a0c      	ldr	r2, [pc, #48]	; (8001604 <MX_ADC1_Init+0xf4>)
 80015d2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	2204      	movs	r2, #4
 80015d8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015da:	1d3a      	adds	r2, r7, #4
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_ADC1_Init+0xe8>)
 80015de:	0011      	movs	r1, r2
 80015e0:	0018      	movs	r0, r3
 80015e2:	f001 f9cf 	bl	8002984 <HAL_ADC_ConfigChannel>
 80015e6:	1e03      	subs	r3, r0, #0
 80015e8:	d001      	beq.n	80015ee <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80015ea:	f000 f9e7 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b004      	add	sp, #16
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	200000e0 	.word	0x200000e0
 80015fc:	40012400 	.word	0x40012400
 8001600:	04000002 	.word	0x04000002
 8001604:	10000010 	.word	0x10000010

08001608 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <MX_I2C1_Init+0x74>)
 800160e:	4a1c      	ldr	r2, [pc, #112]	; (8001680 <MX_I2C1_Init+0x78>)
 8001610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001612:	4b1a      	ldr	r3, [pc, #104]	; (800167c <MX_I2C1_Init+0x74>)
 8001614:	4a1b      	ldr	r2, [pc, #108]	; (8001684 <MX_I2C1_Init+0x7c>)
 8001616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <MX_I2C1_Init+0x74>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800161e:	4b17      	ldr	r3, [pc, #92]	; (800167c <MX_I2C1_Init+0x74>)
 8001620:	2201      	movs	r2, #1
 8001622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001624:	4b15      	ldr	r3, [pc, #84]	; (800167c <MX_I2C1_Init+0x74>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <MX_I2C1_Init+0x74>)
 800162c:	2200      	movs	r2, #0
 800162e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <MX_I2C1_Init+0x74>)
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_I2C1_Init+0x74>)
 8001638:	2200      	movs	r2, #0
 800163a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_I2C1_Init+0x74>)
 800163e:	2200      	movs	r2, #0
 8001640:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_I2C1_Init+0x74>)
 8001644:	0018      	movs	r0, r3
 8001646:	f002 fb89 	bl	8003d5c <HAL_I2C_Init>
 800164a:	1e03      	subs	r3, r0, #0
 800164c:	d001      	beq.n	8001652 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800164e:	f000 f9b5 	bl	80019bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <MX_I2C1_Init+0x74>)
 8001654:	2100      	movs	r1, #0
 8001656:	0018      	movs	r0, r3
 8001658:	f002 fc26 	bl	8003ea8 <HAL_I2CEx_ConfigAnalogFilter>
 800165c:	1e03      	subs	r3, r0, #0
 800165e:	d001      	beq.n	8001664 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001660:	f000 f9ac 	bl	80019bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <MX_I2C1_Init+0x74>)
 8001666:	2100      	movs	r1, #0
 8001668:	0018      	movs	r0, r3
 800166a:	f002 fc69 	bl	8003f40 <HAL_I2CEx_ConfigDigitalFilter>
 800166e:	1e03      	subs	r3, r0, #0
 8001670:	d001      	beq.n	8001676 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001672:	f000 f9a3 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	200001a0 	.word	0x200001a0
 8001680:	40005400 	.word	0x40005400
 8001684:	20303e5d 	.word	0x20303e5d

08001688 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08e      	sub	sp, #56	; 0x38
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800168e:	2328      	movs	r3, #40	; 0x28
 8001690:	18fb      	adds	r3, r7, r3
 8001692:	0018      	movs	r0, r3
 8001694:	2310      	movs	r3, #16
 8001696:	001a      	movs	r2, r3
 8001698:	2100      	movs	r1, #0
 800169a:	f004 fc6d 	bl	8005f78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169e:	231c      	movs	r3, #28
 80016a0:	18fb      	adds	r3, r7, r3
 80016a2:	0018      	movs	r0, r3
 80016a4:	230c      	movs	r3, #12
 80016a6:	001a      	movs	r2, r3
 80016a8:	2100      	movs	r1, #0
 80016aa:	f004 fc65 	bl	8005f78 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ae:	003b      	movs	r3, r7
 80016b0:	0018      	movs	r0, r3
 80016b2:	231c      	movs	r3, #28
 80016b4:	001a      	movs	r2, r3
 80016b6:	2100      	movs	r1, #0
 80016b8:	f004 fc5e 	bl	8005f78 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016bc:	4b2f      	ldr	r3, [pc, #188]	; (800177c <MX_TIM3_Init+0xf4>)
 80016be:	4a30      	ldr	r2, [pc, #192]	; (8001780 <MX_TIM3_Init+0xf8>)
 80016c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 120-1;
 80016c2:	4b2e      	ldr	r3, [pc, #184]	; (800177c <MX_TIM3_Init+0xf4>)
 80016c4:	2277      	movs	r2, #119	; 0x77
 80016c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c8:	4b2c      	ldr	r3, [pc, #176]	; (800177c <MX_TIM3_Init+0xf4>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80016ce:	4b2b      	ldr	r3, [pc, #172]	; (800177c <MX_TIM3_Init+0xf4>)
 80016d0:	4a2c      	ldr	r2, [pc, #176]	; (8001784 <MX_TIM3_Init+0xfc>)
 80016d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d4:	4b29      	ldr	r3, [pc, #164]	; (800177c <MX_TIM3_Init+0xf4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016da:	4b28      	ldr	r3, [pc, #160]	; (800177c <MX_TIM3_Init+0xf4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016e0:	4b26      	ldr	r3, [pc, #152]	; (800177c <MX_TIM3_Init+0xf4>)
 80016e2:	0018      	movs	r0, r3
 80016e4:	f003 f8b6 	bl	8004854 <HAL_TIM_Base_Init>
 80016e8:	1e03      	subs	r3, r0, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80016ec:	f000 f966 	bl	80019bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f0:	2128      	movs	r1, #40	; 0x28
 80016f2:	187b      	adds	r3, r7, r1
 80016f4:	2280      	movs	r2, #128	; 0x80
 80016f6:	0152      	lsls	r2, r2, #5
 80016f8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016fa:	187a      	adds	r2, r7, r1
 80016fc:	4b1f      	ldr	r3, [pc, #124]	; (800177c <MX_TIM3_Init+0xf4>)
 80016fe:	0011      	movs	r1, r2
 8001700:	0018      	movs	r0, r3
 8001702:	f003 fb37 	bl	8004d74 <HAL_TIM_ConfigClockSource>
 8001706:	1e03      	subs	r3, r0, #0
 8001708:	d001      	beq.n	800170e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800170a:	f000 f957 	bl	80019bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800170e:	4b1b      	ldr	r3, [pc, #108]	; (800177c <MX_TIM3_Init+0xf4>)
 8001710:	0018      	movs	r0, r3
 8001712:	f003 f8f7 	bl	8004904 <HAL_TIM_PWM_Init>
 8001716:	1e03      	subs	r3, r0, #0
 8001718:	d001      	beq.n	800171e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800171a:	f000 f94f 	bl	80019bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171e:	211c      	movs	r1, #28
 8001720:	187b      	adds	r3, r7, r1
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001726:	187b      	adds	r3, r7, r1
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800172c:	187a      	adds	r2, r7, r1
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <MX_TIM3_Init+0xf4>)
 8001730:	0011      	movs	r1, r2
 8001732:	0018      	movs	r0, r3
 8001734:	f003 ffbc 	bl	80056b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001738:	1e03      	subs	r3, r0, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800173c:	f000 f93e 	bl	80019bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001740:	003b      	movs	r3, r7
 8001742:	2260      	movs	r2, #96	; 0x60
 8001744:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001746:	003b      	movs	r3, r7
 8001748:	2200      	movs	r2, #0
 800174a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800174c:	003b      	movs	r3, r7
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001752:	003b      	movs	r3, r7
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001758:	0039      	movs	r1, r7
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <MX_TIM3_Init+0xf4>)
 800175c:	2200      	movs	r2, #0
 800175e:	0018      	movs	r0, r3
 8001760:	f003 fa08 	bl	8004b74 <HAL_TIM_PWM_ConfigChannel>
 8001764:	1e03      	subs	r3, r0, #0
 8001766:	d001      	beq.n	800176c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8001768:	f000 f928 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <MX_TIM3_Init+0xf4>)
 800176e:	0018      	movs	r0, r3
 8001770:	f000 fa76 	bl	8001c60 <HAL_TIM_MspPostInit>

}
 8001774:	46c0      	nop			; (mov r8, r8)
 8001776:	46bd      	mov	sp, r7
 8001778:	b00e      	add	sp, #56	; 0x38
 800177a:	bd80      	pop	{r7, pc}
 800177c:	200001f4 	.word	0x200001f4
 8001780:	40000400 	.word	0x40000400
 8001784:	000003e7 	.word	0x000003e7

08001788 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	0018      	movs	r0, r3
 8001792:	231c      	movs	r3, #28
 8001794:	001a      	movs	r2, r3
 8001796:	2100      	movs	r1, #0
 8001798:	f004 fbee 	bl	8005f78 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800179c:	4b1f      	ldr	r3, [pc, #124]	; (800181c <MX_TIM14_Init+0x94>)
 800179e:	4a20      	ldr	r2, [pc, #128]	; (8001820 <MX_TIM14_Init+0x98>)
 80017a0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 120-1;
 80017a2:	4b1e      	ldr	r3, [pc, #120]	; (800181c <MX_TIM14_Init+0x94>)
 80017a4:	2277      	movs	r2, #119	; 0x77
 80017a6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a8:	4b1c      	ldr	r3, [pc, #112]	; (800181c <MX_TIM14_Init+0x94>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 80017ae:	4b1b      	ldr	r3, [pc, #108]	; (800181c <MX_TIM14_Init+0x94>)
 80017b0:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <MX_TIM14_Init+0x9c>)
 80017b2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <MX_TIM14_Init+0x94>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ba:	4b18      	ldr	r3, [pc, #96]	; (800181c <MX_TIM14_Init+0x94>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80017c0:	4b16      	ldr	r3, [pc, #88]	; (800181c <MX_TIM14_Init+0x94>)
 80017c2:	0018      	movs	r0, r3
 80017c4:	f003 f846 	bl	8004854 <HAL_TIM_Base_Init>
 80017c8:	1e03      	subs	r3, r0, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 80017cc:	f000 f8f6 	bl	80019bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <MX_TIM14_Init+0x94>)
 80017d2:	0018      	movs	r0, r3
 80017d4:	f003 f896 	bl	8004904 <HAL_TIM_PWM_Init>
 80017d8:	1e03      	subs	r3, r0, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 80017dc:	f000 f8ee 	bl	80019bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2260      	movs	r2, #96	; 0x60
 80017e4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	2200      	movs	r2, #0
 80017ea:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017f8:	1d39      	adds	r1, r7, #4
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <MX_TIM14_Init+0x94>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	0018      	movs	r0, r3
 8001800:	f003 f9b8 	bl	8004b74 <HAL_TIM_PWM_ConfigChannel>
 8001804:	1e03      	subs	r3, r0, #0
 8001806:	d001      	beq.n	800180c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001808:	f000 f8d8 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <MX_TIM14_Init+0x94>)
 800180e:	0018      	movs	r0, r3
 8001810:	f000 fa26 	bl	8001c60 <HAL_TIM_MspPostInit>

}
 8001814:	46c0      	nop			; (mov r8, r8)
 8001816:	46bd      	mov	sp, r7
 8001818:	b008      	add	sp, #32
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000240 	.word	0x20000240
 8001820:	40002000 	.word	0x40002000
 8001824:	000003e7 	.word	0x000003e7

08001828 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800182c:	4b16      	ldr	r3, [pc, #88]	; (8001888 <MX_USART2_UART_Init+0x60>)
 800182e:	4a17      	ldr	r2, [pc, #92]	; (800188c <MX_USART2_UART_Init+0x64>)
 8001830:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <MX_USART2_UART_Init+0x60>)
 8001834:	22e1      	movs	r2, #225	; 0xe1
 8001836:	0252      	lsls	r2, r2, #9
 8001838:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <MX_USART2_UART_Init+0x60>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <MX_USART2_UART_Init+0x60>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <MX_USART2_UART_Init+0x60>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800184c:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <MX_USART2_UART_Init+0x60>)
 800184e:	220c      	movs	r2, #12
 8001850:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001852:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <MX_USART2_UART_Init+0x60>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <MX_USART2_UART_Init+0x60>)
 800185a:	2200      	movs	r2, #0
 800185c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <MX_USART2_UART_Init+0x60>)
 8001860:	2200      	movs	r2, #0
 8001862:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <MX_USART2_UART_Init+0x60>)
 8001866:	2200      	movs	r2, #0
 8001868:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800186a:	4b07      	ldr	r3, [pc, #28]	; (8001888 <MX_USART2_UART_Init+0x60>)
 800186c:	2200      	movs	r2, #0
 800186e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <MX_USART2_UART_Init+0x60>)
 8001872:	0018      	movs	r0, r3
 8001874:	f003 ff7e 	bl	8005774 <HAL_UART_Init>
 8001878:	1e03      	subs	r3, r0, #0
 800187a:	d001      	beq.n	8001880 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800187c:	f000 f89e 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001880:	46c0      	nop			; (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	2000028c 	.word	0x2000028c
 800188c:	40004400 	.word	0x40004400

08001890 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <MX_DMA_Init+0x38>)
 8001898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <MX_DMA_Init+0x38>)
 800189c:	2101      	movs	r1, #1
 800189e:	430a      	orrs	r2, r1
 80018a0:	639a      	str	r2, [r3, #56]	; 0x38
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MX_DMA_Init+0x38>)
 80018a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a6:	2201      	movs	r2, #1
 80018a8:	4013      	ands	r3, r2
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2100      	movs	r1, #0
 80018b2:	2009      	movs	r0, #9
 80018b4:	f001 fdfe 	bl	80034b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018b8:	2009      	movs	r0, #9
 80018ba:	f001 fe10 	bl	80034de <HAL_NVIC_EnableIRQ>

}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	46bd      	mov	sp, r7
 80018c2:	b002      	add	sp, #8
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	40021000 	.word	0x40021000

080018cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b08b      	sub	sp, #44	; 0x2c
 80018d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d2:	2414      	movs	r4, #20
 80018d4:	193b      	adds	r3, r7, r4
 80018d6:	0018      	movs	r0, r3
 80018d8:	2314      	movs	r3, #20
 80018da:	001a      	movs	r2, r3
 80018dc:	2100      	movs	r1, #0
 80018de:	f004 fb4b 	bl	8005f78 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e2:	4b33      	ldr	r3, [pc, #204]	; (80019b0 <MX_GPIO_Init+0xe4>)
 80018e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018e6:	4b32      	ldr	r3, [pc, #200]	; (80019b0 <MX_GPIO_Init+0xe4>)
 80018e8:	2104      	movs	r1, #4
 80018ea:	430a      	orrs	r2, r1
 80018ec:	635a      	str	r2, [r3, #52]	; 0x34
 80018ee:	4b30      	ldr	r3, [pc, #192]	; (80019b0 <MX_GPIO_Init+0xe4>)
 80018f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f2:	2204      	movs	r2, #4
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018fa:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <MX_GPIO_Init+0xe4>)
 80018fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018fe:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <MX_GPIO_Init+0xe4>)
 8001900:	2120      	movs	r1, #32
 8001902:	430a      	orrs	r2, r1
 8001904:	635a      	str	r2, [r3, #52]	; 0x34
 8001906:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <MX_GPIO_Init+0xe4>)
 8001908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800190a:	2220      	movs	r2, #32
 800190c:	4013      	ands	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <MX_GPIO_Init+0xe4>)
 8001914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001916:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <MX_GPIO_Init+0xe4>)
 8001918:	2101      	movs	r1, #1
 800191a:	430a      	orrs	r2, r1
 800191c:	635a      	str	r2, [r3, #52]	; 0x34
 800191e:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <MX_GPIO_Init+0xe4>)
 8001920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001922:	2201      	movs	r2, #1
 8001924:	4013      	ands	r3, r2
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <MX_GPIO_Init+0xe4>)
 800192c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <MX_GPIO_Init+0xe4>)
 8001930:	2102      	movs	r1, #2
 8001932:	430a      	orrs	r2, r1
 8001934:	635a      	str	r2, [r3, #52]	; 0x34
 8001936:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <MX_GPIO_Init+0xe4>)
 8001938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800193a:	2202      	movs	r2, #2
 800193c:	4013      	ands	r3, r2
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 8001942:	23a0      	movs	r3, #160	; 0xa0
 8001944:	05db      	lsls	r3, r3, #23
 8001946:	2201      	movs	r2, #1
 8001948:	2120      	movs	r1, #32
 800194a:	0018      	movs	r0, r3
 800194c:	f002 f9aa 	bl	8003ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8001950:	193b      	adds	r3, r7, r4
 8001952:	2280      	movs	r2, #128	; 0x80
 8001954:	0192      	lsls	r2, r2, #6
 8001956:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001958:	193b      	adds	r3, r7, r4
 800195a:	4a16      	ldr	r2, [pc, #88]	; (80019b4 <MX_GPIO_Init+0xe8>)
 800195c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	193b      	adds	r3, r7, r4
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8001964:	193b      	adds	r3, r7, r4
 8001966:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <MX_GPIO_Init+0xec>)
 8001968:	0019      	movs	r1, r3
 800196a:	0010      	movs	r0, r2
 800196c:	f002 f828 	bl	80039c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 8001970:	0021      	movs	r1, r4
 8001972:	187b      	adds	r3, r7, r1
 8001974:	2220      	movs	r2, #32
 8001976:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001978:	187b      	adds	r3, r7, r1
 800197a:	2201      	movs	r2, #1
 800197c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	187b      	adds	r3, r7, r1
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001984:	187b      	adds	r3, r7, r1
 8001986:	2203      	movs	r2, #3
 8001988:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 800198a:	187a      	adds	r2, r7, r1
 800198c:	23a0      	movs	r3, #160	; 0xa0
 800198e:	05db      	lsls	r3, r3, #23
 8001990:	0011      	movs	r1, r2
 8001992:	0018      	movs	r0, r3
 8001994:	f002 f814 	bl	80039c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001998:	2200      	movs	r2, #0
 800199a:	2100      	movs	r1, #0
 800199c:	2007      	movs	r0, #7
 800199e:	f001 fd89 	bl	80034b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80019a2:	2007      	movs	r0, #7
 80019a4:	f001 fd9b 	bl	80034de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019a8:	46c0      	nop			; (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b00b      	add	sp, #44	; 0x2c
 80019ae:	bd90      	pop	{r4, r7, pc}
 80019b0:	40021000 	.word	0x40021000
 80019b4:	10110000 	.word	0x10110000
 80019b8:	50000800 	.word	0x50000800

080019bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c0:	b672      	cpsid	i
}
 80019c2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <Error_Handler+0x8>
	...

080019c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ce:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <HAL_MspInit+0x44>)
 80019d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <HAL_MspInit+0x44>)
 80019d4:	2101      	movs	r1, #1
 80019d6:	430a      	orrs	r2, r1
 80019d8:	641a      	str	r2, [r3, #64]	; 0x40
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <HAL_MspInit+0x44>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	2201      	movs	r2, #1
 80019e0:	4013      	ands	r3, r2
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_MspInit+0x44>)
 80019e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019ea:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <HAL_MspInit+0x44>)
 80019ec:	2180      	movs	r1, #128	; 0x80
 80019ee:	0549      	lsls	r1, r1, #21
 80019f0:	430a      	orrs	r2, r1
 80019f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_MspInit+0x44>)
 80019f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	055b      	lsls	r3, r3, #21
 80019fc:	4013      	ands	r3, r2
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b002      	add	sp, #8
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	40021000 	.word	0x40021000

08001a10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a10:	b590      	push	{r4, r7, lr}
 8001a12:	b091      	sub	sp, #68	; 0x44
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	232c      	movs	r3, #44	; 0x2c
 8001a1a:	18fb      	adds	r3, r7, r3
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	2314      	movs	r3, #20
 8001a20:	001a      	movs	r2, r3
 8001a22:	2100      	movs	r1, #0
 8001a24:	f004 faa8 	bl	8005f78 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a28:	2410      	movs	r4, #16
 8001a2a:	193b      	adds	r3, r7, r4
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	231c      	movs	r3, #28
 8001a30:	001a      	movs	r2, r3
 8001a32:	2100      	movs	r1, #0
 8001a34:	f004 faa0 	bl	8005f78 <memset>
  if(hadc->Instance==ADC1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a39      	ldr	r2, [pc, #228]	; (8001b24 <HAL_ADC_MspInit+0x114>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d16c      	bne.n	8001b1c <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a42:	193b      	adds	r3, r7, r4
 8001a44:	2280      	movs	r2, #128	; 0x80
 8001a46:	01d2      	lsls	r2, r2, #7
 8001a48:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001a4a:	193b      	adds	r3, r7, r4
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a50:	193b      	adds	r3, r7, r4
 8001a52:	0018      	movs	r0, r3
 8001a54:	f002 fe10 	bl	8004678 <HAL_RCCEx_PeriphCLKConfig>
 8001a58:	1e03      	subs	r3, r0, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001a5c:	f7ff ffae 	bl	80019bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a60:	4b31      	ldr	r3, [pc, #196]	; (8001b28 <HAL_ADC_MspInit+0x118>)
 8001a62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a64:	4b30      	ldr	r3, [pc, #192]	; (8001b28 <HAL_ADC_MspInit+0x118>)
 8001a66:	2180      	movs	r1, #128	; 0x80
 8001a68:	0349      	lsls	r1, r1, #13
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a6e:	4b2e      	ldr	r3, [pc, #184]	; (8001b28 <HAL_ADC_MspInit+0x118>)
 8001a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	035b      	lsls	r3, r3, #13
 8001a76:	4013      	ands	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7c:	4b2a      	ldr	r3, [pc, #168]	; (8001b28 <HAL_ADC_MspInit+0x118>)
 8001a7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a80:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <HAL_ADC_MspInit+0x118>)
 8001a82:	2101      	movs	r1, #1
 8001a84:	430a      	orrs	r2, r1
 8001a86:	635a      	str	r2, [r3, #52]	; 0x34
 8001a88:	4b27      	ldr	r3, [pc, #156]	; (8001b28 <HAL_ADC_MspInit+0x118>)
 8001a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	4013      	ands	r3, r2
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001a94:	212c      	movs	r1, #44	; 0x2c
 8001a96:	187b      	adds	r3, r7, r1
 8001a98:	2212      	movs	r2, #18
 8001a9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a9c:	187b      	adds	r3, r7, r1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	187b      	adds	r3, r7, r1
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa8:	187a      	adds	r2, r7, r1
 8001aaa:	23a0      	movs	r3, #160	; 0xa0
 8001aac:	05db      	lsls	r3, r3, #23
 8001aae:	0011      	movs	r1, r2
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f001 ff85 	bl	80039c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ab6:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <HAL_ADC_MspInit+0x11c>)
 8001ab8:	4a1d      	ldr	r2, [pc, #116]	; (8001b30 <HAL_ADC_MspInit+0x120>)
 8001aba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001abc:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <HAL_ADC_MspInit+0x11c>)
 8001abe:	2205      	movs	r2, #5
 8001ac0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <HAL_ADC_MspInit+0x11c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ac8:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <HAL_ADC_MspInit+0x11c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ace:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <HAL_ADC_MspInit+0x11c>)
 8001ad0:	2280      	movs	r2, #128	; 0x80
 8001ad2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ad4:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <HAL_ADC_MspInit+0x11c>)
 8001ad6:	2280      	movs	r2, #128	; 0x80
 8001ad8:	0092      	lsls	r2, r2, #2
 8001ada:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001adc:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <HAL_ADC_MspInit+0x11c>)
 8001ade:	2280      	movs	r2, #128	; 0x80
 8001ae0:	0112      	lsls	r2, r2, #4
 8001ae2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ae4:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <HAL_ADC_MspInit+0x11c>)
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <HAL_ADC_MspInit+0x11c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_ADC_MspInit+0x11c>)
 8001af2:	0018      	movs	r0, r3
 8001af4:	f001 fd10 	bl	8003518 <HAL_DMA_Init>
 8001af8:	1e03      	subs	r3, r0, #0
 8001afa:	d001      	beq.n	8001b00 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8001afc:	f7ff ff5e 	bl	80019bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <HAL_ADC_MspInit+0x11c>)
 8001b04:	651a      	str	r2, [r3, #80]	; 0x50
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_ADC_MspInit+0x11c>)
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2100      	movs	r1, #0
 8001b10:	200c      	movs	r0, #12
 8001b12:	f001 fccf 	bl	80034b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001b16:	200c      	movs	r0, #12
 8001b18:	f001 fce1 	bl	80034de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b011      	add	sp, #68	; 0x44
 8001b22:	bd90      	pop	{r4, r7, pc}
 8001b24:	40012400 	.word	0x40012400
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	20000144 	.word	0x20000144
 8001b30:	40020008 	.word	0x40020008

08001b34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b34:	b590      	push	{r4, r7, lr}
 8001b36:	b091      	sub	sp, #68	; 0x44
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	232c      	movs	r3, #44	; 0x2c
 8001b3e:	18fb      	adds	r3, r7, r3
 8001b40:	0018      	movs	r0, r3
 8001b42:	2314      	movs	r3, #20
 8001b44:	001a      	movs	r2, r3
 8001b46:	2100      	movs	r1, #0
 8001b48:	f004 fa16 	bl	8005f78 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b4c:	2410      	movs	r4, #16
 8001b4e:	193b      	adds	r3, r7, r4
 8001b50:	0018      	movs	r0, r3
 8001b52:	231c      	movs	r3, #28
 8001b54:	001a      	movs	r2, r3
 8001b56:	2100      	movs	r1, #0
 8001b58:	f004 fa0e 	bl	8005f78 <memset>
  if(hi2c->Instance==I2C1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a22      	ldr	r2, [pc, #136]	; (8001bec <HAL_I2C_MspInit+0xb8>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d13e      	bne.n	8001be4 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b66:	193b      	adds	r3, r7, r4
 8001b68:	2240      	movs	r2, #64	; 0x40
 8001b6a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b6c:	193b      	adds	r3, r7, r4
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b72:	193b      	adds	r3, r7, r4
 8001b74:	0018      	movs	r0, r3
 8001b76:	f002 fd7f 	bl	8004678 <HAL_RCCEx_PeriphCLKConfig>
 8001b7a:	1e03      	subs	r3, r0, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001b7e:	f7ff ff1d 	bl	80019bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b82:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <HAL_I2C_MspInit+0xbc>)
 8001b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b86:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <HAL_I2C_MspInit+0xbc>)
 8001b88:	2102      	movs	r1, #2
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b8e:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <HAL_I2C_MspInit+0xbc>)
 8001b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b92:	2202      	movs	r2, #2
 8001b94:	4013      	ands	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b9a:	212c      	movs	r1, #44	; 0x2c
 8001b9c:	187b      	adds	r3, r7, r1
 8001b9e:	22c0      	movs	r2, #192	; 0xc0
 8001ba0:	0092      	lsls	r2, r2, #2
 8001ba2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba4:	187b      	adds	r3, r7, r1
 8001ba6:	2212      	movs	r2, #18
 8001ba8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	187b      	adds	r3, r7, r1
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	187b      	adds	r3, r7, r1
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001bb6:	187b      	adds	r3, r7, r1
 8001bb8:	2206      	movs	r2, #6
 8001bba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bbc:	187b      	adds	r3, r7, r1
 8001bbe:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <HAL_I2C_MspInit+0xc0>)
 8001bc0:	0019      	movs	r1, r3
 8001bc2:	0010      	movs	r0, r2
 8001bc4:	f001 fefc 	bl	80039c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_I2C_MspInit+0xbc>)
 8001bca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <HAL_I2C_MspInit+0xbc>)
 8001bce:	2180      	movs	r1, #128	; 0x80
 8001bd0:	0389      	lsls	r1, r1, #14
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_I2C_MspInit+0xbc>)
 8001bd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bda:	2380      	movs	r3, #128	; 0x80
 8001bdc:	039b      	lsls	r3, r3, #14
 8001bde:	4013      	ands	r3, r2
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001be4:	46c0      	nop			; (mov r8, r8)
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b011      	add	sp, #68	; 0x44
 8001bea:	bd90      	pop	{r4, r7, pc}
 8001bec:	40005400 	.word	0x40005400
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	50000400 	.word	0x50000400

08001bf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a13      	ldr	r2, [pc, #76]	; (8001c54 <HAL_TIM_Base_MspInit+0x5c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d10c      	bne.n	8001c24 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <HAL_TIM_Base_MspInit+0x60>)
 8001c0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_TIM_Base_MspInit+0x60>)
 8001c10:	2102      	movs	r1, #2
 8001c12:	430a      	orrs	r2, r1
 8001c14:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <HAL_TIM_Base_MspInit+0x60>)
 8001c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001c22:	e012      	b.n	8001c4a <HAL_TIM_Base_MspInit+0x52>
  else if(htim_base->Instance==TIM14)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0c      	ldr	r2, [pc, #48]	; (8001c5c <HAL_TIM_Base_MspInit+0x64>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d10d      	bne.n	8001c4a <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <HAL_TIM_Base_MspInit+0x60>)
 8001c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_TIM_Base_MspInit+0x60>)
 8001c34:	2180      	movs	r1, #128	; 0x80
 8001c36:	0209      	lsls	r1, r1, #8
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	641a      	str	r2, [r3, #64]	; 0x40
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_TIM_Base_MspInit+0x60>)
 8001c3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	021b      	lsls	r3, r3, #8
 8001c44:	4013      	ands	r3, r2
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b004      	add	sp, #16
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	40000400 	.word	0x40000400
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40002000 	.word	0x40002000

08001c60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b08b      	sub	sp, #44	; 0x2c
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	2414      	movs	r4, #20
 8001c6a:	193b      	adds	r3, r7, r4
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	2314      	movs	r3, #20
 8001c70:	001a      	movs	r2, r3
 8001c72:	2100      	movs	r1, #0
 8001c74:	f004 f980 	bl	8005f78 <memset>
  if(htim->Instance==TIM3)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a29      	ldr	r2, [pc, #164]	; (8001d24 <HAL_TIM_MspPostInit+0xc4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d123      	bne.n	8001cca <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	4b29      	ldr	r3, [pc, #164]	; (8001d28 <HAL_TIM_MspPostInit+0xc8>)
 8001c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c86:	4b28      	ldr	r3, [pc, #160]	; (8001d28 <HAL_TIM_MspPostInit+0xc8>)
 8001c88:	2101      	movs	r1, #1
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c8e:	4b26      	ldr	r3, [pc, #152]	; (8001d28 <HAL_TIM_MspPostInit+0xc8>)
 8001c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c92:	2201      	movs	r2, #1
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c9a:	0021      	movs	r1, r4
 8001c9c:	187b      	adds	r3, r7, r1
 8001c9e:	2240      	movs	r2, #64	; 0x40
 8001ca0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	187b      	adds	r3, r7, r1
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	187b      	adds	r3, r7, r1
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	187b      	adds	r3, r7, r1
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001cb4:	187b      	adds	r3, r7, r1
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cba:	187a      	adds	r2, r7, r1
 8001cbc:	23a0      	movs	r3, #160	; 0xa0
 8001cbe:	05db      	lsls	r3, r3, #23
 8001cc0:	0011      	movs	r1, r2
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f001 fe7c 	bl	80039c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001cc8:	e027      	b.n	8001d1a <HAL_TIM_MspPostInit+0xba>
  else if(htim->Instance==TIM14)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a17      	ldr	r2, [pc, #92]	; (8001d2c <HAL_TIM_MspPostInit+0xcc>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d122      	bne.n	8001d1a <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd4:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <HAL_TIM_MspPostInit+0xc8>)
 8001cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <HAL_TIM_MspPostInit+0xc8>)
 8001cda:	2101      	movs	r1, #1
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	635a      	str	r2, [r3, #52]	; 0x34
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <HAL_TIM_MspPostInit+0xc8>)
 8001ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001cec:	2114      	movs	r1, #20
 8001cee:	187b      	adds	r3, r7, r1
 8001cf0:	2280      	movs	r2, #128	; 0x80
 8001cf2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf4:	187b      	adds	r3, r7, r1
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	187b      	adds	r3, r7, r1
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	187b      	adds	r3, r7, r1
 8001d02:	2200      	movs	r2, #0
 8001d04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8001d06:	187b      	adds	r3, r7, r1
 8001d08:	2204      	movs	r2, #4
 8001d0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0c:	187a      	adds	r2, r7, r1
 8001d0e:	23a0      	movs	r3, #160	; 0xa0
 8001d10:	05db      	lsls	r3, r3, #23
 8001d12:	0011      	movs	r1, r2
 8001d14:	0018      	movs	r0, r3
 8001d16:	f001 fe53 	bl	80039c0 <HAL_GPIO_Init>
}
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b00b      	add	sp, #44	; 0x2c
 8001d20:	bd90      	pop	{r4, r7, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	40000400 	.word	0x40000400
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40002000 	.word	0x40002000

08001d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b08b      	sub	sp, #44	; 0x2c
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	2414      	movs	r4, #20
 8001d3a:	193b      	adds	r3, r7, r4
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	2314      	movs	r3, #20
 8001d40:	001a      	movs	r2, r3
 8001d42:	2100      	movs	r1, #0
 8001d44:	f004 f918 	bl	8005f78 <memset>
  if(huart->Instance==USART2)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1b      	ldr	r2, [pc, #108]	; (8001dbc <HAL_UART_MspInit+0x8c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d130      	bne.n	8001db4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d52:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <HAL_UART_MspInit+0x90>)
 8001d54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d56:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <HAL_UART_MspInit+0x90>)
 8001d58:	2180      	movs	r1, #128	; 0x80
 8001d5a:	0289      	lsls	r1, r1, #10
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d60:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <HAL_UART_MspInit+0x90>)
 8001d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d64:	2380      	movs	r3, #128	; 0x80
 8001d66:	029b      	lsls	r3, r3, #10
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <HAL_UART_MspInit+0x90>)
 8001d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d72:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <HAL_UART_MspInit+0x90>)
 8001d74:	2101      	movs	r1, #1
 8001d76:	430a      	orrs	r2, r1
 8001d78:	635a      	str	r2, [r3, #52]	; 0x34
 8001d7a:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <HAL_UART_MspInit+0x90>)
 8001d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d7e:	2201      	movs	r2, #1
 8001d80:	4013      	ands	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d86:	0021      	movs	r1, r4
 8001d88:	187b      	adds	r3, r7, r1
 8001d8a:	220c      	movs	r2, #12
 8001d8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	187b      	adds	r3, r7, r1
 8001d90:	2202      	movs	r2, #2
 8001d92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	187b      	adds	r3, r7, r1
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	187b      	adds	r3, r7, r1
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001da0:	187b      	adds	r3, r7, r1
 8001da2:	2201      	movs	r2, #1
 8001da4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da6:	187a      	adds	r2, r7, r1
 8001da8:	23a0      	movs	r3, #160	; 0xa0
 8001daa:	05db      	lsls	r3, r3, #23
 8001dac:	0011      	movs	r1, r2
 8001dae:	0018      	movs	r0, r3
 8001db0:	f001 fe06 	bl	80039c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001db4:	46c0      	nop			; (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b00b      	add	sp, #44	; 0x2c
 8001dba:	bd90      	pop	{r4, r7, pc}
 8001dbc:	40004400 	.word	0x40004400
 8001dc0:	40021000 	.word	0x40021000

08001dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc8:	e7fe      	b.n	8001dc8 <NMI_Handler+0x4>

08001dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dce:	e7fe      	b.n	8001dce <HardFault_Handler+0x4>

08001dd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001dd4:	46c0      	nop			; (mov r8, r8)
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001de8:	f000 f8bc 	bl	8001f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dec:	46c0      	nop			; (mov r8, r8)
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	019b      	lsls	r3, r3, #6
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f001 ff70 	bl	8003ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001e00:	46c0      	nop			; (mov r8, r8)
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <DMA1_Channel1_IRQHandler+0x14>)
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f001 fc94 	bl	800373c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e14:	46c0      	nop			; (mov r8, r8)
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	20000144 	.word	0x20000144

08001e20 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <ADC1_IRQHandler+0x14>)
 8001e26:	0018      	movs	r0, r3
 8001e28:	f000 fc74 	bl	8002714 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001e2c:	46c0      	nop			; (mov r8, r8)
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	200000e0 	.word	0x200000e0

08001e38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <SystemInit+0x14>)
 8001e3e:	2280      	movs	r2, #128	; 0x80
 8001e40:	0512      	lsls	r2, r2, #20
 8001e42:	609a      	str	r2, [r3, #8]
#endif
}
 8001e44:	46c0      	nop			; (mov r8, r8)
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e50:	480d      	ldr	r0, [pc, #52]	; (8001e88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e52:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e54:	f7ff fff0 	bl	8001e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001e58:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001e5a:	e003      	b.n	8001e64 <LoopCopyDataInit>

08001e5c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001e5e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001e60:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001e62:	3104      	adds	r1, #4

08001e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001e64:	480a      	ldr	r0, [pc, #40]	; (8001e90 <LoopForever+0xa>)
  ldr r3, =_edata
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <LoopForever+0xe>)
  adds r2, r0, r1
 8001e68:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001e6a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001e6c:	d3f6      	bcc.n	8001e5c <CopyDataInit>
  ldr r2, =_sbss
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <LoopForever+0x12>)
  b LoopFillZerobss
 8001e70:	e002      	b.n	8001e78 <LoopFillZerobss>

08001e72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  str  r3, [r2]
 8001e74:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e76:	3204      	adds	r2, #4

08001e78 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <LoopForever+0x16>)
  cmp r2, r3
 8001e7a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001e7c:	d3f9      	bcc.n	8001e72 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001e7e:	f004 f883 	bl	8005f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e82:	f7ff fab1 	bl	80013e8 <main>

08001e86 <LoopForever>:

LoopForever:
    b LoopForever
 8001e86:	e7fe      	b.n	8001e86 <LoopForever>
  ldr   r0, =_estack
 8001e88:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8001e8c:	0800613c 	.word	0x0800613c
  ldr r0, =_sdata
 8001e90:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e94:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001e98:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001e9c:	2000032c 	.word	0x2000032c

08001ea0 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ea0:	e7fe      	b.n	8001ea0 <DMA1_Channel2_3_IRQHandler>

08001ea2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ea8:	1dfb      	adds	r3, r7, #7
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eae:	2003      	movs	r0, #3
 8001eb0:	f000 f80e 	bl	8001ed0 <HAL_InitTick>
 8001eb4:	1e03      	subs	r3, r0, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001eb8:	1dfb      	adds	r3, r7, #7
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]
 8001ebe:	e001      	b.n	8001ec4 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ec0:	f7ff fd82 	bl	80019c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ec4:	1dfb      	adds	r3, r7, #7
 8001ec6:	781b      	ldrb	r3, [r3, #0]
}
 8001ec8:	0018      	movs	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b002      	add	sp, #8
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ed8:	230f      	movs	r3, #15
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001ee0:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_InitTick+0x88>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d02b      	beq.n	8001f40 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001ee8:	4b1c      	ldr	r3, [pc, #112]	; (8001f5c <HAL_InitTick+0x8c>)
 8001eea:	681c      	ldr	r4, [r3, #0]
 8001eec:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <HAL_InitTick+0x88>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	0019      	movs	r1, r3
 8001ef2:	23fa      	movs	r3, #250	; 0xfa
 8001ef4:	0098      	lsls	r0, r3, #2
 8001ef6:	f7fe f907 	bl	8000108 <__udivsi3>
 8001efa:	0003      	movs	r3, r0
 8001efc:	0019      	movs	r1, r3
 8001efe:	0020      	movs	r0, r4
 8001f00:	f7fe f902 	bl	8000108 <__udivsi3>
 8001f04:	0003      	movs	r3, r0
 8001f06:	0018      	movs	r0, r3
 8001f08:	f001 faf9 	bl	80034fe <HAL_SYSTICK_Config>
 8001f0c:	1e03      	subs	r3, r0, #0
 8001f0e:	d112      	bne.n	8001f36 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d80a      	bhi.n	8001f2c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	2301      	movs	r3, #1
 8001f1a:	425b      	negs	r3, r3
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f001 fac8 	bl	80034b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <HAL_InitTick+0x90>)
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	e00d      	b.n	8001f48 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001f2c:	230f      	movs	r3, #15
 8001f2e:	18fb      	adds	r3, r7, r3
 8001f30:	2201      	movs	r2, #1
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	e008      	b.n	8001f48 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f36:	230f      	movs	r3, #15
 8001f38:	18fb      	adds	r3, r7, r3
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	701a      	strb	r2, [r3, #0]
 8001f3e:	e003      	b.n	8001f48 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f40:	230f      	movs	r3, #15
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001f48:	230f      	movs	r3, #15
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	781b      	ldrb	r3, [r3, #0]
}
 8001f4e:	0018      	movs	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b005      	add	sp, #20
 8001f54:	bd90      	pop	{r4, r7, pc}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	20000008 	.word	0x20000008
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	20000004 	.word	0x20000004

08001f64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <HAL_IncTick+0x1c>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	001a      	movs	r2, r3
 8001f6e:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <HAL_IncTick+0x20>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	18d2      	adds	r2, r2, r3
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <HAL_IncTick+0x20>)
 8001f76:	601a      	str	r2, [r3, #0]
}
 8001f78:	46c0      	nop			; (mov r8, r8)
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	20000008 	.word	0x20000008
 8001f84:	20000328 	.word	0x20000328

08001f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f8c:	4b02      	ldr	r3, [pc, #8]	; (8001f98 <HAL_GetTick+0x10>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	0018      	movs	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	20000328 	.word	0x20000328

08001f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa4:	f7ff fff0 	bl	8001f88 <HAL_GetTick>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	d005      	beq.n	8001fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <HAL_Delay+0x44>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	001a      	movs	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	189b      	adds	r3, r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	f7ff ffe0 	bl	8001f88 <HAL_GetTick>
 8001fc8:	0002      	movs	r2, r0
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d8f7      	bhi.n	8001fc4 <HAL_Delay+0x28>
  {
  }
}
 8001fd4:	46c0      	nop			; (mov r8, r8)
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b004      	add	sp, #16
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	20000008 	.word	0x20000008

08001fe4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a05      	ldr	r2, [pc, #20]	; (8002008 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001ff4:	401a      	ands	r2, r3
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	601a      	str	r2, [r3, #0]
}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	46bd      	mov	sp, r7
 8002002:	b002      	add	sp, #8
 8002004:	bd80      	pop	{r7, pc}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	ff3fffff 	.word	0xff3fffff

0800200c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	23c0      	movs	r3, #192	; 0xc0
 800201a:	041b      	lsls	r3, r3, #16
 800201c:	4013      	ands	r3, r2
}
 800201e:	0018      	movs	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	b002      	add	sp, #8
 8002024:	bd80      	pop	{r7, pc}

08002026 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	2104      	movs	r1, #4
 800203a:	400a      	ands	r2, r1
 800203c:	2107      	movs	r1, #7
 800203e:	4091      	lsls	r1, r2
 8002040:	000a      	movs	r2, r1
 8002042:	43d2      	mvns	r2, r2
 8002044:	401a      	ands	r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2104      	movs	r1, #4
 800204a:	400b      	ands	r3, r1
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	4099      	lsls	r1, r3
 8002050:	000b      	movs	r3, r1
 8002052:	431a      	orrs	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002058:	46c0      	nop			; (mov r8, r8)
 800205a:	46bd      	mov	sp, r7
 800205c:	b004      	add	sp, #16
 800205e:	bd80      	pop	{r7, pc}

08002060 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	2104      	movs	r1, #4
 8002072:	400a      	ands	r2, r1
 8002074:	2107      	movs	r1, #7
 8002076:	4091      	lsls	r1, r2
 8002078:	000a      	movs	r2, r1
 800207a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	2104      	movs	r1, #4
 8002080:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002082:	40da      	lsrs	r2, r3
 8002084:	0013      	movs	r3, r2
}
 8002086:	0018      	movs	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	b002      	add	sp, #8
 800208c:	bd80      	pop	{r7, pc}

0800208e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	23c0      	movs	r3, #192	; 0xc0
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	4013      	ands	r3, r2
 80020a0:	d101      	bne.n	80020a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	0018      	movs	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b002      	add	sp, #8
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	211f      	movs	r1, #31
 80020c4:	400a      	ands	r2, r1
 80020c6:	210f      	movs	r1, #15
 80020c8:	4091      	lsls	r1, r2
 80020ca:	000a      	movs	r2, r1
 80020cc:	43d2      	mvns	r2, r2
 80020ce:	401a      	ands	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	0e9b      	lsrs	r3, r3, #26
 80020d4:	210f      	movs	r1, #15
 80020d6:	4019      	ands	r1, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	201f      	movs	r0, #31
 80020dc:	4003      	ands	r3, r0
 80020de:	4099      	lsls	r1, r3
 80020e0:	000b      	movs	r3, r1
 80020e2:	431a      	orrs	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020e8:	46c0      	nop			; (mov r8, r8)
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b004      	add	sp, #16
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	025b      	lsls	r3, r3, #9
 8002102:	0a5b      	lsrs	r3, r3, #9
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	629a      	str	r2, [r3, #40]	; 0x28
}
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	46bd      	mov	sp, r7
 800210e:	b002      	add	sp, #8
 8002110:	bd80      	pop	{r7, pc}

08002112 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	0252      	lsls	r2, r2, #9
 8002124:	0a52      	lsrs	r2, r2, #9
 8002126:	43d2      	mvns	r2, r2
 8002128:	401a      	ands	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	46bd      	mov	sp, r7
 8002132:	b002      	add	sp, #8
 8002134:	bd80      	pop	{r7, pc}

08002136 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	2203      	movs	r2, #3
 8002144:	4013      	ands	r3, r2
}
 8002146:	0018      	movs	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	b002      	add	sp, #8
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	0212      	lsls	r2, r2, #8
 8002164:	43d2      	mvns	r2, r2
 8002166:	401a      	ands	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	021b      	lsls	r3, r3, #8
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	400b      	ands	r3, r1
 8002170:	4904      	ldr	r1, [pc, #16]	; (8002184 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002172:	400b      	ands	r3, r1
 8002174:	431a      	orrs	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	46bd      	mov	sp, r7
 800217e:	b004      	add	sp, #16
 8002180:	bd80      	pop	{r7, pc}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	7fffff00 	.word	0x7fffff00

08002188 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	4a05      	ldr	r2, [pc, #20]	; (80021ac <LL_ADC_EnableInternalRegulator+0x24>)
 8002196:	4013      	ands	r3, r2
 8002198:	2280      	movs	r2, #128	; 0x80
 800219a:	0552      	lsls	r2, r2, #21
 800219c:	431a      	orrs	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	46bd      	mov	sp, r7
 80021a6:	b002      	add	sp, #8
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	6fffffe8 	.word	0x6fffffe8

080021b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	055b      	lsls	r3, r3, #21
 80021c0:	401a      	ands	r2, r3
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	055b      	lsls	r3, r3, #21
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d101      	bne.n	80021ce <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	0018      	movs	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	b002      	add	sp, #8
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <LL_ADC_Enable+0x20>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	2201      	movs	r2, #1
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021f0:	46c0      	nop			; (mov r8, r8)
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b002      	add	sp, #8
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	7fffffe8 	.word	0x7fffffe8

080021fc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	4a04      	ldr	r2, [pc, #16]	; (800221c <LL_ADC_Disable+0x20>)
 800220a:	4013      	ands	r3, r2
 800220c:	2202      	movs	r2, #2
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002214:	46c0      	nop			; (mov r8, r8)
 8002216:	46bd      	mov	sp, r7
 8002218:	b002      	add	sp, #8
 800221a:	bd80      	pop	{r7, pc}
 800221c:	7fffffe8 	.word	0x7fffffe8

08002220 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2201      	movs	r2, #1
 800222e:	4013      	ands	r3, r2
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <LL_ADC_IsEnabled+0x18>
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <LL_ADC_IsEnabled+0x1a>
 8002238:	2300      	movs	r3, #0
}
 800223a:	0018      	movs	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	b002      	add	sp, #8
 8002240:	bd80      	pop	{r7, pc}

08002242 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2202      	movs	r2, #2
 8002250:	4013      	ands	r3, r2
 8002252:	2b02      	cmp	r3, #2
 8002254:	d101      	bne.n	800225a <LL_ADC_IsDisableOngoing+0x18>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <LL_ADC_IsDisableOngoing+0x1a>
 800225a:	2300      	movs	r3, #0
}
 800225c:	0018      	movs	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	b002      	add	sp, #8
 8002262:	bd80      	pop	{r7, pc}

08002264 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	4a04      	ldr	r2, [pc, #16]	; (8002284 <LL_ADC_REG_StartConversion+0x20>)
 8002272:	4013      	ands	r3, r2
 8002274:	2204      	movs	r2, #4
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800227c:	46c0      	nop			; (mov r8, r8)
 800227e:	46bd      	mov	sp, r7
 8002280:	b002      	add	sp, #8
 8002282:	bd80      	pop	{r7, pc}
 8002284:	7fffffe8 	.word	0x7fffffe8

08002288 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2204      	movs	r2, #4
 8002296:	4013      	ands	r3, r2
 8002298:	2b04      	cmp	r3, #4
 800229a:	d101      	bne.n	80022a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800229c:	2301      	movs	r3, #1
 800229e:	e000      	b.n	80022a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	0018      	movs	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b002      	add	sp, #8
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022b4:	231f      	movs	r3, #31
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80022bc:	2300      	movs	r3, #0
 80022be:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e17e      	b.n	80025d0 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10a      	bne.n	80022f0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	0018      	movs	r0, r3
 80022de:	f7ff fb97 	bl	8001a10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2254      	movs	r2, #84	; 0x54
 80022ec:	2100      	movs	r1, #0
 80022ee:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	0018      	movs	r0, r3
 80022f6:	f7ff ff5b 	bl	80021b0 <LL_ADC_IsInternalRegulatorEnabled>
 80022fa:	1e03      	subs	r3, r0, #0
 80022fc:	d114      	bne.n	8002328 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	0018      	movs	r0, r3
 8002304:	f7ff ff40 	bl	8002188 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002308:	4bb3      	ldr	r3, [pc, #716]	; (80025d8 <HAL_ADC_Init+0x32c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	49b3      	ldr	r1, [pc, #716]	; (80025dc <HAL_ADC_Init+0x330>)
 800230e:	0018      	movs	r0, r3
 8002310:	f7fd fefa 	bl	8000108 <__udivsi3>
 8002314:	0003      	movs	r3, r0
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800231a:	e002      	b.n	8002322 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	3b01      	subs	r3, #1
 8002320:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1f9      	bne.n	800231c <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	0018      	movs	r0, r3
 800232e:	f7ff ff3f 	bl	80021b0 <LL_ADC_IsInternalRegulatorEnabled>
 8002332:	1e03      	subs	r3, r0, #0
 8002334:	d10f      	bne.n	8002356 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233a:	2210      	movs	r2, #16
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002346:	2201      	movs	r2, #1
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800234e:	231f      	movs	r3, #31
 8002350:	18fb      	adds	r3, r7, r3
 8002352:	2201      	movs	r2, #1
 8002354:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	0018      	movs	r0, r3
 800235c:	f7ff ff94 	bl	8002288 <LL_ADC_REG_IsConversionOngoing>
 8002360:	0003      	movs	r3, r0
 8002362:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002368:	2210      	movs	r2, #16
 800236a:	4013      	ands	r3, r2
 800236c:	d000      	beq.n	8002370 <HAL_ADC_Init+0xc4>
 800236e:	e122      	b.n	80025b6 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d000      	beq.n	8002378 <HAL_ADC_Init+0xcc>
 8002376:	e11e      	b.n	80025b6 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237c:	4a98      	ldr	r2, [pc, #608]	; (80025e0 <HAL_ADC_Init+0x334>)
 800237e:	4013      	ands	r3, r2
 8002380:	2202      	movs	r2, #2
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	0018      	movs	r0, r3
 800238e:	f7ff ff47 	bl	8002220 <LL_ADC_IsEnabled>
 8002392:	1e03      	subs	r3, r0, #0
 8002394:	d000      	beq.n	8002398 <HAL_ADC_Init+0xec>
 8002396:	e0ad      	b.n	80024f4 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	7e1b      	ldrb	r3, [r3, #24]
 80023a0:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80023a2:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	7e5b      	ldrb	r3, [r3, #25]
 80023a8:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80023aa:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	7e9b      	ldrb	r3, [r3, #26]
 80023b0:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80023b2:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d002      	beq.n	80023c2 <HAL_ADC_Init+0x116>
 80023bc:	2380      	movs	r3, #128	; 0x80
 80023be:	015b      	lsls	r3, r3, #5
 80023c0:	e000      	b.n	80023c4 <HAL_ADC_Init+0x118>
 80023c2:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80023c4:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80023ca:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	da04      	bge.n	80023de <HAL_ADC_Init+0x132>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	085b      	lsrs	r3, r3, #1
 80023dc:	e001      	b.n	80023e2 <HAL_ADC_Init+0x136>
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80023e2:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	212c      	movs	r1, #44	; 0x2c
 80023e8:	5c5b      	ldrb	r3, [r3, r1]
 80023ea:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80023ec:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2220      	movs	r2, #32
 80023f8:	5c9b      	ldrb	r3, [r3, r2]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d115      	bne.n	800242a <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	7e9b      	ldrb	r3, [r3, #26]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d105      	bne.n	8002412 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	2280      	movs	r2, #128	; 0x80
 800240a:	0252      	lsls	r2, r2, #9
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
 8002410:	e00b      	b.n	800242a <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002416:	2220      	movs	r2, #32
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002422:	2201      	movs	r2, #1
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00a      	beq.n	8002448 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002436:	23e0      	movs	r3, #224	; 0xe0
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002440:	4313      	orrs	r3, r2
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	4a65      	ldr	r2, [pc, #404]	; (80025e4 <HAL_ADC_Init+0x338>)
 8002450:	4013      	ands	r3, r2
 8002452:	0019      	movs	r1, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	430a      	orrs	r2, r1
 800245c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	0f9b      	lsrs	r3, r3, #30
 8002464:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800246a:	4313      	orrs	r3, r2
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	4313      	orrs	r3, r2
 8002470:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	223c      	movs	r2, #60	; 0x3c
 8002476:	5c9b      	ldrb	r3, [r3, r2]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d111      	bne.n	80024a0 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	0f9b      	lsrs	r3, r3, #30
 8002482:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002488:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800248e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002494:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	4313      	orrs	r3, r2
 800249a:	2201      	movs	r2, #1
 800249c:	4313      	orrs	r3, r2
 800249e:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	4a50      	ldr	r2, [pc, #320]	; (80025e8 <HAL_ADC_Init+0x33c>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	0019      	movs	r1, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	23c0      	movs	r3, #192	; 0xc0
 80024bc:	061b      	lsls	r3, r3, #24
 80024be:	429a      	cmp	r2, r3
 80024c0:	d018      	beq.n	80024f4 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	05db      	lsls	r3, r3, #23
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d012      	beq.n	80024f4 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80024d2:	2380      	movs	r3, #128	; 0x80
 80024d4:	061b      	lsls	r3, r3, #24
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d00c      	beq.n	80024f4 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80024da:	4b44      	ldr	r3, [pc, #272]	; (80025ec <HAL_ADC_Init+0x340>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a44      	ldr	r2, [pc, #272]	; (80025f0 <HAL_ADC_Init+0x344>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	0019      	movs	r1, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	23f0      	movs	r3, #240	; 0xf0
 80024ea:	039b      	lsls	r3, r3, #14
 80024ec:	401a      	ands	r2, r3
 80024ee:	4b3f      	ldr	r3, [pc, #252]	; (80025ec <HAL_ADC_Init+0x340>)
 80024f0:	430a      	orrs	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fc:	001a      	movs	r2, r3
 80024fe:	2100      	movs	r1, #0
 8002500:	f7ff fd91 	bl	8002026 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250c:	4939      	ldr	r1, [pc, #228]	; (80025f4 <HAL_ADC_Init+0x348>)
 800250e:	001a      	movs	r2, r3
 8002510:	f7ff fd89 	bl	8002026 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d109      	bne.n	8002530 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2110      	movs	r1, #16
 8002528:	4249      	negs	r1, r1
 800252a:	430a      	orrs	r2, r1
 800252c:	629a      	str	r2, [r3, #40]	; 0x28
 800252e:	e018      	b.n	8002562 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691a      	ldr	r2, [r3, #16]
 8002534:	2380      	movs	r3, #128	; 0x80
 8002536:	039b      	lsls	r3, r3, #14
 8002538:	429a      	cmp	r2, r3
 800253a:	d112      	bne.n	8002562 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	3b01      	subs	r3, #1
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	221c      	movs	r2, #28
 800254c:	4013      	ands	r3, r2
 800254e:	2210      	movs	r2, #16
 8002550:	4252      	negs	r2, r2
 8002552:	409a      	lsls	r2, r3
 8002554:	0011      	movs	r1, r2
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2100      	movs	r1, #0
 8002568:	0018      	movs	r0, r3
 800256a:	f7ff fd79 	bl	8002060 <LL_ADC_GetSamplingTimeCommonChannels>
 800256e:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002574:	429a      	cmp	r2, r3
 8002576:	d10b      	bne.n	8002590 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	2203      	movs	r2, #3
 8002584:	4393      	bics	r3, r2
 8002586:	2201      	movs	r2, #1
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800258e:	e01c      	b.n	80025ca <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002594:	2212      	movs	r2, #18
 8002596:	4393      	bics	r3, r2
 8002598:	2210      	movs	r2, #16
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a4:	2201      	movs	r2, #1
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80025ac:	231f      	movs	r3, #31
 80025ae:	18fb      	adds	r3, r7, r3
 80025b0:	2201      	movs	r2, #1
 80025b2:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80025b4:	e009      	b.n	80025ca <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	2210      	movs	r2, #16
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025c2:	231f      	movs	r3, #31
 80025c4:	18fb      	adds	r3, r7, r3
 80025c6:	2201      	movs	r2, #1
 80025c8:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80025ca:	231f      	movs	r3, #31
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	781b      	ldrb	r3, [r3, #0]
}
 80025d0:	0018      	movs	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b008      	add	sp, #32
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000000 	.word	0x20000000
 80025dc:	00030d40 	.word	0x00030d40
 80025e0:	fffffefd 	.word	0xfffffefd
 80025e4:	ffde0201 	.word	0xffde0201
 80025e8:	1ffffc02 	.word	0x1ffffc02
 80025ec:	40012708 	.word	0x40012708
 80025f0:	ffc3ffff 	.word	0xffc3ffff
 80025f4:	7fffff04 	.word	0x7fffff04

080025f8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80025f8:	b5b0      	push	{r4, r5, r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	0018      	movs	r0, r3
 800260a:	f7ff fe3d 	bl	8002288 <LL_ADC_REG_IsConversionOngoing>
 800260e:	1e03      	subs	r3, r0, #0
 8002610:	d16c      	bne.n	80026ec <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2254      	movs	r2, #84	; 0x54
 8002616:	5c9b      	ldrb	r3, [r3, r2]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_ADC_Start_DMA+0x28>
 800261c:	2302      	movs	r3, #2
 800261e:	e06c      	b.n	80026fa <HAL_ADC_Start_DMA+0x102>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2254      	movs	r2, #84	; 0x54
 8002624:	2101      	movs	r1, #1
 8002626:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	2201      	movs	r2, #1
 8002630:	4013      	ands	r3, r2
 8002632:	d113      	bne.n	800265c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	0018      	movs	r0, r3
 800263a:	f7ff fdf1 	bl	8002220 <LL_ADC_IsEnabled>
 800263e:	1e03      	subs	r3, r0, #0
 8002640:	d004      	beq.n	800264c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	0018      	movs	r0, r3
 8002648:	f7ff fdd8 	bl	80021fc <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2101      	movs	r1, #1
 8002658:	430a      	orrs	r2, r1
 800265a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800265c:	2517      	movs	r5, #23
 800265e:	197c      	adds	r4, r7, r5
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	0018      	movs	r0, r3
 8002664:	f000 fb64 	bl	8002d30 <ADC_Enable>
 8002668:	0003      	movs	r3, r0
 800266a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800266c:	002c      	movs	r4, r5
 800266e:	193b      	adds	r3, r7, r4
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d13e      	bne.n	80026f4 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267a:	4a22      	ldr	r2, [pc, #136]	; (8002704 <HAL_ADC_Start_DMA+0x10c>)
 800267c:	4013      	ands	r3, r2
 800267e:	2280      	movs	r2, #128	; 0x80
 8002680:	0052      	lsls	r2, r2, #1
 8002682:	431a      	orrs	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002692:	4a1d      	ldr	r2, [pc, #116]	; (8002708 <HAL_ADC_Start_DMA+0x110>)
 8002694:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800269a:	4a1c      	ldr	r2, [pc, #112]	; (800270c <HAL_ADC_Start_DMA+0x114>)
 800269c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a2:	4a1b      	ldr	r2, [pc, #108]	; (8002710 <HAL_ADC_Start_DMA+0x118>)
 80026a4:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	221c      	movs	r2, #28
 80026ac:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2254      	movs	r2, #84	; 0x54
 80026b2:	2100      	movs	r1, #0
 80026b4:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2110      	movs	r1, #16
 80026c2:	430a      	orrs	r2, r1
 80026c4:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	3340      	adds	r3, #64	; 0x40
 80026d0:	0019      	movs	r1, r3
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	193c      	adds	r4, r7, r4
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f000 ffa8 	bl	800362c <HAL_DMA_Start_IT>
 80026dc:	0003      	movs	r3, r0
 80026de:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	0018      	movs	r0, r3
 80026e6:	f7ff fdbd 	bl	8002264 <LL_ADC_REG_StartConversion>
 80026ea:	e003      	b.n	80026f4 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026ec:	2317      	movs	r3, #23
 80026ee:	18fb      	adds	r3, r7, r3
 80026f0:	2202      	movs	r2, #2
 80026f2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80026f4:	2317      	movs	r3, #23
 80026f6:	18fb      	adds	r3, r7, r3
 80026f8:	781b      	ldrb	r3, [r3, #0]
}
 80026fa:	0018      	movs	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	b006      	add	sp, #24
 8002700:	bdb0      	pop	{r4, r5, r7, pc}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	fffff0fe 	.word	0xfffff0fe
 8002708:	08002edd 	.word	0x08002edd
 800270c:	08002fa5 	.word	0x08002fa5
 8002710:	08002fc3 	.word	0x08002fc3

08002714 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	2202      	movs	r2, #2
 8002734:	4013      	ands	r3, r2
 8002736:	d017      	beq.n	8002768 <HAL_ADC_IRQHandler+0x54>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2202      	movs	r2, #2
 800273c:	4013      	ands	r3, r2
 800273e:	d013      	beq.n	8002768 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002744:	2210      	movs	r2, #16
 8002746:	4013      	ands	r3, r2
 8002748:	d106      	bne.n	8002758 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274e:	2280      	movs	r2, #128	; 0x80
 8002750:	0112      	lsls	r2, r2, #4
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	0018      	movs	r0, r3
 800275c:	f000 fdee 	bl	800333c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2202      	movs	r2, #2
 8002766:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	2204      	movs	r2, #4
 800276c:	4013      	ands	r3, r2
 800276e:	d003      	beq.n	8002778 <HAL_ADC_IRQHandler+0x64>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2204      	movs	r2, #4
 8002774:	4013      	ands	r3, r2
 8002776:	d107      	bne.n	8002788 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	2208      	movs	r2, #8
 800277c:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800277e:	d04d      	beq.n	800281c <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2208      	movs	r2, #8
 8002784:	4013      	ands	r3, r2
 8002786:	d049      	beq.n	800281c <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278c:	2210      	movs	r2, #16
 800278e:	4013      	ands	r3, r2
 8002790:	d106      	bne.n	80027a0 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002796:	2280      	movs	r2, #128	; 0x80
 8002798:	0092      	lsls	r2, r2, #2
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	0018      	movs	r0, r3
 80027a6:	f7ff fc72 	bl	800208e <LL_ADC_REG_IsTriggerSourceSWStart>
 80027aa:	1e03      	subs	r3, r0, #0
 80027ac:	d02e      	beq.n	800280c <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	7e9b      	ldrb	r3, [r3, #26]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d12a      	bne.n	800280c <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2208      	movs	r2, #8
 80027be:	4013      	ands	r3, r2
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d123      	bne.n	800280c <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	0018      	movs	r0, r3
 80027ca:	f7ff fd5d 	bl	8002288 <LL_ADC_REG_IsConversionOngoing>
 80027ce:	1e03      	subs	r3, r0, #0
 80027d0:	d110      	bne.n	80027f4 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	210c      	movs	r1, #12
 80027de:	438a      	bics	r2, r1
 80027e0:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e6:	4a56      	ldr	r2, [pc, #344]	; (8002940 <HAL_ADC_IRQHandler+0x22c>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	2201      	movs	r2, #1
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	659a      	str	r2, [r3, #88]	; 0x58
 80027f2:	e00b      	b.n	800280c <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f8:	2220      	movs	r2, #32
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002804:	2201      	movs	r2, #1
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	0018      	movs	r0, r3
 8002810:	f000 f898 	bl	8002944 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	220c      	movs	r2, #12
 800281a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	2280      	movs	r2, #128	; 0x80
 8002820:	4013      	ands	r3, r2
 8002822:	d012      	beq.n	800284a <HAL_ADC_IRQHandler+0x136>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2280      	movs	r2, #128	; 0x80
 8002828:	4013      	ands	r3, r2
 800282a:	d00e      	beq.n	800284a <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002830:	2280      	movs	r2, #128	; 0x80
 8002832:	0252      	lsls	r2, r2, #9
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	0018      	movs	r0, r3
 800283e:	f000 f891 	bl	8002964 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2280      	movs	r2, #128	; 0x80
 8002848:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	4013      	ands	r3, r2
 8002852:	d014      	beq.n	800287e <HAL_ADC_IRQHandler+0x16a>
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	2380      	movs	r3, #128	; 0x80
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	4013      	ands	r3, r2
 800285c:	d00f      	beq.n	800287e <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002862:	2280      	movs	r2, #128	; 0x80
 8002864:	0292      	lsls	r2, r2, #10
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	0018      	movs	r0, r3
 8002870:	f000 fd54 	bl	800331c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2280      	movs	r2, #128	; 0x80
 800287a:	0052      	lsls	r2, r2, #1
 800287c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4013      	ands	r3, r2
 8002886:	d014      	beq.n	80028b2 <HAL_ADC_IRQHandler+0x19e>
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	2380      	movs	r3, #128	; 0x80
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4013      	ands	r3, r2
 8002890:	d00f      	beq.n	80028b2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002896:	2280      	movs	r2, #128	; 0x80
 8002898:	02d2      	lsls	r2, r2, #11
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	0018      	movs	r0, r3
 80028a4:	f000 fd42 	bl	800332c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2280      	movs	r2, #128	; 0x80
 80028ae:	0092      	lsls	r2, r2, #2
 80028b0:	601a      	str	r2, [r3, #0]
  }
  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	2210      	movs	r2, #16
 80028b6:	4013      	ands	r3, r2
 80028b8:	d02b      	beq.n	8002912 <HAL_ADC_IRQHandler+0x1fe>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2210      	movs	r2, #16
 80028be:	4013      	ands	r3, r2
 80028c0:	d027      	beq.n	8002912 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d102      	bne.n	80028d0 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 80028ca:	2301      	movs	r3, #1
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	e008      	b.n	80028e2 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	0018      	movs	r0, r3
 80028d6:	f7ff fc2e 	bl	8002136 <LL_ADC_REG_GetDMATransfer>
 80028da:	1e03      	subs	r3, r0, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 80028de:	2301      	movs	r3, #1
 80028e0:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d110      	bne.n	800290a <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ec:	2280      	movs	r2, #128	; 0x80
 80028ee:	00d2      	lsls	r2, r2, #3
 80028f0:	431a      	orrs	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fa:	2202      	movs	r2, #2
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	0018      	movs	r0, r3
 8002906:	f000 f835 	bl	8002974 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2210      	movs	r2, #16
 8002910:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	2380      	movs	r3, #128	; 0x80
 8002916:	019b      	lsls	r3, r3, #6
 8002918:	4013      	ands	r3, r2
 800291a:	d00d      	beq.n	8002938 <HAL_ADC_IRQHandler+0x224>
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	019b      	lsls	r3, r3, #6
 8002922:	4013      	ands	r3, r2
 8002924:	d008      	beq.n	8002938 <HAL_ADC_IRQHandler+0x224>
  {
    /* Level out of window 1 callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	0018      	movs	r0, r3
 800292a:	f000 fd0f 	bl	800334c <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2280      	movs	r2, #128	; 0x80
 8002934:	0192      	lsls	r2, r2, #6
 8002936:	601a      	str	r2, [r3, #0]
  }
}
 8002938:	46c0      	nop			; (mov r8, r8)
 800293a:	46bd      	mov	sp, r7
 800293c:	b006      	add	sp, #24
 800293e:	bd80      	pop	{r7, pc}
 8002940:	fffffefe 	.word	0xfffffefe

08002944 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800294c:	46c0      	nop			; (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	b002      	add	sp, #8
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800295c:	46c0      	nop			; (mov r8, r8)
 800295e:	46bd      	mov	sp, r7
 8002960:	b002      	add	sp, #8
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800296c:	46c0      	nop			; (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	b002      	add	sp, #8
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800297c:	46c0      	nop			; (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	b002      	add	sp, #8
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800298e:	2317      	movs	r3, #23
 8002990:	18fb      	adds	r3, r7, r3
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2254      	movs	r2, #84	; 0x54
 800299e:	5c9b      	ldrb	r3, [r3, r2]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x24>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e1be      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x3a2>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2254      	movs	r2, #84	; 0x54
 80029ac:	2101      	movs	r1, #1
 80029ae:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	0018      	movs	r0, r3
 80029b6:	f7ff fc67 	bl	8002288 <LL_ADC_REG_IsConversionOngoing>
 80029ba:	1e03      	subs	r3, r0, #0
 80029bc:	d000      	beq.n	80029c0 <HAL_ADC_ConfigChannel+0x3c>
 80029be:	e1a1      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d100      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x46>
 80029c8:	e152      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	061b      	lsls	r3, r3, #24
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d004      	beq.n	80029e0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80029da:	4ac2      	ldr	r2, [pc, #776]	; (8002ce4 <HAL_ADC_ConfigChannel+0x360>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d108      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	0019      	movs	r1, r3
 80029ea:	0010      	movs	r0, r2
 80029ec:	f7ff fb80 	bl	80020f0 <LL_ADC_REG_SetSequencerChAdd>
 80029f0:	e0ed      	b.n	8002bce <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	211f      	movs	r1, #31
 80029fc:	400b      	ands	r3, r1
 80029fe:	210f      	movs	r1, #15
 8002a00:	4099      	lsls	r1, r3
 8002a02:	000b      	movs	r3, r1
 8002a04:	43db      	mvns	r3, r3
 8002a06:	4013      	ands	r3, r2
 8002a08:	0019      	movs	r1, r3
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	025b      	lsls	r3, r3, #9
 8002a10:	0a5b      	lsrs	r3, r3, #9
 8002a12:	d105      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x9c>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	0e9b      	lsrs	r3, r3, #26
 8002a1a:	221f      	movs	r2, #31
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	e0bc      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x216>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2201      	movs	r2, #1
 8002a26:	4013      	ands	r3, r2
 8002a28:	d000      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0xa8>
 8002a2a:	e0b5      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x214>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2202      	movs	r2, #2
 8002a32:	4013      	ands	r3, r2
 8002a34:	d000      	beq.n	8002a38 <HAL_ADC_ConfigChannel+0xb4>
 8002a36:	e0ad      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x210>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d000      	beq.n	8002a44 <HAL_ADC_ConfigChannel+0xc0>
 8002a42:	e0a5      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x20c>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2208      	movs	r2, #8
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d000      	beq.n	8002a50 <HAL_ADC_ConfigChannel+0xcc>
 8002a4e:	e09d      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x208>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2210      	movs	r2, #16
 8002a56:	4013      	ands	r3, r2
 8002a58:	d000      	beq.n	8002a5c <HAL_ADC_ConfigChannel+0xd8>
 8002a5a:	e095      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x204>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2220      	movs	r2, #32
 8002a62:	4013      	ands	r3, r2
 8002a64:	d000      	beq.n	8002a68 <HAL_ADC_ConfigChannel+0xe4>
 8002a66:	e08d      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x200>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2240      	movs	r2, #64	; 0x40
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d000      	beq.n	8002a74 <HAL_ADC_ConfigChannel+0xf0>
 8002a72:	e085      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x1fc>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2280      	movs	r2, #128	; 0x80
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d000      	beq.n	8002a80 <HAL_ADC_ConfigChannel+0xfc>
 8002a7e:	e07d      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x1f8>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	2380      	movs	r3, #128	; 0x80
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d000      	beq.n	8002a8e <HAL_ADC_ConfigChannel+0x10a>
 8002a8c:	e074      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x1f4>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4013      	ands	r3, r2
 8002a98:	d000      	beq.n	8002a9c <HAL_ADC_ConfigChannel+0x118>
 8002a9a:	e06b      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x1f0>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d000      	beq.n	8002aaa <HAL_ADC_ConfigChannel+0x126>
 8002aa8:	e062      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x1ec>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	2380      	movs	r3, #128	; 0x80
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d000      	beq.n	8002ab8 <HAL_ADC_ConfigChannel+0x134>
 8002ab6:	e059      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x1e8>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	2380      	movs	r3, #128	; 0x80
 8002abe:	015b      	lsls	r3, r3, #5
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d151      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x1e4>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	2380      	movs	r3, #128	; 0x80
 8002aca:	019b      	lsls	r3, r3, #6
 8002acc:	4013      	ands	r3, r2
 8002ace:	d149      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x1e0>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	01db      	lsls	r3, r3, #7
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d141      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x1dc>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	2380      	movs	r3, #128	; 0x80
 8002ae2:	021b      	lsls	r3, r3, #8
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d139      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x1d8>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	2380      	movs	r3, #128	; 0x80
 8002aee:	025b      	lsls	r3, r3, #9
 8002af0:	4013      	ands	r3, r2
 8002af2:	d131      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x1d4>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	029b      	lsls	r3, r3, #10
 8002afc:	4013      	ands	r3, r2
 8002afe:	d129      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x1d0>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	2380      	movs	r3, #128	; 0x80
 8002b06:	02db      	lsls	r3, r3, #11
 8002b08:	4013      	ands	r3, r2
 8002b0a:	d121      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x1cc>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	031b      	lsls	r3, r3, #12
 8002b14:	4013      	ands	r3, r2
 8002b16:	d119      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x1c8>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	035b      	lsls	r3, r3, #13
 8002b20:	4013      	ands	r3, r2
 8002b22:	d111      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x1c4>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	2380      	movs	r3, #128	; 0x80
 8002b2a:	039b      	lsls	r3, r3, #14
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d109      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x1c0>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	2380      	movs	r3, #128	; 0x80
 8002b36:	03db      	lsls	r3, r3, #15
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d001      	beq.n	8002b40 <HAL_ADC_ConfigChannel+0x1bc>
 8002b3c:	2316      	movs	r3, #22
 8002b3e:	e02c      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x216>
 8002b40:	2300      	movs	r3, #0
 8002b42:	e02a      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x216>
 8002b44:	2315      	movs	r3, #21
 8002b46:	e028      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x216>
 8002b48:	2314      	movs	r3, #20
 8002b4a:	e026      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x216>
 8002b4c:	2313      	movs	r3, #19
 8002b4e:	e024      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x216>
 8002b50:	2312      	movs	r3, #18
 8002b52:	e022      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x216>
 8002b54:	2311      	movs	r3, #17
 8002b56:	e020      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x216>
 8002b58:	2310      	movs	r3, #16
 8002b5a:	e01e      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x216>
 8002b5c:	230f      	movs	r3, #15
 8002b5e:	e01c      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x216>
 8002b60:	230e      	movs	r3, #14
 8002b62:	e01a      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x216>
 8002b64:	230d      	movs	r3, #13
 8002b66:	e018      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x216>
 8002b68:	230c      	movs	r3, #12
 8002b6a:	e016      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x216>
 8002b6c:	230b      	movs	r3, #11
 8002b6e:	e014      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x216>
 8002b70:	230a      	movs	r3, #10
 8002b72:	e012      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x216>
 8002b74:	2309      	movs	r3, #9
 8002b76:	e010      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x216>
 8002b78:	2308      	movs	r3, #8
 8002b7a:	e00e      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x216>
 8002b7c:	2307      	movs	r3, #7
 8002b7e:	e00c      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x216>
 8002b80:	2306      	movs	r3, #6
 8002b82:	e00a      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x216>
 8002b84:	2305      	movs	r3, #5
 8002b86:	e008      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x216>
 8002b88:	2304      	movs	r3, #4
 8002b8a:	e006      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x216>
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e004      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x216>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e002      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x216>
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x216>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	6852      	ldr	r2, [r2, #4]
 8002b9e:	201f      	movs	r0, #31
 8002ba0:	4002      	ands	r2, r0
 8002ba2:	4093      	lsls	r3, r2
 8002ba4:	000a      	movs	r2, r1
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	089b      	lsrs	r3, r3, #2
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d808      	bhi.n	8002bce <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	6859      	ldr	r1, [r3, #4]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	001a      	movs	r2, r3
 8002bca:	f7ff fa71 	bl	80020b0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6819      	ldr	r1, [r3, #0]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	001a      	movs	r2, r3
 8002bdc:	f7ff fab8 	bl	8002150 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	db00      	blt.n	8002bea <HAL_ADC_ConfigChannel+0x266>
 8002be8:	e096      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bea:	4b3f      	ldr	r3, [pc, #252]	; (8002ce8 <HAL_ADC_ConfigChannel+0x364>)
 8002bec:	0018      	movs	r0, r3
 8002bee:	f7ff fa0d 	bl	800200c <LL_ADC_GetCommonPathInternalCh>
 8002bf2:	0003      	movs	r3, r0
 8002bf4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a3c      	ldr	r2, [pc, #240]	; (8002cec <HAL_ADC_ConfigChannel+0x368>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d123      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	2380      	movs	r3, #128	; 0x80
 8002c04:	041b      	lsls	r3, r3, #16
 8002c06:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c08:	d11e      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	2280      	movs	r2, #128	; 0x80
 8002c0e:	0412      	lsls	r2, r2, #16
 8002c10:	4313      	orrs	r3, r2
 8002c12:	4a35      	ldr	r2, [pc, #212]	; (8002ce8 <HAL_ADC_ConfigChannel+0x364>)
 8002c14:	0019      	movs	r1, r3
 8002c16:	0010      	movs	r0, r2
 8002c18:	f7ff f9e4 	bl	8001fe4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002c1c:	4b34      	ldr	r3, [pc, #208]	; (8002cf0 <HAL_ADC_ConfigChannel+0x36c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4934      	ldr	r1, [pc, #208]	; (8002cf4 <HAL_ADC_ConfigChannel+0x370>)
 8002c22:	0018      	movs	r0, r3
 8002c24:	f7fd fa70 	bl	8000108 <__udivsi3>
 8002c28:	0003      	movs	r3, r0
 8002c2a:	001a      	movs	r2, r3
 8002c2c:	0013      	movs	r3, r2
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	189b      	adds	r3, r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	3301      	adds	r3, #1
 8002c36:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c38:	e002      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f9      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c46:	e067      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a2a      	ldr	r2, [pc, #168]	; (8002cf8 <HAL_ADC_ConfigChannel+0x374>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d162      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	2380      	movs	r3, #128	; 0x80
 8002c56:	03db      	lsls	r3, r3, #15
 8002c58:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002c5a:	d15d      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	2280      	movs	r2, #128	; 0x80
 8002c60:	03d2      	lsls	r2, r2, #15
 8002c62:	4313      	orrs	r3, r2
 8002c64:	4a20      	ldr	r2, [pc, #128]	; (8002ce8 <HAL_ADC_ConfigChannel+0x364>)
 8002c66:	0019      	movs	r1, r3
 8002c68:	0010      	movs	r0, r2
 8002c6a:	f7ff f9bb 	bl	8001fe4 <LL_ADC_SetCommonPathInternalCh>
 8002c6e:	e053      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	061b      	lsls	r3, r3, #24
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d004      	beq.n	8002c86 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c80:	4a18      	ldr	r2, [pc, #96]	; (8002ce4 <HAL_ADC_ConfigChannel+0x360>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d107      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	0019      	movs	r1, r3
 8002c90:	0010      	movs	r0, r2
 8002c92:	f7ff fa3e 	bl	8002112 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	da3c      	bge.n	8002d18 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c9e:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <HAL_ADC_ConfigChannel+0x364>)
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f7ff f9b3 	bl	800200c <LL_ADC_GetCommonPathInternalCh>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a0f      	ldr	r2, [pc, #60]	; (8002cec <HAL_ADC_ConfigChannel+0x368>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d108      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4a11      	ldr	r2, [pc, #68]	; (8002cfc <HAL_ADC_ConfigChannel+0x378>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	4a0b      	ldr	r2, [pc, #44]	; (8002ce8 <HAL_ADC_ConfigChannel+0x364>)
 8002cbc:	0019      	movs	r1, r3
 8002cbe:	0010      	movs	r0, r2
 8002cc0:	f7ff f990 	bl	8001fe4 <LL_ADC_SetCommonPathInternalCh>
 8002cc4:	e028      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a0b      	ldr	r2, [pc, #44]	; (8002cf8 <HAL_ADC_ConfigChannel+0x374>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d123      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4a0b      	ldr	r2, [pc, #44]	; (8002d00 <HAL_ADC_ConfigChannel+0x37c>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	4a04      	ldr	r2, [pc, #16]	; (8002ce8 <HAL_ADC_ConfigChannel+0x364>)
 8002cd8:	0019      	movs	r1, r3
 8002cda:	0010      	movs	r0, r2
 8002cdc:	f7ff f982 	bl	8001fe4 <LL_ADC_SetCommonPathInternalCh>
 8002ce0:	e01a      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x394>
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	80000004 	.word	0x80000004
 8002ce8:	40012708 	.word	0x40012708
 8002cec:	a4000200 	.word	0xa4000200
 8002cf0:	20000000 	.word	0x20000000
 8002cf4:	00030d40 	.word	0x00030d40
 8002cf8:	a8000400 	.word	0xa8000400
 8002cfc:	ff7fffff 	.word	0xff7fffff
 8002d00:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d08:	2220      	movs	r2, #32
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d10:	2317      	movs	r3, #23
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	2201      	movs	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2254      	movs	r2, #84	; 0x54
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002d20:	2317      	movs	r3, #23
 8002d22:	18fb      	adds	r3, r7, r3
 8002d24:	781b      	ldrb	r3, [r3, #0]
}
 8002d26:	0018      	movs	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b006      	add	sp, #24
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	46c0      	nop			; (mov r8, r8)

08002d30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	0018      	movs	r0, r3
 8002d42:	f7ff fa6d 	bl	8002220 <LL_ADC_IsEnabled>
 8002d46:	1e03      	subs	r3, r0, #0
 8002d48:	d162      	bne.n	8002e10 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	4a32      	ldr	r2, [pc, #200]	; (8002e1c <ADC_Enable+0xec>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	d00d      	beq.n	8002d72 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5a:	2210      	movs	r2, #16
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d66:	2201      	movs	r2, #1
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e04f      	b.n	8002e12 <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	0018      	movs	r0, r3
 8002d78:	f7ff fa2e 	bl	80021d8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002d7c:	4b28      	ldr	r3, [pc, #160]	; (8002e20 <ADC_Enable+0xf0>)
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f7ff f944 	bl	800200c <LL_ADC_GetCommonPathInternalCh>
 8002d84:	0002      	movs	r2, r0
 8002d86:	2380      	movs	r3, #128	; 0x80
 8002d88:	041b      	lsls	r3, r3, #16
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d00f      	beq.n	8002dae <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002d8e:	4b25      	ldr	r3, [pc, #148]	; (8002e24 <ADC_Enable+0xf4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4925      	ldr	r1, [pc, #148]	; (8002e28 <ADC_Enable+0xf8>)
 8002d94:	0018      	movs	r0, r3
 8002d96:	f7fd f9b7 	bl	8000108 <__udivsi3>
 8002d9a:	0003      	movs	r3, r0
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002da0:	e002      	b.n	8002da8 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	3b01      	subs	r3, #1
 8002da6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f9      	bne.n	8002da2 <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	7e5b      	ldrb	r3, [r3, #25]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d02c      	beq.n	8002e10 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002db6:	f7ff f8e7 	bl	8001f88 <HAL_GetTick>
 8002dba:	0003      	movs	r3, r0
 8002dbc:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dbe:	e020      	b.n	8002e02 <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f7ff fa2b 	bl	8002220 <LL_ADC_IsEnabled>
 8002dca:	1e03      	subs	r3, r0, #0
 8002dcc:	d104      	bne.n	8002dd8 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f7ff fa00 	bl	80021d8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002dd8:	f7ff f8d6 	bl	8001f88 <HAL_GetTick>
 8002ddc:	0002      	movs	r2, r0
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d90d      	bls.n	8002e02 <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dea:	2210      	movs	r2, #16
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df6:	2201      	movs	r2, #1
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e007      	b.n	8002e12 <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d1d7      	bne.n	8002dc0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	0018      	movs	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	b004      	add	sp, #16
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	80000017 	.word	0x80000017
 8002e20:	40012708 	.word	0x40012708
 8002e24:	20000000 	.word	0x20000000
 8002e28:	00030d40 	.word	0x00030d40

08002e2c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f7ff fa02 	bl	8002242 <LL_ADC_IsDisableOngoing>
 8002e3e:	0003      	movs	r3, r0
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	0018      	movs	r0, r3
 8002e48:	f7ff f9ea 	bl	8002220 <LL_ADC_IsEnabled>
 8002e4c:	1e03      	subs	r3, r0, #0
 8002e4e:	d040      	beq.n	8002ed2 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d13d      	bne.n	8002ed2 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2205      	movs	r2, #5
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d10d      	bne.n	8002e80 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f7ff f9c7 	bl	80021fc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2203      	movs	r2, #3
 8002e74:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e76:	f7ff f887 	bl	8001f88 <HAL_GetTick>
 8002e7a:	0003      	movs	r3, r0
 8002e7c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e7e:	e022      	b.n	8002ec6 <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e84:	2210      	movs	r2, #16
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e90:	2201      	movs	r2, #1
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e01b      	b.n	8002ed4 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e9c:	f7ff f874 	bl	8001f88 <HAL_GetTick>
 8002ea0:	0002      	movs	r2, r0
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d90d      	bls.n	8002ec6 <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eae:	2210      	movs	r2, #16
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eba:	2201      	movs	r2, #1
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e006      	b.n	8002ed4 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d1e4      	bne.n	8002e9c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b004      	add	sp, #16
 8002eda:	bd80      	pop	{r7, pc}

08002edc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eee:	2250      	movs	r2, #80	; 0x50
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d141      	bne.n	8002f78 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef8:	2280      	movs	r2, #128	; 0x80
 8002efa:	0092      	lsls	r2, r2, #2
 8002efc:	431a      	orrs	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	0018      	movs	r0, r3
 8002f08:	f7ff f8c1 	bl	800208e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f0c:	1e03      	subs	r3, r0, #0
 8002f0e:	d02e      	beq.n	8002f6e <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	7e9b      	ldrb	r3, [r3, #26]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d12a      	bne.n	8002f6e <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2208      	movs	r2, #8
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d123      	bne.n	8002f6e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f7ff f9ac 	bl	8002288 <LL_ADC_REG_IsConversionOngoing>
 8002f30:	1e03      	subs	r3, r0, #0
 8002f32:	d110      	bne.n	8002f56 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	210c      	movs	r1, #12
 8002f40:	438a      	bics	r2, r1
 8002f42:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f48:	4a15      	ldr	r2, [pc, #84]	; (8002fa0 <ADC_DMAConvCplt+0xc4>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	659a      	str	r2, [r3, #88]	; 0x58
 8002f54:	e00b      	b.n	8002f6e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f66:	2201      	movs	r2, #1
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	0018      	movs	r0, r3
 8002f72:	f7ff fce7 	bl	8002944 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f76:	e00f      	b.n	8002f98 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7c:	2210      	movs	r2, #16
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d004      	beq.n	8002f8c <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	0018      	movs	r0, r3
 8002f86:	f7ff fcf5 	bl	8002974 <HAL_ADC_ErrorCallback>
}
 8002f8a:	e005      	b.n	8002f98 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	0010      	movs	r0, r2
 8002f96:	4798      	blx	r3
}
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b004      	add	sp, #16
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	fffffefe 	.word	0xfffffefe

08002fa4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f7ff fccd 	bl	8002954 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b004      	add	sp, #16
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b084      	sub	sp, #16
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd4:	2240      	movs	r2, #64	; 0x40
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe0:	2204      	movs	r2, #4
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	0018      	movs	r0, r3
 8002fec:	f7ff fcc2 	bl	8002974 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ff0:	46c0      	nop			; (mov r8, r8)
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b004      	add	sp, #16
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <LL_ADC_GetCommonClock>:
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	23f0      	movs	r3, #240	; 0xf0
 8003006:	039b      	lsls	r3, r3, #14
 8003008:	4013      	ands	r3, r2
}
 800300a:	0018      	movs	r0, r3
 800300c:	46bd      	mov	sp, r7
 800300e:	b002      	add	sp, #8
 8003010:	bd80      	pop	{r7, pc}

08003012 <LL_ADC_GetClock>:
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	0f9b      	lsrs	r3, r3, #30
 8003020:	079b      	lsls	r3, r3, #30
}
 8003022:	0018      	movs	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	b002      	add	sp, #8
 8003028:	bd80      	pop	{r7, pc}

0800302a <LL_ADC_SetCalibrationFactor>:
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
 8003032:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	22b4      	movs	r2, #180	; 0xb4
 8003038:	589b      	ldr	r3, [r3, r2]
 800303a:	227f      	movs	r2, #127	; 0x7f
 800303c:	4393      	bics	r3, r2
 800303e:	001a      	movs	r2, r3
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	21b4      	movs	r1, #180	; 0xb4
 8003048:	505a      	str	r2, [r3, r1]
}
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	46bd      	mov	sp, r7
 800304e:	b002      	add	sp, #8
 8003050:	bd80      	pop	{r7, pc}

08003052 <LL_ADC_GetCalibrationFactor>:
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	22b4      	movs	r2, #180	; 0xb4
 800305e:	589b      	ldr	r3, [r3, r2]
 8003060:	227f      	movs	r2, #127	; 0x7f
 8003062:	4013      	ands	r3, r2
}
 8003064:	0018      	movs	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	b002      	add	sp, #8
 800306a:	bd80      	pop	{r7, pc}

0800306c <LL_ADC_Enable>:
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	4a04      	ldr	r2, [pc, #16]	; (800308c <LL_ADC_Enable+0x20>)
 800307a:	4013      	ands	r3, r2
 800307c:	2201      	movs	r2, #1
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	609a      	str	r2, [r3, #8]
}
 8003084:	46c0      	nop			; (mov r8, r8)
 8003086:	46bd      	mov	sp, r7
 8003088:	b002      	add	sp, #8
 800308a:	bd80      	pop	{r7, pc}
 800308c:	7fffffe8 	.word	0x7fffffe8

08003090 <LL_ADC_Disable>:
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <LL_ADC_Disable+0x20>)
 800309e:	4013      	ands	r3, r2
 80030a0:	2202      	movs	r2, #2
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	609a      	str	r2, [r3, #8]
}
 80030a8:	46c0      	nop			; (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b002      	add	sp, #8
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	7fffffe8 	.word	0x7fffffe8

080030b4 <LL_ADC_IsEnabled>:
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2201      	movs	r2, #1
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <LL_ADC_IsEnabled+0x18>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <LL_ADC_IsEnabled+0x1a>
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	0018      	movs	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b002      	add	sp, #8
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <LL_ADC_StartCalibration>:
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	4a05      	ldr	r2, [pc, #20]	; (80030fc <LL_ADC_StartCalibration+0x24>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	2280      	movs	r2, #128	; 0x80
 80030ea:	0612      	lsls	r2, r2, #24
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	609a      	str	r2, [r3, #8]
}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b002      	add	sp, #8
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	7fffffe8 	.word	0x7fffffe8

08003100 <LL_ADC_IsCalibrationOnGoing>:
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	0fdb      	lsrs	r3, r3, #31
 800310e:	07da      	lsls	r2, r3, #31
 8003110:	2380      	movs	r3, #128	; 0x80
 8003112:	061b      	lsls	r3, r3, #24
 8003114:	429a      	cmp	r2, r3
 8003116:	d101      	bne.n	800311c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <LL_ADC_IsCalibrationOnGoing+0x1e>
 800311c:	2300      	movs	r3, #0
}
 800311e:	0018      	movs	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	b002      	add	sp, #8
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003128:	b590      	push	{r4, r7, lr}
 800312a:	b08b      	sub	sp, #44	; 0x2c
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003130:	2300      	movs	r3, #0
 8003132:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	623b      	str	r3, [r7, #32]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2254      	movs	r2, #84	; 0x54
 800313c:	5c9b      	ldrb	r3, [r3, r2]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_ADCEx_Calibration_Start+0x1e>
 8003142:	2302      	movs	r3, #2
 8003144:	e0de      	b.n	8003304 <HAL_ADCEx_Calibration_Start+0x1dc>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2254      	movs	r2, #84	; 0x54
 800314a:	2101      	movs	r1, #1
 800314c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800314e:	231f      	movs	r3, #31
 8003150:	18fc      	adds	r4, r7, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	0018      	movs	r0, r3
 8003156:	f7ff fe69 	bl	8002e2c <ADC_Disable>
 800315a:	0003      	movs	r3, r0
 800315c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	0018      	movs	r0, r3
 8003164:	f7ff ffa6 	bl	80030b4 <LL_ADC_IsEnabled>
 8003168:	1e03      	subs	r3, r0, #0
 800316a:	d000      	beq.n	800316e <HAL_ADCEx_Calibration_Start+0x46>
 800316c:	e0bd      	b.n	80032ea <HAL_ADCEx_Calibration_Start+0x1c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003172:	4a66      	ldr	r2, [pc, #408]	; (800330c <HAL_ADCEx_Calibration_Start+0x1e4>)
 8003174:	4013      	ands	r3, r2
 8003176:	2202      	movs	r2, #2
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	4a62      	ldr	r2, [pc, #392]	; (8003310 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8003186:	4013      	ands	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	495f      	ldr	r1, [pc, #380]	; (8003314 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8003196:	400a      	ands	r2, r1
 8003198:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800319a:	2300      	movs	r3, #0
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
 800319e:	e02e      	b.n	80031fe <HAL_ADCEx_Calibration_Start+0xd6>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	0018      	movs	r0, r3
 80031a6:	f7ff ff97 	bl	80030d8 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80031aa:	e015      	b.n	80031d8 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	3301      	adds	r3, #1
 80031b0:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	23ae      	movs	r3, #174	; 0xae
 80031b6:	029b      	lsls	r3, r3, #10
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d30d      	bcc.n	80031d8 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c0:	2212      	movs	r2, #18
 80031c2:	4393      	bics	r3, r2
 80031c4:	2210      	movs	r2, #16
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2254      	movs	r2, #84	; 0x54
 80031d0:	2100      	movs	r1, #0
 80031d2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e095      	b.n	8003304 <HAL_ADCEx_Calibration_Start+0x1dc>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	0018      	movs	r0, r3
 80031de:	f7ff ff8f 	bl	8003100 <LL_ADC_IsCalibrationOnGoing>
 80031e2:	1e03      	subs	r3, r0, #0
 80031e4:	d1e2      	bne.n	80031ac <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	0018      	movs	r0, r3
 80031ec:	f7ff ff31 	bl	8003052 <LL_ADC_GetCalibrationFactor>
 80031f0:	0002      	movs	r2, r0
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	189b      	adds	r3, r3, r2
 80031f6:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	3301      	adds	r3, #1
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	2b07      	cmp	r3, #7
 8003202:	d9cd      	bls.n	80031a0 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003204:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003206:	6a38      	ldr	r0, [r7, #32]
 8003208:	f7fc ff7e 	bl	8000108 <__udivsi3>
 800320c:	0003      	movs	r3, r0
 800320e:	623b      	str	r3, [r7, #32]
    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	0018      	movs	r0, r3
 8003216:	f7ff ff29 	bl	800306c <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if(LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	0018      	movs	r0, r3
 8003220:	f7ff fef7 	bl	8003012 <LL_ADC_GetClock>
 8003224:	1e03      	subs	r3, r0, #0
 8003226:	d11b      	bne.n	8003260 <HAL_ADCEx_Calibration_Start+0x138>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003228:	4b3b      	ldr	r3, [pc, #236]	; (8003318 <HAL_ADCEx_Calibration_Start+0x1f0>)
 800322a:	0018      	movs	r0, r3
 800322c:	f7ff fee4 	bl	8002ff8 <LL_ADC_GetCommonClock>
 8003230:	0003      	movs	r3, r0
 8003232:	617b      	str	r3, [r7, #20]

      if(adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	23e0      	movs	r3, #224	; 0xe0
 8003238:	035b      	lsls	r3, r3, #13
 800323a:	429a      	cmp	r2, r3
 800323c:	d310      	bcc.n	8003260 <HAL_ADCEx_Calibration_Start+0x138>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1U << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3U));
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	0c9b      	lsrs	r3, r3, #18
 8003242:	3b03      	subs	r3, #3
 8003244:	2201      	movs	r2, #1
 8003246:	409a      	lsls	r2, r3
 8003248:	0013      	movs	r3, r2
 800324a:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1U;
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	085b      	lsrs	r3, r3, #1
 8003250:	60bb      	str	r3, [r7, #8]

        while(delay_cpu_cycles != 0)
 8003252:	e002      	b.n	800325a <HAL_ADCEx_Calibration_Start+0x132>
        {
          delay_cpu_cycles--;
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	3b01      	subs	r3, #1
 8003258:	60bb      	str	r3, [r7, #8]
        while(delay_cpu_cycles != 0)
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1f9      	bne.n	8003254 <HAL_ADCEx_Calibration_Start+0x12c>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6a3a      	ldr	r2, [r7, #32]
 8003266:	0011      	movs	r1, r2
 8003268:	0018      	movs	r0, r3
 800326a:	f7ff fede 	bl	800302a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	0018      	movs	r0, r3
 8003274:	f7ff ff0c 	bl	8003090 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003278:	f7fe fe86 	bl	8001f88 <HAL_GetTick>
 800327c:	0003      	movs	r3, r0
 800327e:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003280:	e01b      	b.n	80032ba <HAL_ADCEx_Calibration_Start+0x192>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003282:	f7fe fe81 	bl	8001f88 <HAL_GetTick>
 8003286:	0002      	movs	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d914      	bls.n	80032ba <HAL_ADCEx_Calibration_Start+0x192>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	0018      	movs	r0, r3
 8003296:	f7ff ff0d 	bl	80030b4 <LL_ADC_IsEnabled>
 800329a:	1e03      	subs	r3, r0, #0
 800329c:	d00d      	beq.n	80032ba <HAL_ADCEx_Calibration_Start+0x192>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a2:	2210      	movs	r2, #16
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ae:	2201      	movs	r2, #1
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e024      	b.n	8003304 <HAL_ADCEx_Calibration_Start+0x1dc>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	0018      	movs	r0, r3
 80032c0:	f7ff fef8 	bl	80030b4 <LL_ADC_IsEnabled>
 80032c4:	1e03      	subs	r3, r0, #0
 80032c6:	d1dc      	bne.n	8003282 <HAL_ADCEx_Calibration_Start+0x15a>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68d9      	ldr	r1, [r3, #12]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032dc:	2203      	movs	r2, #3
 80032de:	4393      	bics	r3, r2
 80032e0:	2201      	movs	r2, #1
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	659a      	str	r2, [r3, #88]	; 0x58
 80032e8:	e005      	b.n	80032f6 <HAL_ADCEx_Calibration_Start+0x1ce>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ee:	2210      	movs	r2, #16
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2254      	movs	r2, #84	; 0x54
 80032fa:	2100      	movs	r1, #0
 80032fc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80032fe:	231f      	movs	r3, #31
 8003300:	18fb      	adds	r3, r7, r3
 8003302:	781b      	ldrb	r3, [r3, #0]
}
 8003304:	0018      	movs	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	b00b      	add	sp, #44	; 0x2c
 800330a:	bd90      	pop	{r4, r7, pc}
 800330c:	fffffefd 	.word	0xfffffefd
 8003310:	00008003 	.word	0x00008003
 8003314:	ffff7ffc 	.word	0xffff7ffc
 8003318:	40012708 	.word	0x40012708

0800331c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003324:	46c0      	nop			; (mov r8, r8)
 8003326:	46bd      	mov	sp, r7
 8003328:	b002      	add	sp, #8
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003334:	46c0      	nop			; (mov r8, r8)
 8003336:	46bd      	mov	sp, r7
 8003338:	b002      	add	sp, #8
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003344:	46c0      	nop			; (mov r8, r8)
 8003346:	46bd      	mov	sp, r7
 8003348:	b002      	add	sp, #8
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8003354:	46c0      	nop			; (mov r8, r8)
 8003356:	46bd      	mov	sp, r7
 8003358:	b002      	add	sp, #8
 800335a:	bd80      	pop	{r7, pc}

0800335c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	0002      	movs	r2, r0
 8003364:	1dfb      	adds	r3, r7, #7
 8003366:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003368:	1dfb      	adds	r3, r7, #7
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b7f      	cmp	r3, #127	; 0x7f
 800336e:	d809      	bhi.n	8003384 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003370:	1dfb      	adds	r3, r7, #7
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	001a      	movs	r2, r3
 8003376:	231f      	movs	r3, #31
 8003378:	401a      	ands	r2, r3
 800337a:	4b04      	ldr	r3, [pc, #16]	; (800338c <__NVIC_EnableIRQ+0x30>)
 800337c:	2101      	movs	r1, #1
 800337e:	4091      	lsls	r1, r2
 8003380:	000a      	movs	r2, r1
 8003382:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003384:	46c0      	nop			; (mov r8, r8)
 8003386:	46bd      	mov	sp, r7
 8003388:	b002      	add	sp, #8
 800338a:	bd80      	pop	{r7, pc}
 800338c:	e000e100 	.word	0xe000e100

08003390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003390:	b590      	push	{r4, r7, lr}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	0002      	movs	r2, r0
 8003398:	6039      	str	r1, [r7, #0]
 800339a:	1dfb      	adds	r3, r7, #7
 800339c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800339e:	1dfb      	adds	r3, r7, #7
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b7f      	cmp	r3, #127	; 0x7f
 80033a4:	d828      	bhi.n	80033f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033a6:	4a2f      	ldr	r2, [pc, #188]	; (8003464 <__NVIC_SetPriority+0xd4>)
 80033a8:	1dfb      	adds	r3, r7, #7
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	b25b      	sxtb	r3, r3
 80033ae:	089b      	lsrs	r3, r3, #2
 80033b0:	33c0      	adds	r3, #192	; 0xc0
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	589b      	ldr	r3, [r3, r2]
 80033b6:	1dfa      	adds	r2, r7, #7
 80033b8:	7812      	ldrb	r2, [r2, #0]
 80033ba:	0011      	movs	r1, r2
 80033bc:	2203      	movs	r2, #3
 80033be:	400a      	ands	r2, r1
 80033c0:	00d2      	lsls	r2, r2, #3
 80033c2:	21ff      	movs	r1, #255	; 0xff
 80033c4:	4091      	lsls	r1, r2
 80033c6:	000a      	movs	r2, r1
 80033c8:	43d2      	mvns	r2, r2
 80033ca:	401a      	ands	r2, r3
 80033cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	019b      	lsls	r3, r3, #6
 80033d2:	22ff      	movs	r2, #255	; 0xff
 80033d4:	401a      	ands	r2, r3
 80033d6:	1dfb      	adds	r3, r7, #7
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	0018      	movs	r0, r3
 80033dc:	2303      	movs	r3, #3
 80033de:	4003      	ands	r3, r0
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033e4:	481f      	ldr	r0, [pc, #124]	; (8003464 <__NVIC_SetPriority+0xd4>)
 80033e6:	1dfb      	adds	r3, r7, #7
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	b25b      	sxtb	r3, r3
 80033ec:	089b      	lsrs	r3, r3, #2
 80033ee:	430a      	orrs	r2, r1
 80033f0:	33c0      	adds	r3, #192	; 0xc0
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80033f6:	e031      	b.n	800345c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033f8:	4a1b      	ldr	r2, [pc, #108]	; (8003468 <__NVIC_SetPriority+0xd8>)
 80033fa:	1dfb      	adds	r3, r7, #7
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	0019      	movs	r1, r3
 8003400:	230f      	movs	r3, #15
 8003402:	400b      	ands	r3, r1
 8003404:	3b08      	subs	r3, #8
 8003406:	089b      	lsrs	r3, r3, #2
 8003408:	3306      	adds	r3, #6
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	18d3      	adds	r3, r2, r3
 800340e:	3304      	adds	r3, #4
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	1dfa      	adds	r2, r7, #7
 8003414:	7812      	ldrb	r2, [r2, #0]
 8003416:	0011      	movs	r1, r2
 8003418:	2203      	movs	r2, #3
 800341a:	400a      	ands	r2, r1
 800341c:	00d2      	lsls	r2, r2, #3
 800341e:	21ff      	movs	r1, #255	; 0xff
 8003420:	4091      	lsls	r1, r2
 8003422:	000a      	movs	r2, r1
 8003424:	43d2      	mvns	r2, r2
 8003426:	401a      	ands	r2, r3
 8003428:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	019b      	lsls	r3, r3, #6
 800342e:	22ff      	movs	r2, #255	; 0xff
 8003430:	401a      	ands	r2, r3
 8003432:	1dfb      	adds	r3, r7, #7
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	0018      	movs	r0, r3
 8003438:	2303      	movs	r3, #3
 800343a:	4003      	ands	r3, r0
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003440:	4809      	ldr	r0, [pc, #36]	; (8003468 <__NVIC_SetPriority+0xd8>)
 8003442:	1dfb      	adds	r3, r7, #7
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	001c      	movs	r4, r3
 8003448:	230f      	movs	r3, #15
 800344a:	4023      	ands	r3, r4
 800344c:	3b08      	subs	r3, #8
 800344e:	089b      	lsrs	r3, r3, #2
 8003450:	430a      	orrs	r2, r1
 8003452:	3306      	adds	r3, #6
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	18c3      	adds	r3, r0, r3
 8003458:	3304      	adds	r3, #4
 800345a:	601a      	str	r2, [r3, #0]
}
 800345c:	46c0      	nop			; (mov r8, r8)
 800345e:	46bd      	mov	sp, r7
 8003460:	b003      	add	sp, #12
 8003462:	bd90      	pop	{r4, r7, pc}
 8003464:	e000e100 	.word	0xe000e100
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	1e5a      	subs	r2, r3, #1
 8003478:	2380      	movs	r3, #128	; 0x80
 800347a:	045b      	lsls	r3, r3, #17
 800347c:	429a      	cmp	r2, r3
 800347e:	d301      	bcc.n	8003484 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003480:	2301      	movs	r3, #1
 8003482:	e010      	b.n	80034a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003484:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <SysTick_Config+0x44>)
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	3a01      	subs	r2, #1
 800348a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800348c:	2301      	movs	r3, #1
 800348e:	425b      	negs	r3, r3
 8003490:	2103      	movs	r1, #3
 8003492:	0018      	movs	r0, r3
 8003494:	f7ff ff7c 	bl	8003390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <SysTick_Config+0x44>)
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800349e:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <SysTick_Config+0x44>)
 80034a0:	2207      	movs	r2, #7
 80034a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	0018      	movs	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	b002      	add	sp, #8
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	e000e010 	.word	0xe000e010

080034b4 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	210f      	movs	r1, #15
 80034c0:	187b      	adds	r3, r7, r1
 80034c2:	1c02      	adds	r2, r0, #0
 80034c4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	187b      	adds	r3, r7, r1
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	b25b      	sxtb	r3, r3
 80034ce:	0011      	movs	r1, r2
 80034d0:	0018      	movs	r0, r3
 80034d2:	f7ff ff5d 	bl	8003390 <__NVIC_SetPriority>
}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	46bd      	mov	sp, r7
 80034da:	b004      	add	sp, #16
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b082      	sub	sp, #8
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	0002      	movs	r2, r0
 80034e6:	1dfb      	adds	r3, r7, #7
 80034e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034ea:	1dfb      	adds	r3, r7, #7
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	b25b      	sxtb	r3, r3
 80034f0:	0018      	movs	r0, r3
 80034f2:	f7ff ff33 	bl	800335c <__NVIC_EnableIRQ>
}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	46bd      	mov	sp, r7
 80034fa:	b002      	add	sp, #8
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	0018      	movs	r0, r3
 800350a:	f7ff ffaf 	bl	800346c <SysTick_Config>
 800350e:	0003      	movs	r3, r0
}
 8003510:	0018      	movs	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	b002      	add	sp, #8
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e077      	b.n	800361a <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a3d      	ldr	r2, [pc, #244]	; (8003624 <HAL_DMA_Init+0x10c>)
 8003530:	4694      	mov	ip, r2
 8003532:	4463      	add	r3, ip
 8003534:	2114      	movs	r1, #20
 8003536:	0018      	movs	r0, r3
 8003538:	f7fc fde6 	bl	8000108 <__udivsi3>
 800353c:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 800353e:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2225      	movs	r2, #37	; 0x25
 8003548:	2102      	movs	r1, #2
 800354a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4934      	ldr	r1, [pc, #208]	; (8003628 <HAL_DMA_Init+0x110>)
 8003558:	400a      	ands	r2, r1
 800355a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6819      	ldr	r1, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	431a      	orrs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	0018      	movs	r0, r3
 8003596:	f000 f9c3 	bl	8003920 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	2380      	movs	r3, #128	; 0x80
 80035a0:	01db      	lsls	r3, r3, #7
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d102      	bne.n	80035ac <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b4:	21ff      	movs	r1, #255	; 0xff
 80035b6:	400a      	ands	r2, r1
 80035b8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80035c2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d011      	beq.n	80035f0 <HAL_DMA_Init+0xd8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d80d      	bhi.n	80035f0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	0018      	movs	r0, r3
 80035d8:	f000 f9ce 	bl	8003978 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80035ec:	605a      	str	r2, [r3, #4]
 80035ee:	e008      	b.n	8003602 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2225      	movs	r2, #37	; 0x25
 800360c:	2101      	movs	r1, #1
 800360e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2224      	movs	r2, #36	; 0x24
 8003614:	2100      	movs	r1, #0
 8003616:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	0018      	movs	r0, r3
 800361c:	46bd      	mov	sp, r7
 800361e:	b002      	add	sp, #8
 8003620:	bd80      	pop	{r7, pc}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	bffdfff8 	.word	0xbffdfff8
 8003628:	ffff800f 	.word	0xffff800f

0800362c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800363a:	2317      	movs	r3, #23
 800363c:	18fb      	adds	r3, r7, r3
 800363e:	2200      	movs	r2, #0
 8003640:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2224      	movs	r2, #36	; 0x24
 8003646:	5c9b      	ldrb	r3, [r3, r2]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_DMA_Start_IT+0x24>
 800364c:	2302      	movs	r3, #2
 800364e:	e070      	b.n	8003732 <HAL_DMA_Start_IT+0x106>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2224      	movs	r2, #36	; 0x24
 8003654:	2101      	movs	r1, #1
 8003656:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2225      	movs	r2, #37	; 0x25
 800365c:	5c9b      	ldrb	r3, [r3, r2]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b01      	cmp	r3, #1
 8003662:	d157      	bne.n	8003714 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2225      	movs	r2, #37	; 0x25
 8003668:	2102      	movs	r1, #2
 800366a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2101      	movs	r1, #1
 800367e:	438a      	bics	r2, r1
 8003680:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	68b9      	ldr	r1, [r7, #8]
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f909 	bl	80038a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	2b00      	cmp	r3, #0
 8003694:	d008      	beq.n	80036a8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	210e      	movs	r1, #14
 80036a2:	430a      	orrs	r2, r1
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	e00f      	b.n	80036c8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2104      	movs	r1, #4
 80036b4:	438a      	bics	r2, r1
 80036b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	210a      	movs	r1, #10
 80036c4:	430a      	orrs	r2, r1
 80036c6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	2380      	movs	r3, #128	; 0x80
 80036d0:	025b      	lsls	r3, r3, #9
 80036d2:	4013      	ands	r3, r2
 80036d4:	d008      	beq.n	80036e8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e0:	2180      	movs	r1, #128	; 0x80
 80036e2:	0049      	lsls	r1, r1, #1
 80036e4:	430a      	orrs	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036fa:	2180      	movs	r1, #128	; 0x80
 80036fc:	0049      	lsls	r1, r1, #1
 80036fe:	430a      	orrs	r2, r1
 8003700:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2101      	movs	r1, #1
 800370e:	430a      	orrs	r2, r1
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	e007      	b.n	8003724 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2224      	movs	r2, #36	; 0x24
 8003718:	2100      	movs	r1, #0
 800371a:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800371c:	2317      	movs	r3, #23
 800371e:	18fb      	adds	r3, r7, r3
 8003720:	2202      	movs	r2, #2
 8003722:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2224      	movs	r2, #36	; 0x24
 8003728:	2100      	movs	r1, #0
 800372a:	5499      	strb	r1, [r3, r2]

  return status;
 800372c:	2317      	movs	r3, #23
 800372e:	18fb      	adds	r3, r7, r3
 8003730:	781b      	ldrb	r3, [r3, #0]
}
 8003732:	0018      	movs	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	b006      	add	sp, #24
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8003744:	4b55      	ldr	r3, [pc, #340]	; (800389c <HAL_DMA_IRQHandler+0x160>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	221c      	movs	r2, #28
 8003758:	4013      	ands	r3, r2
 800375a:	2204      	movs	r2, #4
 800375c:	409a      	lsls	r2, r3
 800375e:	0013      	movs	r3, r2
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4013      	ands	r3, r2
 8003764:	d027      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x7a>
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2204      	movs	r2, #4
 800376a:	4013      	ands	r3, r2
 800376c:	d023      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2220      	movs	r2, #32
 8003776:	4013      	ands	r3, r2
 8003778:	d107      	bne.n	800378a <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2104      	movs	r1, #4
 8003786:	438a      	bics	r2, r1
 8003788:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800378a:	4b44      	ldr	r3, [pc, #272]	; (800389c <HAL_DMA_IRQHandler+0x160>)
 800378c:	6859      	ldr	r1, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	221c      	movs	r2, #28
 8003794:	4013      	ands	r3, r2
 8003796:	2204      	movs	r2, #4
 8003798:	409a      	lsls	r2, r3
 800379a:	4b40      	ldr	r3, [pc, #256]	; (800389c <HAL_DMA_IRQHandler+0x160>)
 800379c:	430a      	orrs	r2, r1
 800379e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d100      	bne.n	80037aa <HAL_DMA_IRQHandler+0x6e>
 80037a8:	e073      	b.n	8003892 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	0010      	movs	r0, r2
 80037b2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80037b4:	e06d      	b.n	8003892 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	221c      	movs	r2, #28
 80037bc:	4013      	ands	r3, r2
 80037be:	2202      	movs	r2, #2
 80037c0:	409a      	lsls	r2, r3
 80037c2:	0013      	movs	r3, r2
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4013      	ands	r3, r2
 80037c8:	d02e      	beq.n	8003828 <HAL_DMA_IRQHandler+0xec>
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2202      	movs	r2, #2
 80037ce:	4013      	ands	r3, r2
 80037d0:	d02a      	beq.n	8003828 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2220      	movs	r2, #32
 80037da:	4013      	ands	r3, r2
 80037dc:	d10b      	bne.n	80037f6 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	210a      	movs	r1, #10
 80037ea:	438a      	bics	r2, r1
 80037ec:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2225      	movs	r2, #37	; 0x25
 80037f2:	2101      	movs	r1, #1
 80037f4:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80037f6:	4b29      	ldr	r3, [pc, #164]	; (800389c <HAL_DMA_IRQHandler+0x160>)
 80037f8:	6859      	ldr	r1, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	221c      	movs	r2, #28
 8003800:	4013      	ands	r3, r2
 8003802:	2202      	movs	r2, #2
 8003804:	409a      	lsls	r2, r3
 8003806:	4b25      	ldr	r3, [pc, #148]	; (800389c <HAL_DMA_IRQHandler+0x160>)
 8003808:	430a      	orrs	r2, r1
 800380a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2224      	movs	r2, #36	; 0x24
 8003810:	2100      	movs	r1, #0
 8003812:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	2b00      	cmp	r3, #0
 800381a:	d03a      	beq.n	8003892 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	0010      	movs	r0, r2
 8003824:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003826:	e034      	b.n	8003892 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	221c      	movs	r2, #28
 800382e:	4013      	ands	r3, r2
 8003830:	2208      	movs	r2, #8
 8003832:	409a      	lsls	r2, r3
 8003834:	0013      	movs	r3, r2
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4013      	ands	r3, r2
 800383a:	d02b      	beq.n	8003894 <HAL_DMA_IRQHandler+0x158>
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2208      	movs	r2, #8
 8003840:	4013      	ands	r3, r2
 8003842:	d027      	beq.n	8003894 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	210e      	movs	r1, #14
 8003850:	438a      	bics	r2, r1
 8003852:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8003854:	4b11      	ldr	r3, [pc, #68]	; (800389c <HAL_DMA_IRQHandler+0x160>)
 8003856:	6859      	ldr	r1, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	221c      	movs	r2, #28
 800385e:	4013      	ands	r3, r2
 8003860:	2201      	movs	r2, #1
 8003862:	409a      	lsls	r2, r3
 8003864:	4b0d      	ldr	r3, [pc, #52]	; (800389c <HAL_DMA_IRQHandler+0x160>)
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2225      	movs	r2, #37	; 0x25
 8003874:	2101      	movs	r1, #1
 8003876:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2224      	movs	r2, #36	; 0x24
 800387c:	2100      	movs	r1, #0
 800387e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003884:	2b00      	cmp	r3, #0
 8003886:	d005      	beq.n	8003894 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	0010      	movs	r0, r2
 8003890:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	46c0      	nop			; (mov r8, r8)
}
 8003896:	46bd      	mov	sp, r7
 8003898:	b004      	add	sp, #16
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40020000 	.word	0x40020000

080038a0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80038b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d004      	beq.n	80038ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80038c8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80038ca:	4b14      	ldr	r3, [pc, #80]	; (800391c <DMA_SetConfig+0x7c>)
 80038cc:	6859      	ldr	r1, [r3, #4]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	221c      	movs	r2, #28
 80038d4:	4013      	ands	r3, r2
 80038d6:	2201      	movs	r2, #1
 80038d8:	409a      	lsls	r2, r3
 80038da:	4b10      	ldr	r3, [pc, #64]	; (800391c <DMA_SetConfig+0x7c>)
 80038dc:	430a      	orrs	r2, r1
 80038de:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	2b10      	cmp	r3, #16
 80038ee:	d108      	bne.n	8003902 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003900:	e007      	b.n	8003912 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	60da      	str	r2, [r3, #12]
}
 8003912:	46c0      	nop			; (mov r8, r8)
 8003914:	46bd      	mov	sp, r7
 8003916:	b004      	add	sp, #16
 8003918:	bd80      	pop	{r7, pc}
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	40020000 	.word	0x40020000

08003920 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	001a      	movs	r2, r3
 800392e:	23ff      	movs	r3, #255	; 0xff
 8003930:	4013      	ands	r3, r2
 8003932:	3b08      	subs	r3, #8
 8003934:	2114      	movs	r1, #20
 8003936:	0018      	movs	r0, r3
 8003938:	f7fc fbe6 	bl	8000108 <__udivsi3>
 800393c:	0003      	movs	r3, r0
 800393e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8003946:	4a0a      	ldr	r2, [pc, #40]	; (8003970 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003948:	4694      	mov	ip, r2
 800394a:	4463      	add	r3, ip
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	001a      	movs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	645a      	str	r2, [r3, #68]	; 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a07      	ldr	r2, [pc, #28]	; (8003974 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003958:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	221c      	movs	r2, #28
 800395e:	4013      	ands	r3, r2
 8003960:	2201      	movs	r2, #1
 8003962:	409a      	lsls	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003968:	46c0      	nop			; (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	b004      	add	sp, #16
 800396e:	bd80      	pop	{r7, pc}
 8003970:	10008200 	.word	0x10008200
 8003974:	40020880 	.word	0x40020880

08003978 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	22ff      	movs	r2, #255	; 0xff
 8003986:	4013      	ands	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4a0a      	ldr	r2, [pc, #40]	; (80039b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800398e:	4694      	mov	ip, r2
 8003990:	4463      	add	r3, ip
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	001a      	movs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	651a      	str	r2, [r3, #80]	; 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a07      	ldr	r2, [pc, #28]	; (80039bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800399e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	2203      	movs	r2, #3
 80039a6:	4013      	ands	r3, r2
 80039a8:	2201      	movs	r2, #1
 80039aa:	409a      	lsls	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	659a      	str	r2, [r3, #88]	; 0x58
}
 80039b0:	46c0      	nop			; (mov r8, r8)
 80039b2:	46bd      	mov	sp, r7
 80039b4:	b004      	add	sp, #16
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	1000823f 	.word	0x1000823f
 80039bc:	40020940 	.word	0x40020940

080039c0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80039ce:	e153      	b.n	8003c78 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2101      	movs	r1, #1
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4091      	lsls	r1, r2
 80039da:	000a      	movs	r2, r1
 80039dc:	4013      	ands	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d100      	bne.n	80039e8 <HAL_GPIO_Init+0x28>
 80039e6:	e144      	b.n	8003c72 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d003      	beq.n	80039f8 <HAL_GPIO_Init+0x38>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b12      	cmp	r3, #18
 80039f6:	d125      	bne.n	8003a44 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	08da      	lsrs	r2, r3, #3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3208      	adds	r2, #8
 8003a00:	0092      	lsls	r2, r2, #2
 8003a02:	58d3      	ldr	r3, [r2, r3]
 8003a04:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	2207      	movs	r2, #7
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	220f      	movs	r2, #15
 8003a10:	409a      	lsls	r2, r3
 8003a12:	0013      	movs	r3, r2
 8003a14:	43da      	mvns	r2, r3
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	220f      	movs	r2, #15
 8003a22:	401a      	ands	r2, r3
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	2107      	movs	r1, #7
 8003a28:	400b      	ands	r3, r1
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	409a      	lsls	r2, r3
 8003a2e:	0013      	movs	r3, r2
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	08da      	lsrs	r2, r3, #3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3208      	adds	r2, #8
 8003a3e:	0092      	lsls	r2, r2, #2
 8003a40:	6979      	ldr	r1, [r7, #20]
 8003a42:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	2203      	movs	r2, #3
 8003a50:	409a      	lsls	r2, r3
 8003a52:	0013      	movs	r3, r2
 8003a54:	43da      	mvns	r2, r3
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2203      	movs	r2, #3
 8003a62:	401a      	ands	r2, r3
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	409a      	lsls	r2, r3
 8003a6a:	0013      	movs	r3, r2
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d00b      	beq.n	8003a98 <HAL_GPIO_Init+0xd8>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d007      	beq.n	8003a98 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a8c:	2b11      	cmp	r3, #17
 8003a8e:	d003      	beq.n	8003a98 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b12      	cmp	r3, #18
 8003a96:	d130      	bne.n	8003afa <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	2203      	movs	r2, #3
 8003aa4:	409a      	lsls	r2, r3
 8003aa6:	0013      	movs	r3, r2
 8003aa8:	43da      	mvns	r2, r3
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	4013      	ands	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	409a      	lsls	r2, r3
 8003aba:	0013      	movs	r3, r2
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ace:	2201      	movs	r2, #1
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	409a      	lsls	r2, r3
 8003ad4:	0013      	movs	r3, r2
 8003ad6:	43da      	mvns	r2, r3
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	4013      	ands	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	091b      	lsrs	r3, r3, #4
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	401a      	ands	r2, r3
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	409a      	lsls	r2, r3
 8003aec:	0013      	movs	r3, r2
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d017      	beq.n	8003b32 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	409a      	lsls	r2, r3
 8003b10:	0013      	movs	r3, r2
 8003b12:	43da      	mvns	r2, r3
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	4013      	ands	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	409a      	lsls	r2, r3
 8003b24:	0013      	movs	r3, r2
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	2380      	movs	r3, #128	; 0x80
 8003b38:	055b      	lsls	r3, r3, #21
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d100      	bne.n	8003b40 <HAL_GPIO_Init+0x180>
 8003b3e:	e098      	b.n	8003c72 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003b40:	4a53      	ldr	r2, [pc, #332]	; (8003c90 <HAL_GPIO_Init+0x2d0>)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	089b      	lsrs	r3, r3, #2
 8003b46:	3318      	adds	r3, #24
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	589b      	ldr	r3, [r3, r2]
 8003b4c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	2203      	movs	r2, #3
 8003b52:	4013      	ands	r3, r2
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	220f      	movs	r2, #15
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	0013      	movs	r3, r2
 8003b5c:	43da      	mvns	r2, r3
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	4013      	ands	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	23a0      	movs	r3, #160	; 0xa0
 8003b68:	05db      	lsls	r3, r3, #23
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d019      	beq.n	8003ba2 <HAL_GPIO_Init+0x1e2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a48      	ldr	r2, [pc, #288]	; (8003c94 <HAL_GPIO_Init+0x2d4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d013      	beq.n	8003b9e <HAL_GPIO_Init+0x1de>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a47      	ldr	r2, [pc, #284]	; (8003c98 <HAL_GPIO_Init+0x2d8>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00d      	beq.n	8003b9a <HAL_GPIO_Init+0x1da>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a46      	ldr	r2, [pc, #280]	; (8003c9c <HAL_GPIO_Init+0x2dc>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d007      	beq.n	8003b96 <HAL_GPIO_Init+0x1d6>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a45      	ldr	r2, [pc, #276]	; (8003ca0 <HAL_GPIO_Init+0x2e0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d101      	bne.n	8003b92 <HAL_GPIO_Init+0x1d2>
 8003b8e:	2305      	movs	r3, #5
 8003b90:	e008      	b.n	8003ba4 <HAL_GPIO_Init+0x1e4>
 8003b92:	2306      	movs	r3, #6
 8003b94:	e006      	b.n	8003ba4 <HAL_GPIO_Init+0x1e4>
 8003b96:	2303      	movs	r3, #3
 8003b98:	e004      	b.n	8003ba4 <HAL_GPIO_Init+0x1e4>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e002      	b.n	8003ba4 <HAL_GPIO_Init+0x1e4>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <HAL_GPIO_Init+0x1e4>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	2103      	movs	r1, #3
 8003ba8:	400a      	ands	r2, r1
 8003baa:	00d2      	lsls	r2, r2, #3
 8003bac:	4093      	lsls	r3, r2
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003bb4:	4936      	ldr	r1, [pc, #216]	; (8003c90 <HAL_GPIO_Init+0x2d0>)
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	089b      	lsrs	r3, r3, #2
 8003bba:	3318      	adds	r3, #24
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8003bc2:	4a33      	ldr	r2, [pc, #204]	; (8003c90 <HAL_GPIO_Init+0x2d0>)
 8003bc4:	2380      	movs	r3, #128	; 0x80
 8003bc6:	58d3      	ldr	r3, [r2, r3]
 8003bc8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	43da      	mvns	r2, r3
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	2380      	movs	r3, #128	; 0x80
 8003bda:	025b      	lsls	r3, r3, #9
 8003bdc:	4013      	ands	r3, r2
 8003bde:	d003      	beq.n	8003be8 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003be8:	4929      	ldr	r1, [pc, #164]	; (8003c90 <HAL_GPIO_Init+0x2d0>)
 8003bea:	2280      	movs	r2, #128	; 0x80
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8003bf0:	4a27      	ldr	r2, [pc, #156]	; (8003c90 <HAL_GPIO_Init+0x2d0>)
 8003bf2:	2384      	movs	r3, #132	; 0x84
 8003bf4:	58d3      	ldr	r3, [r2, r3]
 8003bf6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	43da      	mvns	r2, r3
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	2380      	movs	r3, #128	; 0x80
 8003c08:	029b      	lsls	r3, r3, #10
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d003      	beq.n	8003c16 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003c16:	491e      	ldr	r1, [pc, #120]	; (8003c90 <HAL_GPIO_Init+0x2d0>)
 8003c18:	2284      	movs	r2, #132	; 0x84
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003c1e:	4b1c      	ldr	r3, [pc, #112]	; (8003c90 <HAL_GPIO_Init+0x2d0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	43da      	mvns	r2, r3
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	2380      	movs	r3, #128	; 0x80
 8003c34:	035b      	lsls	r3, r3, #13
 8003c36:	4013      	ands	r3, r2
 8003c38:	d003      	beq.n	8003c42 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003c42:	4b13      	ldr	r3, [pc, #76]	; (8003c90 <HAL_GPIO_Init+0x2d0>)
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8003c48:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <HAL_GPIO_Init+0x2d0>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	43da      	mvns	r2, r3
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	4013      	ands	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	2380      	movs	r3, #128	; 0x80
 8003c5e:	039b      	lsls	r3, r3, #14
 8003c60:	4013      	ands	r3, r2
 8003c62:	d003      	beq.n	8003c6c <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003c6c:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <HAL_GPIO_Init+0x2d0>)
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	3301      	adds	r3, #1
 8003c76:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	40da      	lsrs	r2, r3
 8003c80:	1e13      	subs	r3, r2, #0
 8003c82:	d000      	beq.n	8003c86 <HAL_GPIO_Init+0x2c6>
 8003c84:	e6a4      	b.n	80039d0 <HAL_GPIO_Init+0x10>
  }
}
 8003c86:	46c0      	nop			; (mov r8, r8)
 8003c88:	46c0      	nop			; (mov r8, r8)
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	b006      	add	sp, #24
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40021800 	.word	0x40021800
 8003c94:	50000400 	.word	0x50000400
 8003c98:	50000800 	.word	0x50000800
 8003c9c:	50000c00 	.word	0x50000c00
 8003ca0:	50001400 	.word	0x50001400

08003ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	0008      	movs	r0, r1
 8003cae:	0011      	movs	r1, r2
 8003cb0:	1cbb      	adds	r3, r7, #2
 8003cb2:	1c02      	adds	r2, r0, #0
 8003cb4:	801a      	strh	r2, [r3, #0]
 8003cb6:	1c7b      	adds	r3, r7, #1
 8003cb8:	1c0a      	adds	r2, r1, #0
 8003cba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cbc:	1c7b      	adds	r3, r7, #1
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d004      	beq.n	8003cce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cc4:	1cbb      	adds	r3, r7, #2
 8003cc6:	881a      	ldrh	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ccc:	e003      	b.n	8003cd6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cce:	1cbb      	adds	r3, r7, #2
 8003cd0:	881a      	ldrh	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b002      	add	sp, #8
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	0002      	movs	r2, r0
 8003ce8:	1dbb      	adds	r3, r7, #6
 8003cea:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8003cec:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	1dba      	adds	r2, r7, #6
 8003cf2:	8812      	ldrh	r2, [r2, #0]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	d008      	beq.n	8003d0a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003cf8:	4b0d      	ldr	r3, [pc, #52]	; (8003d30 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003cfa:	1dba      	adds	r2, r7, #6
 8003cfc:	8812      	ldrh	r2, [r2, #0]
 8003cfe:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003d00:	1dbb      	adds	r3, r7, #6
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	0018      	movs	r0, r3
 8003d06:	f000 f815 	bl	8003d34 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8003d0a:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	1dba      	adds	r2, r7, #6
 8003d10:	8812      	ldrh	r2, [r2, #0]
 8003d12:	4013      	ands	r3, r2
 8003d14:	d008      	beq.n	8003d28 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003d16:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003d18:	1dba      	adds	r2, r7, #6
 8003d1a:	8812      	ldrh	r2, [r2, #0]
 8003d1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003d1e:	1dbb      	adds	r3, r7, #6
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	0018      	movs	r0, r3
 8003d24:	f000 f810 	bl	8003d48 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003d28:	46c0      	nop			; (mov r8, r8)
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b002      	add	sp, #8
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40021800 	.word	0x40021800

08003d34 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	0002      	movs	r2, r0
 8003d3c:	1dbb      	adds	r3, r7, #6
 8003d3e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003d40:	46c0      	nop			; (mov r8, r8)
 8003d42:	46bd      	mov	sp, r7
 8003d44:	b002      	add	sp, #8
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	0002      	movs	r2, r0
 8003d50:	1dbb      	adds	r3, r7, #6
 8003d52:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003d54:	46c0      	nop			; (mov r8, r8)
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b002      	add	sp, #8
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e08f      	b.n	8003e8e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2241      	movs	r2, #65	; 0x41
 8003d72:	5c9b      	ldrb	r3, [r3, r2]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d107      	bne.n	8003d8a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2240      	movs	r2, #64	; 0x40
 8003d7e:	2100      	movs	r1, #0
 8003d80:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	0018      	movs	r0, r3
 8003d86:	f7fd fed5 	bl	8001b34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2241      	movs	r2, #65	; 0x41
 8003d8e:	2124      	movs	r1, #36	; 0x24
 8003d90:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	438a      	bics	r2, r1
 8003da0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	493b      	ldr	r1, [pc, #236]	; (8003e98 <HAL_I2C_Init+0x13c>)
 8003dac:	400a      	ands	r2, r1
 8003dae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4938      	ldr	r1, [pc, #224]	; (8003e9c <HAL_I2C_Init+0x140>)
 8003dbc:	400a      	ands	r2, r1
 8003dbe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d108      	bne.n	8003dda <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2180      	movs	r1, #128	; 0x80
 8003dd2:	0209      	lsls	r1, r1, #8
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	609a      	str	r2, [r3, #8]
 8003dd8:	e007      	b.n	8003dea <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2184      	movs	r1, #132	; 0x84
 8003de4:	0209      	lsls	r1, r1, #8
 8003de6:	430a      	orrs	r2, r1
 8003de8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d109      	bne.n	8003e06 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2180      	movs	r1, #128	; 0x80
 8003dfe:	0109      	lsls	r1, r1, #4
 8003e00:	430a      	orrs	r2, r1
 8003e02:	605a      	str	r2, [r3, #4]
 8003e04:	e007      	b.n	8003e16 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4923      	ldr	r1, [pc, #140]	; (8003ea0 <HAL_I2C_Init+0x144>)
 8003e12:	400a      	ands	r2, r1
 8003e14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4920      	ldr	r1, [pc, #128]	; (8003ea4 <HAL_I2C_Init+0x148>)
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	491a      	ldr	r1, [pc, #104]	; (8003e9c <HAL_I2C_Init+0x140>)
 8003e32:	400a      	ands	r2, r1
 8003e34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	69d9      	ldr	r1, [r3, #28]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a1a      	ldr	r2, [r3, #32]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2241      	movs	r2, #65	; 0x41
 8003e7a:	2120      	movs	r1, #32
 8003e7c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2242      	movs	r2, #66	; 0x42
 8003e88:	2100      	movs	r1, #0
 8003e8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	0018      	movs	r0, r3
 8003e90:	46bd      	mov	sp, r7
 8003e92:	b002      	add	sp, #8
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	46c0      	nop			; (mov r8, r8)
 8003e98:	f0ffffff 	.word	0xf0ffffff
 8003e9c:	ffff7fff 	.word	0xffff7fff
 8003ea0:	fffff7ff 	.word	0xfffff7ff
 8003ea4:	02008000 	.word	0x02008000

08003ea8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2241      	movs	r2, #65	; 0x41
 8003eb6:	5c9b      	ldrb	r3, [r3, r2]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b20      	cmp	r3, #32
 8003ebc:	d138      	bne.n	8003f30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2240      	movs	r2, #64	; 0x40
 8003ec2:	5c9b      	ldrb	r3, [r3, r2]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e032      	b.n	8003f32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2240      	movs	r2, #64	; 0x40
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2241      	movs	r2, #65	; 0x41
 8003ed8:	2124      	movs	r1, #36	; 0x24
 8003eda:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	438a      	bics	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4911      	ldr	r1, [pc, #68]	; (8003f3c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003ef8:	400a      	ands	r2, r1
 8003efa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6819      	ldr	r1, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2101      	movs	r1, #1
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2241      	movs	r2, #65	; 0x41
 8003f20:	2120      	movs	r1, #32
 8003f22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2240      	movs	r2, #64	; 0x40
 8003f28:	2100      	movs	r1, #0
 8003f2a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	e000      	b.n	8003f32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f30:	2302      	movs	r3, #2
  }
}
 8003f32:	0018      	movs	r0, r3
 8003f34:	46bd      	mov	sp, r7
 8003f36:	b002      	add	sp, #8
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	ffffefff 	.word	0xffffefff

08003f40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2241      	movs	r2, #65	; 0x41
 8003f4e:	5c9b      	ldrb	r3, [r3, r2]
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	d139      	bne.n	8003fca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2240      	movs	r2, #64	; 0x40
 8003f5a:	5c9b      	ldrb	r3, [r3, r2]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d101      	bne.n	8003f64 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f60:	2302      	movs	r3, #2
 8003f62:	e033      	b.n	8003fcc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2240      	movs	r2, #64	; 0x40
 8003f68:	2101      	movs	r1, #1
 8003f6a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2241      	movs	r2, #65	; 0x41
 8003f70:	2124      	movs	r1, #36	; 0x24
 8003f72:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2101      	movs	r1, #1
 8003f80:	438a      	bics	r2, r1
 8003f82:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4a11      	ldr	r2, [pc, #68]	; (8003fd4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	021b      	lsls	r3, r3, #8
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2241      	movs	r2, #65	; 0x41
 8003fba:	2120      	movs	r1, #32
 8003fbc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2240      	movs	r2, #64	; 0x40
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	e000      	b.n	8003fcc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fca:	2302      	movs	r3, #2
  }
}
 8003fcc:	0018      	movs	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	b004      	add	sp, #16
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	fffff0ff 	.word	0xfffff0ff

08003fd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e1d0      	b.n	800438c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d100      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x1e>
 8003ff4:	e069      	b.n	80040ca <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ff6:	4bc8      	ldr	r3, [pc, #800]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2238      	movs	r2, #56	; 0x38
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	2b08      	cmp	r3, #8
 8004004:	d105      	bne.n	8004012 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d15d      	bne.n	80040ca <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e1bc      	b.n	800438c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	2380      	movs	r3, #128	; 0x80
 8004018:	025b      	lsls	r3, r3, #9
 800401a:	429a      	cmp	r2, r3
 800401c:	d107      	bne.n	800402e <HAL_RCC_OscConfig+0x56>
 800401e:	4bbe      	ldr	r3, [pc, #760]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	4bbd      	ldr	r3, [pc, #756]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 8004024:	2180      	movs	r1, #128	; 0x80
 8004026:	0249      	lsls	r1, r1, #9
 8004028:	430a      	orrs	r2, r1
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	e020      	b.n	8004070 <HAL_RCC_OscConfig+0x98>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	23a0      	movs	r3, #160	; 0xa0
 8004034:	02db      	lsls	r3, r3, #11
 8004036:	429a      	cmp	r2, r3
 8004038:	d10e      	bne.n	8004058 <HAL_RCC_OscConfig+0x80>
 800403a:	4bb7      	ldr	r3, [pc, #732]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	4bb6      	ldr	r3, [pc, #728]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 8004040:	2180      	movs	r1, #128	; 0x80
 8004042:	02c9      	lsls	r1, r1, #11
 8004044:	430a      	orrs	r2, r1
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	4bb3      	ldr	r3, [pc, #716]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	4bb2      	ldr	r3, [pc, #712]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 800404e:	2180      	movs	r1, #128	; 0x80
 8004050:	0249      	lsls	r1, r1, #9
 8004052:	430a      	orrs	r2, r1
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	e00b      	b.n	8004070 <HAL_RCC_OscConfig+0x98>
 8004058:	4baf      	ldr	r3, [pc, #700]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	4bae      	ldr	r3, [pc, #696]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 800405e:	49af      	ldr	r1, [pc, #700]	; (800431c <HAL_RCC_OscConfig+0x344>)
 8004060:	400a      	ands	r2, r1
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	4bac      	ldr	r3, [pc, #688]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	4bab      	ldr	r3, [pc, #684]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 800406a:	49ad      	ldr	r1, [pc, #692]	; (8004320 <HAL_RCC_OscConfig+0x348>)
 800406c:	400a      	ands	r2, r1
 800406e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d014      	beq.n	80040a2 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004078:	f7fd ff86 	bl	8001f88 <HAL_GetTick>
 800407c:	0003      	movs	r3, r0
 800407e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004082:	f7fd ff81 	bl	8001f88 <HAL_GetTick>
 8004086:	0002      	movs	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b64      	cmp	r3, #100	; 0x64
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e17b      	b.n	800438c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004094:	4ba0      	ldr	r3, [pc, #640]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	2380      	movs	r3, #128	; 0x80
 800409a:	029b      	lsls	r3, r3, #10
 800409c:	4013      	ands	r3, r2
 800409e:	d0f0      	beq.n	8004082 <HAL_RCC_OscConfig+0xaa>
 80040a0:	e013      	b.n	80040ca <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a2:	f7fd ff71 	bl	8001f88 <HAL_GetTick>
 80040a6:	0003      	movs	r3, r0
 80040a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80040ac:	f7fd ff6c 	bl	8001f88 <HAL_GetTick>
 80040b0:	0002      	movs	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b64      	cmp	r3, #100	; 0x64
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e166      	b.n	800438c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040be:	4b96      	ldr	r3, [pc, #600]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	2380      	movs	r3, #128	; 0x80
 80040c4:	029b      	lsls	r3, r3, #10
 80040c6:	4013      	ands	r3, r2
 80040c8:	d1f0      	bne.n	80040ac <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2202      	movs	r2, #2
 80040d0:	4013      	ands	r3, r2
 80040d2:	d100      	bne.n	80040d6 <HAL_RCC_OscConfig+0xfe>
 80040d4:	e086      	b.n	80041e4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040d6:	4b90      	ldr	r3, [pc, #576]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	2238      	movs	r2, #56	; 0x38
 80040dc:	4013      	ands	r3, r2
 80040de:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d12f      	bne.n	8004146 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e14c      	b.n	800438c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f2:	4b89      	ldr	r3, [pc, #548]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	4a8b      	ldr	r2, [pc, #556]	; (8004324 <HAL_RCC_OscConfig+0x34c>)
 80040f8:	4013      	ands	r3, r2
 80040fa:	0019      	movs	r1, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	021a      	lsls	r2, r3, #8
 8004102:	4b85      	ldr	r3, [pc, #532]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 8004104:	430a      	orrs	r2, r1
 8004106:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d112      	bne.n	8004134 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800410e:	4b82      	ldr	r3, [pc, #520]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a85      	ldr	r2, [pc, #532]	; (8004328 <HAL_RCC_OscConfig+0x350>)
 8004114:	4013      	ands	r3, r2
 8004116:	0019      	movs	r1, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	4b7e      	ldr	r3, [pc, #504]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 800411e:	430a      	orrs	r2, r1
 8004120:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004122:	4b7d      	ldr	r3, [pc, #500]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	0adb      	lsrs	r3, r3, #11
 8004128:	2207      	movs	r2, #7
 800412a:	4013      	ands	r3, r2
 800412c:	4a7f      	ldr	r2, [pc, #508]	; (800432c <HAL_RCC_OscConfig+0x354>)
 800412e:	40da      	lsrs	r2, r3
 8004130:	4b7f      	ldr	r3, [pc, #508]	; (8004330 <HAL_RCC_OscConfig+0x358>)
 8004132:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004134:	4b7f      	ldr	r3, [pc, #508]	; (8004334 <HAL_RCC_OscConfig+0x35c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	0018      	movs	r0, r3
 800413a:	f7fd fec9 	bl	8001ed0 <HAL_InitTick>
 800413e:	1e03      	subs	r3, r0, #0
 8004140:	d050      	beq.n	80041e4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e122      	b.n	800438c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d030      	beq.n	80041b0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800414e:	4b72      	ldr	r3, [pc, #456]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a75      	ldr	r2, [pc, #468]	; (8004328 <HAL_RCC_OscConfig+0x350>)
 8004154:	4013      	ands	r3, r2
 8004156:	0019      	movs	r1, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	4b6e      	ldr	r3, [pc, #440]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 800415e:	430a      	orrs	r2, r1
 8004160:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8004162:	4b6d      	ldr	r3, [pc, #436]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	4b6c      	ldr	r3, [pc, #432]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 8004168:	2180      	movs	r1, #128	; 0x80
 800416a:	0049      	lsls	r1, r1, #1
 800416c:	430a      	orrs	r2, r1
 800416e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004170:	f7fd ff0a 	bl	8001f88 <HAL_GetTick>
 8004174:	0003      	movs	r3, r0
 8004176:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800417a:	f7fd ff05 	bl	8001f88 <HAL_GetTick>
 800417e:	0002      	movs	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e0ff      	b.n	800438c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800418c:	4b62      	ldr	r3, [pc, #392]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	2380      	movs	r3, #128	; 0x80
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	4013      	ands	r3, r2
 8004196:	d0f0      	beq.n	800417a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004198:	4b5f      	ldr	r3, [pc, #380]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	4a61      	ldr	r2, [pc, #388]	; (8004324 <HAL_RCC_OscConfig+0x34c>)
 800419e:	4013      	ands	r3, r2
 80041a0:	0019      	movs	r1, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	021a      	lsls	r2, r3, #8
 80041a8:	4b5b      	ldr	r3, [pc, #364]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 80041aa:	430a      	orrs	r2, r1
 80041ac:	605a      	str	r2, [r3, #4]
 80041ae:	e019      	b.n	80041e4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80041b0:	4b59      	ldr	r3, [pc, #356]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	4b58      	ldr	r3, [pc, #352]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 80041b6:	4960      	ldr	r1, [pc, #384]	; (8004338 <HAL_RCC_OscConfig+0x360>)
 80041b8:	400a      	ands	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041bc:	f7fd fee4 	bl	8001f88 <HAL_GetTick>
 80041c0:	0003      	movs	r3, r0
 80041c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80041c6:	f7fd fedf 	bl	8001f88 <HAL_GetTick>
 80041ca:	0002      	movs	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e0d9      	b.n	800438c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041d8:	4b4f      	ldr	r3, [pc, #316]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	2380      	movs	r3, #128	; 0x80
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	4013      	ands	r3, r2
 80041e2:	d1f0      	bne.n	80041c6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2208      	movs	r2, #8
 80041ea:	4013      	ands	r3, r2
 80041ec:	d042      	beq.n	8004274 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80041ee:	4b4a      	ldr	r3, [pc, #296]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2238      	movs	r2, #56	; 0x38
 80041f4:	4013      	ands	r3, r2
 80041f6:	2b18      	cmp	r3, #24
 80041f8:	d105      	bne.n	8004206 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d138      	bne.n	8004274 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e0c2      	b.n	800438c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d019      	beq.n	8004242 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800420e:	4b42      	ldr	r3, [pc, #264]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 8004210:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004212:	4b41      	ldr	r3, [pc, #260]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 8004214:	2101      	movs	r1, #1
 8004216:	430a      	orrs	r2, r1
 8004218:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421a:	f7fd feb5 	bl	8001f88 <HAL_GetTick>
 800421e:	0003      	movs	r3, r0
 8004220:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004224:	f7fd feb0 	bl	8001f88 <HAL_GetTick>
 8004228:	0002      	movs	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e0aa      	b.n	800438c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004236:	4b38      	ldr	r3, [pc, #224]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 8004238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423a:	2202      	movs	r2, #2
 800423c:	4013      	ands	r3, r2
 800423e:	d0f1      	beq.n	8004224 <HAL_RCC_OscConfig+0x24c>
 8004240:	e018      	b.n	8004274 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004242:	4b35      	ldr	r3, [pc, #212]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 8004244:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004246:	4b34      	ldr	r3, [pc, #208]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 8004248:	2101      	movs	r1, #1
 800424a:	438a      	bics	r2, r1
 800424c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424e:	f7fd fe9b 	bl	8001f88 <HAL_GetTick>
 8004252:	0003      	movs	r3, r0
 8004254:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004258:	f7fd fe96 	bl	8001f88 <HAL_GetTick>
 800425c:	0002      	movs	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e090      	b.n	800438c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800426a:	4b2b      	ldr	r3, [pc, #172]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 800426c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800426e:	2202      	movs	r2, #2
 8004270:	4013      	ands	r3, r2
 8004272:	d1f1      	bne.n	8004258 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2204      	movs	r2, #4
 800427a:	4013      	ands	r3, r2
 800427c:	d100      	bne.n	8004280 <HAL_RCC_OscConfig+0x2a8>
 800427e:	e084      	b.n	800438a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004280:	230f      	movs	r3, #15
 8004282:	18fb      	adds	r3, r7, r3
 8004284:	2200      	movs	r2, #0
 8004286:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004288:	4b23      	ldr	r3, [pc, #140]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2238      	movs	r2, #56	; 0x38
 800428e:	4013      	ands	r3, r2
 8004290:	2b20      	cmp	r3, #32
 8004292:	d106      	bne.n	80042a2 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d000      	beq.n	800429e <HAL_RCC_OscConfig+0x2c6>
 800429c:	e075      	b.n	800438a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e074      	b.n	800438c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d106      	bne.n	80042b8 <HAL_RCC_OscConfig+0x2e0>
 80042aa:	4b1b      	ldr	r3, [pc, #108]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 80042ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042ae:	4b1a      	ldr	r3, [pc, #104]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 80042b0:	2101      	movs	r1, #1
 80042b2:	430a      	orrs	r2, r1
 80042b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80042b6:	e01c      	b.n	80042f2 <HAL_RCC_OscConfig+0x31a>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	2b05      	cmp	r3, #5
 80042be:	d10c      	bne.n	80042da <HAL_RCC_OscConfig+0x302>
 80042c0:	4b15      	ldr	r3, [pc, #84]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 80042c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042c4:	4b14      	ldr	r3, [pc, #80]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 80042c6:	2104      	movs	r1, #4
 80042c8:	430a      	orrs	r2, r1
 80042ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80042cc:	4b12      	ldr	r3, [pc, #72]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 80042ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042d0:	4b11      	ldr	r3, [pc, #68]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 80042d2:	2101      	movs	r1, #1
 80042d4:	430a      	orrs	r2, r1
 80042d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80042d8:	e00b      	b.n	80042f2 <HAL_RCC_OscConfig+0x31a>
 80042da:	4b0f      	ldr	r3, [pc, #60]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 80042dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042de:	4b0e      	ldr	r3, [pc, #56]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 80042e0:	2101      	movs	r1, #1
 80042e2:	438a      	bics	r2, r1
 80042e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80042e6:	4b0c      	ldr	r3, [pc, #48]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 80042e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042ea:	4b0b      	ldr	r3, [pc, #44]	; (8004318 <HAL_RCC_OscConfig+0x340>)
 80042ec:	2104      	movs	r1, #4
 80042ee:	438a      	bics	r2, r1
 80042f0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d028      	beq.n	800434c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fa:	f7fd fe45 	bl	8001f88 <HAL_GetTick>
 80042fe:	0003      	movs	r3, r0
 8004300:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004302:	e01d      	b.n	8004340 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004304:	f7fd fe40 	bl	8001f88 <HAL_GetTick>
 8004308:	0002      	movs	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	4a0b      	ldr	r2, [pc, #44]	; (800433c <HAL_RCC_OscConfig+0x364>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d915      	bls.n	8004340 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e039      	b.n	800438c <HAL_RCC_OscConfig+0x3b4>
 8004318:	40021000 	.word	0x40021000
 800431c:	fffeffff 	.word	0xfffeffff
 8004320:	fffbffff 	.word	0xfffbffff
 8004324:	ffff80ff 	.word	0xffff80ff
 8004328:	ffffc7ff 	.word	0xffffc7ff
 800432c:	02dc6c00 	.word	0x02dc6c00
 8004330:	20000000 	.word	0x20000000
 8004334:	20000004 	.word	0x20000004
 8004338:	fffffeff 	.word	0xfffffeff
 800433c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004340:	4b14      	ldr	r3, [pc, #80]	; (8004394 <HAL_RCC_OscConfig+0x3bc>)
 8004342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004344:	2202      	movs	r2, #2
 8004346:	4013      	ands	r3, r2
 8004348:	d0dc      	beq.n	8004304 <HAL_RCC_OscConfig+0x32c>
 800434a:	e013      	b.n	8004374 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434c:	f7fd fe1c 	bl	8001f88 <HAL_GetTick>
 8004350:	0003      	movs	r3, r0
 8004352:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8004354:	e009      	b.n	800436a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004356:	f7fd fe17 	bl	8001f88 <HAL_GetTick>
 800435a:	0002      	movs	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	4a0d      	ldr	r2, [pc, #52]	; (8004398 <HAL_RCC_OscConfig+0x3c0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e010      	b.n	800438c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800436a:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <HAL_RCC_OscConfig+0x3bc>)
 800436c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436e:	2202      	movs	r2, #2
 8004370:	4013      	ands	r3, r2
 8004372:	d1f0      	bne.n	8004356 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004374:	230f      	movs	r3, #15
 8004376:	18fb      	adds	r3, r7, r3
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d105      	bne.n	800438a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800437e:	4b05      	ldr	r3, [pc, #20]	; (8004394 <HAL_RCC_OscConfig+0x3bc>)
 8004380:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004382:	4b04      	ldr	r3, [pc, #16]	; (8004394 <HAL_RCC_OscConfig+0x3bc>)
 8004384:	4905      	ldr	r1, [pc, #20]	; (800439c <HAL_RCC_OscConfig+0x3c4>)
 8004386:	400a      	ands	r2, r1
 8004388:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	0018      	movs	r0, r3
 800438e:	46bd      	mov	sp, r7
 8004390:	b006      	add	sp, #24
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40021000 	.word	0x40021000
 8004398:	00001388 	.word	0x00001388
 800439c:	efffffff 	.word	0xefffffff

080043a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0e9      	b.n	8004588 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043b4:	4b76      	ldr	r3, [pc, #472]	; (8004590 <HAL_RCC_ClockConfig+0x1f0>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2207      	movs	r2, #7
 80043ba:	4013      	ands	r3, r2
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d91e      	bls.n	8004400 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c2:	4b73      	ldr	r3, [pc, #460]	; (8004590 <HAL_RCC_ClockConfig+0x1f0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2207      	movs	r2, #7
 80043c8:	4393      	bics	r3, r2
 80043ca:	0019      	movs	r1, r3
 80043cc:	4b70      	ldr	r3, [pc, #448]	; (8004590 <HAL_RCC_ClockConfig+0x1f0>)
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80043d4:	f7fd fdd8 	bl	8001f88 <HAL_GetTick>
 80043d8:	0003      	movs	r3, r0
 80043da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043dc:	e009      	b.n	80043f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80043de:	f7fd fdd3 	bl	8001f88 <HAL_GetTick>
 80043e2:	0002      	movs	r2, r0
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	4a6a      	ldr	r2, [pc, #424]	; (8004594 <HAL_RCC_ClockConfig+0x1f4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e0ca      	b.n	8004588 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043f2:	4b67      	ldr	r3, [pc, #412]	; (8004590 <HAL_RCC_ClockConfig+0x1f0>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2207      	movs	r2, #7
 80043f8:	4013      	ands	r3, r2
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d1ee      	bne.n	80043de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2202      	movs	r2, #2
 8004406:	4013      	ands	r3, r2
 8004408:	d017      	beq.n	800443a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2204      	movs	r2, #4
 8004410:	4013      	ands	r3, r2
 8004412:	d008      	beq.n	8004426 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004414:	4b60      	ldr	r3, [pc, #384]	; (8004598 <HAL_RCC_ClockConfig+0x1f8>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	4a60      	ldr	r2, [pc, #384]	; (800459c <HAL_RCC_ClockConfig+0x1fc>)
 800441a:	401a      	ands	r2, r3
 800441c:	4b5e      	ldr	r3, [pc, #376]	; (8004598 <HAL_RCC_ClockConfig+0x1f8>)
 800441e:	21b0      	movs	r1, #176	; 0xb0
 8004420:	0109      	lsls	r1, r1, #4
 8004422:	430a      	orrs	r2, r1
 8004424:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004426:	4b5c      	ldr	r3, [pc, #368]	; (8004598 <HAL_RCC_ClockConfig+0x1f8>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	4a5d      	ldr	r2, [pc, #372]	; (80045a0 <HAL_RCC_ClockConfig+0x200>)
 800442c:	4013      	ands	r3, r2
 800442e:	0019      	movs	r1, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	4b58      	ldr	r3, [pc, #352]	; (8004598 <HAL_RCC_ClockConfig+0x1f8>)
 8004436:	430a      	orrs	r2, r1
 8004438:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2201      	movs	r2, #1
 8004440:	4013      	ands	r3, r2
 8004442:	d055      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8004444:	4b54      	ldr	r3, [pc, #336]	; (8004598 <HAL_RCC_ClockConfig+0x1f8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	221c      	movs	r2, #28
 800444a:	4393      	bics	r3, r2
 800444c:	0019      	movs	r1, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	4b51      	ldr	r3, [pc, #324]	; (8004598 <HAL_RCC_ClockConfig+0x1f8>)
 8004454:	430a      	orrs	r2, r1
 8004456:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d107      	bne.n	8004470 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004460:	4b4d      	ldr	r3, [pc, #308]	; (8004598 <HAL_RCC_ClockConfig+0x1f8>)
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	029b      	lsls	r3, r3, #10
 8004468:	4013      	ands	r3, r2
 800446a:	d11f      	bne.n	80044ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e08b      	b.n	8004588 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d107      	bne.n	8004488 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004478:	4b47      	ldr	r3, [pc, #284]	; (8004598 <HAL_RCC_ClockConfig+0x1f8>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	2380      	movs	r3, #128	; 0x80
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	4013      	ands	r3, r2
 8004482:	d113      	bne.n	80044ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e07f      	b.n	8004588 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b03      	cmp	r3, #3
 800448e:	d106      	bne.n	800449e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004490:	4b41      	ldr	r3, [pc, #260]	; (8004598 <HAL_RCC_ClockConfig+0x1f8>)
 8004492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004494:	2202      	movs	r2, #2
 8004496:	4013      	ands	r3, r2
 8004498:	d108      	bne.n	80044ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e074      	b.n	8004588 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800449e:	4b3e      	ldr	r3, [pc, #248]	; (8004598 <HAL_RCC_ClockConfig+0x1f8>)
 80044a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a2:	2202      	movs	r2, #2
 80044a4:	4013      	ands	r3, r2
 80044a6:	d101      	bne.n	80044ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e06d      	b.n	8004588 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044ac:	4b3a      	ldr	r3, [pc, #232]	; (8004598 <HAL_RCC_ClockConfig+0x1f8>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2207      	movs	r2, #7
 80044b2:	4393      	bics	r3, r2
 80044b4:	0019      	movs	r1, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	4b37      	ldr	r3, [pc, #220]	; (8004598 <HAL_RCC_ClockConfig+0x1f8>)
 80044bc:	430a      	orrs	r2, r1
 80044be:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c0:	f7fd fd62 	bl	8001f88 <HAL_GetTick>
 80044c4:	0003      	movs	r3, r0
 80044c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c8:	e009      	b.n	80044de <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80044ca:	f7fd fd5d 	bl	8001f88 <HAL_GetTick>
 80044ce:	0002      	movs	r2, r0
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	4a2f      	ldr	r2, [pc, #188]	; (8004594 <HAL_RCC_ClockConfig+0x1f4>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e054      	b.n	8004588 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044de:	4b2e      	ldr	r3, [pc, #184]	; (8004598 <HAL_RCC_ClockConfig+0x1f8>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2238      	movs	r2, #56	; 0x38
 80044e4:	401a      	ands	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d1ec      	bne.n	80044ca <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044f0:	4b27      	ldr	r3, [pc, #156]	; (8004590 <HAL_RCC_ClockConfig+0x1f0>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2207      	movs	r2, #7
 80044f6:	4013      	ands	r3, r2
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d21e      	bcs.n	800453c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fe:	4b24      	ldr	r3, [pc, #144]	; (8004590 <HAL_RCC_ClockConfig+0x1f0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2207      	movs	r2, #7
 8004504:	4393      	bics	r3, r2
 8004506:	0019      	movs	r1, r3
 8004508:	4b21      	ldr	r3, [pc, #132]	; (8004590 <HAL_RCC_ClockConfig+0x1f0>)
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004510:	f7fd fd3a 	bl	8001f88 <HAL_GetTick>
 8004514:	0003      	movs	r3, r0
 8004516:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004518:	e009      	b.n	800452e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800451a:	f7fd fd35 	bl	8001f88 <HAL_GetTick>
 800451e:	0002      	movs	r2, r0
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	4a1b      	ldr	r2, [pc, #108]	; (8004594 <HAL_RCC_ClockConfig+0x1f4>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d901      	bls.n	800452e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e02c      	b.n	8004588 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800452e:	4b18      	ldr	r3, [pc, #96]	; (8004590 <HAL_RCC_ClockConfig+0x1f0>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2207      	movs	r2, #7
 8004534:	4013      	ands	r3, r2
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d1ee      	bne.n	800451a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2204      	movs	r2, #4
 8004542:	4013      	ands	r3, r2
 8004544:	d009      	beq.n	800455a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004546:	4b14      	ldr	r3, [pc, #80]	; (8004598 <HAL_RCC_ClockConfig+0x1f8>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	4a16      	ldr	r2, [pc, #88]	; (80045a4 <HAL_RCC_ClockConfig+0x204>)
 800454c:	4013      	ands	r3, r2
 800454e:	0019      	movs	r1, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	4b10      	ldr	r3, [pc, #64]	; (8004598 <HAL_RCC_ClockConfig+0x1f8>)
 8004556:	430a      	orrs	r2, r1
 8004558:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800455a:	f000 f82b 	bl	80045b4 <HAL_RCC_GetSysClockFreq>
 800455e:	0001      	movs	r1, r0
 8004560:	4b0d      	ldr	r3, [pc, #52]	; (8004598 <HAL_RCC_ClockConfig+0x1f8>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	0a1b      	lsrs	r3, r3, #8
 8004566:	220f      	movs	r2, #15
 8004568:	401a      	ands	r2, r3
 800456a:	4b0f      	ldr	r3, [pc, #60]	; (80045a8 <HAL_RCC_ClockConfig+0x208>)
 800456c:	0092      	lsls	r2, r2, #2
 800456e:	58d3      	ldr	r3, [r2, r3]
 8004570:	221f      	movs	r2, #31
 8004572:	4013      	ands	r3, r2
 8004574:	000a      	movs	r2, r1
 8004576:	40da      	lsrs	r2, r3
 8004578:	4b0c      	ldr	r3, [pc, #48]	; (80045ac <HAL_RCC_ClockConfig+0x20c>)
 800457a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800457c:	4b0c      	ldr	r3, [pc, #48]	; (80045b0 <HAL_RCC_ClockConfig+0x210>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	0018      	movs	r0, r3
 8004582:	f7fd fca5 	bl	8001ed0 <HAL_InitTick>
 8004586:	0003      	movs	r3, r0
}
 8004588:	0018      	movs	r0, r3
 800458a:	46bd      	mov	sp, r7
 800458c:	b004      	add	sp, #16
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40022000 	.word	0x40022000
 8004594:	00001388 	.word	0x00001388
 8004598:	40021000 	.word	0x40021000
 800459c:	ffff84ff 	.word	0xffff84ff
 80045a0:	fffff0ff 	.word	0xfffff0ff
 80045a4:	ffff8fff 	.word	0xffff8fff
 80045a8:	08006068 	.word	0x08006068
 80045ac:	20000000 	.word	0x20000000
 80045b0:	20000004 	.word	0x20000004

080045b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80045ba:	4b1c      	ldr	r3, [pc, #112]	; (800462c <HAL_RCC_GetSysClockFreq+0x78>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2238      	movs	r2, #56	; 0x38
 80045c0:	4013      	ands	r3, r2
 80045c2:	d10f      	bne.n	80045e4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80045c4:	4b19      	ldr	r3, [pc, #100]	; (800462c <HAL_RCC_GetSysClockFreq+0x78>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	0adb      	lsrs	r3, r3, #11
 80045ca:	2207      	movs	r2, #7
 80045cc:	4013      	ands	r3, r2
 80045ce:	2201      	movs	r2, #1
 80045d0:	409a      	lsls	r2, r3
 80045d2:	0013      	movs	r3, r2
 80045d4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80045d6:	6839      	ldr	r1, [r7, #0]
 80045d8:	4815      	ldr	r0, [pc, #84]	; (8004630 <HAL_RCC_GetSysClockFreq+0x7c>)
 80045da:	f7fb fd95 	bl	8000108 <__udivsi3>
 80045de:	0003      	movs	r3, r0
 80045e0:	607b      	str	r3, [r7, #4]
 80045e2:	e01e      	b.n	8004622 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80045e4:	4b11      	ldr	r3, [pc, #68]	; (800462c <HAL_RCC_GetSysClockFreq+0x78>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2238      	movs	r2, #56	; 0x38
 80045ea:	4013      	ands	r3, r2
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d102      	bne.n	80045f6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045f0:	4b0f      	ldr	r3, [pc, #60]	; (8004630 <HAL_RCC_GetSysClockFreq+0x7c>)
 80045f2:	607b      	str	r3, [r7, #4]
 80045f4:	e015      	b.n	8004622 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80045f6:	4b0d      	ldr	r3, [pc, #52]	; (800462c <HAL_RCC_GetSysClockFreq+0x78>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	2238      	movs	r2, #56	; 0x38
 80045fc:	4013      	ands	r3, r2
 80045fe:	2b20      	cmp	r3, #32
 8004600:	d103      	bne.n	800460a <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004602:	2380      	movs	r3, #128	; 0x80
 8004604:	021b      	lsls	r3, r3, #8
 8004606:	607b      	str	r3, [r7, #4]
 8004608:	e00b      	b.n	8004622 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800460a:	4b08      	ldr	r3, [pc, #32]	; (800462c <HAL_RCC_GetSysClockFreq+0x78>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	2238      	movs	r2, #56	; 0x38
 8004610:	4013      	ands	r3, r2
 8004612:	2b18      	cmp	r3, #24
 8004614:	d103      	bne.n	800461e <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004616:	23fa      	movs	r3, #250	; 0xfa
 8004618:	01db      	lsls	r3, r3, #7
 800461a:	607b      	str	r3, [r7, #4]
 800461c:	e001      	b.n	8004622 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 800461e:	2300      	movs	r3, #0
 8004620:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8004622:	687b      	ldr	r3, [r7, #4]
}
 8004624:	0018      	movs	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	b002      	add	sp, #8
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40021000 	.word	0x40021000
 8004630:	02dc6c00 	.word	0x02dc6c00

08004634 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004638:	4b02      	ldr	r3, [pc, #8]	; (8004644 <HAL_RCC_GetHCLKFreq+0x10>)
 800463a:	681b      	ldr	r3, [r3, #0]
}
 800463c:	0018      	movs	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	46c0      	nop			; (mov r8, r8)
 8004644:	20000000 	.word	0x20000000

08004648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 800464c:	f7ff fff2 	bl	8004634 <HAL_RCC_GetHCLKFreq>
 8004650:	0001      	movs	r1, r0
 8004652:	4b07      	ldr	r3, [pc, #28]	; (8004670 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	0b1b      	lsrs	r3, r3, #12
 8004658:	2207      	movs	r2, #7
 800465a:	401a      	ands	r2, r3
 800465c:	4b05      	ldr	r3, [pc, #20]	; (8004674 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800465e:	0092      	lsls	r2, r2, #2
 8004660:	58d3      	ldr	r3, [r2, r3]
 8004662:	221f      	movs	r2, #31
 8004664:	4013      	ands	r3, r2
 8004666:	40d9      	lsrs	r1, r3
 8004668:	000b      	movs	r3, r1
}
 800466a:	0018      	movs	r0, r3
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40021000 	.word	0x40021000
 8004674:	080060a8 	.word	0x080060a8

08004678 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004680:	2313      	movs	r3, #19
 8004682:	18fb      	adds	r3, r7, r3
 8004684:	2200      	movs	r2, #0
 8004686:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004688:	2312      	movs	r3, #18
 800468a:	18fb      	adds	r3, r7, r3
 800468c:	2200      	movs	r2, #0
 800468e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	2380      	movs	r3, #128	; 0x80
 8004696:	029b      	lsls	r3, r3, #10
 8004698:	4013      	ands	r3, r2
 800469a:	d100      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800469c:	e079      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800469e:	2011      	movs	r0, #17
 80046a0:	183b      	adds	r3, r7, r0
 80046a2:	2200      	movs	r2, #0
 80046a4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a6:	4b64      	ldr	r3, [pc, #400]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046aa:	2380      	movs	r3, #128	; 0x80
 80046ac:	055b      	lsls	r3, r3, #21
 80046ae:	4013      	ands	r3, r2
 80046b0:	d110      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b2:	4b61      	ldr	r3, [pc, #388]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046b6:	4b60      	ldr	r3, [pc, #384]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046b8:	2180      	movs	r1, #128	; 0x80
 80046ba:	0549      	lsls	r1, r1, #21
 80046bc:	430a      	orrs	r2, r1
 80046be:	63da      	str	r2, [r3, #60]	; 0x3c
 80046c0:	4b5d      	ldr	r3, [pc, #372]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046c4:	2380      	movs	r3, #128	; 0x80
 80046c6:	055b      	lsls	r3, r3, #21
 80046c8:	4013      	ands	r3, r2
 80046ca:	60bb      	str	r3, [r7, #8]
 80046cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ce:	183b      	adds	r3, r7, r0
 80046d0:	2201      	movs	r2, #1
 80046d2:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80046d4:	4b58      	ldr	r3, [pc, #352]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046d8:	23c0      	movs	r3, #192	; 0xc0
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4013      	ands	r3, r2
 80046de:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d019      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d014      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80046f0:	4b51      	ldr	r3, [pc, #324]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f4:	4a51      	ldr	r2, [pc, #324]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046fa:	4b4f      	ldr	r3, [pc, #316]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046fe:	4b4e      	ldr	r3, [pc, #312]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004700:	2180      	movs	r1, #128	; 0x80
 8004702:	0249      	lsls	r1, r1, #9
 8004704:	430a      	orrs	r2, r1
 8004706:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004708:	4b4b      	ldr	r3, [pc, #300]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800470a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800470c:	4b4a      	ldr	r3, [pc, #296]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800470e:	494c      	ldr	r1, [pc, #304]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004710:	400a      	ands	r2, r1
 8004712:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8004714:	4b48      	ldr	r3, [pc, #288]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	2201      	movs	r2, #1
 800471e:	4013      	ands	r3, r2
 8004720:	d016      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004722:	f7fd fc31 	bl	8001f88 <HAL_GetTick>
 8004726:	0003      	movs	r3, r0
 8004728:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800472a:	e00c      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800472c:	f7fd fc2c 	bl	8001f88 <HAL_GetTick>
 8004730:	0002      	movs	r2, r0
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	4a43      	ldr	r2, [pc, #268]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d904      	bls.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 800473c:	2313      	movs	r3, #19
 800473e:	18fb      	adds	r3, r7, r3
 8004740:	2203      	movs	r2, #3
 8004742:	701a      	strb	r2, [r3, #0]
          break;
 8004744:	e004      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004746:	4b3c      	ldr	r3, [pc, #240]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474a:	2202      	movs	r2, #2
 800474c:	4013      	ands	r3, r2
 800474e:	d0ed      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8004750:	2313      	movs	r3, #19
 8004752:	18fb      	adds	r3, r7, r3
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10a      	bne.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800475a:	4b37      	ldr	r3, [pc, #220]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800475c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475e:	4a37      	ldr	r2, [pc, #220]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004760:	4013      	ands	r3, r2
 8004762:	0019      	movs	r1, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	699a      	ldr	r2, [r3, #24]
 8004768:	4b33      	ldr	r3, [pc, #204]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800476a:	430a      	orrs	r2, r1
 800476c:	65da      	str	r2, [r3, #92]	; 0x5c
 800476e:	e005      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004770:	2312      	movs	r3, #18
 8004772:	18fb      	adds	r3, r7, r3
 8004774:	2213      	movs	r2, #19
 8004776:	18ba      	adds	r2, r7, r2
 8004778:	7812      	ldrb	r2, [r2, #0]
 800477a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800477c:	2311      	movs	r3, #17
 800477e:	18fb      	adds	r3, r7, r3
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d105      	bne.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004786:	4b2c      	ldr	r3, [pc, #176]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004788:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800478a:	4b2b      	ldr	r3, [pc, #172]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800478c:	492e      	ldr	r1, [pc, #184]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478e:	400a      	ands	r2, r1
 8004790:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2201      	movs	r2, #1
 8004798:	4013      	ands	r3, r2
 800479a:	d009      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800479c:	4b26      	ldr	r3, [pc, #152]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800479e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a0:	2203      	movs	r2, #3
 80047a2:	4393      	bics	r3, r2
 80047a4:	0019      	movs	r1, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	4b23      	ldr	r3, [pc, #140]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047ac:	430a      	orrs	r2, r1
 80047ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2240      	movs	r2, #64	; 0x40
 80047b6:	4013      	ands	r3, r2
 80047b8:	d009      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047ba:	4b1f      	ldr	r3, [pc, #124]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047be:	4a23      	ldr	r2, [pc, #140]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	0019      	movs	r1, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047ca:	430a      	orrs	r2, r1
 80047cc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	2380      	movs	r3, #128	; 0x80
 80047d4:	01db      	lsls	r3, r3, #7
 80047d6:	4013      	ands	r3, r2
 80047d8:	d008      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047da:	4b17      	ldr	r3, [pc, #92]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	0899      	lsrs	r1, r3, #2
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695a      	ldr	r2, [r3, #20]
 80047e6:	4b14      	ldr	r3, [pc, #80]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047e8:	430a      	orrs	r2, r1
 80047ea:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	2380      	movs	r3, #128	; 0x80
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	4013      	ands	r3, r2
 80047f6:	d009      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80047f8:	4b0f      	ldr	r3, [pc, #60]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fc:	4a14      	ldr	r2, [pc, #80]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80047fe:	4013      	ands	r3, r2
 8004800:	0019      	movs	r1, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691a      	ldr	r2, [r3, #16]
 8004806:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004808:	430a      	orrs	r2, r1
 800480a:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	da09      	bge.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8004814:	4b08      	ldr	r3, [pc, #32]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	22e0      	movs	r2, #224	; 0xe0
 800481a:	4393      	bics	r3, r2
 800481c:	0019      	movs	r1, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	4b05      	ldr	r3, [pc, #20]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004824:	430a      	orrs	r2, r1
 8004826:	601a      	str	r2, [r3, #0]
  }
  return status;
 8004828:	2312      	movs	r3, #18
 800482a:	18fb      	adds	r3, r7, r3
 800482c:	781b      	ldrb	r3, [r3, #0]
}
 800482e:	0018      	movs	r0, r3
 8004830:	46bd      	mov	sp, r7
 8004832:	b006      	add	sp, #24
 8004834:	bd80      	pop	{r7, pc}
 8004836:	46c0      	nop			; (mov r8, r8)
 8004838:	40021000 	.word	0x40021000
 800483c:	fffffcff 	.word	0xfffffcff
 8004840:	fffeffff 	.word	0xfffeffff
 8004844:	00001388 	.word	0x00001388
 8004848:	efffffff 	.word	0xefffffff
 800484c:	ffffcfff 	.word	0xffffcfff
 8004850:	ffff3fff 	.word	0xffff3fff

08004854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e04a      	b.n	80048fc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	223d      	movs	r2, #61	; 0x3d
 800486a:	5c9b      	ldrb	r3, [r3, r2]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d107      	bne.n	8004882 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	223c      	movs	r2, #60	; 0x3c
 8004876:	2100      	movs	r1, #0
 8004878:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	0018      	movs	r0, r3
 800487e:	f7fd f9bb 	bl	8001bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	223d      	movs	r2, #61	; 0x3d
 8004886:	2102      	movs	r1, #2
 8004888:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3304      	adds	r3, #4
 8004892:	0019      	movs	r1, r3
 8004894:	0010      	movs	r0, r2
 8004896:	f000 fb43 	bl	8004f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2248      	movs	r2, #72	; 0x48
 800489e:	2101      	movs	r1, #1
 80048a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	223e      	movs	r2, #62	; 0x3e
 80048a6:	2101      	movs	r1, #1
 80048a8:	5499      	strb	r1, [r3, r2]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	223f      	movs	r2, #63	; 0x3f
 80048ae:	2101      	movs	r1, #1
 80048b0:	5499      	strb	r1, [r3, r2]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2240      	movs	r2, #64	; 0x40
 80048b6:	2101      	movs	r1, #1
 80048b8:	5499      	strb	r1, [r3, r2]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2241      	movs	r2, #65	; 0x41
 80048be:	2101      	movs	r1, #1
 80048c0:	5499      	strb	r1, [r3, r2]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2242      	movs	r2, #66	; 0x42
 80048c6:	2101      	movs	r1, #1
 80048c8:	5499      	strb	r1, [r3, r2]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2243      	movs	r2, #67	; 0x43
 80048ce:	2101      	movs	r1, #1
 80048d0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2244      	movs	r2, #68	; 0x44
 80048d6:	2101      	movs	r1, #1
 80048d8:	5499      	strb	r1, [r3, r2]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2245      	movs	r2, #69	; 0x45
 80048de:	2101      	movs	r1, #1
 80048e0:	5499      	strb	r1, [r3, r2]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2246      	movs	r2, #70	; 0x46
 80048e6:	2101      	movs	r1, #1
 80048e8:	5499      	strb	r1, [r3, r2]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2247      	movs	r2, #71	; 0x47
 80048ee:	2101      	movs	r1, #1
 80048f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	223d      	movs	r2, #61	; 0x3d
 80048f6:	2101      	movs	r1, #1
 80048f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	0018      	movs	r0, r3
 80048fe:	46bd      	mov	sp, r7
 8004900:	b002      	add	sp, #8
 8004902:	bd80      	pop	{r7, pc}

08004904 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e04a      	b.n	80049ac <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	223d      	movs	r2, #61	; 0x3d
 800491a:	5c9b      	ldrb	r3, [r3, r2]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d107      	bne.n	8004932 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	223c      	movs	r2, #60	; 0x3c
 8004926:	2100      	movs	r1, #0
 8004928:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	0018      	movs	r0, r3
 800492e:	f000 f841 	bl	80049b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	223d      	movs	r2, #61	; 0x3d
 8004936:	2102      	movs	r1, #2
 8004938:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	3304      	adds	r3, #4
 8004942:	0019      	movs	r1, r3
 8004944:	0010      	movs	r0, r2
 8004946:	f000 faeb 	bl	8004f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2248      	movs	r2, #72	; 0x48
 800494e:	2101      	movs	r1, #1
 8004950:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	223e      	movs	r2, #62	; 0x3e
 8004956:	2101      	movs	r1, #1
 8004958:	5499      	strb	r1, [r3, r2]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	223f      	movs	r2, #63	; 0x3f
 800495e:	2101      	movs	r1, #1
 8004960:	5499      	strb	r1, [r3, r2]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2240      	movs	r2, #64	; 0x40
 8004966:	2101      	movs	r1, #1
 8004968:	5499      	strb	r1, [r3, r2]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2241      	movs	r2, #65	; 0x41
 800496e:	2101      	movs	r1, #1
 8004970:	5499      	strb	r1, [r3, r2]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2242      	movs	r2, #66	; 0x42
 8004976:	2101      	movs	r1, #1
 8004978:	5499      	strb	r1, [r3, r2]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2243      	movs	r2, #67	; 0x43
 800497e:	2101      	movs	r1, #1
 8004980:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2244      	movs	r2, #68	; 0x44
 8004986:	2101      	movs	r1, #1
 8004988:	5499      	strb	r1, [r3, r2]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2245      	movs	r2, #69	; 0x45
 800498e:	2101      	movs	r1, #1
 8004990:	5499      	strb	r1, [r3, r2]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2246      	movs	r2, #70	; 0x46
 8004996:	2101      	movs	r1, #1
 8004998:	5499      	strb	r1, [r3, r2]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2247      	movs	r2, #71	; 0x47
 800499e:	2101      	movs	r1, #1
 80049a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	223d      	movs	r2, #61	; 0x3d
 80049a6:	2101      	movs	r1, #1
 80049a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	0018      	movs	r0, r3
 80049ae:	46bd      	mov	sp, r7
 80049b0:	b002      	add	sp, #8
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049bc:	46c0      	nop			; (mov r8, r8)
 80049be:	46bd      	mov	sp, r7
 80049c0:	b002      	add	sp, #8
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d108      	bne.n	80049e6 <HAL_TIM_PWM_Start+0x22>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	223e      	movs	r2, #62	; 0x3e
 80049d8:	5c9b      	ldrb	r3, [r3, r2]
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	1e5a      	subs	r2, r3, #1
 80049e0:	4193      	sbcs	r3, r2
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	e037      	b.n	8004a56 <HAL_TIM_PWM_Start+0x92>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b04      	cmp	r3, #4
 80049ea:	d108      	bne.n	80049fe <HAL_TIM_PWM_Start+0x3a>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	223f      	movs	r2, #63	; 0x3f
 80049f0:	5c9b      	ldrb	r3, [r3, r2]
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	3b01      	subs	r3, #1
 80049f6:	1e5a      	subs	r2, r3, #1
 80049f8:	4193      	sbcs	r3, r2
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	e02b      	b.n	8004a56 <HAL_TIM_PWM_Start+0x92>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d108      	bne.n	8004a16 <HAL_TIM_PWM_Start+0x52>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2240      	movs	r2, #64	; 0x40
 8004a08:	5c9b      	ldrb	r3, [r3, r2]
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	1e5a      	subs	r2, r3, #1
 8004a10:	4193      	sbcs	r3, r2
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	e01f      	b.n	8004a56 <HAL_TIM_PWM_Start+0x92>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b0c      	cmp	r3, #12
 8004a1a:	d108      	bne.n	8004a2e <HAL_TIM_PWM_Start+0x6a>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2241      	movs	r2, #65	; 0x41
 8004a20:	5c9b      	ldrb	r3, [r3, r2]
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	3b01      	subs	r3, #1
 8004a26:	1e5a      	subs	r2, r3, #1
 8004a28:	4193      	sbcs	r3, r2
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	e013      	b.n	8004a56 <HAL_TIM_PWM_Start+0x92>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b10      	cmp	r3, #16
 8004a32:	d108      	bne.n	8004a46 <HAL_TIM_PWM_Start+0x82>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2242      	movs	r2, #66	; 0x42
 8004a38:	5c9b      	ldrb	r3, [r3, r2]
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	1e5a      	subs	r2, r3, #1
 8004a40:	4193      	sbcs	r3, r2
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	e007      	b.n	8004a56 <HAL_TIM_PWM_Start+0x92>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2243      	movs	r2, #67	; 0x43
 8004a4a:	5c9b      	ldrb	r3, [r3, r2]
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	1e5a      	subs	r2, r3, #1
 8004a52:	4193      	sbcs	r3, r2
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e07b      	b.n	8004b56 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d104      	bne.n	8004a6e <HAL_TIM_PWM_Start+0xaa>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	223e      	movs	r2, #62	; 0x3e
 8004a68:	2102      	movs	r1, #2
 8004a6a:	5499      	strb	r1, [r3, r2]
 8004a6c:	e023      	b.n	8004ab6 <HAL_TIM_PWM_Start+0xf2>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d104      	bne.n	8004a7e <HAL_TIM_PWM_Start+0xba>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	223f      	movs	r2, #63	; 0x3f
 8004a78:	2102      	movs	r1, #2
 8004a7a:	5499      	strb	r1, [r3, r2]
 8004a7c:	e01b      	b.n	8004ab6 <HAL_TIM_PWM_Start+0xf2>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d104      	bne.n	8004a8e <HAL_TIM_PWM_Start+0xca>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2240      	movs	r2, #64	; 0x40
 8004a88:	2102      	movs	r1, #2
 8004a8a:	5499      	strb	r1, [r3, r2]
 8004a8c:	e013      	b.n	8004ab6 <HAL_TIM_PWM_Start+0xf2>
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b0c      	cmp	r3, #12
 8004a92:	d104      	bne.n	8004a9e <HAL_TIM_PWM_Start+0xda>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2241      	movs	r2, #65	; 0x41
 8004a98:	2102      	movs	r1, #2
 8004a9a:	5499      	strb	r1, [r3, r2]
 8004a9c:	e00b      	b.n	8004ab6 <HAL_TIM_PWM_Start+0xf2>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b10      	cmp	r3, #16
 8004aa2:	d104      	bne.n	8004aae <HAL_TIM_PWM_Start+0xea>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2242      	movs	r2, #66	; 0x42
 8004aa8:	2102      	movs	r1, #2
 8004aaa:	5499      	strb	r1, [r3, r2]
 8004aac:	e003      	b.n	8004ab6 <HAL_TIM_PWM_Start+0xf2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2243      	movs	r2, #67	; 0x43
 8004ab2:	2102      	movs	r1, #2
 8004ab4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6839      	ldr	r1, [r7, #0]
 8004abc:	2201      	movs	r2, #1
 8004abe:	0018      	movs	r0, r3
 8004ac0:	f000 fdd2 	bl	8005668 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a25      	ldr	r2, [pc, #148]	; (8004b60 <HAL_TIM_PWM_Start+0x19c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d009      	beq.n	8004ae2 <HAL_TIM_PWM_Start+0x11e>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a24      	ldr	r2, [pc, #144]	; (8004b64 <HAL_TIM_PWM_Start+0x1a0>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d004      	beq.n	8004ae2 <HAL_TIM_PWM_Start+0x11e>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a22      	ldr	r2, [pc, #136]	; (8004b68 <HAL_TIM_PWM_Start+0x1a4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d101      	bne.n	8004ae6 <HAL_TIM_PWM_Start+0x122>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <HAL_TIM_PWM_Start+0x124>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d008      	beq.n	8004afe <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2180      	movs	r1, #128	; 0x80
 8004af8:	0209      	lsls	r1, r1, #8
 8004afa:	430a      	orrs	r2, r1
 8004afc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a17      	ldr	r2, [pc, #92]	; (8004b60 <HAL_TIM_PWM_Start+0x19c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d004      	beq.n	8004b12 <HAL_TIM_PWM_Start+0x14e>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a17      	ldr	r2, [pc, #92]	; (8004b6c <HAL_TIM_PWM_Start+0x1a8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d116      	bne.n	8004b40 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	4a15      	ldr	r2, [pc, #84]	; (8004b70 <HAL_TIM_PWM_Start+0x1ac>)
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2b06      	cmp	r3, #6
 8004b22:	d016      	beq.n	8004b52 <HAL_TIM_PWM_Start+0x18e>
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	2380      	movs	r3, #128	; 0x80
 8004b28:	025b      	lsls	r3, r3, #9
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d011      	beq.n	8004b52 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2101      	movs	r1, #1
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b3e:	e008      	b.n	8004b52 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	e000      	b.n	8004b54 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b52:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	0018      	movs	r0, r3
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	b004      	add	sp, #16
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	46c0      	nop			; (mov r8, r8)
 8004b60:	40012c00 	.word	0x40012c00
 8004b64:	40014400 	.word	0x40014400
 8004b68:	40014800 	.word	0x40014800
 8004b6c:	40000400 	.word	0x40000400
 8004b70:	00010007 	.word	0x00010007

08004b74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b80:	2317      	movs	r3, #23
 8004b82:	18fb      	adds	r3, r7, r3
 8004b84:	2200      	movs	r2, #0
 8004b86:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	223c      	movs	r2, #60	; 0x3c
 8004b8c:	5c9b      	ldrb	r3, [r3, r2]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004b92:	2302      	movs	r3, #2
 8004b94:	e0e5      	b.n	8004d62 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	223c      	movs	r2, #60	; 0x3c
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b14      	cmp	r3, #20
 8004ba2:	d900      	bls.n	8004ba6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004ba4:	e0d1      	b.n	8004d4a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	009a      	lsls	r2, r3, #2
 8004baa:	4b70      	ldr	r3, [pc, #448]	; (8004d6c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004bac:	18d3      	adds	r3, r2, r3
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	0011      	movs	r1, r2
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f000 fa1c 	bl	8004ff8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699a      	ldr	r2, [r3, #24]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2108      	movs	r1, #8
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699a      	ldr	r2, [r3, #24]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2104      	movs	r1, #4
 8004bdc:	438a      	bics	r2, r1
 8004bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6999      	ldr	r1, [r3, #24]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	691a      	ldr	r2, [r3, #16]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	619a      	str	r2, [r3, #24]
      break;
 8004bf2:	e0af      	b.n	8004d54 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	0011      	movs	r1, r2
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	f000 fa7b 	bl	80050f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	699a      	ldr	r2, [r3, #24]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2180      	movs	r1, #128	; 0x80
 8004c0e:	0109      	lsls	r1, r1, #4
 8004c10:	430a      	orrs	r2, r1
 8004c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699a      	ldr	r2, [r3, #24]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4954      	ldr	r1, [pc, #336]	; (8004d70 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004c20:	400a      	ands	r2, r1
 8004c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6999      	ldr	r1, [r3, #24]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	021a      	lsls	r2, r3, #8
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	430a      	orrs	r2, r1
 8004c36:	619a      	str	r2, [r3, #24]
      break;
 8004c38:	e08c      	b.n	8004d54 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	0011      	movs	r1, r2
 8004c42:	0018      	movs	r0, r3
 8004c44:	f000 fad6 	bl	80051f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	69da      	ldr	r2, [r3, #28]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2108      	movs	r1, #8
 8004c54:	430a      	orrs	r2, r1
 8004c56:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	69da      	ldr	r2, [r3, #28]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2104      	movs	r1, #4
 8004c64:	438a      	bics	r2, r1
 8004c66:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	69d9      	ldr	r1, [r3, #28]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	691a      	ldr	r2, [r3, #16]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	61da      	str	r2, [r3, #28]
      break;
 8004c7a:	e06b      	b.n	8004d54 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	0011      	movs	r1, r2
 8004c84:	0018      	movs	r0, r3
 8004c86:	f000 fb37 	bl	80052f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69da      	ldr	r2, [r3, #28]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2180      	movs	r1, #128	; 0x80
 8004c96:	0109      	lsls	r1, r1, #4
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	69da      	ldr	r2, [r3, #28]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4932      	ldr	r1, [pc, #200]	; (8004d70 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004ca8:	400a      	ands	r2, r1
 8004caa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	69d9      	ldr	r1, [r3, #28]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	021a      	lsls	r2, r3, #8
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	61da      	str	r2, [r3, #28]
      break;
 8004cc0:	e048      	b.n	8004d54 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	0011      	movs	r1, r2
 8004cca:	0018      	movs	r0, r3
 8004ccc:	f000 fb78 	bl	80053c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2108      	movs	r1, #8
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2104      	movs	r1, #4
 8004cec:	438a      	bics	r2, r1
 8004cee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	691a      	ldr	r2, [r3, #16]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d02:	e027      	b.n	8004d54 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	0011      	movs	r1, r2
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	f000 fbb1 	bl	8005474 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2180      	movs	r1, #128	; 0x80
 8004d1e:	0109      	lsls	r1, r1, #4
 8004d20:	430a      	orrs	r2, r1
 8004d22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4910      	ldr	r1, [pc, #64]	; (8004d70 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004d30:	400a      	ands	r2, r1
 8004d32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	021a      	lsls	r2, r3, #8
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d48:	e004      	b.n	8004d54 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004d4a:	2317      	movs	r3, #23
 8004d4c:	18fb      	adds	r3, r7, r3
 8004d4e:	2201      	movs	r2, #1
 8004d50:	701a      	strb	r2, [r3, #0]
      break;
 8004d52:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	223c      	movs	r2, #60	; 0x3c
 8004d58:	2100      	movs	r1, #0
 8004d5a:	5499      	strb	r1, [r3, r2]

  return status;
 8004d5c:	2317      	movs	r3, #23
 8004d5e:	18fb      	adds	r3, r7, r3
 8004d60:	781b      	ldrb	r3, [r3, #0]
}
 8004d62:	0018      	movs	r0, r3
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b006      	add	sp, #24
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	080060c8 	.word	0x080060c8
 8004d70:	fffffbff 	.word	0xfffffbff

08004d74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d7e:	230f      	movs	r3, #15
 8004d80:	18fb      	adds	r3, r7, r3
 8004d82:	2200      	movs	r2, #0
 8004d84:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	223c      	movs	r2, #60	; 0x3c
 8004d8a:	5c9b      	ldrb	r3, [r3, r2]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_TIM_ConfigClockSource+0x20>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e0bc      	b.n	8004f0e <HAL_TIM_ConfigClockSource+0x19a>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	223c      	movs	r2, #60	; 0x3c
 8004d98:	2101      	movs	r1, #1
 8004d9a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	223d      	movs	r2, #61	; 0x3d
 8004da0:	2102      	movs	r1, #2
 8004da2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	4a5a      	ldr	r2, [pc, #360]	; (8004f18 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004db0:	4013      	ands	r3, r2
 8004db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	4a59      	ldr	r2, [pc, #356]	; (8004f1c <HAL_TIM_ConfigClockSource+0x1a8>)
 8004db8:	4013      	ands	r3, r2
 8004dba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2280      	movs	r2, #128	; 0x80
 8004dca:	0192      	lsls	r2, r2, #6
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d040      	beq.n	8004e52 <HAL_TIM_ConfigClockSource+0xde>
 8004dd0:	2280      	movs	r2, #128	; 0x80
 8004dd2:	0192      	lsls	r2, r2, #6
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d900      	bls.n	8004dda <HAL_TIM_ConfigClockSource+0x66>
 8004dd8:	e088      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x178>
 8004dda:	2280      	movs	r2, #128	; 0x80
 8004ddc:	0152      	lsls	r2, r2, #5
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d100      	bne.n	8004de4 <HAL_TIM_ConfigClockSource+0x70>
 8004de2:	e088      	b.n	8004ef6 <HAL_TIM_ConfigClockSource+0x182>
 8004de4:	2280      	movs	r2, #128	; 0x80
 8004de6:	0152      	lsls	r2, r2, #5
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d900      	bls.n	8004dee <HAL_TIM_ConfigClockSource+0x7a>
 8004dec:	e07e      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x178>
 8004dee:	2b70      	cmp	r3, #112	; 0x70
 8004df0:	d018      	beq.n	8004e24 <HAL_TIM_ConfigClockSource+0xb0>
 8004df2:	d900      	bls.n	8004df6 <HAL_TIM_ConfigClockSource+0x82>
 8004df4:	e07a      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x178>
 8004df6:	2b60      	cmp	r3, #96	; 0x60
 8004df8:	d04f      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0x126>
 8004dfa:	d900      	bls.n	8004dfe <HAL_TIM_ConfigClockSource+0x8a>
 8004dfc:	e076      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x178>
 8004dfe:	2b50      	cmp	r3, #80	; 0x50
 8004e00:	d03b      	beq.n	8004e7a <HAL_TIM_ConfigClockSource+0x106>
 8004e02:	d900      	bls.n	8004e06 <HAL_TIM_ConfigClockSource+0x92>
 8004e04:	e072      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x178>
 8004e06:	2b40      	cmp	r3, #64	; 0x40
 8004e08:	d057      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x146>
 8004e0a:	d900      	bls.n	8004e0e <HAL_TIM_ConfigClockSource+0x9a>
 8004e0c:	e06e      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x178>
 8004e0e:	2b30      	cmp	r3, #48	; 0x30
 8004e10:	d063      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x166>
 8004e12:	d86b      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x178>
 8004e14:	2b20      	cmp	r3, #32
 8004e16:	d060      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x166>
 8004e18:	d868      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x178>
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d05d      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x166>
 8004e1e:	2b10      	cmp	r3, #16
 8004e20:	d05b      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x166>
 8004e22:	e063      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e34:	f000 fbf8 	bl	8005628 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2277      	movs	r2, #119	; 0x77
 8004e44:	4313      	orrs	r3, r2
 8004e46:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	609a      	str	r2, [r3, #8]
      break;
 8004e50:	e052      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e62:	f000 fbe1 	bl	8005628 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2180      	movs	r1, #128	; 0x80
 8004e72:	01c9      	lsls	r1, r1, #7
 8004e74:	430a      	orrs	r2, r1
 8004e76:	609a      	str	r2, [r3, #8]
      break;
 8004e78:	e03e      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e86:	001a      	movs	r2, r3
 8004e88:	f000 fb52 	bl	8005530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2150      	movs	r1, #80	; 0x50
 8004e92:	0018      	movs	r0, r3
 8004e94:	f000 fbac 	bl	80055f0 <TIM_ITRx_SetConfig>
      break;
 8004e98:	e02e      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ea6:	001a      	movs	r2, r3
 8004ea8:	f000 fb70 	bl	800558c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2160      	movs	r1, #96	; 0x60
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	f000 fb9c 	bl	80055f0 <TIM_ITRx_SetConfig>
      break;
 8004eb8:	e01e      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec6:	001a      	movs	r2, r3
 8004ec8:	f000 fb32 	bl	8005530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2140      	movs	r1, #64	; 0x40
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	f000 fb8c 	bl	80055f0 <TIM_ITRx_SetConfig>
      break;
 8004ed8:	e00e      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	0019      	movs	r1, r3
 8004ee4:	0010      	movs	r0, r2
 8004ee6:	f000 fb83 	bl	80055f0 <TIM_ITRx_SetConfig>
      break;
 8004eea:	e005      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004eec:	230f      	movs	r3, #15
 8004eee:	18fb      	adds	r3, r7, r3
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	701a      	strb	r2, [r3, #0]
      break;
 8004ef4:	e000      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004ef6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	223d      	movs	r2, #61	; 0x3d
 8004efc:	2101      	movs	r1, #1
 8004efe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	223c      	movs	r2, #60	; 0x3c
 8004f04:	2100      	movs	r1, #0
 8004f06:	5499      	strb	r1, [r3, r2]

  return status;
 8004f08:	230f      	movs	r3, #15
 8004f0a:	18fb      	adds	r3, r7, r3
 8004f0c:	781b      	ldrb	r3, [r3, #0]
}
 8004f0e:	0018      	movs	r0, r3
 8004f10:	46bd      	mov	sp, r7
 8004f12:	b004      	add	sp, #16
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	46c0      	nop			; (mov r8, r8)
 8004f18:	ffceff88 	.word	0xffceff88
 8004f1c:	ffff00ff 	.word	0xffff00ff

08004f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a2b      	ldr	r2, [pc, #172]	; (8004fe0 <TIM_Base_SetConfig+0xc0>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_Base_SetConfig+0x20>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a2a      	ldr	r2, [pc, #168]	; (8004fe4 <TIM_Base_SetConfig+0xc4>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d108      	bne.n	8004f52 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2270      	movs	r2, #112	; 0x70
 8004f44:	4393      	bics	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a22      	ldr	r2, [pc, #136]	; (8004fe0 <TIM_Base_SetConfig+0xc0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00f      	beq.n	8004f7a <TIM_Base_SetConfig+0x5a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a21      	ldr	r2, [pc, #132]	; (8004fe4 <TIM_Base_SetConfig+0xc4>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00b      	beq.n	8004f7a <TIM_Base_SetConfig+0x5a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a20      	ldr	r2, [pc, #128]	; (8004fe8 <TIM_Base_SetConfig+0xc8>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d007      	beq.n	8004f7a <TIM_Base_SetConfig+0x5a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a1f      	ldr	r2, [pc, #124]	; (8004fec <TIM_Base_SetConfig+0xcc>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d003      	beq.n	8004f7a <TIM_Base_SetConfig+0x5a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a1e      	ldr	r2, [pc, #120]	; (8004ff0 <TIM_Base_SetConfig+0xd0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d108      	bne.n	8004f8c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	4a1d      	ldr	r2, [pc, #116]	; (8004ff4 <TIM_Base_SetConfig+0xd4>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2280      	movs	r2, #128	; 0x80
 8004f90:	4393      	bics	r3, r2
 8004f92:	001a      	movs	r2, r3
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a0a      	ldr	r2, [pc, #40]	; (8004fe0 <TIM_Base_SetConfig+0xc0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d007      	beq.n	8004fca <TIM_Base_SetConfig+0xaa>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a0b      	ldr	r2, [pc, #44]	; (8004fec <TIM_Base_SetConfig+0xcc>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d003      	beq.n	8004fca <TIM_Base_SetConfig+0xaa>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a0a      	ldr	r2, [pc, #40]	; (8004ff0 <TIM_Base_SetConfig+0xd0>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d103      	bne.n	8004fd2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	691a      	ldr	r2, [r3, #16]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	615a      	str	r2, [r3, #20]
}
 8004fd8:	46c0      	nop			; (mov r8, r8)
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	b004      	add	sp, #16
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40012c00 	.word	0x40012c00
 8004fe4:	40000400 	.word	0x40000400
 8004fe8:	40002000 	.word	0x40002000
 8004fec:	40014400 	.word	0x40014400
 8004ff0:	40014800 	.word	0x40014800
 8004ff4:	fffffcff 	.word	0xfffffcff

08004ff8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	2201      	movs	r2, #1
 800500e:	4393      	bics	r3, r2
 8005010:	001a      	movs	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4a2e      	ldr	r2, [pc, #184]	; (80050e0 <TIM_OC1_SetConfig+0xe8>)
 8005026:	4013      	ands	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2203      	movs	r2, #3
 800502e:	4393      	bics	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4313      	orrs	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	2202      	movs	r2, #2
 8005040:	4393      	bics	r3, r2
 8005042:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	4313      	orrs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a24      	ldr	r2, [pc, #144]	; (80050e4 <TIM_OC1_SetConfig+0xec>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d007      	beq.n	8005066 <TIM_OC1_SetConfig+0x6e>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a23      	ldr	r2, [pc, #140]	; (80050e8 <TIM_OC1_SetConfig+0xf0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d003      	beq.n	8005066 <TIM_OC1_SetConfig+0x6e>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a22      	ldr	r2, [pc, #136]	; (80050ec <TIM_OC1_SetConfig+0xf4>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d10c      	bne.n	8005080 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2208      	movs	r2, #8
 800506a:	4393      	bics	r3, r2
 800506c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	4313      	orrs	r3, r2
 8005076:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2204      	movs	r2, #4
 800507c:	4393      	bics	r3, r2
 800507e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a18      	ldr	r2, [pc, #96]	; (80050e4 <TIM_OC1_SetConfig+0xec>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d007      	beq.n	8005098 <TIM_OC1_SetConfig+0xa0>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a17      	ldr	r2, [pc, #92]	; (80050e8 <TIM_OC1_SetConfig+0xf0>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d003      	beq.n	8005098 <TIM_OC1_SetConfig+0xa0>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a16      	ldr	r2, [pc, #88]	; (80050ec <TIM_OC1_SetConfig+0xf4>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d111      	bne.n	80050bc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	4a15      	ldr	r2, [pc, #84]	; (80050f0 <TIM_OC1_SetConfig+0xf8>)
 800509c:	4013      	ands	r3, r2
 800509e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	4a14      	ldr	r2, [pc, #80]	; (80050f4 <TIM_OC1_SetConfig+0xfc>)
 80050a4:	4013      	ands	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	621a      	str	r2, [r3, #32]
}
 80050d6:	46c0      	nop			; (mov r8, r8)
 80050d8:	46bd      	mov	sp, r7
 80050da:	b006      	add	sp, #24
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	fffeff8f 	.word	0xfffeff8f
 80050e4:	40012c00 	.word	0x40012c00
 80050e8:	40014400 	.word	0x40014400
 80050ec:	40014800 	.word	0x40014800
 80050f0:	fffffeff 	.word	0xfffffeff
 80050f4:	fffffdff 	.word	0xfffffdff

080050f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	2210      	movs	r2, #16
 800510e:	4393      	bics	r3, r2
 8005110:	001a      	movs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4a2c      	ldr	r2, [pc, #176]	; (80051d8 <TIM_OC2_SetConfig+0xe0>)
 8005126:	4013      	ands	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4a2b      	ldr	r2, [pc, #172]	; (80051dc <TIM_OC2_SetConfig+0xe4>)
 800512e:	4013      	ands	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	021b      	lsls	r3, r3, #8
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2220      	movs	r2, #32
 8005142:	4393      	bics	r3, r2
 8005144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	4313      	orrs	r3, r2
 8005150:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a22      	ldr	r2, [pc, #136]	; (80051e0 <TIM_OC2_SetConfig+0xe8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d10d      	bne.n	8005176 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2280      	movs	r2, #128	; 0x80
 800515e:	4393      	bics	r3, r2
 8005160:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2240      	movs	r2, #64	; 0x40
 8005172:	4393      	bics	r3, r2
 8005174:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a19      	ldr	r2, [pc, #100]	; (80051e0 <TIM_OC2_SetConfig+0xe8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d007      	beq.n	800518e <TIM_OC2_SetConfig+0x96>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a18      	ldr	r2, [pc, #96]	; (80051e4 <TIM_OC2_SetConfig+0xec>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d003      	beq.n	800518e <TIM_OC2_SetConfig+0x96>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a17      	ldr	r2, [pc, #92]	; (80051e8 <TIM_OC2_SetConfig+0xf0>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d113      	bne.n	80051b6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	4a16      	ldr	r2, [pc, #88]	; (80051ec <TIM_OC2_SetConfig+0xf4>)
 8005192:	4013      	ands	r3, r2
 8005194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	4a15      	ldr	r2, [pc, #84]	; (80051f0 <TIM_OC2_SetConfig+0xf8>)
 800519a:	4013      	ands	r3, r2
 800519c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	621a      	str	r2, [r3, #32]
}
 80051d0:	46c0      	nop			; (mov r8, r8)
 80051d2:	46bd      	mov	sp, r7
 80051d4:	b006      	add	sp, #24
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	feff8fff 	.word	0xfeff8fff
 80051dc:	fffffcff 	.word	0xfffffcff
 80051e0:	40012c00 	.word	0x40012c00
 80051e4:	40014400 	.word	0x40014400
 80051e8:	40014800 	.word	0x40014800
 80051ec:	fffffbff 	.word	0xfffffbff
 80051f0:	fffff7ff 	.word	0xfffff7ff

080051f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	4a31      	ldr	r2, [pc, #196]	; (80052d0 <TIM_OC3_SetConfig+0xdc>)
 800520a:	401a      	ands	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4a2d      	ldr	r2, [pc, #180]	; (80052d4 <TIM_OC3_SetConfig+0xe0>)
 8005220:	4013      	ands	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2203      	movs	r2, #3
 8005228:	4393      	bics	r3, r2
 800522a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	4a27      	ldr	r2, [pc, #156]	; (80052d8 <TIM_OC3_SetConfig+0xe4>)
 800523a:	4013      	ands	r3, r2
 800523c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	021b      	lsls	r3, r3, #8
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	4313      	orrs	r3, r2
 8005248:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a23      	ldr	r2, [pc, #140]	; (80052dc <TIM_OC3_SetConfig+0xe8>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d10d      	bne.n	800526e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	4a22      	ldr	r2, [pc, #136]	; (80052e0 <TIM_OC3_SetConfig+0xec>)
 8005256:	4013      	ands	r3, r2
 8005258:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	021b      	lsls	r3, r3, #8
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	4a1e      	ldr	r2, [pc, #120]	; (80052e4 <TIM_OC3_SetConfig+0xf0>)
 800526a:	4013      	ands	r3, r2
 800526c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a1a      	ldr	r2, [pc, #104]	; (80052dc <TIM_OC3_SetConfig+0xe8>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d007      	beq.n	8005286 <TIM_OC3_SetConfig+0x92>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a1b      	ldr	r2, [pc, #108]	; (80052e8 <TIM_OC3_SetConfig+0xf4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d003      	beq.n	8005286 <TIM_OC3_SetConfig+0x92>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a1a      	ldr	r2, [pc, #104]	; (80052ec <TIM_OC3_SetConfig+0xf8>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d113      	bne.n	80052ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	4a19      	ldr	r2, [pc, #100]	; (80052f0 <TIM_OC3_SetConfig+0xfc>)
 800528a:	4013      	ands	r3, r2
 800528c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	4a18      	ldr	r2, [pc, #96]	; (80052f4 <TIM_OC3_SetConfig+0x100>)
 8005292:	4013      	ands	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	011b      	lsls	r3, r3, #4
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	011b      	lsls	r3, r3, #4
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	621a      	str	r2, [r3, #32]
}
 80052c8:	46c0      	nop			; (mov r8, r8)
 80052ca:	46bd      	mov	sp, r7
 80052cc:	b006      	add	sp, #24
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	fffffeff 	.word	0xfffffeff
 80052d4:	fffeff8f 	.word	0xfffeff8f
 80052d8:	fffffdff 	.word	0xfffffdff
 80052dc:	40012c00 	.word	0x40012c00
 80052e0:	fffff7ff 	.word	0xfffff7ff
 80052e4:	fffffbff 	.word	0xfffffbff
 80052e8:	40014400 	.word	0x40014400
 80052ec:	40014800 	.word	0x40014800
 80052f0:	ffffefff 	.word	0xffffefff
 80052f4:	ffffdfff 	.word	0xffffdfff

080052f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	4a24      	ldr	r2, [pc, #144]	; (80053a0 <TIM_OC4_SetConfig+0xa8>)
 800530e:	401a      	ands	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4a20      	ldr	r2, [pc, #128]	; (80053a4 <TIM_OC4_SetConfig+0xac>)
 8005324:	4013      	ands	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4a1f      	ldr	r2, [pc, #124]	; (80053a8 <TIM_OC4_SetConfig+0xb0>)
 800532c:	4013      	ands	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	021b      	lsls	r3, r3, #8
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	4313      	orrs	r3, r2
 800533a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	4a1b      	ldr	r2, [pc, #108]	; (80053ac <TIM_OC4_SetConfig+0xb4>)
 8005340:	4013      	ands	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	031b      	lsls	r3, r3, #12
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a17      	ldr	r2, [pc, #92]	; (80053b0 <TIM_OC4_SetConfig+0xb8>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d007      	beq.n	8005368 <TIM_OC4_SetConfig+0x70>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a16      	ldr	r2, [pc, #88]	; (80053b4 <TIM_OC4_SetConfig+0xbc>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d003      	beq.n	8005368 <TIM_OC4_SetConfig+0x70>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a15      	ldr	r2, [pc, #84]	; (80053b8 <TIM_OC4_SetConfig+0xc0>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d109      	bne.n	800537c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	4a14      	ldr	r2, [pc, #80]	; (80053bc <TIM_OC4_SetConfig+0xc4>)
 800536c:	4013      	ands	r3, r2
 800536e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	019b      	lsls	r3, r3, #6
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	4313      	orrs	r3, r2
 800537a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	621a      	str	r2, [r3, #32]
}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	46bd      	mov	sp, r7
 800539a:	b006      	add	sp, #24
 800539c:	bd80      	pop	{r7, pc}
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	ffffefff 	.word	0xffffefff
 80053a4:	feff8fff 	.word	0xfeff8fff
 80053a8:	fffffcff 	.word	0xfffffcff
 80053ac:	ffffdfff 	.word	0xffffdfff
 80053b0:	40012c00 	.word	0x40012c00
 80053b4:	40014400 	.word	0x40014400
 80053b8:	40014800 	.word	0x40014800
 80053bc:	ffffbfff 	.word	0xffffbfff

080053c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	4a21      	ldr	r2, [pc, #132]	; (800545c <TIM_OC5_SetConfig+0x9c>)
 80053d6:	401a      	ands	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4a1d      	ldr	r2, [pc, #116]	; (8005460 <TIM_OC5_SetConfig+0xa0>)
 80053ec:	4013      	ands	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	4a19      	ldr	r2, [pc, #100]	; (8005464 <TIM_OC5_SetConfig+0xa4>)
 80053fe:	4013      	ands	r3, r2
 8005400:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	041b      	lsls	r3, r3, #16
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	4313      	orrs	r3, r2
 800540c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a15      	ldr	r2, [pc, #84]	; (8005468 <TIM_OC5_SetConfig+0xa8>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d007      	beq.n	8005426 <TIM_OC5_SetConfig+0x66>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a14      	ldr	r2, [pc, #80]	; (800546c <TIM_OC5_SetConfig+0xac>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d003      	beq.n	8005426 <TIM_OC5_SetConfig+0x66>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a13      	ldr	r2, [pc, #76]	; (8005470 <TIM_OC5_SetConfig+0xb0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d109      	bne.n	800543a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	4a0c      	ldr	r2, [pc, #48]	; (800545c <TIM_OC5_SetConfig+0x9c>)
 800542a:	4013      	ands	r3, r2
 800542c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	021b      	lsls	r3, r3, #8
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	4313      	orrs	r3, r2
 8005438:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	621a      	str	r2, [r3, #32]
}
 8005454:	46c0      	nop			; (mov r8, r8)
 8005456:	46bd      	mov	sp, r7
 8005458:	b006      	add	sp, #24
 800545a:	bd80      	pop	{r7, pc}
 800545c:	fffeffff 	.word	0xfffeffff
 8005460:	fffeff8f 	.word	0xfffeff8f
 8005464:	fffdffff 	.word	0xfffdffff
 8005468:	40012c00 	.word	0x40012c00
 800546c:	40014400 	.word	0x40014400
 8005470:	40014800 	.word	0x40014800

08005474 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	4a22      	ldr	r2, [pc, #136]	; (8005514 <TIM_OC6_SetConfig+0xa0>)
 800548a:	401a      	ands	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4a1e      	ldr	r2, [pc, #120]	; (8005518 <TIM_OC6_SetConfig+0xa4>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	021b      	lsls	r3, r3, #8
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	4a1a      	ldr	r2, [pc, #104]	; (800551c <TIM_OC6_SetConfig+0xa8>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	051b      	lsls	r3, r3, #20
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a16      	ldr	r2, [pc, #88]	; (8005520 <TIM_OC6_SetConfig+0xac>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d007      	beq.n	80054dc <TIM_OC6_SetConfig+0x68>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a15      	ldr	r2, [pc, #84]	; (8005524 <TIM_OC6_SetConfig+0xb0>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <TIM_OC6_SetConfig+0x68>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a14      	ldr	r2, [pc, #80]	; (8005528 <TIM_OC6_SetConfig+0xb4>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d109      	bne.n	80054f0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	4a13      	ldr	r2, [pc, #76]	; (800552c <TIM_OC6_SetConfig+0xb8>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	029b      	lsls	r3, r3, #10
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	621a      	str	r2, [r3, #32]
}
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	46bd      	mov	sp, r7
 800550e:	b006      	add	sp, #24
 8005510:	bd80      	pop	{r7, pc}
 8005512:	46c0      	nop			; (mov r8, r8)
 8005514:	ffefffff 	.word	0xffefffff
 8005518:	feff8fff 	.word	0xfeff8fff
 800551c:	ffdfffff 	.word	0xffdfffff
 8005520:	40012c00 	.word	0x40012c00
 8005524:	40014400 	.word	0x40014400
 8005528:	40014800 	.word	0x40014800
 800552c:	fffbffff 	.word	0xfffbffff

08005530 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	2201      	movs	r2, #1
 8005548:	4393      	bics	r3, r2
 800554a:	001a      	movs	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	22f0      	movs	r2, #240	; 0xf0
 800555a:	4393      	bics	r3, r2
 800555c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	011b      	lsls	r3, r3, #4
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	220a      	movs	r2, #10
 800556c:	4393      	bics	r3, r2
 800556e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	4313      	orrs	r3, r2
 8005576:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	621a      	str	r2, [r3, #32]
}
 8005584:	46c0      	nop			; (mov r8, r8)
 8005586:	46bd      	mov	sp, r7
 8005588:	b006      	add	sp, #24
 800558a:	bd80      	pop	{r7, pc}

0800558c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	2210      	movs	r2, #16
 80055a4:	4393      	bics	r3, r2
 80055a6:	001a      	movs	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	4a0d      	ldr	r2, [pc, #52]	; (80055ec <TIM_TI2_ConfigInputStage+0x60>)
 80055b6:	4013      	ands	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	031b      	lsls	r3, r3, #12
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	22a0      	movs	r2, #160	; 0xa0
 80055c8:	4393      	bics	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	621a      	str	r2, [r3, #32]
}
 80055e2:	46c0      	nop			; (mov r8, r8)
 80055e4:	46bd      	mov	sp, r7
 80055e6:	b006      	add	sp, #24
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	46c0      	nop			; (mov r8, r8)
 80055ec:	ffff0fff 	.word	0xffff0fff

080055f0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4a08      	ldr	r2, [pc, #32]	; (8005624 <TIM_ITRx_SetConfig+0x34>)
 8005604:	4013      	ands	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4313      	orrs	r3, r2
 800560e:	2207      	movs	r2, #7
 8005610:	4313      	orrs	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	609a      	str	r2, [r3, #8]
}
 800561a:	46c0      	nop			; (mov r8, r8)
 800561c:	46bd      	mov	sp, r7
 800561e:	b004      	add	sp, #16
 8005620:	bd80      	pop	{r7, pc}
 8005622:	46c0      	nop			; (mov r8, r8)
 8005624:	ffcfff8f 	.word	0xffcfff8f

08005628 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	4a09      	ldr	r2, [pc, #36]	; (8005664 <TIM_ETR_SetConfig+0x3c>)
 8005640:	4013      	ands	r3, r2
 8005642:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	021a      	lsls	r2, r3, #8
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	431a      	orrs	r2, r3
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	4313      	orrs	r3, r2
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	4313      	orrs	r3, r2
 8005654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	609a      	str	r2, [r3, #8]
}
 800565c:	46c0      	nop			; (mov r8, r8)
 800565e:	46bd      	mov	sp, r7
 8005660:	b006      	add	sp, #24
 8005662:	bd80      	pop	{r7, pc}
 8005664:	ffff00ff 	.word	0xffff00ff

08005668 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	221f      	movs	r2, #31
 8005678:	4013      	ands	r3, r2
 800567a:	2201      	movs	r2, #1
 800567c:	409a      	lsls	r2, r3
 800567e:	0013      	movs	r3, r2
 8005680:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	43d2      	mvns	r2, r2
 800568a:	401a      	ands	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6a1a      	ldr	r2, [r3, #32]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	211f      	movs	r1, #31
 8005698:	400b      	ands	r3, r1
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	4099      	lsls	r1, r3
 800569e:	000b      	movs	r3, r1
 80056a0:	431a      	orrs	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	621a      	str	r2, [r3, #32]
}
 80056a6:	46c0      	nop			; (mov r8, r8)
 80056a8:	46bd      	mov	sp, r7
 80056aa:	b006      	add	sp, #24
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	223c      	movs	r2, #60	; 0x3c
 80056be:	5c9b      	ldrb	r3, [r3, r2]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d101      	bne.n	80056c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056c4:	2302      	movs	r3, #2
 80056c6:	e04a      	b.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	223c      	movs	r2, #60	; 0x3c
 80056cc:	2101      	movs	r1, #1
 80056ce:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	223d      	movs	r2, #61	; 0x3d
 80056d4:	2102      	movs	r1, #2
 80056d6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a1e      	ldr	r2, [pc, #120]	; (8005768 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d108      	bne.n	8005704 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4a1d      	ldr	r2, [pc, #116]	; (800576c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	4313      	orrs	r3, r2
 8005702:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2270      	movs	r2, #112	; 0x70
 8005708:	4393      	bics	r3, r2
 800570a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a11      	ldr	r2, [pc, #68]	; (8005768 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d004      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a10      	ldr	r2, [pc, #64]	; (8005770 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d10c      	bne.n	800574c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2280      	movs	r2, #128	; 0x80
 8005736:	4393      	bics	r3, r2
 8005738:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	4313      	orrs	r3, r2
 8005742:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	223d      	movs	r2, #61	; 0x3d
 8005750:	2101      	movs	r1, #1
 8005752:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	223c      	movs	r2, #60	; 0x3c
 8005758:	2100      	movs	r1, #0
 800575a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	0018      	movs	r0, r3
 8005760:	46bd      	mov	sp, r7
 8005762:	b004      	add	sp, #16
 8005764:	bd80      	pop	{r7, pc}
 8005766:	46c0      	nop			; (mov r8, r8)
 8005768:	40012c00 	.word	0x40012c00
 800576c:	ff0fffff 	.word	0xff0fffff
 8005770:	40000400 	.word	0x40000400

08005774 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e046      	b.n	8005814 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2288      	movs	r2, #136	; 0x88
 800578a:	589b      	ldr	r3, [r3, r2]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d107      	bne.n	80057a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2284      	movs	r2, #132	; 0x84
 8005794:	2100      	movs	r1, #0
 8005796:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	0018      	movs	r0, r3
 800579c:	f7fc fac8 	bl	8001d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2288      	movs	r2, #136	; 0x88
 80057a4:	2124      	movs	r1, #36	; 0x24
 80057a6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2101      	movs	r1, #1
 80057b4:	438a      	bics	r2, r1
 80057b6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	0018      	movs	r0, r3
 80057c4:	f000 f9aa 	bl	8005b1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	0018      	movs	r0, r3
 80057cc:	f000 f828 	bl	8005820 <UART_SetConfig>
 80057d0:	0003      	movs	r3, r0
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d101      	bne.n	80057da <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e01c      	b.n	8005814 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	490d      	ldr	r1, [pc, #52]	; (800581c <HAL_UART_Init+0xa8>)
 80057e6:	400a      	ands	r2, r1
 80057e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	212a      	movs	r1, #42	; 0x2a
 80057f6:	438a      	bics	r2, r1
 80057f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2101      	movs	r1, #1
 8005806:	430a      	orrs	r2, r1
 8005808:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	0018      	movs	r0, r3
 800580e:	f000 fa39 	bl	8005c84 <UART_CheckIdleState>
 8005812:	0003      	movs	r3, r0
}
 8005814:	0018      	movs	r0, r3
 8005816:	46bd      	mov	sp, r7
 8005818:	b002      	add	sp, #8
 800581a:	bd80      	pop	{r7, pc}
 800581c:	ffffb7ff 	.word	0xffffb7ff

08005820 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005828:	231e      	movs	r3, #30
 800582a:	18fb      	adds	r3, r7, r3
 800582c:	2200      	movs	r2, #0
 800582e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	431a      	orrs	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	431a      	orrs	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	4313      	orrs	r3, r2
 8005846:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4aab      	ldr	r2, [pc, #684]	; (8005afc <UART_SetConfig+0x2dc>)
 8005850:	4013      	ands	r3, r2
 8005852:	0019      	movs	r1, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	430a      	orrs	r2, r1
 800585c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	4aa6      	ldr	r2, [pc, #664]	; (8005b00 <UART_SetConfig+0x2e0>)
 8005866:	4013      	ands	r3, r2
 8005868:	0019      	movs	r1, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	4313      	orrs	r3, r2
 8005884:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	4a9d      	ldr	r2, [pc, #628]	; (8005b04 <UART_SetConfig+0x2e4>)
 800588e:	4013      	ands	r3, r2
 8005890:	0019      	movs	r1, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	430a      	orrs	r2, r1
 800589a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a2:	220f      	movs	r2, #15
 80058a4:	4393      	bics	r3, r2
 80058a6:	0019      	movs	r1, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	430a      	orrs	r2, r1
 80058b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a93      	ldr	r2, [pc, #588]	; (8005b08 <UART_SetConfig+0x2e8>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d127      	bne.n	800590e <UART_SetConfig+0xee>
 80058be:	4b93      	ldr	r3, [pc, #588]	; (8005b0c <UART_SetConfig+0x2ec>)
 80058c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c2:	2203      	movs	r2, #3
 80058c4:	4013      	ands	r3, r2
 80058c6:	2b03      	cmp	r3, #3
 80058c8:	d017      	beq.n	80058fa <UART_SetConfig+0xda>
 80058ca:	d81b      	bhi.n	8005904 <UART_SetConfig+0xe4>
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d00a      	beq.n	80058e6 <UART_SetConfig+0xc6>
 80058d0:	d818      	bhi.n	8005904 <UART_SetConfig+0xe4>
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <UART_SetConfig+0xbc>
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d00a      	beq.n	80058f0 <UART_SetConfig+0xd0>
 80058da:	e013      	b.n	8005904 <UART_SetConfig+0xe4>
 80058dc:	231f      	movs	r3, #31
 80058de:	18fb      	adds	r3, r7, r3
 80058e0:	2200      	movs	r2, #0
 80058e2:	701a      	strb	r2, [r3, #0]
 80058e4:	e021      	b.n	800592a <UART_SetConfig+0x10a>
 80058e6:	231f      	movs	r3, #31
 80058e8:	18fb      	adds	r3, r7, r3
 80058ea:	2202      	movs	r2, #2
 80058ec:	701a      	strb	r2, [r3, #0]
 80058ee:	e01c      	b.n	800592a <UART_SetConfig+0x10a>
 80058f0:	231f      	movs	r3, #31
 80058f2:	18fb      	adds	r3, r7, r3
 80058f4:	2204      	movs	r2, #4
 80058f6:	701a      	strb	r2, [r3, #0]
 80058f8:	e017      	b.n	800592a <UART_SetConfig+0x10a>
 80058fa:	231f      	movs	r3, #31
 80058fc:	18fb      	adds	r3, r7, r3
 80058fe:	2208      	movs	r2, #8
 8005900:	701a      	strb	r2, [r3, #0]
 8005902:	e012      	b.n	800592a <UART_SetConfig+0x10a>
 8005904:	231f      	movs	r3, #31
 8005906:	18fb      	adds	r3, r7, r3
 8005908:	2210      	movs	r2, #16
 800590a:	701a      	strb	r2, [r3, #0]
 800590c:	e00d      	b.n	800592a <UART_SetConfig+0x10a>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a7f      	ldr	r2, [pc, #508]	; (8005b10 <UART_SetConfig+0x2f0>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d104      	bne.n	8005922 <UART_SetConfig+0x102>
 8005918:	231f      	movs	r3, #31
 800591a:	18fb      	adds	r3, r7, r3
 800591c:	2200      	movs	r2, #0
 800591e:	701a      	strb	r2, [r3, #0]
 8005920:	e003      	b.n	800592a <UART_SetConfig+0x10a>
 8005922:	231f      	movs	r3, #31
 8005924:	18fb      	adds	r3, r7, r3
 8005926:	2210      	movs	r2, #16
 8005928:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	69da      	ldr	r2, [r3, #28]
 800592e:	2380      	movs	r3, #128	; 0x80
 8005930:	021b      	lsls	r3, r3, #8
 8005932:	429a      	cmp	r2, r3
 8005934:	d000      	beq.n	8005938 <UART_SetConfig+0x118>
 8005936:	e06f      	b.n	8005a18 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8005938:	231f      	movs	r3, #31
 800593a:	18fb      	adds	r3, r7, r3
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b08      	cmp	r3, #8
 8005940:	d01f      	beq.n	8005982 <UART_SetConfig+0x162>
 8005942:	dc22      	bgt.n	800598a <UART_SetConfig+0x16a>
 8005944:	2b04      	cmp	r3, #4
 8005946:	d017      	beq.n	8005978 <UART_SetConfig+0x158>
 8005948:	dc1f      	bgt.n	800598a <UART_SetConfig+0x16a>
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <UART_SetConfig+0x134>
 800594e:	2b02      	cmp	r3, #2
 8005950:	d005      	beq.n	800595e <UART_SetConfig+0x13e>
 8005952:	e01a      	b.n	800598a <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005954:	f7fe fe78 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 8005958:	0003      	movs	r3, r0
 800595a:	61bb      	str	r3, [r7, #24]
        break;
 800595c:	e01c      	b.n	8005998 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800595e:	4b6b      	ldr	r3, [pc, #428]	; (8005b0c <UART_SetConfig+0x2ec>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	095b      	lsrs	r3, r3, #5
 8005964:	2207      	movs	r2, #7
 8005966:	4013      	ands	r3, r2
 8005968:	3301      	adds	r3, #1
 800596a:	0019      	movs	r1, r3
 800596c:	4869      	ldr	r0, [pc, #420]	; (8005b14 <UART_SetConfig+0x2f4>)
 800596e:	f7fa fbcb 	bl	8000108 <__udivsi3>
 8005972:	0003      	movs	r3, r0
 8005974:	61bb      	str	r3, [r7, #24]
        break;
 8005976:	e00f      	b.n	8005998 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005978:	f7fe fe1c 	bl	80045b4 <HAL_RCC_GetSysClockFreq>
 800597c:	0003      	movs	r3, r0
 800597e:	61bb      	str	r3, [r7, #24]
        break;
 8005980:	e00a      	b.n	8005998 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005982:	2380      	movs	r3, #128	; 0x80
 8005984:	021b      	lsls	r3, r3, #8
 8005986:	61bb      	str	r3, [r7, #24]
        break;
 8005988:	e006      	b.n	8005998 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 800598a:	2300      	movs	r3, #0
 800598c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800598e:	231e      	movs	r3, #30
 8005990:	18fb      	adds	r3, r7, r3
 8005992:	2201      	movs	r2, #1
 8005994:	701a      	strb	r2, [r3, #0]
        break;
 8005996:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d100      	bne.n	80059a0 <UART_SetConfig+0x180>
 800599e:	e097      	b.n	8005ad0 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059a4:	4b5c      	ldr	r3, [pc, #368]	; (8005b18 <UART_SetConfig+0x2f8>)
 80059a6:	0052      	lsls	r2, r2, #1
 80059a8:	5ad3      	ldrh	r3, [r2, r3]
 80059aa:	0019      	movs	r1, r3
 80059ac:	69b8      	ldr	r0, [r7, #24]
 80059ae:	f7fa fbab 	bl	8000108 <__udivsi3>
 80059b2:	0003      	movs	r3, r0
 80059b4:	005a      	lsls	r2, r3, #1
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	085b      	lsrs	r3, r3, #1
 80059bc:	18d2      	adds	r2, r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	0019      	movs	r1, r3
 80059c4:	0010      	movs	r0, r2
 80059c6:	f7fa fb9f 	bl	8000108 <__udivsi3>
 80059ca:	0003      	movs	r3, r0
 80059cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	2b0f      	cmp	r3, #15
 80059d2:	d91c      	bls.n	8005a0e <UART_SetConfig+0x1ee>
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	2380      	movs	r3, #128	; 0x80
 80059d8:	025b      	lsls	r3, r3, #9
 80059da:	429a      	cmp	r2, r3
 80059dc:	d217      	bcs.n	8005a0e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	200e      	movs	r0, #14
 80059e4:	183b      	adds	r3, r7, r0
 80059e6:	210f      	movs	r1, #15
 80059e8:	438a      	bics	r2, r1
 80059ea:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	085b      	lsrs	r3, r3, #1
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2207      	movs	r2, #7
 80059f4:	4013      	ands	r3, r2
 80059f6:	b299      	uxth	r1, r3
 80059f8:	183b      	adds	r3, r7, r0
 80059fa:	183a      	adds	r2, r7, r0
 80059fc:	8812      	ldrh	r2, [r2, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	183a      	adds	r2, r7, r0
 8005a08:	8812      	ldrh	r2, [r2, #0]
 8005a0a:	60da      	str	r2, [r3, #12]
 8005a0c:	e060      	b.n	8005ad0 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8005a0e:	231e      	movs	r3, #30
 8005a10:	18fb      	adds	r3, r7, r3
 8005a12:	2201      	movs	r2, #1
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	e05b      	b.n	8005ad0 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a18:	231f      	movs	r3, #31
 8005a1a:	18fb      	adds	r3, r7, r3
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b08      	cmp	r3, #8
 8005a20:	d01f      	beq.n	8005a62 <UART_SetConfig+0x242>
 8005a22:	dc22      	bgt.n	8005a6a <UART_SetConfig+0x24a>
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d017      	beq.n	8005a58 <UART_SetConfig+0x238>
 8005a28:	dc1f      	bgt.n	8005a6a <UART_SetConfig+0x24a>
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <UART_SetConfig+0x214>
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d005      	beq.n	8005a3e <UART_SetConfig+0x21e>
 8005a32:	e01a      	b.n	8005a6a <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a34:	f7fe fe08 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 8005a38:	0003      	movs	r3, r0
 8005a3a:	61bb      	str	r3, [r7, #24]
        break;
 8005a3c:	e01c      	b.n	8005a78 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8005a3e:	4b33      	ldr	r3, [pc, #204]	; (8005b0c <UART_SetConfig+0x2ec>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	095b      	lsrs	r3, r3, #5
 8005a44:	2207      	movs	r2, #7
 8005a46:	4013      	ands	r3, r2
 8005a48:	3301      	adds	r3, #1
 8005a4a:	0019      	movs	r1, r3
 8005a4c:	4831      	ldr	r0, [pc, #196]	; (8005b14 <UART_SetConfig+0x2f4>)
 8005a4e:	f7fa fb5b 	bl	8000108 <__udivsi3>
 8005a52:	0003      	movs	r3, r0
 8005a54:	61bb      	str	r3, [r7, #24]
        break;
 8005a56:	e00f      	b.n	8005a78 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a58:	f7fe fdac 	bl	80045b4 <HAL_RCC_GetSysClockFreq>
 8005a5c:	0003      	movs	r3, r0
 8005a5e:	61bb      	str	r3, [r7, #24]
        break;
 8005a60:	e00a      	b.n	8005a78 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a62:	2380      	movs	r3, #128	; 0x80
 8005a64:	021b      	lsls	r3, r3, #8
 8005a66:	61bb      	str	r3, [r7, #24]
        break;
 8005a68:	e006      	b.n	8005a78 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a6e:	231e      	movs	r3, #30
 8005a70:	18fb      	adds	r3, r7, r3
 8005a72:	2201      	movs	r2, #1
 8005a74:	701a      	strb	r2, [r3, #0]
        break;
 8005a76:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d028      	beq.n	8005ad0 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a82:	4b25      	ldr	r3, [pc, #148]	; (8005b18 <UART_SetConfig+0x2f8>)
 8005a84:	0052      	lsls	r2, r2, #1
 8005a86:	5ad3      	ldrh	r3, [r2, r3]
 8005a88:	0019      	movs	r1, r3
 8005a8a:	69b8      	ldr	r0, [r7, #24]
 8005a8c:	f7fa fb3c 	bl	8000108 <__udivsi3>
 8005a90:	0003      	movs	r3, r0
 8005a92:	001a      	movs	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	085b      	lsrs	r3, r3, #1
 8005a9a:	18d2      	adds	r2, r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	0019      	movs	r1, r3
 8005aa2:	0010      	movs	r0, r2
 8005aa4:	f7fa fb30 	bl	8000108 <__udivsi3>
 8005aa8:	0003      	movs	r3, r0
 8005aaa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	2b0f      	cmp	r3, #15
 8005ab0:	d90a      	bls.n	8005ac8 <UART_SetConfig+0x2a8>
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	2380      	movs	r3, #128	; 0x80
 8005ab6:	025b      	lsls	r3, r3, #9
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d205      	bcs.n	8005ac8 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	60da      	str	r2, [r3, #12]
 8005ac6:	e003      	b.n	8005ad0 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8005ac8:	231e      	movs	r3, #30
 8005aca:	18fb      	adds	r3, r7, r3
 8005acc:	2201      	movs	r2, #1
 8005ace:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	226a      	movs	r2, #106	; 0x6a
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2268      	movs	r2, #104	; 0x68
 8005adc:	2101      	movs	r1, #1
 8005ade:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005aec:	231e      	movs	r3, #30
 8005aee:	18fb      	adds	r3, r7, r3
 8005af0:	781b      	ldrb	r3, [r3, #0]
}
 8005af2:	0018      	movs	r0, r3
 8005af4:	46bd      	mov	sp, r7
 8005af6:	b008      	add	sp, #32
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	46c0      	nop			; (mov r8, r8)
 8005afc:	cfff69f3 	.word	0xcfff69f3
 8005b00:	ffffcfff 	.word	0xffffcfff
 8005b04:	11fff4ff 	.word	0x11fff4ff
 8005b08:	40013800 	.word	0x40013800
 8005b0c:	40021000 	.word	0x40021000
 8005b10:	40004400 	.word	0x40004400
 8005b14:	02dc6c00 	.word	0x02dc6c00
 8005b18:	0800611c 	.word	0x0800611c

08005b1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b28:	2208      	movs	r2, #8
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	d00b      	beq.n	8005b46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	4a4a      	ldr	r2, [pc, #296]	; (8005c60 <UART_AdvFeatureConfig+0x144>)
 8005b36:	4013      	ands	r3, r2
 8005b38:	0019      	movs	r1, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	d00b      	beq.n	8005b68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	4a43      	ldr	r2, [pc, #268]	; (8005c64 <UART_AdvFeatureConfig+0x148>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	0019      	movs	r1, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	4013      	ands	r3, r2
 8005b70:	d00b      	beq.n	8005b8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	4a3b      	ldr	r2, [pc, #236]	; (8005c68 <UART_AdvFeatureConfig+0x14c>)
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	0019      	movs	r1, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8e:	2204      	movs	r2, #4
 8005b90:	4013      	ands	r3, r2
 8005b92:	d00b      	beq.n	8005bac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	4a34      	ldr	r2, [pc, #208]	; (8005c6c <UART_AdvFeatureConfig+0x150>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	0019      	movs	r1, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb0:	2210      	movs	r2, #16
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	d00b      	beq.n	8005bce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	4a2c      	ldr	r2, [pc, #176]	; (8005c70 <UART_AdvFeatureConfig+0x154>)
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	0019      	movs	r1, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	d00b      	beq.n	8005bf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	4a25      	ldr	r2, [pc, #148]	; (8005c74 <UART_AdvFeatureConfig+0x158>)
 8005be0:	4013      	ands	r3, r2
 8005be2:	0019      	movs	r1, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf4:	2240      	movs	r2, #64	; 0x40
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	d01d      	beq.n	8005c36 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	4a1d      	ldr	r2, [pc, #116]	; (8005c78 <UART_AdvFeatureConfig+0x15c>)
 8005c02:	4013      	ands	r3, r2
 8005c04:	0019      	movs	r1, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c16:	2380      	movs	r3, #128	; 0x80
 8005c18:	035b      	lsls	r3, r3, #13
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d10b      	bne.n	8005c36 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	4a15      	ldr	r2, [pc, #84]	; (8005c7c <UART_AdvFeatureConfig+0x160>)
 8005c26:	4013      	ands	r3, r2
 8005c28:	0019      	movs	r1, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3a:	2280      	movs	r2, #128	; 0x80
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	d00b      	beq.n	8005c58 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	4a0e      	ldr	r2, [pc, #56]	; (8005c80 <UART_AdvFeatureConfig+0x164>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	0019      	movs	r1, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	605a      	str	r2, [r3, #4]
  }
}
 8005c58:	46c0      	nop			; (mov r8, r8)
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	b002      	add	sp, #8
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	ffff7fff 	.word	0xffff7fff
 8005c64:	fffdffff 	.word	0xfffdffff
 8005c68:	fffeffff 	.word	0xfffeffff
 8005c6c:	fffbffff 	.word	0xfffbffff
 8005c70:	ffffefff 	.word	0xffffefff
 8005c74:	ffffdfff 	.word	0xffffdfff
 8005c78:	ffefffff 	.word	0xffefffff
 8005c7c:	ff9fffff 	.word	0xff9fffff
 8005c80:	fff7ffff 	.word	0xfff7ffff

08005c84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b092      	sub	sp, #72	; 0x48
 8005c88:	af02      	add	r7, sp, #8
 8005c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2290      	movs	r2, #144	; 0x90
 8005c90:	2100      	movs	r1, #0
 8005c92:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c94:	f7fc f978 	bl	8001f88 <HAL_GetTick>
 8005c98:	0003      	movs	r3, r0
 8005c9a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2208      	movs	r2, #8
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	2b08      	cmp	r3, #8
 8005ca8:	d12d      	bne.n	8005d06 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cac:	2280      	movs	r2, #128	; 0x80
 8005cae:	0391      	lsls	r1, r2, #14
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	4a47      	ldr	r2, [pc, #284]	; (8005dd0 <UART_CheckIdleState+0x14c>)
 8005cb4:	9200      	str	r2, [sp, #0]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f000 f88e 	bl	8005dd8 <UART_WaitOnFlagUntilTimeout>
 8005cbc:	1e03      	subs	r3, r0, #0
 8005cbe:	d022      	beq.n	8005d06 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005cc0:	f3ef 8310 	mrs	r3, PRIMASK
 8005cc4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005cc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cca:	2301      	movs	r3, #1
 8005ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd0:	f383 8810 	msr	PRIMASK, r3
}
 8005cd4:	46c0      	nop			; (mov r8, r8)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2180      	movs	r1, #128	; 0x80
 8005ce2:	438a      	bics	r2, r1
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cec:	f383 8810 	msr	PRIMASK, r3
}
 8005cf0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2288      	movs	r2, #136	; 0x88
 8005cf6:	2120      	movs	r1, #32
 8005cf8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2284      	movs	r2, #132	; 0x84
 8005cfe:	2100      	movs	r1, #0
 8005d00:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e060      	b.n	8005dc8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2204      	movs	r2, #4
 8005d0e:	4013      	ands	r3, r2
 8005d10:	2b04      	cmp	r3, #4
 8005d12:	d146      	bne.n	8005da2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d16:	2280      	movs	r2, #128	; 0x80
 8005d18:	03d1      	lsls	r1, r2, #15
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	4a2c      	ldr	r2, [pc, #176]	; (8005dd0 <UART_CheckIdleState+0x14c>)
 8005d1e:	9200      	str	r2, [sp, #0]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f000 f859 	bl	8005dd8 <UART_WaitOnFlagUntilTimeout>
 8005d26:	1e03      	subs	r3, r0, #0
 8005d28:	d03b      	beq.n	8005da2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d30:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d32:	637b      	str	r3, [r7, #52]	; 0x34
 8005d34:	2301      	movs	r3, #1
 8005d36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	f383 8810 	msr	PRIMASK, r3
}
 8005d3e:	46c0      	nop			; (mov r8, r8)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4922      	ldr	r1, [pc, #136]	; (8005dd4 <UART_CheckIdleState+0x150>)
 8005d4c:	400a      	ands	r2, r1
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	f383 8810 	msr	PRIMASK, r3
}
 8005d5a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005d5c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d60:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d62:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d64:	633b      	str	r3, [r7, #48]	; 0x30
 8005d66:	2301      	movs	r3, #1
 8005d68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	f383 8810 	msr	PRIMASK, r3
}
 8005d70:	46c0      	nop			; (mov r8, r8)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689a      	ldr	r2, [r3, #8]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	438a      	bics	r2, r1
 8005d80:	609a      	str	r2, [r3, #8]
 8005d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d84:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	f383 8810 	msr	PRIMASK, r3
}
 8005d8c:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	228c      	movs	r2, #140	; 0x8c
 8005d92:	2120      	movs	r1, #32
 8005d94:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2284      	movs	r2, #132	; 0x84
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e012      	b.n	8005dc8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2288      	movs	r2, #136	; 0x88
 8005da6:	2120      	movs	r1, #32
 8005da8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	228c      	movs	r2, #140	; 0x8c
 8005dae:	2120      	movs	r1, #32
 8005db0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2284      	movs	r2, #132	; 0x84
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	0018      	movs	r0, r3
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	b010      	add	sp, #64	; 0x40
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	01ffffff 	.word	0x01ffffff
 8005dd4:	fffffedf 	.word	0xfffffedf

08005dd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	603b      	str	r3, [r7, #0]
 8005de4:	1dfb      	adds	r3, r7, #7
 8005de6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005de8:	e04b      	b.n	8005e82 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	3301      	adds	r3, #1
 8005dee:	d048      	beq.n	8005e82 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005df0:	f7fc f8ca 	bl	8001f88 <HAL_GetTick>
 8005df4:	0002      	movs	r2, r0
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d302      	bcc.n	8005e06 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e04b      	b.n	8005ea2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2204      	movs	r2, #4
 8005e12:	4013      	ands	r3, r2
 8005e14:	d035      	beq.n	8005e82 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	2208      	movs	r2, #8
 8005e1e:	4013      	ands	r3, r2
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d111      	bne.n	8005e48 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2208      	movs	r2, #8
 8005e2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	0018      	movs	r0, r3
 8005e30:	f000 f83c 	bl	8005eac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2290      	movs	r2, #144	; 0x90
 8005e38:	2108      	movs	r1, #8
 8005e3a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2284      	movs	r2, #132	; 0x84
 8005e40:	2100      	movs	r1, #0
 8005e42:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e02c      	b.n	8005ea2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	69da      	ldr	r2, [r3, #28]
 8005e4e:	2380      	movs	r3, #128	; 0x80
 8005e50:	011b      	lsls	r3, r3, #4
 8005e52:	401a      	ands	r2, r3
 8005e54:	2380      	movs	r3, #128	; 0x80
 8005e56:	011b      	lsls	r3, r3, #4
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d112      	bne.n	8005e82 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2280      	movs	r2, #128	; 0x80
 8005e62:	0112      	lsls	r2, r2, #4
 8005e64:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	0018      	movs	r0, r3
 8005e6a:	f000 f81f 	bl	8005eac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2290      	movs	r2, #144	; 0x90
 8005e72:	2120      	movs	r1, #32
 8005e74:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2284      	movs	r2, #132	; 0x84
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e00f      	b.n	8005ea2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	425a      	negs	r2, r3
 8005e92:	4153      	adcs	r3, r2
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	001a      	movs	r2, r3
 8005e98:	1dfb      	adds	r3, r7, #7
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d0a4      	beq.n	8005dea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	0018      	movs	r0, r3
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	b004      	add	sp, #16
 8005ea8:	bd80      	pop	{r7, pc}
	...

08005eac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08e      	sub	sp, #56	; 0x38
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8005eb8:	617b      	str	r3, [r7, #20]
  return(result);
 8005eba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	f383 8810 	msr	PRIMASK, r3
}
 8005ec8:	46c0      	nop			; (mov r8, r8)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4926      	ldr	r1, [pc, #152]	; (8005f70 <UART_EndRxTransfer+0xc4>)
 8005ed6:	400a      	ands	r2, r1
 8005ed8:	601a      	str	r2, [r3, #0]
 8005eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005edc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	f383 8810 	msr	PRIMASK, r3
}
 8005ee4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8005eea:	623b      	str	r3, [r7, #32]
  return(result);
 8005eec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005eee:	633b      	str	r3, [r7, #48]	; 0x30
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	f383 8810 	msr	PRIMASK, r3
}
 8005efa:	46c0      	nop			; (mov r8, r8)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689a      	ldr	r2, [r3, #8]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	491b      	ldr	r1, [pc, #108]	; (8005f74 <UART_EndRxTransfer+0xc8>)
 8005f08:	400a      	ands	r2, r1
 8005f0a:	609a      	str	r2, [r3, #8]
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f12:	f383 8810 	msr	PRIMASK, r3
}
 8005f16:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d118      	bne.n	8005f52 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005f20:	f3ef 8310 	mrs	r3, PRIMASK
 8005f24:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f26:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f383 8810 	msr	PRIMASK, r3
}
 8005f34:	46c0      	nop			; (mov r8, r8)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2110      	movs	r1, #16
 8005f42:	438a      	bics	r2, r1
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	f383 8810 	msr	PRIMASK, r3
}
 8005f50:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	228c      	movs	r2, #140	; 0x8c
 8005f56:	2120      	movs	r1, #32
 8005f58:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005f66:	46c0      	nop			; (mov r8, r8)
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	b00e      	add	sp, #56	; 0x38
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	46c0      	nop			; (mov r8, r8)
 8005f70:	fffffedf 	.word	0xfffffedf
 8005f74:	effffffe 	.word	0xeffffffe

08005f78 <memset>:
 8005f78:	0003      	movs	r3, r0
 8005f7a:	1882      	adds	r2, r0, r2
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d100      	bne.n	8005f82 <memset+0xa>
 8005f80:	4770      	bx	lr
 8005f82:	7019      	strb	r1, [r3, #0]
 8005f84:	3301      	adds	r3, #1
 8005f86:	e7f9      	b.n	8005f7c <memset+0x4>

08005f88 <__libc_init_array>:
 8005f88:	b570      	push	{r4, r5, r6, lr}
 8005f8a:	2600      	movs	r6, #0
 8005f8c:	4c0c      	ldr	r4, [pc, #48]	; (8005fc0 <__libc_init_array+0x38>)
 8005f8e:	4d0d      	ldr	r5, [pc, #52]	; (8005fc4 <__libc_init_array+0x3c>)
 8005f90:	1b64      	subs	r4, r4, r5
 8005f92:	10a4      	asrs	r4, r4, #2
 8005f94:	42a6      	cmp	r6, r4
 8005f96:	d109      	bne.n	8005fac <__libc_init_array+0x24>
 8005f98:	2600      	movs	r6, #0
 8005f9a:	f000 f819 	bl	8005fd0 <_init>
 8005f9e:	4c0a      	ldr	r4, [pc, #40]	; (8005fc8 <__libc_init_array+0x40>)
 8005fa0:	4d0a      	ldr	r5, [pc, #40]	; (8005fcc <__libc_init_array+0x44>)
 8005fa2:	1b64      	subs	r4, r4, r5
 8005fa4:	10a4      	asrs	r4, r4, #2
 8005fa6:	42a6      	cmp	r6, r4
 8005fa8:	d105      	bne.n	8005fb6 <__libc_init_array+0x2e>
 8005faa:	bd70      	pop	{r4, r5, r6, pc}
 8005fac:	00b3      	lsls	r3, r6, #2
 8005fae:	58eb      	ldr	r3, [r5, r3]
 8005fb0:	4798      	blx	r3
 8005fb2:	3601      	adds	r6, #1
 8005fb4:	e7ee      	b.n	8005f94 <__libc_init_array+0xc>
 8005fb6:	00b3      	lsls	r3, r6, #2
 8005fb8:	58eb      	ldr	r3, [r5, r3]
 8005fba:	4798      	blx	r3
 8005fbc:	3601      	adds	r6, #1
 8005fbe:	e7f2      	b.n	8005fa6 <__libc_init_array+0x1e>
 8005fc0:	08006134 	.word	0x08006134
 8005fc4:	08006134 	.word	0x08006134
 8005fc8:	08006138 	.word	0x08006138
 8005fcc:	08006134 	.word	0x08006134

08005fd0 <_init>:
 8005fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd2:	46c0      	nop			; (mov r8, r8)
 8005fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fd6:	bc08      	pop	{r3}
 8005fd8:	469e      	mov	lr, r3
 8005fda:	4770      	bx	lr

08005fdc <_fini>:
 8005fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fde:	46c0      	nop			; (mov r8, r8)
 8005fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fe2:	bc08      	pop	{r3}
 8005fe4:	469e      	mov	lr, r3
 8005fe6:	4770      	bx	lr
