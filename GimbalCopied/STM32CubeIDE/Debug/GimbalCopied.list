
GimbalCopied.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008964  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08008b04  08008b04  00018b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fd8  08008fd8  000205c4  2**0
                  CONTENTS
  4 .ARM          00000008  08008fd8  08008fd8  00018fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fe0  08008fe0  000205c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fe0  08008fe0  00018fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fe4  08008fe4  00018fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005c4  20000000  08008fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055d4  200005c4  080095ac  000205c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005b98  080095ac  00025b98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000205f4  2**0
                  CONTENTS, READONLY
 13 .debug_line   00041a99  00000000  00000000  00020637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000007c  00000000  00000000  000620d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0003f250  00000000  00000000  0006214c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00008f80  00000000  00000000  000a139c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001de0  00000000  00000000  000aa320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b84ce  00000000  00000000  000ac100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002f24  00000000  00000000  001645ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 00019eea  00000000  00000000  001674f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  000226fc  00000000  00000000  001813dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000058f8  00000000  00000000  001a3ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200005c4 	.word	0x200005c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008aec 	.word	0x08008aec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200005c8 	.word	0x200005c8
 80001dc:	08008aec 	.word	0x08008aec

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000514 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004e0:	480d      	ldr	r0, [pc, #52]	; (8000518 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004e2:	490e      	ldr	r1, [pc, #56]	; (800051c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004e4:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e8:	e002      	b.n	80004f0 <LoopCopyDataInit>

080004ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ee:	3304      	adds	r3, #4

080004f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f4:	d3f9      	bcc.n	80004ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f6:	4a0b      	ldr	r2, [pc, #44]	; (8000524 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004f8:	4c0b      	ldr	r4, [pc, #44]	; (8000528 <LoopFillZerobss+0x26>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004fc:	e001      	b.n	8000502 <LoopFillZerobss>

080004fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000500:	3204      	adds	r2, #4

08000502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000504:	d3fb      	bcc.n	80004fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000506:	f003 fe37 	bl	8004178 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800050a:	f008 fa63 	bl	80089d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800050e:	f000 fc1d 	bl	8000d4c <main>
  bx  lr    
 8000512:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000514:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800051c:	200005c4 	.word	0x200005c4
  ldr r2, =_sidata
 8000520:	08008fe8 	.word	0x08008fe8
  ldr r2, =_sbss
 8000524:	200005c4 	.word	0x200005c4
  ldr r4, =_ebss
 8000528:	20005b98 	.word	0x20005b98

0800052c <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800052c:	e7fe      	b.n	800052c <BusFault_Handler>
	...

08000530 <ASPEP_start>:

  return (crc == 0U);
}

void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000530:	b570      	push	{r4, r5, r6, lr}
 8000532:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 8000534:	6940      	ldr	r0, [r0, #20]
 8000536:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000538:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 800053a:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800053c:	6d65      	ldr	r5, [r4, #84]	; 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 800053e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8000542:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000546:	6960      	ldr	r0, [r4, #20]
 8000548:	f104 011c 	add.w	r1, r4, #28
 800054c:	462b      	mov	r3, r5
 800054e:	2204      	movs	r2, #4
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000550:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000554:	4718      	bx	r3
 8000556:	bf00      	nop

08000558 <ASPEP_sendBeacon>:

void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000558:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
               | (((uint32_t)capabilities->version) << 4U)
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 800055a:	780b      	ldrb	r3, [r1, #0]
               | (((uint32_t)capabilities->version) << 4U)
 800055c:	790a      	ldrb	r2, [r1, #4]
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
               | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 800055e:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000562:	4c1e      	ldr	r4, [pc, #120]	; (80005dc <ASPEP_sendBeacon+0x84>)
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000564:	01db      	lsls	r3, r3, #7
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000566:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
 800056a:	784a      	ldrb	r2, [r1, #1]
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 800056c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000570:	78ca      	ldrb	r2, [r1, #3]
 8000572:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
 8000576:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800057a:	b2da      	uxtb	r2, r3
 800057c:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 8000580:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000584:	5ca2      	ldrb	r2, [r4, r2]
 8000586:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 800058a:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800058c:	5ca2      	ldrb	r2, [r4, r2]
 800058e:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 8000592:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000594:	5ca2      	ldrb	r2, [r4, r2]
 8000596:	4c12      	ldr	r4, [pc, #72]	; (80005e0 <ASPEP_sendBeacon+0x88>)
 8000598:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 800059c:	5ca2      	ldrb	r2, [r4, r2]
 800059e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80005a2:	f043 0305 	orr.w	r3, r3, #5
 80005a6:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a8:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80005aa:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80005ac:	b14b      	cbz	r3, 80005c2 <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 80005ae:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 80005b0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80005b4:	b913      	cbnz	r3, 80005bc <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 80005b6:	2302      	movs	r3, #2
 80005b8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 80005bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80005c0:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80005c2:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 80005c6:	2303      	movs	r3, #3
 80005c8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80005cc:	6481      	str	r1, [r0, #72]	; 0x48
 80005ce:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80005d0:	2204      	movs	r2, #4
 80005d2:	6d83      	ldr	r3, [r0, #88]	; 0x58
}
 80005d4:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80005d8:	6940      	ldr	r0, [r0, #20]
 80005da:	4718      	bx	r3
 80005dc:	08008b84 	.word	0x08008b84
 80005e0:	08008b74 	.word	0x08008b74

080005e4 <ASPEP_sendPing>:
{
 80005e4:	b430      	push	{r4, r5}
              | (uint32_t)((uint32_t)cBit << 5U)
 80005e6:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 80005e8:	f890 c060 	ldrb.w	ip, [r0, #96]	; 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 80005ec:	f890 4063 	ldrb.w	r4, [r0, #99]	; 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80005f0:	4d1d      	ldr	r5, [pc, #116]	; (8000668 <ASPEP_sendPing+0x84>)
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80005f2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80005f6:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
              | (uint32_t)((uint32_t)Nbit << 6U)
 80005fa:	f00c 0101 	and.w	r1, ip, #1
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80005fe:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8000602:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
              | (uint32_t)((uint32_t)ipID << 8U)
 8000606:	f004 040f 	and.w	r4, r4, #15
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800060a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800060e:	b2d3      	uxtb	r3, r2
 8000610:	4c16      	ldr	r4, [pc, #88]	; (800066c <ASPEP_sendPing+0x88>)
 8000612:	f043 0306 	orr.w	r3, r3, #6
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000616:	f042 0106 	orr.w	r1, r2, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800061a:	5ce3      	ldrb	r3, [r4, r3]
 800061c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 8000620:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000622:	5ce3      	ldrb	r3, [r4, r3]
 8000624:	ea83 4312 	eor.w	r3, r3, r2, lsr #16
 8000628:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800062a:	5ce3      	ldrb	r3, [r4, r3]
 800062c:	ea83 6312 	eor.w	r3, r3, r2, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000630:	5ceb      	ldrb	r3, [r5, r3]
 8000632:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000636:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000638:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 800063a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800063c:	b143      	cbz	r3, 8000650 <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 800063e:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000640:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000644:	b913      	cbnz	r3, 800064c <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 8000646:	2302      	movs	r3, #2
 8000648:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 800064c:	bc30      	pop	{r4, r5}
 800064e:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000650:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000654:	2303      	movs	r3, #3
 8000656:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 800065a:	6481      	str	r1, [r0, #72]	; 0x48
 800065c:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 800065e:	2204      	movs	r2, #4
 8000660:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000662:	6940      	ldr	r0, [r0, #20]
}
 8000664:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000666:	4718      	bx	r3
 8000668:	08008b74 	.word	0x08008b74
 800066c:	08008b84 	.word	0x08008b84

08000670 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 8000670:	2a0a      	cmp	r2, #10
{
 8000672:	b410      	push	{r4}
 8000674:	4603      	mov	r3, r0
    if (MCTL_SYNC == syncAsync)
 8000676:	d00b      	beq.n	8000690 <ASPEP_getBuffer+0x20>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 8000678:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 800067c:	2a01      	cmp	r2, #1
 800067e:	d921      	bls.n	80006c4 <ASPEP_getBuffer+0x54>
 8000680:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8000684:	2a01      	cmp	r2, #1
 8000686:	d911      	bls.n	80006ac <ASPEP_getBuffer+0x3c>
        result = false;
 8000688:	2000      	movs	r0, #0
}
 800068a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800068e:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 8000690:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 8000694:	2a01      	cmp	r2, #1
 8000696:	d8f7      	bhi.n	8000688 <ASPEP_getBuffer+0x18>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000698:	6a82      	ldr	r2, [r0, #40]	; 0x28
        pHandle->syncBuffer.state = writeLock;
 800069a:	2401      	movs	r4, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 800069c:	3204      	adds	r2, #4
 800069e:	600a      	str	r2, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 80006a0:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
  bool result = true;
 80006a4:	4620      	mov	r0, r4
}
 80006a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006aa:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006ac:	6b82      	ldr	r2, [r0, #56]	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 80006ae:	2001      	movs	r0, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006b0:	f103 0438 	add.w	r4, r3, #56	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 80006b4:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006b8:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006ba:	641c      	str	r4, [r3, #64]	; 0x40
}
 80006bc:	f85d 4b04 	ldr.w	r4, [sp], #4
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006c0:	600a      	str	r2, [r1, #0]
}
 80006c2:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006c4:	6b02      	ldr	r2, [r0, #48]	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 80006c6:	2001      	movs	r0, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80006c8:	f103 0430 	add.w	r4, r3, #48	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 80006cc:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006d0:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80006d2:	641c      	str	r4, [r3, #64]	; 0x40
}
 80006d4:	f85d 4b04 	ldr.w	r4, [sp], #4
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006d8:	600a      	str	r2, [r1, #0]
}
 80006da:	4770      	bx	lr

080006dc <ASPEP_sendPacket>:
{
 80006dc:	4684      	mov	ip, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 80006de:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
 80006e2:	2802      	cmp	r0, #2
 80006e4:	d001      	beq.n	80006ea <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 80006e6:	2002      	movs	r0, #2
 80006e8:	4770      	bx	lr
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 80006ea:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 80006ee:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 80006f2:	f89c 006c 	ldrb.w	r0, [ip, #108]	; 0x6c
 80006f6:	2801      	cmp	r0, #1
 80006f8:	d104      	bne.n	8000704 <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 80006fa:	f64f 60ca 	movw	r0, #65226	; 0xfeca
 80006fe:	5288      	strh	r0, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000700:	3202      	adds	r2, #2
 8000702:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 8000704:	2b0a      	cmp	r3, #10
 8000706:	d105      	bne.n	8000714 <ASPEP_sendPacket+0x38>
        if (pSupHandle->MCP_PacketAvailable)
 8000708:	f89c 0010 	ldrb.w	r0, [ip, #16]
 800070c:	b378      	cbz	r0, 800076e <ASPEP_sendPacket+0x92>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from master is processed*/
 800070e:	2000      	movs	r0, #0
 8000710:	f88c 0010 	strb.w	r0, [ip, #16]
  uint32_t header = *headerPtr;
 8000714:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
 8000718:	b570      	push	{r4, r5, r6, lr}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800071a:	4d35      	ldr	r5, [pc, #212]	; (80007f0 <ASPEP_sendPacket+0x114>)
 800071c:	b2c4      	uxtb	r4, r0
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 800071e:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000720:	5d2e      	ldrb	r6, [r5, r4]
 8000722:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8000726:	4074      	eors	r4, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 8000728:	f1a1 0e04 	sub.w	lr, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800072c:	5d2e      	ldrb	r6, [r5, r4]
 800072e:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8000732:	4074      	eors	r4, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000734:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000736:	5d2c      	ldrb	r4, [r5, r4]
 8000738:	f3c0 6503 	ubfx	r5, r0, #24, #4
 800073c:	406c      	eors	r4, r5
 800073e:	4d2d      	ldr	r5, [pc, #180]	; (80007f4 <ASPEP_sendPacket+0x118>)
  *headerPtr |= (uint32_t)crc << 28;
 8000740:	5d2c      	ldrb	r4, [r5, r4]
 8000742:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 8000746:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 800074a:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 800074c:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
 8000750:	b1e9      	cbz	r1, 800078e <ASPEP_sendPacket+0xb2>
  __ASM volatile ("cpsie i" : : : "memory");
 8000752:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 8000754:	2b09      	cmp	r3, #9
 8000756:	d00c      	beq.n	8000772 <ASPEP_sendPacket+0x96>
      else if (MCTL_SYNC == dataType)
 8000758:	2b0a      	cmp	r3, #10
 800075a:	d031      	beq.n	80007c0 <ASPEP_sendPacket+0xe4>
      else if(ASPEP_CTRL == dataType)
 800075c:	2b00      	cmp	r3, #0
 800075e:	d135      	bne.n	80007cc <ASPEP_sendPacket+0xf0>
        if (pHandle->ctrlBuffer.state != available)
 8000760:	f89c 0024 	ldrb.w	r0, [ip, #36]	; 0x24
 8000764:	bb80      	cbnz	r0, 80007c8 <ASPEP_sendPacket+0xec>
          pHandle->ctrlBuffer.state = pending;
 8000766:	2302      	movs	r3, #2
 8000768:	f88c 3024 	strb.w	r3, [ip, #36]	; 0x24
}
 800076c:	bd70      	pop	{r4, r5, r6, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 800076e:	2001      	movs	r0, #1
}
 8000770:	4770      	bx	lr
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 8000772:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8000776:	6819      	ldr	r1, [r3, #0]
          result = ASPEP_BUFFER_ERROR;
 8000778:	458e      	cmp	lr, r1
 800077a:	bf14      	ite	ne
 800077c:	2003      	movne	r0, #3
 800077e:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 8000780:	f8dc 1044 	ldr.w	r1, [ip, #68]	; 0x44
 8000784:	b381      	cbz	r1, 80007e8 <ASPEP_sendPacket+0x10c>
        pHandle->lastRequestedAsyncBuff->state = pending;
 8000786:	2102      	movs	r1, #2
 8000788:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 800078a:	809a      	strh	r2, [r3, #4]
}
 800078c:	bd70      	pop	{r4, r5, r6, pc}
      if (MCTL_ASYNC == dataType)
 800078e:	2b09      	cmp	r3, #9
 8000790:	d025      	beq.n	80007de <ASPEP_sendPacket+0x102>
      else if (MCTL_SYNC == dataType)
 8000792:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 8000794:	f04f 0303 	mov.w	r3, #3
 8000798:	bf0b      	itete	eq
 800079a:	f88c 302e 	strbeq.w	r3, [ip, #46]	; 0x2e
        pHandle->ctrlBuffer.state = readLock;
 800079e:	f88c 3024 	strbne.w	r3, [ip, #36]	; 0x24
        pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 80007a2:	f10c 0328 	addeq.w	r3, ip, #40	; 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80007a6:	f10c 0320 	addne.w	r3, ip, #32
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 80007aa:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
 80007ae:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80007b0:	f8dc 3058 	ldr.w	r3, [ip, #88]	; 0x58
 80007b4:	f8dc 0014 	ldr.w	r0, [ip, #20]
 80007b8:	4671      	mov	r1, lr
 80007ba:	4798      	blx	r3
 80007bc:	2000      	movs	r0, #0
}
 80007be:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle -> syncBuffer.state != writeLock)
 80007c0:	f89c 302e 	ldrb.w	r3, [ip, #46]	; 0x2e
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d003      	beq.n	80007d0 <ASPEP_sendPacket+0xf4>
          result = ASPEP_BUFFER_ERROR;
 80007c8:	2003      	movs	r0, #3
}
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t result = ASPEP_OK;
 80007cc:	2000      	movs	r0, #0
}
 80007ce:	bd70      	pop	{r4, r5, r6, pc}
          pHandle->syncBuffer.state = pending;
 80007d0:	2302      	movs	r3, #2
 80007d2:	f88c 302e 	strb.w	r3, [ip, #46]	; 0x2e
          pHandle->syncBuffer.length = bufferLength;
 80007d6:	f8ac 202c 	strh.w	r2, [ip, #44]	; 0x2c
  uint8_t result = ASPEP_OK;
 80007da:	2000      	movs	r0, #0
}
 80007dc:	bd70      	pop	{r4, r5, r6, pc}
        pHandle->lastRequestedAsyncBuff->state = readLock;
 80007de:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80007e2:	2103      	movs	r1, #3
 80007e4:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 80007e6:	e7e0      	b.n	80007aa <ASPEP_sendPacket+0xce>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 80007e8:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
 80007ec:	e7cb      	b.n	8000786 <ASPEP_sendPacket+0xaa>
 80007ee:	bf00      	nop
 80007f0:	08008b84 	.word	0x08008b84
 80007f4:	08008b74 	.word	0x08008b74

080007f8 <ASPEP_HWDataTransmittedIT>:
/* ASPEP_HWDataTransmittedIT is called as soon as previous packet transfer is completed */
/* pHandle->lockBuffer is set before packet transmission and is never read here after */
/* therefore, there is no need to protect this ISR against another higher priority ISR (HF Task)*/

void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 80007f8:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 80007fa:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80007fe:	2b03      	cmp	r3, #3
{
 8000800:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 8000802:	d013      	beq.n	800082c <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8000804:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8000806:	2100      	movs	r1, #0
 8000808:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 800080a:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 800080e:	2a02      	cmp	r2, #2
 8000810:	d013      	beq.n	800083a <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 8000812:	2b02      	cmp	r3, #2
 8000814:	d11d      	bne.n	8000852 <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000816:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 800081a:	6d83      	ldr	r3, [r0, #88]	; 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 800081c:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 800081e:	2204      	movs	r2, #4
 8000820:	6940      	ldr	r0, [r0, #20]
 8000822:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000824:	2303      	movs	r3, #3
 8000826:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 800082a:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 800082c:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
      pHandle->ctrlBuffer.state = available;
 8000830:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 8000832:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 8000834:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if (pHandle->syncBuffer.state == pending)
 8000838:	d10b      	bne.n	8000852 <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 800083a:	f104 0028 	add.w	r0, r4, #40	; 0x28
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800083e:	6da3      	ldr	r3, [r4, #88]	; 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000840:	64a0      	str	r0, [r4, #72]	; 0x48
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000842:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8000844:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000846:	6960      	ldr	r0, [r4, #20]
 8000848:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 800084a:	2303      	movs	r3, #3
 800084c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 8000850:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8000852:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 8000854:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000856:	b1cb      	cbz	r3, 800088c <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 8000858:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 800085a:	64a3      	str	r3, [r4, #72]	; 0x48
        pHandle->asyncNextBuffer->state = readLock;
 800085c:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 800085e:	6819      	ldr	r1, [r3, #0]
 8000860:	889a      	ldrh	r2, [r3, #4]
 8000862:	6960      	ldr	r0, [r4, #20]
 8000864:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000866:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 8000868:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800086c:	2b02      	cmp	r3, #2
 800086e:	d007      	beq.n	8000880 <ASPEP_HWDataTransmittedIT+0x88>
 8000870:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8000874:	2b02      	cmp	r3, #2
 8000876:	d003      	beq.n	8000880 <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 8000878:	2300      	movs	r3, #0
 800087a:	6463      	str	r3, [r4, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 800087c:	b662      	cpsie	i
}
 800087e:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 8000880:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000882:	0063      	lsls	r3, r4, #1
 8000884:	3368      	adds	r3, #104	; 0x68
 8000886:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 8000888:	6463      	str	r3, [r4, #68]	; 0x44
        {
 800088a:	e7f7      	b.n	800087c <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 800088c:	64a3      	str	r3, [r4, #72]	; 0x48
 800088e:	e7f5      	b.n	800087c <ASPEP_HWDataTransmittedIT+0x84>

08000890 <ASPEP_RXframeProcess>:
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
    uint16_t packetNumber;
    bool validCRCData = true;

    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 8000890:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8000894:	69c2      	ldr	r2, [r0, #28]
{
 8000896:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    *packetLength = 0;
 800089a:	2500      	movs	r5, #0
{
 800089c:	4604      	mov	r4, r0
    *packetLength = 0;
 800089e:	800d      	strh	r5, [r1, #0]
    if (pHandle->NewPacketAvailable)
 80008a0:	b193      	cbz	r3, 80008c8 <ASPEP_RXframeProcess+0x38>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 80008a2:	f890 6064 	ldrb.w	r6, [r0, #100]	; 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 80008a6:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
      switch (pHandle->ASPEP_State)
 80008aa:	2e01      	cmp	r6, #1
 80008ac:	d054      	beq.n	8000958 <ASPEP_RXframeProcess+0xc8>
 80008ae:	2e02      	cmp	r6, #2
 80008b0:	d03e      	beq.n	8000930 <ASPEP_RXframeProcess+0xa0>
 80008b2:	2e00      	cmp	r6, #0
 80008b4:	d033      	beq.n	800091e <ASPEP_RXframeProcess+0x8e>

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80008b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008b8:	6960      	ldr	r0, [r4, #20]
 80008ba:	2204      	movs	r2, #4
 80008bc:	f104 011c 	add.w	r1, r4, #28
 80008c0:	4798      	blx	r3
    }
#ifdef NULL_PTR_ASP
  }
#endif
  return (result);
}
 80008c2:	4628      	mov	r0, r5
 80008c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 80008c8:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d0f8      	beq.n	80008c2 <ASPEP_RXframeProcess+0x32>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 80008d0:	042b      	lsls	r3, r5, #16
 80008d2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80008d6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80008da:	489b      	ldr	r0, [pc, #620]	; (8000b48 <ASPEP_RXframeProcess+0x2b8>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80008dc:	4d9b      	ldr	r5, [pc, #620]	; (8000b4c <ASPEP_RXframeProcess+0x2bc>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80008de:	f082 0209 	eor.w	r2, r2, #9
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80008e2:	5c81      	ldrb	r1, [r0, r2]
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 80008e4:	f043 020f 	orr.w	r2, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80008e8:	ea81 4313 	eor.w	r3, r1, r3, lsr #16
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80008ec:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 80008ee:	5ceb      	ldrb	r3, [r5, r3]
 80008f0:	ea42 7303 	orr.w	r3, r2, r3, lsl #28
 80008f4:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80008f6:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80008f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d03a      	beq.n	8000974 <ASPEP_RXframeProcess+0xe4>
  __ASM volatile ("cpsie i" : : : "memory");
 80008fe:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000900:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000904:	b913      	cbnz	r3, 800090c <ASPEP_RXframeProcess+0x7c>
          pHandle->ctrlBuffer.state = pending;
 8000906:	2302      	movs	r3, #2
 8000908:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 800090c:	2500      	movs	r5, #0
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 800090e:	6960      	ldr	r0, [r4, #20]
 8000910:	6d23      	ldr	r3, [r4, #80]	; 0x50
      pHandle->badPacketFlag = ASPEP_OK;
 8000912:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000916:	4798      	blx	r3
}
 8000918:	4628      	mov	r0, r5
 800091a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 800091e:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8000920:	2905      	cmp	r1, #5
 8000922:	f000 809e 	beq.w	8000a62 <ASPEP_RXframeProcess+0x1d2>
          else if (PING == pHandle->rxPacketType)
 8000926:	2906      	cmp	r1, #6
 8000928:	f000 80e3 	beq.w	8000af2 <ASPEP_RXframeProcess+0x262>
  uint8_t *result = NULL;
 800092c:	4635      	mov	r5, r6
 800092e:	e7c2      	b.n	80008b6 <ASPEP_RXframeProcess+0x26>
          if (BEACON == pHandle->rxPacketType)
 8000930:	6e86      	ldr	r6, [r0, #104]	; 0x68
 8000932:	2e05      	cmp	r6, #5
 8000934:	d060      	beq.n	80009f8 <ASPEP_RXframeProcess+0x168>
          else if (PING == pHandle->rxPacketType)
 8000936:	2e06      	cmp	r6, #6
 8000938:	f000 80e2 	beq.w	8000b00 <ASPEP_RXframeProcess+0x270>
          else if (DATA_PACKET == pHandle->rxPacketType)
 800093c:	2e09      	cmp	r6, #9
 800093e:	d1ba      	bne.n	80008b6 <ASPEP_RXframeProcess+0x26>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8000940:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
              *packetLength = pHandle->rxLength;
 8000944:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
              result = pHandle->rxBuffer;
 8000948:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 800094a:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 800094c:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 800094e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000952:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLength;
 8000954:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 8000956:	e7ae      	b.n	80008b6 <ASPEP_RXframeProcess+0x26>
          if (BEACON == pHandle->rxPacketType)
 8000958:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800095a:	2905      	cmp	r1, #5
 800095c:	d016      	beq.n	800098c <ASPEP_RXframeProcess+0xfc>
          else if (PING == pHandle->rxPacketType)
 800095e:	2906      	cmp	r1, #6
 8000960:	d1a9      	bne.n	80008b6 <ASPEP_RXframeProcess+0x26>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000962:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000966:	4631      	mov	r1, r6
 8000968:	f7ff fe3c 	bl	80005e4 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 800096c:	2302      	movs	r3, #2
 800096e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8000972:	e7a0      	b.n	80008b6 <ASPEP_RXframeProcess+0x26>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000974:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 8000978:	2303      	movs	r3, #3
 800097a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 800097e:	64a1      	str	r1, [r4, #72]	; 0x48
 8000980:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000982:	2204      	movs	r2, #4
 8000984:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000986:	6960      	ldr	r0, [r4, #20]
 8000988:	4798      	blx	r3
  return (result);
 800098a:	e7bf      	b.n	800090c <ASPEP_RXframeProcess+0x7c>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 800098c:	7f03      	ldrb	r3, [r0, #28]
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 800098e:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000990:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000994:	f894 606c 	ldrb.w	r6, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000998:	f894 706e 	ldrb.w	r7, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800099c:	f894 e06f 	ldrb.w	lr, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 80009a0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 80009a4:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009a6:	4281      	cmp	r1, r0
 80009a8:	bf28      	it	cs
 80009aa:	4601      	movcs	r1, r0
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009ac:	42b3      	cmp	r3, r6
 80009ae:	469c      	mov	ip, r3
 80009b0:	bf28      	it	cs
 80009b2:	46b4      	movcs	ip, r6
 80009b4:	f36c 0507 	bfi	r5, ip, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80009b8:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 80009bc:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009c0:	45bc      	cmp	ip, r7
 80009c2:	46e1      	mov	r9, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009c4:	f361 250f 	bfi	r5, r1, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009c8:	bf28      	it	cs
 80009ca:	46b9      	movcs	r9, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009cc:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009ce:	f369 4517 	bfi	r5, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009d2:	46c1      	mov	r9, r8
 80009d4:	bf28      	it	cs
 80009d6:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009d8:	f369 651f 	bfi	r5, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80009dc:	42b3      	cmp	r3, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009de:	66e5      	str	r5, [r4, #108]	; 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80009e0:	f240 8093 	bls.w	8000b0a <ASPEP_RXframeProcess+0x27a>
              pHandle->ASPEP_State = ASPEP_IDLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 80009ea:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 80009ee:	4620      	mov	r0, r4
 80009f0:	f7ff fdb2 	bl	8000558 <ASPEP_sendBeacon>
  uint8_t *result = NULL;
 80009f4:	2500      	movs	r5, #0
 80009f6:	e75e      	b.n	80008b6 <ASPEP_RXframeProcess+0x26>
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 80009f8:	7f46      	ldrb	r6, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009fa:	f890 c06c 	ldrb.w	ip, [r0, #108]	; 0x6c
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 80009fe:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a00:	f890 006d 	ldrb.w	r0, [r0, #109]	; 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a04:	f894 e06e 	ldrb.w	lr, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a08:	f894 806f 	ldrb.w	r8, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000a0c:	f006 063f 	and.w	r6, r6, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000a10:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a12:	42b0      	cmp	r0, r6
 8000a14:	bf28      	it	cs
 8000a16:	4630      	movcs	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a18:	4563      	cmp	r3, ip
 8000a1a:	461f      	mov	r7, r3
 8000a1c:	4629      	mov	r1, r5
 8000a1e:	bf28      	it	cs
 8000a20:	4667      	movcs	r7, ip
 8000a22:	f367 0107 	bfi	r1, r7, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000a26:	f3c2 3786 	ubfx	r7, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000a2a:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a2e:	4577      	cmp	r7, lr
 8000a30:	46ba      	mov	sl, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a32:	f360 210f 	bfi	r1, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a36:	bf28      	it	cs
 8000a38:	46f2      	movcs	sl, lr
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a3a:	45c1      	cmp	r9, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a3c:	f36a 4117 	bfi	r1, sl, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a40:	46ca      	mov	sl, r9
 8000a42:	bf28      	it	cs
 8000a44:	46c2      	movcs	sl, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a46:	f36a 611f 	bfi	r1, sl, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a4a:	4563      	cmp	r3, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a4c:	66e1      	str	r1, [r4, #108]	; 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a4e:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 8000a52:	d96b      	bls.n	8000b2c <ASPEP_RXframeProcess+0x29c>
 8000a54:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000a58:	4620      	mov	r0, r4
 8000a5a:	f7ff fd7d 	bl	8000558 <ASPEP_sendBeacon>
  uint8_t *result = NULL;
 8000a5e:	2500      	movs	r5, #0
 8000a60:	e729      	b.n	80008b6 <ASPEP_RXframeProcess+0x26>
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000a62:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a64:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000a68:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a6a:	f890 e06c 	ldrb.w	lr, [r0, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a6e:	f890 706e 	ldrb.w	r7, [r0, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a72:	f894 906f 	ldrb.w	r9, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000a76:	f005 053f 	and.w	r5, r5, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000a7a:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a7c:	42a9      	cmp	r1, r5
 8000a7e:	bf28      	it	cs
 8000a80:	4629      	movcs	r1, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a82:	4573      	cmp	r3, lr
 8000a84:	4618      	mov	r0, r3
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000a86:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a8a:	bf28      	it	cs
 8000a8c:	4670      	movcs	r0, lr
 8000a8e:	f360 0607 	bfi	r6, r0, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000a92:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a96:	45b8      	cmp	r8, r7
 8000a98:	4640      	mov	r0, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a9a:	f361 260f 	bfi	r6, r1, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a9e:	bf28      	it	cs
 8000aa0:	4638      	movcs	r0, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000aa2:	45ca      	cmp	sl, r9
 8000aa4:	46d4      	mov	ip, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000aa6:	f360 4617 	bfi	r6, r0, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000aaa:	bf28      	it	cs
 8000aac:	46cc      	movcs	ip, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000aae:	f36c 661f 	bfi	r6, ip, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000ab2:	4573      	cmp	r3, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ab4:	66e6      	str	r6, [r4, #108]	; 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000ab6:	d898      	bhi.n	80009ea <ASPEP_RXframeProcess+0x15a>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000ab8:	428d      	cmp	r5, r1
 8000aba:	d896      	bhi.n	80009ea <ASPEP_RXframeProcess+0x15a>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000abc:	45b8      	cmp	r8, r7
 8000abe:	d894      	bhi.n	80009ea <ASPEP_RXframeProcess+0x15a>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000ac0:	45ca      	cmp	sl, r9
 8000ac2:	d892      	bhi.n	80009ea <ASPEP_RXframeProcess+0x15a>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000ac4:	f3c2 1302 	ubfx	r3, r2, #4, #3
 8000ac8:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d18c      	bne.n	80009ea <ASPEP_RXframeProcess+0x15a>
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000ad0:	1c4b      	adds	r3, r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000ad2:	1c42      	adds	r2, r0, #1
 8000ad4:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000ad6:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000ad8:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000ada:	ea4f 1c8c 	mov.w	ip, ip, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000ade:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000ae0:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000ae2:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000ae4:	f8a4 c00e 	strh.w	ip, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000ae8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000aec:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 8000af0:	e77b      	b.n	80009ea <ASPEP_RXframeProcess+0x15a>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000af2:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000af6:	4631      	mov	r1, r6
 8000af8:	f7ff fd74 	bl	80005e4 <ASPEP_sendPing>
  uint8_t *result = NULL;
 8000afc:	4635      	mov	r5, r6
 8000afe:	e6da      	b.n	80008b6 <ASPEP_RXframeProcess+0x26>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000b00:	7f42      	ldrb	r2, [r0, #29]
 8000b02:	2101      	movs	r1, #1
 8000b04:	f7ff fd6e 	bl	80005e4 <ASPEP_sendPing>
 8000b08:	e6d5      	b.n	80008b6 <ASPEP_RXframeProcess+0x26>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000b0a:	4288      	cmp	r0, r1
 8000b0c:	f63f af6a 	bhi.w	80009e4 <ASPEP_RXframeProcess+0x154>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000b10:	45bc      	cmp	ip, r7
 8000b12:	f63f af67 	bhi.w	80009e4 <ASPEP_RXframeProcess+0x154>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000b16:	45f0      	cmp	r8, lr
 8000b18:	f63f af64 	bhi.w	80009e4 <ASPEP_RXframeProcess+0x154>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000b1c:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
 8000b20:	f3c2 1302 	ubfx	r3, r2, #4, #3
 8000b24:	4299      	cmp	r1, r3
 8000b26:	f47f af5d 	bne.w	80009e4 <ASPEP_RXframeProcess+0x154>
 8000b2a:	e75e      	b.n	80009ea <ASPEP_RXframeProcess+0x15a>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000b2c:	4286      	cmp	r6, r0
 8000b2e:	d891      	bhi.n	8000a54 <ASPEP_RXframeProcess+0x1c4>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000b30:	4577      	cmp	r7, lr
 8000b32:	d88f      	bhi.n	8000a54 <ASPEP_RXframeProcess+0x1c4>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000b34:	45c1      	cmp	r9, r8
 8000b36:	d88d      	bhi.n	8000a54 <ASPEP_RXframeProcess+0x1c4>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000b38:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
 8000b3c:	f3c2 1302 	ubfx	r3, r2, #4, #3
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000b40:	1aeb      	subs	r3, r5, r3
 8000b42:	425d      	negs	r5, r3
 8000b44:	415d      	adcs	r5, r3
 8000b46:	e785      	b.n	8000a54 <ASPEP_RXframeProcess+0x1c4>
 8000b48:	08008b84 	.word	0x08008b84
 8000b4c:	08008b74 	.word	0x08008b74

08000b50 <ASPEP_HWDataReceivedIT>:

/* This function is called once DMA has transfered the configure number of byte*/
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000b50:	b510      	push	{r4, lr}
    /* Upon reception of a Newpacket the DMA will be re-configured only once the answer has been sent.
      * This is mandatory to avoid a race condition in case of a new packet is received while executing ASPEP_
      * RXframeProcess
      * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be
      * configured after.*/
    switch (pHandle->ASPEP_TL_State)
 8000b52:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
{
 8000b56:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8000b58:	b13b      	cbz	r3, 8000b6a <ASPEP_HWDataReceivedIT+0x1a>
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d104      	bne.n	8000b68 <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8000b64:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
        break;
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000b68:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000b6a:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000b6c:	4a1e      	ldr	r2, [pc, #120]	; (8000be8 <ASPEP_HWDataReceivedIT+0x98>)
 8000b6e:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000b70:	5cd3      	ldrb	r3, [r2, r3]
 8000b72:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8000b76:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000b78:	5cd3      	ldrb	r3, [r2, r3]
 8000b7a:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8000b7e:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000b80:	5cd3      	ldrb	r3, [r2, r3]
 8000b82:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000b86:	5cd3      	ldrb	r3, [r2, r3]
 8000b88:	b95b      	cbnz	r3, 8000ba2 <ASPEP_HWDataReceivedIT+0x52>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000b8a:	7f03      	ldrb	r3, [r0, #28]
 8000b8c:	f003 030f 	and.w	r3, r3, #15
 8000b90:	2b06      	cmp	r3, #6
 8000b92:	6683      	str	r3, [r0, #104]	; 0x68
          switch (pHandle->rxPacketType)
 8000b94:	d809      	bhi.n	8000baa <ASPEP_HWDataReceivedIT+0x5a>
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	d81e      	bhi.n	8000bd8 <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 8000ba0:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000ba8:	bd10      	pop	{r4, pc}
 8000baa:	2b09      	cmp	r3, #9
 8000bac:	d1f5      	bne.n	8000b9a <ASPEP_HWDataReceivedIT+0x4a>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000bae:	8b83      	ldrh	r3, [r0, #28]
 8000bb0:	091b      	lsrs	r3, r3, #4
 8000bb2:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 8000bb6:	b17b      	cbz	r3, 8000bd8 <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000bb8:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d30f      	bcc.n	8000be0 <ASPEP_HWDataReceivedIT+0x90>
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000bc0:	f890 206c 	ldrb.w	r2, [r0, #108]	; 0x6c
 8000bc4:	6981      	ldr	r1, [r0, #24]
 8000bc6:	6940      	ldr	r0, [r0, #20]
 8000bc8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000bcc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000bce:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
 8000bd6:	bd10      	pop	{r4, pc}
              pHandle->NewPacketAvailable = true;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 8000bde:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000be0:	2302      	movs	r3, #2
 8000be2:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000be6:	bd10      	pop	{r4, pc}
 8000be8:	08008b84 	.word	0x08008b84

08000bec <ASPEP_HWDMAReset>:

/* Called after debugger has stopped the MCU*/
void ASPEP_HWDMAReset(ASPEP_Handle_t *pHandle)
{
 8000bec:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000bf4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000bf6:	6940      	ldr	r0, [r0, #20]
 8000bf8:	2204      	movs	r2, #4
 8000bfa:	311c      	adds	r1, #28
 8000bfc:	4718      	bx	r3
 8000bfe:	bf00      	nop

08000c00 <DAC_Init>:
/**
  * @brief  Hardware and software initialization of the DAC object.
  * @param  pHandle pointer on related component instance.
  */
__weak void DAC_Init(DAC_Handle_t *pHandle)
{
 8000c00:	4601      	mov	r1, r0
 8000c02:	b508      	push	{r3, lr}
  else
  {
#endif
    /* CH1 configuration  */
    /* By default send Ia motor 1 */
    (void)RI_GetPtrReg((MC_REG_I_A + 0x1U), (void *)&pHandle->ptrDataCh[DAC_CH1]); //cstat !MISRAC2012-Rule-11.5
 8000c04:	f240 70d1 	movw	r0, #2001	; 0x7d1
 8000c08:	f002 fd64 	bl	80036d4 <RI_GetPtrReg>
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  SET_BIT(TIMx->CCER, Channels);
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <DAC_Init+0x30>)
 8000c0e:	6a1a      	ldr	r2, [r3, #32]
  */
__STATIC_INLINE void LL_TIM_OC_DisablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000c10:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  SET_BIT(TIMx->CCER, Channels);
 8000c14:	f042 0210 	orr.w	r2, r2, #16
 8000c18:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000c1a:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
 8000c1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c22:	f8c1 2418 	str.w	r2, [r1, #1048]	; 0x418
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	f042 0201 	orr.w	r2, r2, #1
 8000c2c:	601a      	str	r2, [r3, #0]
  }
#endif

   /* start Timer */
   LL_TIM_EnableCounter(TIM3);
}
 8000c2e:	bd08      	pop	{r3, pc}
 8000c30:	40000400 	.word	0x40000400

08000c34 <DAC_Exec>:
  }
  else
  {
#endif
    LL_TIM_OC_SetCompareCH2(TIM3,
                          (uint16_t)((int16_t)((*((int16_t *)pHandle->ptrDataCh[DAC_CH1]) + 32768) / 32)));
 8000c34:	6803      	ldr	r3, [r0, #0]
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000c36:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <DAC_Exec+0x14>)
 8000c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c3c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000c40:	115b      	asrs	r3, r3, #5
 8000c42:	6393      	str	r3, [r2, #56]	; 0x38

#ifdef NULL_PTR_DAC_UI
  }
#endif
}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40000400 	.word	0x40000400

08000c4c <DAC_SetChannelConfig>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->dataCh[bChannel] = regID;
 8000c4c:	1d0b      	adds	r3, r1, #4
    (void)RI_GetPtrReg(regID, (void *)&pHandle->ptrDataCh[bChannel]); //cstat !MISRAC2012-Rule-11.5
 8000c4e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    pHandle->dataCh[bChannel] = regID;
 8000c52:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    (void)RI_GetPtrReg(regID, (void *)&pHandle->ptrDataCh[bChannel]); //cstat !MISRAC2012-Rule-11.5
 8000c56:	4610      	mov	r0, r2
 8000c58:	f002 bd3c 	b.w	80036d4 <RI_GetPtrReg>

08000c5c <DAC_GetChannelConfig>:
uint16_t DAC_GetChannelConfig(DAC_Handle_t *pHandle, DAC_Channel_t bChannel)
{
#ifdef NULL_PTR_DAC_UI
  return ((NULL == pHandle) ? 0U : pHandle->dataCh[bChannel]);
#else
  return (pHandle->dataCh[bChannel]);
 8000c5c:	3104      	adds	r1, #4
#endif
}
 8000c5e:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8000c62:	4770      	bx	lr

08000c64 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <vApplicationGetIdleTaskMemory+0x14>)
 8000c66:	6003      	str	r3, [r0, #0]
{
 8000c68:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c6a:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c6c:	4c03      	ldr	r4, [pc, #12]	; (8000c7c <vApplicationGetIdleTaskMemory+0x18>)
 8000c6e:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 8000c70:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c74:	6013      	str	r3, [r2, #0]
}
 8000c76:	4770      	bx	lr
 8000c78:	200007ec 	.word	0x200007ec
 8000c7c:	200005ec 	.word	0x200005ec

08000c80 <StartUserTask>:
	}
}
//TODO: Check mc sdk's motor control algorithm and if it is not good, implement your own
/* USER CODE END Header_StartUserTask */
void StartUserTask(void const * argument)
{
 8000c80:	b508      	push	{r3, lr}
 8000c82:	4c07      	ldr	r4, [pc, #28]	; (8000ca0 <StartUserTask+0x20>)
  /* USER CODE BEGIN StartUserTask */

  /* Infinite loop */
  for(;;)
  {
	  MC_TargetSpeed = 30;
 8000c84:	261e      	movs	r6, #30
	  osDelay(1500);
	  MC_TargetSpeed = -30;
 8000c86:	f64f 75e2 	movw	r5, #65506	; 0xffe2
	  osDelay(1500);
 8000c8a:	f240 50dc 	movw	r0, #1500	; 0x5dc
	  MC_TargetSpeed = 30;
 8000c8e:	8026      	strh	r6, [r4, #0]
	  osDelay(1500);
 8000c90:	f004 fe86 	bl	80059a0 <osDelay>
	  osDelay(500);
 8000c94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	  MC_TargetSpeed = -30;
 8000c98:	8025      	strh	r5, [r4, #0]
	  osDelay(500);
 8000c9a:	f004 fe81 	bl	80059a0 <osDelay>
  for(;;)
 8000c9e:	e7f4      	b.n	8000c8a <StartUserTask+0xa>
 8000ca0:	20000000 	.word	0x20000000

08000ca4 <SystemClock_Config>:
{
 8000ca4:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca6:	2300      	movs	r3, #0
{
 8000ca8:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000caa:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8000cae:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000cb6:	e9cd 3305 	strd	r3, r3, [sp, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	4922      	ldr	r1, [pc, #136]	; (8000d44 <SystemClock_Config+0xa0>)
 8000cbc:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbe:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc0:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cc2:	4a21      	ldr	r2, [pc, #132]	; (8000d48 <SystemClock_Config+0xa4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc4:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000cc8:	6408      	str	r0, [r1, #64]	; 0x40
 8000cca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000ccc:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000cd0:	9101      	str	r1, [sp, #4]
 8000cd2:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cd4:	9302      	str	r3, [sp, #8]
 8000cd6:	6813      	ldr	r3, [r2, #0]
 8000cd8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ce0:	6013      	str	r3, [r2, #0]
 8000ce2:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cee:	e9cd 0108 	strd	r0, r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cf2:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cf4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf8:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cfa:	e9cd 410e 	strd	r4, r1, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cfe:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d00:	2104      	movs	r1, #4
 8000d02:	2002      	movs	r0, #2
 8000d04:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d08:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000d0a:	2354      	movs	r3, #84	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d0e:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000d10:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d12:	f003 fe9b 	bl	8004a4c <HAL_RCC_OscConfig>
 8000d16:	b108      	cbz	r0, 8000d1c <SystemClock_Config+0x78>
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1c:	210f      	movs	r1, #15
 8000d1e:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d20:	e9cd 1403 	strd	r1, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d28:	a803      	add	r0, sp, #12
 8000d2a:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d2c:	e9cd 3205 	strd	r3, r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d30:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d32:	f004 f8a9 	bl	8004e88 <HAL_RCC_ClockConfig>
 8000d36:	b108      	cbz	r0, 8000d3c <SystemClock_Config+0x98>
 8000d38:	b672      	cpsid	i
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <SystemClock_Config+0x96>
  HAL_RCC_EnableCSS();
 8000d3c:	f004 f86a 	bl	8004e14 <HAL_RCC_EnableCSS>
}
 8000d40:	b014      	add	sp, #80	; 0x50
 8000d42:	bd10      	pop	{r4, pc}
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40007000 	.word	0x40007000

08000d4c <main>:
{
 8000d4c:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4e:	2400      	movs	r4, #0
{
 8000d50:	b0a2      	sub	sp, #136	; 0x88
  HAL_Init();
 8000d52:	f003 fa1b 	bl	800418c <HAL_Init>
  SystemClock_Config();
 8000d56:	f7ff ffa5 	bl	8000ca4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
 8000d5e:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d62:	4d99      	ldr	r5, [pc, #612]	; (8000fc8 <main+0x27c>)
 8000d64:	9402      	str	r4, [sp, #8]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d66:	941e      	str	r4, [sp, #120]	; 0x78
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d68:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8000d6a:	4898      	ldr	r0, [pc, #608]	; (8000fcc <main+0x280>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6c:	f043 0304 	orr.w	r3, r3, #4
 8000d70:	632b      	str	r3, [r5, #48]	; 0x30
 8000d72:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	9302      	str	r3, [sp, #8]
 8000d7a:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d7c:	9403      	str	r4, [sp, #12]
 8000d7e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d84:	632b      	str	r3, [r5, #48]	; 0x30
 8000d86:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d8c:	9303      	str	r3, [sp, #12]
 8000d8e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	9404      	str	r4, [sp, #16]
 8000d92:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	632b      	str	r3, [r5, #48]	; 0x30
 8000d9a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000d9c:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8000da0:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8000da4:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8000daa:	f003 fe4b 	bl	8004a44 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000dae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000db2:	4886      	ldr	r0, [pc, #536]	; (8000fcc <main+0x280>)
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000db4:	931a      	str	r3, [sp, #104]	; 0x68
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000db6:	a91a      	add	r1, sp, #104	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000db8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dbe:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dc0:	2702      	movs	r7, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f003 fd4a 	bl	800485c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8000dc8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dcc:	487f      	ldr	r0, [pc, #508]	; (8000fcc <main+0x280>)
 8000dce:	a91a      	add	r1, sp, #104	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd0:	e9cd 361a 	strd	r3, r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dd4:	e9cd 771c 	strd	r7, r7, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd8:	f003 fd40 	bl	800485c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ddc:	9401      	str	r4, [sp, #4]
 8000dde:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000de0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000de4:	632b      	str	r3, [r5, #48]	; 0x30
 8000de6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hadc1.Instance = ADC1;
 8000de8:	4d79      	ldr	r5, [pc, #484]	; (8000fd0 <main+0x284>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000dee:	f04f 0820 	mov.w	r8, #32
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000df2:	9301      	str	r3, [sp, #4]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000df4:	4642      	mov	r2, r8
 8000df6:	4621      	mov	r1, r4
 8000df8:	a81a      	add	r0, sp, #104	; 0x68
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dfa:	9b01      	ldr	r3, [sp, #4]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000dfc:	f007 fd8c 	bl	8008918 <memset>
  hadc1.Instance = ADC1;
 8000e00:	4b74      	ldr	r3, [pc, #464]	; (8000fd4 <main+0x288>)
 8000e02:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e04:	4b74      	ldr	r3, [pc, #464]	; (8000fd8 <main+0x28c>)
 8000e06:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e0c:	606b      	str	r3, [r5, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e0e:	4628      	mov	r0, r5
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000e10:	f44f 6300 	mov.w	r3, #2048	; 0x800
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e14:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 8000e18:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e1c:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e1e:	612e      	str	r6, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e20:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e22:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e26:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e28:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.NbrOfConversion = 2;
 8000e2c:	61ef      	str	r7, [r5, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e2e:	616e      	str	r6, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000e30:	60eb      	str	r3, [r5, #12]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e32:	f003 f9d7 	bl	80041e4 <HAL_ADC_Init>
 8000e36:	b108      	cbz	r0, 8000e3c <main+0xf0>
 8000e38:	b672      	cpsid	i
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <main+0xee>
  sConfigInjected.InjectedRank = 1;
 8000e3c:	e9cd 061a 	strd	r0, r6, [sp, #104]	; 0x68
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000e40:	9020      	str	r0, [sp, #128]	; 0x80
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e42:	f8ad 007c 	strh.w	r0, [sp, #124]	; 0x7c
  sConfigInjected.InjectedOffset = 0;
 8000e46:	901d      	str	r0, [sp, #116]	; 0x74
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000e48:	2403      	movs	r4, #3
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8000e4a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e4e:	a91a      	add	r1, sp, #104	; 0x68
 8000e50:	4628      	mov	r0, r5
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000e52:	961c      	str	r6, [sp, #112]	; 0x70
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000e54:	941e      	str	r4, [sp, #120]	; 0x78
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8000e56:	9321      	str	r3, [sp, #132]	; 0x84
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e58:	f003 fb1e 	bl	8004498 <HAL_ADCEx_InjectedConfigChannel>
 8000e5c:	b108      	cbz	r0, 8000e62 <main+0x116>
 8000e5e:	b672      	cpsid	i
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <main+0x114>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8000e62:	230b      	movs	r3, #11
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e64:	a91a      	add	r1, sp, #104	; 0x68
 8000e66:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = 2;
 8000e68:	971b      	str	r7, [sp, #108]	; 0x6c
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8000e6a:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e6c:	f003 fb14 	bl	8004498 <HAL_ADCEx_InjectedConfigChannel>
 8000e70:	b108      	cbz	r0, 8000e76 <main+0x12a>
 8000e72:	b672      	cpsid	i
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <main+0x128>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8000e76:	230a      	movs	r3, #10
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e78:	a91a      	add	r1, sp, #104	; 0x68
 8000e7a:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = 3;
 8000e7c:	941b      	str	r4, [sp, #108]	; 0x6c
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8000e7e:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e80:	f003 fb0a 	bl	8004498 <HAL_ADCEx_InjectedConfigChannel>
 8000e84:	b108      	cbz	r0, 8000e8a <main+0x13e>
 8000e86:	b672      	cpsid	i
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <main+0x13c>
  sConfig.Offset = 0;
 8000e8a:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e8c:	a913      	add	r1, sp, #76	; 0x4c
 8000e8e:	4628      	mov	r0, r5
  sConfig.Rank = 1;
 8000e90:	e9cd 6613 	strd	r6, r6, [sp, #76]	; 0x4c
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000e94:	9715      	str	r7, [sp, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e96:	f003 fa51 	bl	800433c <HAL_ADC_ConfigChannel>
 8000e9a:	b108      	cbz	r0, 8000ea0 <main+0x154>
 8000e9c:	b672      	cpsid	i
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <main+0x152>
  sConfig.Channel = ADC_CHANNEL_12;
 8000ea0:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea2:	4628      	mov	r0, r5
 8000ea4:	a913      	add	r1, sp, #76	; 0x4c
  sConfig.Rank = 2;
 8000ea6:	9714      	str	r7, [sp, #80]	; 0x50
  sConfig.Channel = ADC_CHANNEL_12;
 8000ea8:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eaa:	f003 fa47 	bl	800433c <HAL_ADC_ConfigChannel>
 8000eae:	4604      	mov	r4, r0
 8000eb0:	b108      	cbz	r0, 8000eb6 <main+0x16a>
 8000eb2:	b672      	cpsid	i
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <main+0x168>
  htim1.Instance = TIM1;
 8000eb6:	4d49      	ldr	r5, [pc, #292]	; (8000fdc <main+0x290>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000eb8:	900c      	str	r0, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eba:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
 8000ebe:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
 8000ec2:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ec6:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
 8000eca:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ece:	9005      	str	r0, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ed0:	9019      	str	r0, [sp, #100]	; 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed2:	9006      	str	r0, [sp, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ed4:	4601      	mov	r1, r0
 8000ed6:	4642      	mov	r2, r8
 8000ed8:	a81a      	add	r0, sp, #104	; 0x68
 8000eda:	f007 fd1d 	bl	8008918 <memset>
  htim1.Instance = TIM1;
 8000ede:	4b40      	ldr	r3, [pc, #256]	; (8000fe0 <main+0x294>)
 8000ee0:	602b      	str	r3, [r5, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000ee2:	f44f 6caf 	mov.w	ip, #1400	; 0x578
 8000ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000eea:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000eec:	e9c5 c303 	strd	ip, r3, [r5, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000ef0:	f8c5 8008 	str.w	r8, [r5, #8]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000ef4:	616e      	str	r6, [r5, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000ef6:	606c      	str	r4, [r5, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef8:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000efa:	f004 f8ab 	bl	8005054 <HAL_TIM_Base_Init>
 8000efe:	b108      	cbz	r0, 8000f04 <main+0x1b8>
 8000f00:	b672      	cpsid	i
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <main+0x1b6>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f04:	4628      	mov	r0, r5
 8000f06:	f004 f957 	bl	80051b8 <HAL_TIM_PWM_Init>
 8000f0a:	b108      	cbz	r0, 8000f10 <main+0x1c4>
 8000f0c:	b672      	cpsid	i
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <main+0x1c2>
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000f10:	2310      	movs	r3, #16
 8000f12:	2606      	movs	r6, #6
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000f14:	a90c      	add	r1, sp, #48	; 0x30
 8000f16:	4628      	mov	r0, r5
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000f18:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000f1c:	f004 faca 	bl	80054b4 <HAL_TIM_SlaveConfigSynchro>
 8000f20:	4603      	mov	r3, r0
 8000f22:	b108      	cbz	r0, 8000f28 <main+0x1dc>
 8000f24:	b672      	cpsid	i
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <main+0x1da>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f28:	4628      	mov	r0, r5
 8000f2a:	a905      	add	r1, sp, #20
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2c:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f30:	f004 fbfe 	bl	8005730 <HAL_TIMEx_MasterConfigSynchronization>
 8000f34:	b108      	cbz	r0, 8000f3a <main+0x1ee>
 8000f36:	b672      	cpsid	i
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <main+0x1ec>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f3a:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f3c:	2660      	movs	r6, #96	; 0x60
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8000f3e:	f44f 732f 	mov.w	r3, #700	; 0x2bc
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f42:	4826      	ldr	r0, [pc, #152]	; (8000fdc <main+0x290>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f44:	9613      	str	r6, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f46:	a913      	add	r1, sp, #76	; 0x4c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f48:	e9cd 2215 	strd	r2, r2, [sp, #84]	; 0x54
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f4c:	e9cd 2217 	strd	r2, r2, [sp, #92]	; 0x5c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f50:	9219      	str	r2, [sp, #100]	; 0x64
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8000f52:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f54:	f004 f9ae 	bl	80052b4 <HAL_TIM_PWM_ConfigChannel>
 8000f58:	b108      	cbz	r0, 8000f5e <main+0x212>
 8000f5a:	b672      	cpsid	i
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <main+0x210>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f5e:	481f      	ldr	r0, [pc, #124]	; (8000fdc <main+0x290>)
 8000f60:	2204      	movs	r2, #4
 8000f62:	a913      	add	r1, sp, #76	; 0x4c
 8000f64:	f004 f9a6 	bl	80052b4 <HAL_TIM_PWM_ConfigChannel>
 8000f68:	b108      	cbz	r0, 8000f6e <main+0x222>
 8000f6a:	b672      	cpsid	i
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <main+0x220>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f6e:	481b      	ldr	r0, [pc, #108]	; (8000fdc <main+0x290>)
 8000f70:	2208      	movs	r2, #8
 8000f72:	a913      	add	r1, sp, #76	; 0x4c
 8000f74:	f004 f99e 	bl	80052b4 <HAL_TIM_PWM_ConfigChannel>
 8000f78:	b108      	cbz	r0, 8000f7e <main+0x232>
 8000f7a:	b672      	cpsid	i
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <main+0x230>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8000f7e:	2470      	movs	r4, #112	; 0x70
 8000f80:	f240 5377 	movw	r3, #1399	; 0x577
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f84:	4815      	ldr	r0, [pc, #84]	; (8000fdc <main+0x290>)
 8000f86:	220c      	movs	r2, #12
 8000f88:	a913      	add	r1, sp, #76	; 0x4c
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8000f8a:	e9cd 4313 	strd	r4, r3, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f8e:	f004 f991 	bl	80052b4 <HAL_TIM_PWM_ConfigChannel>
 8000f92:	b108      	cbz	r0, 8000f98 <main+0x24c>
 8000f94:	b672      	cpsid	i
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <main+0x24a>
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8000f98:	f44f 7380 	mov.w	r3, #256	; 0x100
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f9c:	901d      	str	r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8000f9e:	901f      	str	r0, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fa0:	9021      	str	r0, [sp, #132]	; 0x84
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8000fa2:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fa4:	480d      	ldr	r0, [pc, #52]	; (8000fdc <main+0x290>)
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000faa:	f44f 6800 	mov.w	r8, #2048	; 0x800
 8000fae:	f44f 6780 	mov.w	r7, #1024	; 0x400
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fb2:	a91a      	add	r1, sp, #104	; 0x68
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000fb4:	e9cd 871a 	strd	r8, r7, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000fb8:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fba:	f004 fbf1 	bl	80057a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fbe:	4604      	mov	r4, r0
 8000fc0:	b180      	cbz	r0, 8000fe4 <main+0x298>
 8000fc2:	b672      	cpsid	i
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <main+0x278>
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020800 	.word	0x40020800
 8000fd0:	20000890 	.word	0x20000890
 8000fd4:	40012000 	.word	0x40012000
 8000fd8:	0f000001 	.word	0x0f000001
 8000fdc:	20000998 	.word	0x20000998
 8000fe0:	40010000 	.word	0x40010000
  htim3.Instance = TIM3;
 8000fe4:	4d5a      	ldr	r5, [pc, #360]	; (8001150 <main+0x404>)
  HAL_TIM_MspPostInit(&htim1);
 8000fe6:	485b      	ldr	r0, [pc, #364]	; (8001154 <main+0x408>)
 8000fe8:	f002 fe02 	bl	8003bf0 <HAL_TIM_MspPostInit>
  htim3.Instance = TIM3;
 8000fec:	4b5a      	ldr	r3, [pc, #360]	; (8001158 <main+0x40c>)
  htim3.Init.Period = 0x800;
 8000fee:	f8c5 800c 	str.w	r8, [r5, #12]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ff2:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff4:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff8:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
 8000ffc:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
 8001000:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001004:	e9c5 4401 	strd	r4, r4, [r5, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001008:	9420      	str	r4, [sp, #128]	; 0x80
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100a:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100c:	61ac      	str	r4, [r5, #24]
  htim3.Instance = TIM3;
 800100e:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001010:	f004 f8d2 	bl	80051b8 <HAL_TIM_PWM_Init>
 8001014:	b108      	cbz	r0, 800101a <main+0x2ce>
 8001016:	b672      	cpsid	i
  while (1)
 8001018:	e7fe      	b.n	8001018 <main+0x2cc>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101a:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800101e:	a913      	add	r1, sp, #76	; 0x4c
 8001020:	4628      	mov	r0, r5
 8001022:	f004 fb85 	bl	8005730 <HAL_TIMEx_MasterConfigSynchronization>
 8001026:	b108      	cbz	r0, 800102c <main+0x2e0>
 8001028:	b672      	cpsid	i
  while (1)
 800102a:	e7fe      	b.n	800102a <main+0x2de>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800102c:	901c      	str	r0, [sp, #112]	; 0x70
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800102e:	901e      	str	r0, [sp, #120]	; 0x78
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001030:	2204      	movs	r2, #4
 8001032:	a91a      	add	r1, sp, #104	; 0x68
 8001034:	4628      	mov	r0, r5
  sConfigOC.Pulse = 0x400;
 8001036:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800103a:	f004 f93b 	bl	80052b4 <HAL_TIM_PWM_ConfigChannel>
 800103e:	4604      	mov	r4, r0
 8001040:	b108      	cbz	r0, 8001046 <main+0x2fa>
 8001042:	b672      	cpsid	i
  while (1)
 8001044:	e7fe      	b.n	8001044 <main+0x2f8>
  HAL_TIM_MspPostInit(&htim3);
 8001046:	4628      	mov	r0, r5
 8001048:	f002 fdd2 	bl	8003bf0 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 800104c:	4843      	ldr	r0, [pc, #268]	; (800115c <main+0x410>)
  huart2.Init.BaudRate = 1843200;
 800104e:	4a44      	ldr	r2, [pc, #272]	; (8001160 <main+0x414>)
  huart2.Init.Parity = UART_PARITY_NONE;
 8001050:	6104      	str	r4, [r0, #16]
  huart2.Init.BaudRate = 1843200;
 8001052:	f44f 13e1 	mov.w	r3, #1843200	; 0x1c2000
 8001056:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800105a:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800105c:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001064:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001066:	f004 fbc9 	bl	80057fc <HAL_UART_Init>
 800106a:	4605      	mov	r5, r0
 800106c:	b108      	cbz	r0, 8001072 <main+0x326>
 800106e:	b672      	cpsid	i
  while (1)
 8001070:	e7fe      	b.n	8001070 <main+0x324>
  MX_MotorControl_Init();
 8001072:	f001 f963 	bl	800233c <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(USART2_IRQn, 8, 0);
 8001076:	462a      	mov	r2, r5
 8001078:	2108      	movs	r1, #8
 800107a:	2026      	movs	r0, #38	; 0x26
 800107c:	f003 faf0 	bl	8004660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001080:	2026      	movs	r0, #38	; 0x26
 8001082:	f003 fb2b 	bl	80046dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 8, 0);
 8001086:	462a      	mov	r2, r5
 8001088:	2108      	movs	r1, #8
 800108a:	2010      	movs	r0, #16
 800108c:	f003 fae8 	bl	8004660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001090:	2010      	movs	r0, #16
 8001092:	f003 fb23 	bl	80046dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC_IRQn, 7, 0);
 8001096:	462a      	mov	r2, r5
 8001098:	2107      	movs	r1, #7
 800109a:	2012      	movs	r0, #18
 800109c:	f003 fae0 	bl	8004660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010a0:	2012      	movs	r0, #18
 80010a2:	f003 fb1b 	bl	80046dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80010a6:	462a      	mov	r2, r5
 80010a8:	2105      	movs	r1, #5
 80010aa:	2019      	movs	r0, #25
 80010ac:	f003 fad8 	bl	8004660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80010b0:	2019      	movs	r0, #25
 80010b2:	f003 fb13 	bl	80046dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 9, 0);
 80010b6:	462a      	mov	r2, r5
 80010b8:	2109      	movs	r1, #9
 80010ba:	2018      	movs	r0, #24
 80010bc:	f003 fad0 	bl	8004660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80010c0:	2018      	movs	r0, #24
 80010c2:	f003 fb0b 	bl	80046dc <HAL_NVIC_EnableIRQ>
  osThreadDef(mediumFrequency, startMediumFrequencyTask, osPriorityNormal, 0, 128);
 80010c6:	4c27      	ldr	r4, [pc, #156]	; (8001164 <main+0x418>)
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 8, 0);
 80010c8:	462a      	mov	r2, r5
 80010ca:	2108      	movs	r1, #8
 80010cc:	2028      	movs	r0, #40	; 0x28
 80010ce:	f003 fac7 	bl	8004660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010d2:	2028      	movs	r0, #40	; 0x28
 80010d4:	f003 fb02 	bl	80046dc <HAL_NVIC_EnableIRQ>
  osThreadDef(mediumFrequency, startMediumFrequencyTask, osPriorityNormal, 0, 128);
 80010d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010da:	ae05      	add	r6, sp, #20
 80010dc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80010de:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80010e2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  mediumFrequencyHandle = osThreadCreate(osThread(mediumFrequency), NULL);
 80010e6:	4629      	mov	r1, r5
 80010e8:	a805      	add	r0, sp, #20
 80010ea:	f004 fc27 	bl	800593c <osThreadCreate>
 80010ee:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <main+0x41c>)
  osThreadDef(safety, StartSafetyTask, osPriorityAboveNormal, 0, 128);
 80010f0:	f104 070c 	add.w	r7, r4, #12
  mediumFrequencyHandle = osThreadCreate(osThread(mediumFrequency), NULL);
 80010f4:	6018      	str	r0, [r3, #0]
  osThreadDef(safety, StartSafetyTask, osPriorityAboveNormal, 0, 128);
 80010f6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80010f8:	ae0c      	add	r6, sp, #48	; 0x30
 80010fa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80010fc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8001100:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  safetyHandle = osThreadCreate(osThread(safety), NULL);
 8001104:	4629      	mov	r1, r5
 8001106:	a80c      	add	r0, sp, #48	; 0x30
 8001108:	f004 fc18 	bl	800593c <osThreadCreate>
 800110c:	4b17      	ldr	r3, [pc, #92]	; (800116c <main+0x420>)
  osThreadDef(userTask, StartUserTask, osPriorityLow, 0, 128);
 800110e:	f104 0728 	add.w	r7, r4, #40	; 0x28
  safetyHandle = osThreadCreate(osThread(safety), NULL);
 8001112:	6018      	str	r0, [r3, #0]
  osThreadDef(userTask, StartUserTask, osPriorityLow, 0, 128);
 8001114:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001116:	ae13      	add	r6, sp, #76	; 0x4c
 8001118:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800111a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800111e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  userTaskHandle = osThreadCreate(osThread(userTask), NULL);
 8001122:	4629      	mov	r1, r5
 8001124:	a813      	add	r0, sp, #76	; 0x4c
 8001126:	f004 fc09 	bl	800593c <osThreadCreate>
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <main+0x424>)
  osThreadDef(motorTask, StartMotorTask, osPriorityBelowNormal, 0, 128);
 800112c:	3444      	adds	r4, #68	; 0x44
  userTaskHandle = osThreadCreate(osThread(userTask), NULL);
 800112e:	6018      	str	r0, [r3, #0]
  osThreadDef(motorTask, StartMotorTask, osPriorityBelowNormal, 0, 128);
 8001130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001132:	ae1a      	add	r6, sp, #104	; 0x68
 8001134:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001136:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800113a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 800113e:	4629      	mov	r1, r5
 8001140:	a81a      	add	r0, sp, #104	; 0x68
 8001142:	f004 fbfb 	bl	800593c <osThreadCreate>
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <main+0x428>)
 8001148:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800114a:	f004 fbf1 	bl	8005930 <osKernelStart>
  while (1)
 800114e:	e7fe      	b.n	800114e <main+0x402>
 8001150:	200009e0 	.word	0x200009e0
 8001154:	20000998 	.word	0x20000998
 8001158:	40000400 	.word	0x40000400
 800115c:	20000a28 	.word	0x20000a28
 8001160:	40004400 	.word	0x40004400
 8001164:	08008b04 	.word	0x08008b04
 8001168:	20000a6c 	.word	0x20000a6c
 800116c:	20000a74 	.word	0x20000a74
 8001170:	20000a78 	.word	0x20000a78
 8001174:	20000a70 	.word	0x20000a70

08001178 <MotorStart>:
void MotorStart(){
 8001178:	b570      	push	{r4, r5, r6, lr}
	MC_ProgramSpeedRampMotor1(RPM_2_SPEED_UNIT(MotorMaxSpeed * MotorDirection), 1);
 800117a:	4a1a      	ldr	r2, [pc, #104]	; (80011e4 <MotorStart+0x6c>)
 800117c:	4e1a      	ldr	r6, [pc, #104]	; (80011e8 <MotorStart+0x70>)
 800117e:	8812      	ldrh	r2, [r2, #0]
 8001180:	8833      	ldrh	r3, [r6, #0]
 8001182:	481a      	ldr	r0, [pc, #104]	; (80011ec <MotorStart+0x74>)
	osDelay(MotorCurrentSpeed / 3);
 8001184:	4d1a      	ldr	r5, [pc, #104]	; (80011f0 <MotorStart+0x78>)
 8001186:	4c1b      	ldr	r4, [pc, #108]	; (80011f4 <MotorStart+0x7c>)
	MC_ProgramSpeedRampMotor1(RPM_2_SPEED_UNIT(MotorMaxSpeed * MotorDirection), 1);
 8001188:	fb13 f302 	smulbb	r3, r3, r2
 800118c:	fb80 2003 	smull	r2, r0, r0, r3
 8001190:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8001194:	2101      	movs	r1, #1
 8001196:	b200      	sxth	r0, r0
 8001198:	f000 f8ba 	bl	8001310 <MC_ProgramSpeedRampMotor1>
	osDelay(MotorCurrentSpeed / 3);
 800119c:	f9b5 3000 	ldrsh.w	r3, [r5]
 80011a0:	fb84 2003 	smull	r2, r0, r4, r3
 80011a4:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 80011a8:	b200      	sxth	r0, r0
 80011aa:	f004 fbf9 	bl	80059a0 <osDelay>
	MC_ProgramSpeedRampMotor1(RPM_2_SPEED_UNIT(0), 0);
 80011ae:	2100      	movs	r1, #0
 80011b0:	4608      	mov	r0, r1
 80011b2:	f000 f8ad 	bl	8001310 <MC_ProgramSpeedRampMotor1>
	osDelay((MotorMaxSpeed - MotorCurrentSpeed) / 3);
 80011b6:	f9b5 2000 	ldrsh.w	r2, [r5]
 80011ba:	f9b6 3000 	ldrsh.w	r3, [r6]
 80011be:	1a9b      	subs	r3, r3, r2
 80011c0:	fb84 2003 	smull	r2, r0, r4, r3
 80011c4:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 80011c8:	f004 fbea 	bl	80059a0 <osDelay>
}
 80011cc:	e004      	b.n	80011d8 <MotorStart+0x60>
		MC_StartMotor1();
 80011ce:	f000 f893 	bl	80012f8 <MC_StartMotor1>
		osDelay(1);
 80011d2:	2001      	movs	r0, #1
 80011d4:	f004 fbe4 	bl	80059a0 <osDelay>
	while (MC_GetSTMStateMotor1() != 6){
 80011d8:	f000 f8a6 	bl	8001328 <MC_GetSTMStateMotor1>
 80011dc:	2806      	cmp	r0, #6
 80011de:	d1f6      	bne.n	80011ce <MotorStart+0x56>
}
 80011e0:	bd70      	pop	{r4, r5, r6, pc}
 80011e2:	bf00      	nop
 80011e4:	20000002 	.word	0x20000002
 80011e8:	20000004 	.word	0x20000004
 80011ec:	2aaaaaab 	.word	0x2aaaaaab
 80011f0:	2000088e 	.word	0x2000088e
 80011f4:	55555556 	.word	0x55555556

080011f8 <StartMotorTask>:
{
 80011f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MotorStart();
 80011fc:	f7ff ffbc 	bl	8001178 <MotorStart>
	  if (MC_CurrentSpeed < MC_TargetSpeed){
 8001200:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80012d4 <StartMotorTask+0xdc>
 8001204:	4a2f      	ldr	r2, [pc, #188]	; (80012c4 <StartMotorTask+0xcc>)
 8001206:	f9b8 3000 	ldrsh.w	r3, [r8]
 800120a:	f9b2 1000 	ldrsh.w	r1, [r2]
	  for (int i = 0; i < MotorRampAccFactor; i++){
 800120e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80012d8 <StartMotorTask+0xe0>
 8001212:	4d2d      	ldr	r5, [pc, #180]	; (80012c8 <StartMotorTask+0xd0>)
 8001214:	f9b9 2000 	ldrsh.w	r2, [r9]
 8001218:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 80012dc <StartMotorTask+0xe4>
 800121c:	4f2b      	ldr	r7, [pc, #172]	; (80012cc <StartMotorTask+0xd4>)
	MC_ProgramSpeedRampMotor1(RPM_2_SPEED_UNIT(MotorMaxSpeed * MotorDirection), 1);
 800121e:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 80012e0 <StartMotorTask+0xe8>
	osDelay(MotorCurrentSpeed / 3);
 8001222:	4e2b      	ldr	r6, [pc, #172]	; (80012d0 <StartMotorTask+0xd8>)
	  if (MC_CurrentSpeed < MC_TargetSpeed){
 8001224:	428b      	cmp	r3, r1
 8001226:	da3e      	bge.n	80012a6 <StartMotorTask+0xae>
		  MC_CurrentSpeed ++;
 8001228:	3301      	adds	r3, #1
 800122a:	b21b      	sxth	r3, r3
 800122c:	f8a8 3000 	strh.w	r3, [r8]
	  for (int i = 0; i < MotorRampAccFactor; i++){
 8001230:	2a00      	cmp	r2, #0
 8001232:	dd3f      	ble.n	80012b4 <StartMotorTask+0xbc>
 8001234:	2400      	movs	r4, #0
		  if (MC_CurrentSpeed >= 0){
 8001236:	2b00      	cmp	r3, #0
		  MotorCurrentSpeed = MC_CurrentSpeed;
 8001238:	f04f 0201 	mov.w	r2, #1
		  if (MC_CurrentSpeed >= 0){
 800123c:	db3b      	blt.n	80012b6 <StartMotorTask+0xbe>
		  MotorCurrentSpeed = MC_CurrentSpeed;
 800123e:	802b      	strh	r3, [r5, #0]
			  MotorDirection = 1;
 8001240:	4610      	mov	r0, r2
	MC_ProgramSpeedRampMotor1(RPM_2_SPEED_UNIT(MotorMaxSpeed * MotorDirection), 1);
 8001242:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001246:	f8ab 0000 	strh.w	r0, [fp]
 800124a:	fb02 f303 	mul.w	r3, r2, r3
 800124e:	fb8a 2003 	smull	r2, r0, sl, r3
 8001252:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8001256:	2101      	movs	r1, #1
 8001258:	b200      	sxth	r0, r0
 800125a:	f000 f859 	bl	8001310 <MC_ProgramSpeedRampMotor1>
	osDelay(MotorCurrentSpeed / 3);
 800125e:	f9b5 3000 	ldrsh.w	r3, [r5]
 8001262:	fb86 2003 	smull	r2, r0, r6, r3
 8001266:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 800126a:	b200      	sxth	r0, r0
 800126c:	f004 fb98 	bl	80059a0 <osDelay>
	MC_ProgramSpeedRampMotor1(RPM_2_SPEED_UNIT(0), 0);
 8001270:	2100      	movs	r1, #0
 8001272:	4608      	mov	r0, r1
 8001274:	f000 f84c 	bl	8001310 <MC_ProgramSpeedRampMotor1>
	osDelay((MotorMaxSpeed - MotorCurrentSpeed) / 3);
 8001278:	f9b5 2000 	ldrsh.w	r2, [r5]
 800127c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001280:	1a9b      	subs	r3, r3, r2
 8001282:	fb86 2003 	smull	r2, r0, r6, r3
 8001286:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 800128a:	f004 fb89 	bl	80059a0 <osDelay>
	  for (int i = 0; i < MotorRampAccFactor; i++){
 800128e:	f9b9 2000 	ldrsh.w	r2, [r9]
		  MotorCurrentSpeed = MC_CurrentSpeed;
 8001292:	f9b8 3000 	ldrsh.w	r3, [r8]
	  for (int i = 0; i < MotorRampAccFactor; i++){
 8001296:	3401      	adds	r4, #1
 8001298:	42a2      	cmp	r2, r4
 800129a:	dccc      	bgt.n	8001236 <StartMotorTask+0x3e>
	  if (MC_CurrentSpeed < MC_TargetSpeed){
 800129c:	4909      	ldr	r1, [pc, #36]	; (80012c4 <StartMotorTask+0xcc>)
 800129e:	f9b1 1000 	ldrsh.w	r1, [r1]
 80012a2:	428b      	cmp	r3, r1
 80012a4:	dbc0      	blt.n	8001228 <StartMotorTask+0x30>
	  else if (MC_CurrentSpeed > MC_TargetSpeed){
 80012a6:	ddc3      	ble.n	8001230 <StartMotorTask+0x38>
		  MC_CurrentSpeed --;
 80012a8:	3b01      	subs	r3, #1
 80012aa:	b21b      	sxth	r3, r3
	  for (int i = 0; i < MotorRampAccFactor; i++){
 80012ac:	2a00      	cmp	r2, #0
		  MC_CurrentSpeed --;
 80012ae:	f8a8 3000 	strh.w	r3, [r8]
	  for (int i = 0; i < MotorRampAccFactor; i++){
 80012b2:	dcbf      	bgt.n	8001234 <StartMotorTask+0x3c>
		  MC_CurrentSpeed ++;
 80012b4:	e7fe      	b.n	80012b4 <StartMotorTask+0xbc>
			  MotorCurrentSpeed = -MC_CurrentSpeed;
 80012b6:	425b      	negs	r3, r3
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295
			  MotorDirection = -1;
 80012bc:	4610      	mov	r0, r2
			  MotorCurrentSpeed = -MC_CurrentSpeed;
 80012be:	802b      	strh	r3, [r5, #0]
			  MotorDirection = -1;
 80012c0:	e7bf      	b.n	8001242 <StartMotorTask+0x4a>
 80012c2:	bf00      	nop
 80012c4:	20000000 	.word	0x20000000
 80012c8:	2000088e 	.word	0x2000088e
 80012cc:	20000004 	.word	0x20000004
 80012d0:	55555556 	.word	0x55555556
 80012d4:	2000088c 	.word	0x2000088c
 80012d8:	20000006 	.word	0x20000006
 80012dc:	20000002 	.word	0x20000002
 80012e0:	2aaaaaab 	.word	0x2aaaaaab

080012e4 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM2) {
 80012e4:	6803      	ldr	r3, [r0, #0]
 80012e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012ea:	d000      	beq.n	80012ee <HAL_TIM_PeriodElapsedCallback+0xa>
}
 80012ec:	4770      	bx	lr
    HAL_IncTick();
 80012ee:	f002 bf67 	b.w	80041c0 <HAL_IncTick>
 80012f2:	bf00      	nop

080012f4 <Error_Handler>:
 80012f4:	b672      	cpsid	i
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <Error_Handler+0x2>

080012f8 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 80012f8:	4b01      	ldr	r3, [pc, #4]	; (8001300 <MC_StartMotor1+0x8>)
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	f000 b8d2 	b.w	80014a4 <MCI_StartMotor>
 8001300:	20001c7c 	.word	0x20001c7c

08001304 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8001304:	4b01      	ldr	r3, [pc, #4]	; (800130c <MC_StopMotor1+0x8>)
 8001306:	6818      	ldr	r0, [r3, #0]
 8001308:	f000 b8e2 	b.w	80014d0 <MCI_StopMotor>
 800130c:	20001c7c 	.word	0x20001c7c

08001310 <MC_ProgramSpeedRampMotor1>:
  * @param  hDurationms Duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1( int16_t hFinalSpeed, uint16_t hDurationms )
{
 8001310:	b410      	push	{r4}
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8001312:	4c04      	ldr	r4, [pc, #16]	; (8001324 <MC_ProgramSpeedRampMotor1+0x14>)
{
 8001314:	4603      	mov	r3, r0
 8001316:	460a      	mov	r2, r1
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8001318:	6820      	ldr	r0, [r4, #0]
}
 800131a:	f85d 4b04 	ldr.w	r4, [sp], #4
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 800131e:	4619      	mov	r1, r3
 8001320:	f000 b820 	b.w	8001364 <MCI_ExecSpeedRamp>
 8001324:	20001c7c 	.word	0x20001c7c

08001328 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8001328:	4b01      	ldr	r3, [pc, #4]	; (8001330 <MC_GetSTMStateMotor1+0x8>)
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	f000 b8b4 	b.w	8001498 <MCI_GetSTMState>
 8001330:	20001c7c 	.word	0x20001c7c

08001334 <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */
__weak uint8_t MC_ProfilerCommand (uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return MCP_CMD_UNKNOWN;
}
 8001334:	2002      	movs	r0, #2
 8001336:	4770      	bx	lr

08001338 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop

0800133c <MC_APP_PostMediumFrequencyHook_M1>:
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop

08001340 <MCI_Init>:
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001340:	f04f 0c00 	mov.w	ip, #0
    pHandle->pFOCVars = pFOCVars;
 8001344:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->pPWM = pPWMHandle;
 8001348:	6083      	str	r3, [r0, #8]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 800134a:	f880 c010 	strb.w	ip, [r0, #16]
    pHandle->hFinalSpeed = 0;
 800134e:	f8c0 c012 	str.w	ip, [r0, #18]
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
 8001352:	f8a0 c01a 	strh.w	ip, [r0, #26]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 8001356:	f880 c022 	strb.w	ip, [r0, #34]	; 0x22
    pHandle->DirectCommand = MCI_NO_COMMAND;
 800135a:	f8a0 c01c 	strh.w	ip, [r0, #28]
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 800135e:	f8c0 c01e 	str.w	ip, [r0, #30]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001362:	4770      	bx	lr

08001364 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001364:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001368:	f240 2301 	movw	r3, #513	; 0x201
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 800136c:	f880 c010 	strb.w	ip, [r0, #16]
    pHandle->hFinalSpeed = hFinalSpeed;
 8001370:	8241      	strh	r1, [r0, #18]
    pHandle->hDurationms = hDurationms;
 8001372:	8342      	strh	r2, [r0, #26]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001374:	8443      	strh	r3, [r0, #34]	; 0x22
	pHandle->LastModalitySetByUser = MCM_OPEN_LOOP_CURRENT_MODE;

#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001376:	4770      	bx	lr

08001378 <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8001378:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800137c:	f240 4301 	movw	r3, #1025	; 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8001380:	f880 c010 	strb.w	ip, [r0, #16]
    pHandle->hFinalTorque = hFinalTorque;
 8001384:	8281      	strh	r1, [r0, #20]
    pHandle->hDurationms = hDurationms;
 8001386:	8342      	strh	r2, [r0, #26]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001388:	8443      	strh	r3, [r0, #34]	; 0x22
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 800138a:	4770      	bx	lr

0800138c <MCI_SetSpeedMode>:
  *         format.
  * @retval none.
  */
__weak void MCI_SetSpeedMode( MCI_Handle_t * pHandle )
{
  pHandle->pFOCVars->bDriveInput = INTERNAL;
 800138c:	6843      	ldr	r3, [r0, #4]
{
 800138e:	b510      	push	{r4, lr}
  pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
{
 8001396:	4604      	mov	r4, r0
  STC_SetControlMode( pHandle->pSTC, MCM_SPEED_MODE );
 8001398:	2103      	movs	r1, #3
 800139a:	6800      	ldr	r0, [r0, #0]
 800139c:	f006 fe30 	bl	8008000 <STC_SetControlMode>
  pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 80013a0:	2303      	movs	r3, #3
 80013a2:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
 80013a6:	bd10      	pop	{r4, pc}

080013a8 <MCI_SetOpenLoopCurrent>:
  *         format.
  * @retval none.
  */
__weak void MCI_SetOpenLoopCurrent( MCI_Handle_t * pHandle )
{
  pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80013a8:	6843      	ldr	r3, [r0, #4]
{
 80013aa:	b510      	push	{r4, lr}
  pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
{
 80013b2:	4604      	mov	r4, r0
  STC_SetControlMode( pHandle->pSTC, MCM_OPEN_LOOP_CURRENT_MODE );
 80013b4:	2102      	movs	r1, #2
 80013b6:	6800      	ldr	r0, [r0, #0]
 80013b8:	f006 fe22 	bl	8008000 <STC_SetControlMode>
  pHandle->LastModalitySetByUser = MCM_OPEN_LOOP_CURRENT_MODE;
 80013bc:	2302      	movs	r3, #2
 80013be:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
 80013c2:	bd10      	pop	{r4, pc}

080013c4 <MCI_SetOpenLoopVoltage>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetOpenLoopVoltage( MCI_Handle_t * pHandle )
{
 80013c4:	b538      	push	{r3, r4, r5, lr}
  pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80013c6:	6843      	ldr	r3, [r0, #4]
 80013c8:	2501      	movs	r5, #1
{
 80013ca:	4604      	mov	r4, r0
  pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80013cc:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
  STC_SetControlMode( pHandle->pSTC, MCM_OPEN_LOOP_VOLTAGE_MODE );
 80013d0:	6800      	ldr	r0, [r0, #0]
 80013d2:	4629      	mov	r1, r5
 80013d4:	f006 fe14 	bl	8008000 <STC_SetControlMode>
  pHandle->LastModalitySetByUser = MCM_OPEN_LOOP_VOLTAGE_MODE;
 80013d8:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
}
 80013dc:	bd38      	pop	{r3, r4, r5, pc}
 80013de:	bf00      	nop

080013e0 <MCI_FaultProcessing>:
 * @retval State_t New state machine state after fault processing
 */
__weak void MCI_FaultProcessing(MCI_Handle_t *pHandle, uint16_t hSetErrors, uint16_t hResetErrors)
{
  /* Set current errors */
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80013e0:	8bc3      	ldrh	r3, [r0, #30]
  pHandle->PastFaults |= hSetErrors;
 80013e2:	f8b0 c020 	ldrh.w	ip, [r0, #32]
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80013e6:	430b      	orrs	r3, r1
 80013e8:	ea23 0302 	bic.w	r3, r3, r2
  pHandle->PastFaults |= hSetErrors;
 80013ec:	ea41 010c 	orr.w	r1, r1, ip
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80013f0:	83c3      	strh	r3, [r0, #30]
  pHandle->PastFaults |= hSetErrors;
 80013f2:	8401      	strh	r1, [r0, #32]

  return;
}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop

080013f8 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 80013f8:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d000      	beq.n	8001402 <MCI_ExecBufferedCommands+0xa>
 8001400:	4770      	bx	lr
{
 8001402:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8001404:	7c03      	ldrb	r3, [r0, #16]
 8001406:	3b01      	subs	r3, #1
 8001408:	4604      	mov	r4, r0
 800140a:	2b04      	cmp	r3, #4
 800140c:	d82a      	bhi.n	8001464 <MCI_ExecBufferedCommands+0x6c>
 800140e:	e8df f003 	tbb	[pc, r3]
 8001412:	192d      	.short	0x192d
 8001414:	0311      	.short	0x0311
 8001416:	03          	.byte	0x03
 8001417:	00          	.byte	0x00
          break;
		}

        case MCI_CMD_SETOPENLOOPVOLTAGE:
        {
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001418:	6843      	ldr	r3, [r0, #4]
 800141a:	2201      	movs	r2, #1
 800141c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          VSS_SetMecAcceleration( pHandle->pVSS, pHandle->hFinalSpeed, pHandle->hDurationms);
 8001420:	8b42      	ldrh	r2, [r0, #26]
 8001422:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 8001426:	68c0      	ldr	r0, [r0, #12]
 8001428:	f007 fa1c 	bl	8008864 <VSS_SetMecAcceleration>
          break;
      }

      if (commandHasBeenExecuted)
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 800142c:	2302      	movs	r3, #2
 800142e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
      }
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001432:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001434:	6843      	ldr	r3, [r0, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 800143c:	f8d0 2016 	ldr.w	r2, [r0, #22]
 8001440:	611a      	str	r2, [r3, #16]
      if (commandHasBeenExecuted)
 8001442:	e7f3      	b.n	800142c <MCI_ExecBufferedCommands+0x34>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001444:	6843      	ldr	r3, [r0, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 800144c:	6800      	ldr	r0, [r0, #0]
 800144e:	2104      	movs	r1, #4
 8001450:	f006 fdd6 	bl	8008000 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8001454:	8b62      	ldrh	r2, [r4, #26]
 8001456:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 800145a:	6820      	ldr	r0, [r4, #0]
 800145c:	f006 fdd4 	bl	8008008 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 8001460:	2800      	cmp	r0, #0
 8001462:	d1e3      	bne.n	800142c <MCI_ExecBufferedCommands+0x34>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8001464:	2303      	movs	r3, #3
 8001466:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 800146a:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800146c:	6843      	ldr	r3, [r0, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8001474:	6800      	ldr	r0, [r0, #0]
 8001476:	2103      	movs	r1, #3
 8001478:	f006 fdc2 	bl	8008000 <STC_SetControlMode>
          VSS_SetMecAcceleration( pHandle->pVSS, pHandle->hFinalSpeed, pHandle->hDurationms);
 800147c:	8b62      	ldrh	r2, [r4, #26]
 800147e:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8001482:	68e0      	ldr	r0, [r4, #12]
 8001484:	f007 f9ee 	bl	8008864 <VSS_SetMecAcceleration>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8001488:	8b62      	ldrh	r2, [r4, #26]
 800148a:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 800148e:	6820      	ldr	r0, [r4, #0]
 8001490:	f006 fdba 	bl	8008008 <STC_ExecRamp>
          break;
 8001494:	e7e4      	b.n	8001460 <MCI_ExecBufferedCommands+0x68>
 8001496:	bf00      	nop

08001498 <MCI_GetSTMState>:
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak MCI_State_t  MCI_GetSTMState(MCI_Handle_t *pHandle)
{
  return (pHandle->State);
}
 8001498:	7f40      	ldrb	r0, [r0, #29]
 800149a:	4770      	bx	lr

0800149c <MCI_GetOccurredFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->PastFaults);
}
 800149c:	8c00      	ldrh	r0, [r0, #32]
 800149e:	4770      	bx	lr

080014a0 <MCI_GetCurrentFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->CurrentFaults);
}
 80014a0:	8bc0      	ldrh	r0, [r0, #30]
 80014a2:	4770      	bx	lr

080014a4 <MCI_StartMotor>:
{
 80014a4:	b510      	push	{r4, lr}
 80014a6:	4604      	mov	r4, r0
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80014a8:	f7ff fff6 	bl	8001498 <MCI_GetSTMState>
 80014ac:	b108      	cbz	r0, 80014b2 <MCI_StartMotor+0xe>
    RetVal = false;
 80014ae:	2000      	movs	r0, #0
}
 80014b0:	bd10      	pop	{r4, pc}
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80014b2:	4620      	mov	r0, r4
 80014b4:	f7ff fff2 	bl	800149c <MCI_GetOccurredFaults>
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80014b8:	2800      	cmp	r0, #0
 80014ba:	d1f8      	bne.n	80014ae <MCI_StartMotor+0xa>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80014bc:	4620      	mov	r0, r4
 80014be:	f7ff ffef 	bl	80014a0 <MCI_GetCurrentFaults>
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80014c2:	2800      	cmp	r0, #0
 80014c4:	d1f3      	bne.n	80014ae <MCI_StartMotor+0xa>
    pHandle->DirectCommand = MCI_START;
 80014c6:	2001      	movs	r0, #1
 80014c8:	7720      	strb	r0, [r4, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80014ca:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
}
 80014ce:	bd10      	pop	{r4, pc}

080014d0 <MCI_StopMotor>:
{
 80014d0:	b538      	push	{r3, r4, r5, lr}
 80014d2:	4605      	mov	r5, r0
  State = MCI_GetSTMState(pHandle);
 80014d4:	f7ff ffe0 	bl	8001498 <MCI_GetSTMState>
  if (IDLE == State  || ICLWAIT == State)
 80014d8:	b150      	cbz	r0, 80014f0 <MCI_StopMotor+0x20>
 80014da:	f1b0 040c 	subs.w	r4, r0, #12
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80014de:	4628      	mov	r0, r5
  if (IDLE == State  || ICLWAIT == State)
 80014e0:	bf18      	it	ne
 80014e2:	2401      	movne	r4, #1
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80014e4:	f7ff ffda 	bl	800149c <MCI_GetOccurredFaults>
 80014e8:	b140      	cbz	r0, 80014fc <MCI_StopMotor+0x2c>
    RetVal = false;
 80014ea:	2400      	movs	r4, #0
}
 80014ec:	4620      	mov	r0, r4
 80014ee:	bd38      	pop	{r3, r4, r5, pc}
    status = false;
 80014f0:	4604      	mov	r4, r0
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80014f2:	4628      	mov	r0, r5
 80014f4:	f7ff ffd2 	bl	800149c <MCI_GetOccurredFaults>
 80014f8:	2800      	cmp	r0, #0
 80014fa:	d1f6      	bne.n	80014ea <MCI_StopMotor+0x1a>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 80014fc:	4628      	mov	r0, r5
 80014fe:	f7ff ffcf 	bl	80014a0 <MCI_GetCurrentFaults>
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001502:	2800      	cmp	r0, #0
 8001504:	d1f1      	bne.n	80014ea <MCI_StopMotor+0x1a>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001506:	2c00      	cmp	r4, #0
 8001508:	d0ef      	beq.n	80014ea <MCI_StopMotor+0x1a>
    pHandle->DirectCommand = MCI_STOP;
 800150a:	2305      	movs	r3, #5
 800150c:	772b      	strb	r3, [r5, #28]
    RetVal = true;
 800150e:	e7ed      	b.n	80014ec <MCI_StopMotor+0x1c>

08001510 <MCI_FaultAcknowledged>:
{
 8001510:	b510      	push	{r4, lr}
 8001512:	4604      	mov	r4, r0
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001514:	f7ff ffc0 	bl	8001498 <MCI_GetSTMState>
 8001518:	280b      	cmp	r0, #11
 800151a:	d001      	beq.n	8001520 <MCI_FaultAcknowledged+0x10>
    RetVal = false;
 800151c:	2000      	movs	r0, #0
}
 800151e:	bd10      	pop	{r4, pc}
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001520:	4620      	mov	r0, r4
 8001522:	f7ff ffbd 	bl	80014a0 <MCI_GetCurrentFaults>
 8001526:	2800      	cmp	r0, #0
 8001528:	d1f8      	bne.n	800151c <MCI_FaultAcknowledged+0xc>
    pHandle->DirectCommand = MCI_ACK_FAULTS;
 800152a:	2302      	movs	r3, #2
 800152c:	7723      	strb	r3, [r4, #28]
    pHandle->PastFaults = MC_NO_FAULTS;
 800152e:	8420      	strh	r0, [r4, #32]
    RetVal = true;
 8001530:	2001      	movs	r0, #1
}
 8001532:	bd10      	pop	{r4, pc}

08001534 <MCI_GetFaultState>:
  */
__weak uint32_t MCI_GetFaultState(MCI_Handle_t *pHandle)
{
  uint32_t LocalFaultState;

  LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8001534:	8c03      	ldrh	r3, [r0, #32]
  LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8001536:	8bc0      	ldrh	r0, [r0, #30]

  return (LocalFaultState);
}
 8001538:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop

08001540 <MCI_GetControlMode>:
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 8001540:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop

08001548 <MCI_SetCurrentReferences>:
{
 8001548:	b530      	push	{r4, r5, lr}
 800154a:	b083      	sub	sp, #12
 800154c:	4604      	mov	r4, r0
 800154e:	9101      	str	r1, [sp, #4]
 8001550:	460d      	mov	r5, r1
    mode = MCI_GetControlMode( pHandle );
 8001552:	f7ff fff5 	bl	8001540 <MCI_GetControlMode>
    if (mode == MCM_OPEN_LOOP_CURRENT_MODE)
 8001556:	2802      	cmp	r0, #2
 8001558:	d00b      	beq.n	8001572 <MCI_SetCurrentReferences+0x2a>
      pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 800155a:	2203      	movs	r2, #3
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800155c:	2301      	movs	r3, #1
 800155e:	2004      	movs	r0, #4
      pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8001560:	7422      	strb	r2, [r4, #16]
      pHandle->Iqdref.q = Iqdref.q;
 8001562:	f8c4 5016 	str.w	r5, [r4, #22]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001566:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
      pHandle->LastModalitySetByUser = mode;
 800156a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
}
 800156e:	b003      	add	sp, #12
 8001570:	bd30      	pop	{r4, r5, pc}
      pHandle->pFOCVars->Iqdref.q = Iqdref.q;
 8001572:	6863      	ldr	r3, [r4, #4]
      pHandle->Iqdref.q = Iqdref.q;
 8001574:	f8c4 5016 	str.w	r5, [r4, #22]
      pHandle->pFOCVars->Iqdref.q = Iqdref.q;
 8001578:	611d      	str	r5, [r3, #16]
      pHandle->LastModalitySetByUser = mode;
 800157a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
}
 800157e:	b003      	add	sp, #12
 8001580:	bd30      	pop	{r4, r5, pc}
 8001582:	bf00      	nop

08001584 <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 8001584:	7c03      	ldrb	r3, [r0, #16]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d005      	beq.n	8001596 <MCI_GetImposedMotorDirection+0x12>
 800158a:	2b03      	cmp	r3, #3
 800158c:	d013      	beq.n	80015b6 <MCI_GetImposedMotorDirection+0x32>
 800158e:	2b01      	cmp	r3, #1
 8001590:	d009      	beq.n	80015a6 <MCI_GetImposedMotorDirection+0x22>
 8001592:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (retVal);
}
 8001594:	4770      	bx	lr
        if (pHandle->hFinalTorque < 0)
 8001596:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
          retVal = -1;
 800159a:	2b00      	cmp	r3, #0
 800159c:	bfac      	ite	ge
 800159e:	2001      	movge	r0, #1
 80015a0:	f04f 30ff 	movlt.w	r0, #4294967295
 80015a4:	4770      	bx	lr
        if (pHandle->hFinalSpeed < 0)
 80015a6:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
          retVal = -1;
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	bfac      	ite	ge
 80015ae:	2001      	movge	r0, #1
 80015b0:	f04f 30ff 	movlt.w	r0, #4294967295
 80015b4:	4770      	bx	lr
        if (pHandle->Iqdref.q < 0)
 80015b6:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
          retVal = -1;
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	bfac      	ite	ge
 80015be:	2001      	movge	r0, #1
 80015c0:	f04f 30ff 	movlt.w	r0, #4294967295
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop

080015c8 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 80015c8:	f9b0 0012 	ldrsh.w	r0, [r0, #18]
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop

080015d0 <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 80015d0:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop

080015d8 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 80015d8:	8b40      	ldrh	r0, [r0, #26]
 80015da:	4770      	bx	lr

080015dc <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 80015dc:	6800      	ldr	r0, [r0, #0]
 80015de:	f006 bd57 	b.w	8008090 <STC_StopRamp>
 80015e2:	bf00      	nop

080015e4 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 80015e4:	b508      	push	{r3, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 80015e6:	6800      	ldr	r0, [r0, #0]
 80015e8:	f006 fcf8 	bl	8007fdc <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (temp_speed);
}
 80015ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 80015f0:	f006 bc9c 	b.w	8007f2c <SPD_GetAvrgMecSpeedUnit>

080015f4 <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 80015f4:	6800      	ldr	r0, [r0, #0]
 80015f6:	f006 bcfb 	b.w	8007ff0 <STC_GetMecSpeedRefUnit>
 80015fa:	bf00      	nop

080015fc <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 80015fc:	6842      	ldr	r2, [r0, #4]
 80015fe:	6810      	ldr	r0, [r2, #0]
 8001600:	2300      	movs	r3, #0
 8001602:	b282      	uxth	r2, r0
 8001604:	f362 030f 	bfi	r3, r2, #0, #16
 8001608:	0c00      	lsrs	r0, r0, #16
 800160a:	f360 431f 	bfi	r3, r0, #16, #16
{
 800160e:	b082      	sub	sp, #8
#endif
}
 8001610:	4618      	mov	r0, r3
 8001612:	b002      	add	sp, #8
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop

08001618 <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 8001618:	6842      	ldr	r2, [r0, #4]
 800161a:	6850      	ldr	r0, [r2, #4]
 800161c:	2300      	movs	r3, #0
 800161e:	b282      	uxth	r2, r0
 8001620:	f362 030f 	bfi	r3, r2, #0, #16
 8001624:	0c00      	lsrs	r0, r0, #16
 8001626:	f360 431f 	bfi	r3, r0, #16, #16
{
 800162a:	b082      	sub	sp, #8
#endif
}
 800162c:	4618      	mov	r0, r3
 800162e:	b002      	add	sp, #8
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop

08001634 <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 8001634:	6842      	ldr	r2, [r0, #4]
 8001636:	68d0      	ldr	r0, [r2, #12]
 8001638:	2300      	movs	r3, #0
 800163a:	b282      	uxth	r2, r0
 800163c:	f362 030f 	bfi	r3, r2, #0, #16
 8001640:	0c00      	lsrs	r0, r0, #16
 8001642:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001646:	b082      	sub	sp, #8
#endif
}
 8001648:	4618      	mov	r0, r3
 800164a:	b002      	add	sp, #8
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop

08001650 <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 8001650:	6842      	ldr	r2, [r0, #4]
 8001652:	6910      	ldr	r0, [r2, #16]
 8001654:	2300      	movs	r3, #0
 8001656:	b282      	uxth	r2, r0
 8001658:	f362 030f 	bfi	r3, r2, #0, #16
 800165c:	0c00      	lsrs	r0, r0, #16
 800165e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001662:	b082      	sub	sp, #8
#endif
}
 8001664:	4618      	mov	r0, r3
 8001666:	b002      	add	sp, #8
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop

0800166c <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 800166c:	6842      	ldr	r2, [r0, #4]
 800166e:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8001672:	2300      	movs	r3, #0
 8001674:	b282      	uxth	r2, r0
 8001676:	f362 030f 	bfi	r3, r2, #0, #16
 800167a:	0c00      	lsrs	r0, r0, #16
 800167c:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001680:	b082      	sub	sp, #8
#endif
}
 8001682:	4618      	mov	r0, r3
 8001684:	b002      	add	sp, #8
 8001686:	4770      	bx	lr

08001688 <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 8001688:	6842      	ldr	r2, [r0, #4]
 800168a:	f8d2 001a 	ldr.w	r0, [r2, #26]
 800168e:	2300      	movs	r3, #0
 8001690:	b282      	uxth	r2, r0
 8001692:	f362 030f 	bfi	r3, r2, #0, #16
 8001696:	0c00      	lsrs	r0, r0, #16
 8001698:	f360 431f 	bfi	r3, r0, #16, #16
{
 800169c:	b082      	sub	sp, #8
#endif
}
 800169e:	4618      	mov	r0, r3
 80016a0:	b002      	add	sp, #8
 80016a2:	4770      	bx	lr

080016a4 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 80016a4:	6843      	ldr	r3, [r0, #4]
#endif
}
 80016a6:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 80016aa:	4770      	bx	lr

080016ac <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 80016ac:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 80016ae:	e9d0 0400 	ldrd	r0, r4, [r0]
 80016b2:	f006 fd1f 	bl	80080f4 <STC_GetDefaultIqdref>
 80016b6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80016ba:	8220      	strh	r0, [r4, #16]
 80016bc:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80016be:	bd10      	pop	{r4, pc}

080016c0 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80016c0:	f644 11e6 	movw	r1, #18918	; 0x49e6
 80016c4:	b203      	sxth	r3, r0
  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);
 80016c6:	fb13 f201 	smulbb	r2, r3, r1
{
 80016ca:	f3c0 400f 	ubfx	r0, r0, #16, #16
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80016ce:	fb10 f001 	smulbb	r0, r0, r1
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80016d2:	4252      	negs	r2, r2
 80016d4:	eba2 0240 	sub.w	r2, r2, r0, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 80016d8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
{
 80016dc:	b084      	sub	sp, #16
  if (wbeta_tmp > INT16_MAX)
 80016de:	da05      	bge.n	80016ec <MCM_Clarke+0x2c>
 80016e0:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 80016e2:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 80016e6:	da0c      	bge.n	8001702 <MCM_Clarke+0x42>
 80016e8:	4a09      	ldr	r2, [pc, #36]	; (8001710 <MCM_Clarke+0x50>)
 80016ea:	e001      	b.n	80016f0 <MCM_Clarke+0x30>
 80016ec:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if (((int16_t )-32768) == Output.beta)
  {
    Output.beta = -32767;
  }

  return (Output);
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	2000      	movs	r0, #0
 80016f4:	f363 000f 	bfi	r0, r3, #0, #16
 80016f8:	b293      	uxth	r3, r2
 80016fa:	f363 401f 	bfi	r0, r3, #16, #16
}
 80016fe:	b004      	add	sp, #16
 8001700:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 8001702:	4803      	ldr	r0, [pc, #12]	; (8001710 <MCM_Clarke+0x50>)
 8001704:	b20a      	sxth	r2, r1
 8001706:	4282      	cmp	r2, r0
 8001708:	bfb8      	it	lt
 800170a:	4602      	movlt	r2, r0
 800170c:	e7f0      	b.n	80016f0 <MCM_Clarke+0x30>
 800170e:	bf00      	nop
 8001710:	ffff8001 	.word	0xffff8001

08001714 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 8001714:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = (uint16_t)shindex;
  uhindex /= ((uint16_t)64);
 8001718:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch (((uint16_t)uhindex) & SIN_MASK)
 800171c:	f400 7140 	and.w	r1, r0, #768	; 0x300
 8001720:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
{
 8001724:	b082      	sub	sp, #8
  switch (((uint16_t)uhindex) & SIN_MASK)
 8001726:	d028      	beq.n	800177a <MCM_Trig_Functions+0x66>
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	461a      	mov	r2, r3
 800172e:	d816      	bhi.n	800175e <MCM_Trig_Functions+0x4a>
 8001730:	b361      	cbz	r1, 800178c <MCM_Trig_Functions+0x78>
 8001732:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001736:	d109      	bne.n	800174c <MCM_Trig_Functions+0x38>
      break;
    }

    case U270_360:
    {
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001738:	b2c0      	uxtb	r0, r0
 800173a:	43c2      	mvns	r2, r0
 800173c:	491a      	ldr	r1, [pc, #104]	; (80017a8 <MCM_Trig_Functions+0x94>)
 800173e:	b2d2      	uxtb	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8001740:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001744:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001748:	4252      	negs	r2, r2
 800174a:	b212      	sxth	r2, r2
    }

    default:
      break;
  }
  return (Local_Components);
 800174c:	b29b      	uxth	r3, r3
 800174e:	2000      	movs	r0, #0
 8001750:	f363 000f 	bfi	r0, r3, #0, #16
 8001754:	b292      	uxth	r2, r2
 8001756:	f362 401f 	bfi	r0, r2, #16, #16
}
 800175a:	b002      	add	sp, #8
 800175c:	4770      	bx	lr
  switch (((uint16_t)uhindex) & SIN_MASK)
 800175e:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8001762:	d1f3      	bne.n	800174c <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001764:	4910      	ldr	r1, [pc, #64]	; (80017a8 <MCM_Trig_Functions+0x94>)
 8001766:	b2c0      	uxtb	r0, r0
 8001768:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800176a:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800176e:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001770:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001772:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001776:	b21b      	sxth	r3, r3
      break;
 8001778:	e7e8      	b.n	800174c <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800177a:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800177c:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800177e:	490a      	ldr	r1, [pc, #40]	; (80017a8 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001780:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001782:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001786:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      break;
 800178a:	e7df      	b.n	800174c <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800178c:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800178e:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001790:	4905      	ldr	r1, [pc, #20]	; (80017a8 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001792:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001794:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001798:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800179c:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800179e:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80017a0:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80017a2:	b21b      	sxth	r3, r3
      break;
 80017a4:	e7d2      	b.n	800174c <MCM_Trig_Functions+0x38>
 80017a6:	bf00      	nop
 80017a8:	08008d54 	.word	0x08008d54

080017ac <MCM_Park>:
{
 80017ac:	b530      	push	{r4, r5, lr}
 80017ae:	b085      	sub	sp, #20
 80017b0:	4604      	mov	r4, r0
 80017b2:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80017b4:	4608      	mov	r0, r1
{
 80017b6:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80017b8:	f7ff ffac 	bl	8001714 <MCM_Trig_Functions>
 80017bc:	b22d      	sxth	r5, r5
 80017be:	b201      	sxth	r1, r0
 80017c0:	1424      	asrs	r4, r4, #16
 80017c2:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 80017c4:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80017c8:	fb04 3310 	mls	r3, r4, r0, r3
  if (wqd_tmp > INT16_MAX)
 80017cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d0:	da05      	bge.n	80017de <MCM_Park+0x32>
 80017d2:	13da      	asrs	r2, r3, #15
  else if (wqd_tmp < (-32768))
 80017d4:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 80017d8:	da22      	bge.n	8001820 <MCM_Park+0x74>
 80017da:	4a14      	ldr	r2, [pc, #80]	; (800182c <MCM_Park+0x80>)
 80017dc:	e001      	b.n	80017e2 <MCM_Park+0x36>
 80017de:	f647 72ff 	movw	r2, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 80017e2:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80017e6:	fb05 4400 	mla	r4, r5, r0, r4
  if (wqd_tmp > INT16_MAX)
 80017ea:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80017ee:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 80017f2:	da04      	bge.n	80017fe <MCM_Park+0x52>
  else if (wqd_tmp < (-32768))
 80017f4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80017f8:	da0c      	bge.n	8001814 <MCM_Park+0x68>
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MCM_Park+0x80>)
 80017fc:	e001      	b.n	8001802 <MCM_Park+0x56>
 80017fe:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return (Output);
 8001802:	b292      	uxth	r2, r2
 8001804:	2000      	movs	r0, #0
 8001806:	f362 000f 	bfi	r0, r2, #0, #16
 800180a:	b29b      	uxth	r3, r3
 800180c:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001810:	b005      	add	sp, #20
 8001812:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 8001814:	4905      	ldr	r1, [pc, #20]	; (800182c <MCM_Park+0x80>)
 8001816:	b21b      	sxth	r3, r3
 8001818:	428b      	cmp	r3, r1
 800181a:	bfb8      	it	lt
 800181c:	460b      	movlt	r3, r1
 800181e:	e7f0      	b.n	8001802 <MCM_Park+0x56>
    hqd_tmp = ((int16_t)wqd_tmp);
 8001820:	4b02      	ldr	r3, [pc, #8]	; (800182c <MCM_Park+0x80>)
 8001822:	b212      	sxth	r2, r2
 8001824:	429a      	cmp	r2, r3
 8001826:	bfb8      	it	lt
 8001828:	461a      	movlt	r2, r3
 800182a:	e7da      	b.n	80017e2 <MCM_Park+0x36>
 800182c:	ffff8001 	.word	0xffff8001

08001830 <MCM_Rev_Park>:
{
 8001830:	b530      	push	{r4, r5, lr}
 8001832:	b085      	sub	sp, #20
 8001834:	4604      	mov	r4, r0
 8001836:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001838:	4608      	mov	r0, r1
{
 800183a:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 800183c:	f7ff ff6a 	bl	8001714 <MCM_Trig_Functions>
 8001840:	1424      	asrs	r4, r4, #16
 8001842:	1402      	asrs	r2, r0, #16
 8001844:	b22d      	sxth	r5, r5
 8001846:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8001848:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 800184c:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8001850:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8001854:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 8001858:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 800185c:	2000      	movs	r0, #0
 800185e:	f363 000f 	bfi	r0, r3, #0, #16
 8001862:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8001866:	f364 401f 	bfi	r0, r4, #16, #16
}
 800186a:	b005      	add	sp, #20
 800186c:	bd30      	pop	{r4, r5, pc}
 800186e:	bf00      	nop

08001870 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 8001870:	1e03      	subs	r3, r0, #0
 8001872:	dd35      	ble.n	80018e0 <MCM_Sqrt+0x70>
  {
  uint8_t biter = 0u;
  int32_t wtemproot;

    if (wInput <= ((int32_t)2097152))
 8001874:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001878:	dd2b      	ble.n	80018d2 <MCM_Sqrt+0x62>
      wtemproot = ((int32_t)8192);
    }

    do
    {
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 800187a:	135a      	asrs	r2, r3, #13
 800187c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001880:	1052      	asrs	r2, r2, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001882:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001886:	d029      	beq.n	80018dc <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001888:	fb93 f1f2 	sdiv	r1, r3, r2
 800188c:	4411      	add	r1, r2
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800188e:	ebb2 0f61 	cmp.w	r2, r1, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001892:	ea4f 0061 	mov.w	r0, r1, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001896:	d024      	beq.n	80018e2 <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001898:	fb93 f2f0 	sdiv	r2, r3, r0
 800189c:	4402      	add	r2, r0
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800189e:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80018a2:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80018a6:	d01c      	beq.n	80018e2 <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80018a8:	fb93 f2f1 	sdiv	r2, r3, r1
 80018ac:	440a      	add	r2, r1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80018ae:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80018b2:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80018b6:	d014      	beq.n	80018e2 <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80018b8:	fb93 f2f0 	sdiv	r2, r3, r0
 80018bc:	4402      	add	r2, r0
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80018be:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80018c2:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80018c6:	d00c      	beq.n	80018e2 <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80018c8:	fb93 f3f1 	sdiv	r3, r3, r1
 80018cc:	440b      	add	r3, r1
 80018ce:	1058      	asrs	r0, r3, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80018d0:	4770      	bx	lr
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80018d2:	11da      	asrs	r2, r3, #7
 80018d4:	3280      	adds	r2, #128	; 0x80
 80018d6:	1052      	asrs	r2, r2, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80018d8:	2a80      	cmp	r2, #128	; 0x80
 80018da:	d1d5      	bne.n	8001888 <MCM_Sqrt+0x18>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80018dc:	4610      	mov	r0, r2
 80018de:	4770      	bx	lr
    while (biter < 6U);

  }
  else
  {
    wtemprootnew = (int32_t)0;
 80018e0:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 80018e2:	4770      	bx	lr

080018e4 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 80018e4:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN FOC_Clear 0 */

  /* USER CODE END FOC_Clear 0 */
  MC_ControlMode_t mode;

  mode = MCI_GetControlMode( &Mci[bMotor] );
 80018e6:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <FOC_Clear+0x80>)
{
 80018e8:	4604      	mov	r4, r0
  mode = MCI_GetControlMode( &Mci[bMotor] );
 80018ea:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80018ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80018f2:	f7ff fe25 	bl	8001540 <MCI_GetControlMode>
  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 80018f6:	2226      	movs	r2, #38	; 0x26
  FOCVars[bMotor].Iqd = NULL_qd;
  if ( mode != MCM_OPEN_LOOP_VOLTAGE_MODE && mode != MCM_OPEN_LOOP_CURRENT_MODE)
 80018f8:	3801      	subs	r0, #1
 80018fa:	fb04 f202 	mul.w	r2, r4, r2
 80018fe:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <FOC_Clear+0x84>)
 8001900:	b2c0      	uxtb	r0, r0
 8001902:	2801      	cmp	r0, #1
  FOCVars[bMotor].Iab = NULL_ab;
 8001904:	f04f 0100 	mov.w	r1, #0
 8001908:	5099      	str	r1, [r3, r2]
 800190a:	eb03 0c02 	add.w	ip, r3, r2
  {
    FOCVars[bMotor].Iqdref = NULL_qd;
 800190e:	bf88      	it	hi
 8001910:	3210      	addhi	r2, #16
  FOCVars[bMotor].Iab = NULL_ab;
 8001912:	f8cc 1004 	str.w	r1, [ip, #4]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001916:	f8cc 100c 	str.w	r1, [ip, #12]
    FOCVars[bMotor].Iqdref = NULL_qd;
 800191a:	bf88      	it	hi
 800191c:	5099      	strhi	r1, [r3, r2]
 800191e:	2126      	movs	r1, #38	; 0x26
 8001920:	fb01 3304 	mla	r3, r1, r4, r3
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001924:	4a11      	ldr	r2, [pc, #68]	; (800196c <FOC_Clear+0x88>)
  FOCVars[bMotor].Vqd = NULL_qd;
 8001926:	2500      	movs	r5, #0
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001928:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  FOCVars[bMotor].Vqd = NULL_qd;
 800192c:	f8c3 5016 	str.w	r5, [r3, #22]
 8001930:	f8c3 501a 	str.w	r5, [r3, #26]
 8001934:	f8c3 501e 	str.w	r5, [r3, #30]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001938:	4629      	mov	r1, r5
 800193a:	f005 fb09 	bl	8006f50 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 800193e:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <FOC_Clear+0x8c>)
 8001940:	4629      	mov	r1, r5
 8001942:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001946:	f005 fb03 	bl	8006f50 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <FOC_Clear+0x90>)
 800194c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001950:	f006 fb46 	bl	8007fe0 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <FOC_Clear+0x94>)
 8001956:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 800195a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800195e:	f000 be3d 	b.w	80025dc <PWMC_SwitchOffPWM>
 8001962:	bf00      	nop
 8001964:	20000a7c 	.word	0x20000a7c
 8001968:	20000ab4 	.word	0x20000ab4
 800196c:	20000484 	.word	0x20000484
 8001970:	20000480 	.word	0x20000480
 8001974:	20000488 	.word	0x20000488
 8001978:	20000aec 	.word	0x20000aec

0800197c <MCboot>:
  if (MC_NULL == pMCIList)
 800197c:	2800      	cmp	r0, #0
 800197e:	f000 8081 	beq.w	8001a84 <MCboot+0x108>
{
 8001982:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bMCBootCompleted = (uint8_t )0;
 8001986:	4b40      	ldr	r3, [pc, #256]	; (8001a88 <MCboot+0x10c>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001988:	f8df 914c 	ldr.w	r9, [pc, #332]	; 8001ad8 <MCboot+0x15c>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 800198c:	4d3f      	ldr	r5, [pc, #252]	; (8001a8c <MCboot+0x110>)
    VSS_Init(&VirtualSpeedSensorM1);
 800198e:	4f40      	ldr	r7, [pc, #256]	; (8001a90 <MCboot+0x114>)
    RVBS_Init(&BusVoltageSensor_M1);
 8001990:	4e40      	ldr	r6, [pc, #256]	; (8001a94 <MCboot+0x118>)
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001992:	f8df a148 	ldr.w	sl, [pc, #328]	; 8001adc <MCboot+0x160>
{
 8001996:	b085      	sub	sp, #20
    bMCBootCompleted = (uint8_t )0;
 8001998:	f04f 0800 	mov.w	r8, #0
 800199c:	4604      	mov	r4, r0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800199e:	483e      	ldr	r0, [pc, #248]	; (8001a98 <MCboot+0x11c>)
    bMCBootCompleted = (uint8_t )0;
 80019a0:	f883 8000 	strb.w	r8, [r3]
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80019a4:	f8c9 0000 	str.w	r0, [r9]
    R3_1_Init(&PWM_Handle_M1);
 80019a8:	f005 fe08 	bl	80075bc <R3_1_Init>
    ASPEP_start(&aspepOverUartA);
 80019ac:	483b      	ldr	r0, [pc, #236]	; (8001a9c <MCboot+0x120>)
 80019ae:	f7fe fdbf 	bl	8000530 <ASPEP_start>
    startTimers();
 80019b2:	f005 fb75 	bl	80070a0 <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 80019b6:	483a      	ldr	r0, [pc, #232]	; (8001aa0 <MCboot+0x124>)
 80019b8:	f005 fab6 	bl	8006f28 <PID_HandleInit>
    STO_PLL_Init (&STO_PLL_M1);
 80019bc:	4839      	ldr	r0, [pc, #228]	; (8001aa4 <MCboot+0x128>)
 80019be:	f006 fda1 	bl	8008504 <STO_PLL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 80019c2:	4a38      	ldr	r2, [pc, #224]	; (8001aa4 <MCboot+0x128>)
 80019c4:	4936      	ldr	r1, [pc, #216]	; (8001aa0 <MCboot+0x124>)
 80019c6:	6828      	ldr	r0, [r5, #0]
 80019c8:	f006 faf0 	bl	8007fac <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 80019cc:	4638      	mov	r0, r7
 80019ce:	f006 fe99 	bl	8008704 <VSS_Init>
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 80019d2:	f8d9 3000 	ldr.w	r3, [r9]
 80019d6:	6829      	ldr	r1, [r5, #0]
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	463a      	mov	r2, r7
 80019dc:	4b32      	ldr	r3, [pc, #200]	; (8001aa8 <MCboot+0x12c>)
 80019de:	4833      	ldr	r0, [pc, #204]	; (8001aac <MCboot+0x130>)
 80019e0:	f006 f9bc 	bl	8007d5c <RUC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 80019e4:	4832      	ldr	r0, [pc, #200]	; (8001ab0 <MCboot+0x134>)
 80019e6:	f005 fa9f 	bl	8006f28 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 80019ea:	4832      	ldr	r0, [pc, #200]	; (8001ab4 <MCboot+0x138>)
 80019ec:	f005 fa9c 	bl	8006f28 <PID_HandleInit>
    RVBS_Init(&BusVoltageSensor_M1);
 80019f0:	4630      	mov	r0, r6
 80019f2:	f006 f8c1 	bl	8007b78 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 80019f6:	4b30      	ldr	r3, [pc, #192]	; (8001ab8 <MCboot+0x13c>)
    NTC_Init(&TempSensor_M1);
 80019f8:	4830      	ldr	r0, [pc, #192]	; (8001abc <MCboot+0x140>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	60de      	str	r6, [r3, #12]
    OL_Init(&OpenLoop_ParamsM1, &VirtualSpeedSensorM1);     /* only if M1 has open loop */
 80019fe:	4e30      	ldr	r6, [pc, #192]	; (8001ac0 <MCboot+0x144>)
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001a00:	f8c3 a008 	str.w	sl, [r3, #8]
    NTC_Init(&TempSensor_M1);
 8001a04:	f005 fa30 	bl	8006e68 <NTC_Init>
    OL_Init(&OpenLoop_ParamsM1, &VirtualSpeedSensorM1);     /* only if M1 has open loop */
 8001a08:	4639      	mov	r1, r7
 8001a0a:	4630      	mov	r0, r6
 8001a0c:	f005 fa6c 	bl	8006ee8 <OL_Init>
    pOpenLoop[M1] = &OpenLoop_ParamsM1;
 8001a10:	4b2c      	ldr	r3, [pc, #176]	; (8001ac4 <MCboot+0x148>)
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001a12:	482d      	ldr	r0, [pc, #180]	; (8001ac8 <MCboot+0x14c>)
    pOpenLoop[M1] = &OpenLoop_ParamsM1;
 8001a14:	601e      	str	r6, [r3, #0]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001a16:	4b2d      	ldr	r3, [pc, #180]	; (8001acc <MCboot+0x150>)
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001a18:	4e2d      	ldr	r6, [pc, #180]	; (8001ad0 <MCboot+0x154>)
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001a1a:	6018      	str	r0, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 8001a1c:	f006 f914 	bl	8007c48 <REMNG_Init>
    FOC_Clear(M1);
 8001a20:	4640      	mov	r0, r8
 8001a22:	f7ff ff5f 	bl	80018e4 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001a26:	f04f 0b01 	mov.w	fp, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001a2a:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001a2c:	f88a b024 	strb.w	fp, [sl, #36]	; 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001a30:	f006 fb60 	bl	80080f4 <STC_GetDefaultIqdref>
 8001a34:	f8ca 0010 	str.w	r0, [sl, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001a38:	6828      	ldr	r0, [r5, #0]
 8001a3a:	f006 fb5b 	bl	80080f4 <STC_GetDefaultIqdref>
 8001a3e:	f3c0 400f 	ubfx	r0, r0, #16, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001a42:	f8d9 3000 	ldr.w	r3, [r9]
 8001a46:	6829      	ldr	r1, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001a48:	f8aa 0014 	strh.w	r0, [sl, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001a4c:	4652      	mov	r2, sl
 8001a4e:	4630      	mov	r0, r6
 8001a50:	f7ff fc76 	bl	8001340 <MCI_Init>
    MCI_SetSpeedMode(&Mci[M1]);
 8001a54:	4630      	mov	r0, r6
    Mci[M1].pVSS =  &VirtualSpeedSensorM1;
 8001a56:	60f7      	str	r7, [r6, #12]
    MCI_SetSpeedMode(&Mci[M1]);
 8001a58:	f7ff fc98 	bl	800138c <MCI_SetSpeedMode>
    MCI_ExecSpeedRamp(&Mci[M1],
 8001a5c:	6828      	ldr	r0, [r5, #0]
 8001a5e:	f006 fb45 	bl	80080ec <STC_GetMecSpeedRefUnitDefault>
 8001a62:	4642      	mov	r2, r8
 8001a64:	4601      	mov	r1, r0
 8001a66:	4630      	mov	r0, r6
 8001a68:	f7ff fc7c 	bl	8001364 <MCI_ExecSpeedRamp>
    DAC_Init(&DAC_Handle);
 8001a6c:	4819      	ldr	r0, [pc, #100]	; (8001ad4 <MCboot+0x158>)
    pMCIList[M1] = &Mci[M1];
 8001a6e:	6026      	str	r6, [r4, #0]
    DAC_Init(&DAC_Handle);
 8001a70:	f7ff f8c6 	bl	8000c00 <DAC_Init>
    MC_APP_BootHook();
 8001a74:	f7ff fc60 	bl	8001338 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <MCboot+0x10c>)
 8001a7a:	f883 b000 	strb.w	fp, [r3]
}
 8001a7e:	b005      	add	sp, #20
 8001a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	20000ada 	.word	0x20000ada
 8001a8c:	20000488 	.word	0x20000488
 8001a90:	20000444 	.word	0x20000444
 8001a94:	20000008 	.word	0x20000008
 8001a98:	2000018c 	.word	0x2000018c
 8001a9c:	200004f0 	.word	0x200004f0
 8001aa0:	20000150 	.word	0x20000150
 8001aa4:	200002c0 	.word	0x200002c0
 8001aa8:	200002ac 	.word	0x200002ac
 8001aac:	20000234 	.word	0x20000234
 8001ab0:	20000124 	.word	0x20000124
 8001ab4:	200000f8 	.word	0x200000f8
 8001ab8:	2000047c 	.word	0x2000047c
 8001abc:	2000041c 	.word	0x2000041c
 8001ac0:	200000e8 	.word	0x200000e8
 8001ac4:	20000ae4 	.word	0x20000ae4
 8001ac8:	2000021c 	.word	0x2000021c
 8001acc:	20000ae8 	.word	0x20000ae8
 8001ad0:	20000a7c 	.word	0x20000a7c
 8001ad4:	200005e0 	.word	0x200005e0
 8001ad8:	20000aec 	.word	0x20000aec
 8001adc:	20000ab4 	.word	0x20000ab4

08001ae0 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop

08001ae4 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001ae4:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  MC_ControlMode_t mode;

  mode = MCI_GetControlMode( &Mci[bMotor] );
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <FOC_CalcCurrRef+0x3c>)
  if (INTERNAL == FOCVars[bMotor].bDriveInput &&  (mode != MCM_OPEN_LOOP_VOLTAGE_MODE && mode != MCM_OPEN_LOOP_CURRENT_MODE) )
 8001ae8:	4d0e      	ldr	r5, [pc, #56]	; (8001b24 <FOC_CalcCurrRef+0x40>)
{
 8001aea:	4604      	mov	r4, r0
  mode = MCI_GetControlMode( &Mci[bMotor] );
 8001aec:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8001af0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001af4:	f7ff fd24 	bl	8001540 <MCI_GetControlMode>
  if (INTERNAL == FOCVars[bMotor].bDriveInput &&  (mode != MCM_OPEN_LOOP_VOLTAGE_MODE && mode != MCM_OPEN_LOOP_CURRENT_MODE) )
 8001af8:	2326      	movs	r3, #38	; 0x26
 8001afa:	fb03 5504 	mla	r5, r3, r4, r5
 8001afe:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8001b02:	b91b      	cbnz	r3, 8001b0c <FOC_CalcCurrRef+0x28>
 8001b04:	3801      	subs	r0, #1
 8001b06:	b2c0      	uxtb	r0, r0
 8001b08:	2801      	cmp	r0, #1
 8001b0a:	d800      	bhi.n	8001b0e <FOC_CalcCurrRef+0x2a>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001b0c:	bd38      	pop	{r3, r4, r5, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <FOC_CalcCurrRef+0x44>)
 8001b10:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001b14:	f006 fac0 	bl	8008098 <STC_CalcTorqueReference>
 8001b18:	83e8      	strh	r0, [r5, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8001b1a:	8228      	strh	r0, [r5, #16]
}
 8001b1c:	bd38      	pop	{r3, r4, r5, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000a7c 	.word	0x20000a7c
 8001b24:	20000ab4 	.word	0x20000ab4
 8001b28:	20000488 	.word	0x20000488

08001b2c <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001b2c:	4b01      	ldr	r3, [pc, #4]	; (8001b34 <TSK_SetChargeBootCapDelayM1+0x8>)
 8001b2e:	8018      	strh	r0, [r3, #0]
}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000adc 	.word	0x20000adc

08001b38 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8001b3a:	8818      	ldrh	r0, [r3, #0]
 8001b3c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001b3e:	fab0 f080 	clz	r0, r0
 8001b42:	0940      	lsrs	r0, r0, #5
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	20000adc 	.word	0x20000adc

08001b4c <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001b4c:	4b01      	ldr	r3, [pc, #4]	; (8001b54 <TSK_SetStopPermanencyTimeM1+0x8>)
 8001b4e:	8018      	strh	r0, [r3, #0]
}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000ae0 	.word	0x20000ae0

08001b58 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8001b5a:	8818      	ldrh	r0, [r3, #0]
 8001b5c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001b5e:	fab0 f080 	clz	r0, r0
 8001b62:	0940      	lsrs	r0, r0, #5
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20000ae0 	.word	0x20000ae0

08001b6c <TSK_MediumFrequencyTaskM1>:
{
 8001b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  mode = MCI_GetControlMode( &Mci[M1] );
 8001b6e:	4cb8      	ldr	r4, [pc, #736]	; (8001e50 <TSK_MediumFrequencyTaskM1+0x2e4>)
  PQD_CalcElMotorPower(pMPM[M1]);
 8001b70:	4fb8      	ldr	r7, [pc, #736]	; (8001e54 <TSK_MediumFrequencyTaskM1+0x2e8>)
{
 8001b72:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8001b74:	2300      	movs	r3, #0
  mode = MCI_GetControlMode( &Mci[M1] );
 8001b76:	4620      	mov	r0, r4
  int16_t wAux = 0;
 8001b78:	f8ad 3000 	strh.w	r3, [sp]
  mode = MCI_GetControlMode( &Mci[M1] );
 8001b7c:	f7ff fce0 	bl	8001540 <MCI_GetControlMode>
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001b80:	4669      	mov	r1, sp
  mode = MCI_GetControlMode( &Mci[M1] );
 8001b82:	4605      	mov	r5, r0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001b84:	48b4      	ldr	r0, [pc, #720]	; (8001e58 <TSK_MediumFrequencyTaskM1+0x2ec>)
 8001b86:	f006 fbbd 	bl	8008304 <STO_PLL_CalcAvrgMecSpeedUnit>
 8001b8a:	4606      	mov	r6, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 8001b8c:	6838      	ldr	r0, [r7, #0]
 8001b8e:	f005 fa57 	bl	8007040 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001b92:	4620      	mov	r0, r4
 8001b94:	f7ff fc84 	bl	80014a0 <MCI_GetCurrentFaults>
 8001b98:	b118      	cbz	r0, 8001ba2 <TSK_MediumFrequencyTaskM1+0x36>
    Mci[M1].State = FAULT_NOW;
 8001b9a:	230a      	movs	r3, #10
 8001b9c:	7763      	strb	r3, [r4, #29]
}
 8001b9e:	b003      	add	sp, #12
 8001ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	f7ff fc7a 	bl	800149c <MCI_GetOccurredFaults>
 8001ba8:	bb70      	cbnz	r0, 8001c08 <TSK_MediumFrequencyTaskM1+0x9c>
      switch (Mci[M1].State)
 8001baa:	7f63      	ldrb	r3, [r4, #29]
 8001bac:	2b13      	cmp	r3, #19
 8001bae:	d8f6      	bhi.n	8001b9e <TSK_MediumFrequencyTaskM1+0x32>
 8001bb0:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <TSK_MediumFrequencyTaskM1+0x4c>)
 8001bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb6:	bf00      	nop
 8001bb8:	08001d95 	.word	0x08001d95
 8001bbc:	08001b9f 	.word	0x08001b9f
 8001bc0:	08001b9f 	.word	0x08001b9f
 8001bc4:	08001b9f 	.word	0x08001b9f
 8001bc8:	08001cff 	.word	0x08001cff
 8001bcc:	08001b9f 	.word	0x08001b9f
 8001bd0:	08001ccf 	.word	0x08001ccf
 8001bd4:	08001b9f 	.word	0x08001b9f
 8001bd8:	08001caf 	.word	0x08001caf
 8001bdc:	08001b9f 	.word	0x08001b9f
 8001be0:	08001c09 	.word	0x08001c09
 8001be4:	08001dcd 	.word	0x08001dcd
 8001be8:	08001b9f 	.word	0x08001b9f
 8001bec:	08001b9f 	.word	0x08001b9f
 8001bf0:	08001b9f 	.word	0x08001b9f
 8001bf4:	08001b9f 	.word	0x08001b9f
 8001bf8:	08001c63 	.word	0x08001c63
 8001bfc:	08001c31 	.word	0x08001c31
 8001c00:	08001b9f 	.word	0x08001b9f
 8001c04:	08001c11 	.word	0x08001c11
      Mci[M1].State = FAULT_OVER;
 8001c08:	230b      	movs	r3, #11
 8001c0a:	7763      	strb	r3, [r4, #29]
}
 8001c0c:	b003      	add	sp, #12
 8001c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001c10:	7f23      	ldrb	r3, [r4, #28]
 8001c12:	2b05      	cmp	r3, #5
 8001c14:	f000 80e1 	beq.w	8001dda <TSK_MediumFrequencyTaskM1+0x26e>
            if(! RUC_Exec(&RevUpControlM1))
 8001c18:	4890      	ldr	r0, [pc, #576]	; (8001e5c <TSK_MediumFrequencyTaskM1+0x2f0>)
 8001c1a:	f006 f921 	bl	8007e60 <RUC_Exec>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	2800      	cmp	r0, #0
 8001c22:	f040 80eb 	bne.w	8001dfc <TSK_MediumFrequencyTaskM1+0x290>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001c26:	488a      	ldr	r0, [pc, #552]	; (8001e50 <TSK_MediumFrequencyTaskM1+0x2e4>)
 8001c28:	2110      	movs	r1, #16
 8001c2a:	f7ff fbd9 	bl	80013e0 <MCI_FaultProcessing>
 8001c2e:	e7b6      	b.n	8001b9e <TSK_MediumFrequencyTaskM1+0x32>
            if (MCI_STOP == Mci[M1].DirectCommand)
 8001c30:	7f23      	ldrb	r3, [r4, #28]
 8001c32:	2b05      	cmp	r3, #5
 8001c34:	f000 80d1 	beq.w	8001dda <TSK_MediumFrequencyTaskM1+0x26e>
              if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8001c38:	4d89      	ldr	r5, [pc, #548]	; (8001e60 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	6828      	ldr	r0, [r5, #0]
 8001c3e:	f000 fcd1 	bl	80025e4 <PWMC_CurrentReadingCalibr>
 8001c42:	2800      	cmp	r0, #0
 8001c44:	d0ab      	beq.n	8001b9e <TSK_MediumFrequencyTaskM1+0x32>
                if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8001c46:	7f23      	ldrb	r3, [r4, #28]
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	f000 8131 	beq.w	8001eb0 <TSK_MediumFrequencyTaskM1+0x344>
                  R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001c4e:	6828      	ldr	r0, [r5, #0]
 8001c50:	2100      	movs	r1, #0
 8001c52:	f005 fb67 	bl	8007324 <R3_1_TurnOnLowSides>
                  TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 8001c56:	2014      	movs	r0, #20
 8001c58:	f7ff ff68 	bl	8001b2c <TSK_SetChargeBootCapDelayM1>
                  Mci[M1].State = CHARGE_BOOT_CAP;
 8001c5c:	2310      	movs	r3, #16
 8001c5e:	7763      	strb	r3, [r4, #29]
 8001c60:	e79d      	b.n	8001b9e <TSK_MediumFrequencyTaskM1+0x32>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001c62:	7f23      	ldrb	r3, [r4, #28]
 8001c64:	2b05      	cmp	r3, #5
 8001c66:	f000 80b8 	beq.w	8001dda <TSK_MediumFrequencyTaskM1+0x26e>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8001c6a:	f7ff ff65 	bl	8001b38 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001c6e:	2800      	cmp	r0, #0
 8001c70:	d095      	beq.n	8001b9e <TSK_MediumFrequencyTaskM1+0x32>
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8001c72:	4e7b      	ldr	r6, [pc, #492]	; (8001e60 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8001c74:	6830      	ldr	r0, [r6, #0]
 8001c76:	f005 fbc9 	bl	800740c <R3_1_SwitchOffPWM>
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001c7a:	4b7a      	ldr	r3, [pc, #488]	; (8001e64 <TSK_MediumFrequencyTaskM1+0x2f8>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001c7c:	497a      	ldr	r1, [pc, #488]	; (8001e68 <TSK_MediumFrequencyTaskM1+0x2fc>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001c84:	4b79      	ldr	r3, [pc, #484]	; (8001e6c <TSK_MediumFrequencyTaskM1+0x300>)
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	f006 f9a6 	bl	8007fd8 <STC_SetSpeedSensor>
              STO_PLL_Clear(&STO_PLL_M1);
 8001c8c:	4872      	ldr	r0, [pc, #456]	; (8001e58 <TSK_MediumFrequencyTaskM1+0x2ec>)
 8001c8e:	f006 fc13 	bl	80084b8 <STO_PLL_Clear>
              FOC_Clear( M1 );
 8001c92:	2000      	movs	r0, #0
 8001c94:	f7ff fe26 	bl	80018e4 <FOC_Clear>
              if ( mode == MCM_OPEN_LOOP_VOLTAGE_MODE || mode == MCM_OPEN_LOOP_CURRENT_MODE)
 8001c98:	1e6b      	subs	r3, r5, #1
 8001c9a:	b2db      	uxtb	r3, r3
                Mci[M1].State = START;
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	bf34      	ite	cc
 8001ca0:	2306      	movcc	r3, #6
 8001ca2:	2304      	movcs	r3, #4
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001ca4:	6830      	ldr	r0, [r6, #0]
 8001ca6:	7763      	strb	r3, [r4, #29]
 8001ca8:	f000 fc9a 	bl	80025e0 <PWMC_SwitchOnPWM>
 8001cac:	e777      	b.n	8001b9e <TSK_MediumFrequencyTaskM1+0x32>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8001cae:	f7ff ff53 	bl	8001b58 <TSK_StopPermanencyTimeHasElapsedM1>
 8001cb2:	2800      	cmp	r0, #0
 8001cb4:	f43f af73 	beq.w	8001b9e <TSK_MediumFrequencyTaskM1+0x32>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);  	/*  sensor-less */
 8001cb8:	4b6c      	ldr	r3, [pc, #432]	; (8001e6c <TSK_MediumFrequencyTaskM1+0x300>)
 8001cba:	496b      	ldr	r1, [pc, #428]	; (8001e68 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001cbc:	6818      	ldr	r0, [r3, #0]
 8001cbe:	f006 f98b 	bl	8007fd8 <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 8001cc2:	4869      	ldr	r0, [pc, #420]	; (8001e68 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001cc4:	f006 fd10 	bl	80086e8 <VSS_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	83a3      	strh	r3, [r4, #28]
 8001ccc:	e767      	b.n	8001b9e <TSK_MediumFrequencyTaskM1+0x32>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001cce:	7f23      	ldrb	r3, [r4, #28]
 8001cd0:	2b05      	cmp	r3, #5
 8001cd2:	f000 8082 	beq.w	8001dda <TSK_MediumFrequencyTaskM1+0x26e>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8001cd6:	485e      	ldr	r0, [pc, #376]	; (8001e50 <TSK_MediumFrequencyTaskM1+0x2e4>)
 8001cd8:	f7ff fb8e 	bl	80013f8 <MCI_ExecBufferedCommands>
            if ( mode != MCM_OPEN_LOOP_VOLTAGE_MODE && mode != MCM_OPEN_LOOP_CURRENT_MODE)
 8001cdc:	1e6b      	subs	r3, r5, #1
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	f240 80d9 	bls.w	8001e98 <TSK_MediumFrequencyTaskM1+0x32c>
              FOC_CalcCurrRef(M1);
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f7ff fefc 	bl	8001ae4 <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 8001cec:	2e00      	cmp	r6, #0
 8001cee:	f47f af56 	bne.w	8001b9e <TSK_MediumFrequencyTaskM1+0x32>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 8001cf2:	4857      	ldr	r0, [pc, #348]	; (8001e50 <TSK_MediumFrequencyTaskM1+0x2e4>)
 8001cf4:	4632      	mov	r2, r6
 8001cf6:	2120      	movs	r1, #32
 8001cf8:	f7ff fb72 	bl	80013e0 <MCI_FaultProcessing>
 8001cfc:	e74f      	b.n	8001b9e <TSK_MediumFrequencyTaskM1+0x32>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001cfe:	7f23      	ldrb	r3, [r4, #28]
 8001d00:	2b05      	cmp	r3, #5
 8001d02:	d06a      	beq.n	8001dda <TSK_MediumFrequencyTaskM1+0x26e>
            if(! RUC_Exec(&RevUpControlM1))
 8001d04:	4855      	ldr	r0, [pc, #340]	; (8001e5c <TSK_MediumFrequencyTaskM1+0x2f0>)
 8001d06:	f006 f8ab 	bl	8007e60 <RUC_Exec>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	2800      	cmp	r0, #0
 8001d0e:	f040 80b3 	bne.w	8001e78 <TSK_MediumFrequencyTaskM1+0x30c>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001d12:	484f      	ldr	r0, [pc, #316]	; (8001e50 <TSK_MediumFrequencyTaskM1+0x2e4>)
 8001d14:	2110      	movs	r1, #16
 8001d16:	f7ff fb63 	bl	80013e0 <MCI_FaultProcessing>
           (void) VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001d1a:	4853      	ldr	r0, [pc, #332]	; (8001e68 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001d1c:	f10d 0102 	add.w	r1, sp, #2
 8001d20:	f006 fd46 	bl	80087b0 <VSS_CalcAvrgMecSpeedUnit>
           if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 8001d24:	484d      	ldr	r0, [pc, #308]	; (8001e5c <TSK_MediumFrequencyTaskM1+0x2f0>)
 8001d26:	f006 f8d1 	bl	8007ecc <RUC_FirstAccelerationStageReached>
 8001d2a:	2800      	cmp	r0, #0
 8001d2c:	f43f af37 	beq.w	8001b9e <TSK_MediumFrequencyTaskM1+0x32>
             ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 8001d30:	f10d 0102 	add.w	r1, sp, #2
 8001d34:	4848      	ldr	r0, [pc, #288]	; (8001e58 <TSK_MediumFrequencyTaskM1+0x2ec>)
 8001d36:	f006 fc1f 	bl	8008578 <STO_PLL_IsObserverConverged>
 8001d3a:	4605      	mov	r5, r0
             STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 8001d3c:	4844      	ldr	r0, [pc, #272]	; (8001e50 <TSK_MediumFrequencyTaskM1+0x2e4>)
 8001d3e:	f7ff fc21 	bl	8001584 <MCI_GetImposedMotorDirection>
 8001d42:	b241      	sxtb	r1, r0
 8001d44:	4844      	ldr	r0, [pc, #272]	; (8001e58 <TSK_MediumFrequencyTaskM1+0x2ec>)
 8001d46:	f006 fccb 	bl	80086e0 <STO_SetDirection>
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 8001d4a:	4847      	ldr	r0, [pc, #284]	; (8001e68 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001d4c:	4629      	mov	r1, r5
 8001d4e:	f006 fdd1 	bl	80088f4 <VSS_SetStartTransition>
            if (ObserverConverged)
 8001d52:	2d00      	cmp	r5, #0
 8001d54:	f43f af23 	beq.w	8001b9e <TSK_MediumFrequencyTaskM1+0x32>
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001d58:	483f      	ldr	r0, [pc, #252]	; (8001e58 <TSK_MediumFrequencyTaskM1+0x2ec>)
 8001d5a:	4e42      	ldr	r6, [pc, #264]	; (8001e64 <TSK_MediumFrequencyTaskM1+0x2f8>)
              REMNG_Init(pREMNG[M1]);
 8001d5c:	4d44      	ldr	r5, [pc, #272]	; (8001e70 <TSK_MediumFrequencyTaskM1+0x304>)
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001d5e:	f006 f8e1 	bl	8007f24 <SPD_GetElAngle>
 8001d62:	4601      	mov	r1, r0
 8001d64:	6870      	ldr	r0, [r6, #4]
 8001d66:	f7ff fd21 	bl	80017ac <MCM_Park>
 8001d6a:	4603      	mov	r3, r0
              REMNG_Init(pREMNG[M1]);
 8001d6c:	6828      	ldr	r0, [r5, #0]
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001d6e:	9301      	str	r3, [sp, #4]
              REMNG_Init(pREMNG[M1]);
 8001d70:	f005 ff6a 	bl	8007c48 <REMNG_Init>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 8001d74:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 8001d78:	6828      	ldr	r0, [r5, #0]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f005 ffaa 	bl	8007cd4 <REMNG_ExecRamp>
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 8001d80:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8001d84:	6828      	ldr	r0, [r5, #0]
 8001d86:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001d8a:	f005 ffa3 	bl	8007cd4 <REMNG_ExecRamp>
              Mci[M1].State = SWITCH_OVER;
 8001d8e:	2313      	movs	r3, #19
 8001d90:	7763      	strb	r3, [r4, #29]
 8001d92:	e704      	b.n	8001b9e <TSK_MediumFrequencyTaskM1+0x32>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8001d94:	7f23      	ldrb	r3, [r4, #28]
 8001d96:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	f47f aeff 	bne.w	8001b9e <TSK_MediumFrequencyTaskM1+0x32>
            if ( mode != MCM_OPEN_LOOP_VOLTAGE_MODE && mode != MCM_OPEN_LOOP_CURRENT_MODE)
 8001da0:	1e6b      	subs	r3, r5, #1
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d906      	bls.n	8001db6 <TSK_MediumFrequencyTaskM1+0x24a>
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8001da8:	4829      	ldr	r0, [pc, #164]	; (8001e50 <TSK_MediumFrequencyTaskM1+0x2e4>)
 8001daa:	f7ff fbeb 	bl	8001584 <MCI_GetImposedMotorDirection>
 8001dae:	4601      	mov	r1, r0
 8001db0:	482a      	ldr	r0, [pc, #168]	; (8001e5c <TSK_MediumFrequencyTaskM1+0x2f0>)
 8001db2:	f006 f811 	bl	8007dd8 <RUC_Clear>
           if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001db6:	4d2a      	ldr	r5, [pc, #168]	; (8001e60 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8001db8:	6828      	ldr	r0, [r5, #0]
 8001dba:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
 8001dbe:	2900      	cmp	r1, #0
 8001dc0:	d164      	bne.n	8001e8c <TSK_MediumFrequencyTaskM1+0x320>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8001dc2:	f000 fc0f 	bl	80025e4 <PWMC_CurrentReadingCalibr>
             Mci[M1].State = OFFSET_CALIB;
 8001dc6:	2311      	movs	r3, #17
 8001dc8:	7763      	strb	r3, [r4, #29]
 8001dca:	e6e8      	b.n	8001b9e <TSK_MediumFrequencyTaskM1+0x32>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8001dcc:	7f23      	ldrb	r3, [r4, #28]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	f47f aee5 	bne.w	8001b9e <TSK_MediumFrequencyTaskM1+0x32>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	83a3      	strh	r3, [r4, #28]
 8001dd8:	e6e1      	b.n	8001b9e <TSK_MediumFrequencyTaskM1+0x32>
  R3_1_SwitchOffPWM(pwmcHandle[motor]);
 8001dda:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	f005 fb15 	bl	800740c <R3_1_SwitchOffPWM>
  FOC_Clear(motor);
 8001de2:	2000      	movs	r0, #0
 8001de4:	f7ff fd7e 	bl	80018e4 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 8001de8:	6838      	ldr	r0, [r7, #0]
 8001dea:	f005 f943 	bl	8007074 <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001dee:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001df2:	f7ff feab 	bl	8001b4c <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8001df6:	2308      	movs	r3, #8
 8001df8:	7763      	strb	r3, [r4, #29]
  return;
 8001dfa:	e6d0      	b.n	8001b9e <TSK_MediumFrequencyTaskM1+0x32>
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001dfc:	481a      	ldr	r0, [pc, #104]	; (8001e68 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001dfe:	a901      	add	r1, sp, #4
 8001e00:	f006 fcd6 	bl	80087b0 <VSS_CalcAvrgMecSpeedUnit>
 8001e04:	4605      	mov	r5, r0
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 8001e06:	4818      	ldr	r0, [pc, #96]	; (8001e68 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001e08:	f006 fd82 	bl	8008910 <VSS_TransitionEnded>
              LoopClosed = LoopClosed || tempBool;
 8001e0c:	2d00      	cmp	r5, #0
 8001e0e:	d04c      	beq.n	8001eaa <TSK_MediumFrequencyTaskM1+0x33e>
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <TSK_MediumFrequencyTaskM1+0x2f8>)
 8001e12:	4818      	ldr	r0, [pc, #96]	; (8001e74 <TSK_MediumFrequencyTaskM1+0x308>)
 8001e14:	f9b3 6010 	ldrsh.w	r6, [r3, #16]
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8001e18:	4d14      	ldr	r5, [pc, #80]	; (8001e6c <TSK_MediumFrequencyTaskM1+0x300>)
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8001e1a:	f005 f8a3 	bl	8006f64 <PID_GetKIDivisor>
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 8001e1e:	b201      	sxth	r1, r0
 8001e20:	fb06 f101 	mul.w	r1, r6, r1
 8001e24:	4813      	ldr	r0, [pc, #76]	; (8001e74 <TSK_MediumFrequencyTaskM1+0x308>)
 8001e26:	f005 f893 	bl	8006f50 <PID_SetIntegralTerm>
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8001e2a:	490b      	ldr	r1, [pc, #44]	; (8001e58 <TSK_MediumFrequencyTaskM1+0x2ec>)
 8001e2c:	6828      	ldr	r0, [r5, #0]
 8001e2e:	f006 f8d3 	bl	8007fd8 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8001e32:	2000      	movs	r0, #0
 8001e34:	f7ff fe54 	bl	8001ae0 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef( M1 );
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f7ff fe53 	bl	8001ae4 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8001e3e:	6828      	ldr	r0, [r5, #0]
 8001e40:	f006 f966 	bl	8008110 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8001e44:	4802      	ldr	r0, [pc, #8]	; (8001e50 <TSK_MediumFrequencyTaskM1+0x2e4>)
 8001e46:	f7ff fad7 	bl	80013f8 <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 8001e4a:	2306      	movs	r3, #6
 8001e4c:	7763      	strb	r3, [r4, #29]
 8001e4e:	e6a6      	b.n	8001b9e <TSK_MediumFrequencyTaskM1+0x32>
 8001e50:	20000a7c 	.word	0x20000a7c
 8001e54:	2000047c 	.word	0x2000047c
 8001e58:	200002c0 	.word	0x200002c0
 8001e5c:	20000234 	.word	0x20000234
 8001e60:	20000aec 	.word	0x20000aec
 8001e64:	20000ab4 	.word	0x20000ab4
 8001e68:	20000444 	.word	0x20000444
 8001e6c:	20000488 	.word	0x20000488
 8001e70:	20000ae8 	.word	0x20000ae8
 8001e74:	20000150 	.word	0x20000150
             IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 8001e78:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <TSK_MediumFrequencyTaskM1+0x358>)
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	f006 f90c 	bl	8008098 <STC_CalcTorqueReference>
             IqdRef.d = FOCVars[M1].UserIdref;
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <TSK_MediumFrequencyTaskM1+0x35c>)
 8001e82:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
             FOCVars[M1].Iqdref = IqdRef;
 8001e86:	8218      	strh	r0, [r3, #16]
 8001e88:	825a      	strh	r2, [r3, #18]
 8001e8a:	e746      	b.n	8001d1a <TSK_MediumFrequencyTaskM1+0x1ae>
             pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001e92:	f000 fba7 	bl	80025e4 <PWMC_CurrentReadingCalibr>
             R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001e96:	e6da      	b.n	8001c4e <TSK_MediumFrequencyTaskM1+0xe2>
              VSS_CalcAvrgMecSpeedUnit( &VirtualSpeedSensorM1, &hForcedMecSpeedUnit );
 8001e98:	a901      	add	r1, sp, #4
 8001e9a:	480c      	ldr	r0, [pc, #48]	; (8001ecc <TSK_MediumFrequencyTaskM1+0x360>)
 8001e9c:	f006 fc88 	bl	80087b0 <VSS_CalcAvrgMecSpeedUnit>
     	      OL_Calc( pOpenLoop[M1] );
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <TSK_MediumFrequencyTaskM1+0x364>)
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	f005 f82e 	bl	8006f04 <OL_Calc>
 8001ea8:	e679      	b.n	8001b9e <TSK_MediumFrequencyTaskM1+0x32>
              LoopClosed = LoopClosed || tempBool;
 8001eaa:	2800      	cmp	r0, #0
 8001eac:	d1b0      	bne.n	8001e10 <TSK_MediumFrequencyTaskM1+0x2a4>
 8001eae:	e676      	b.n	8001b9e <TSK_MediumFrequencyTaskM1+0x32>
                  FOC_Clear(M1);
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f7ff fd17 	bl	80018e4 <FOC_Clear>
                  PQD_Clear(pMPM[M1]);
 8001eb6:	6838      	ldr	r0, [r7, #0]
 8001eb8:	f005 f8dc 	bl	8007074 <PQD_Clear>
                  Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	83a3      	strh	r3, [r4, #28]
 8001ec0:	e66d      	b.n	8001b9e <TSK_MediumFrequencyTaskM1+0x32>
 8001ec2:	bf00      	nop
 8001ec4:	20000488 	.word	0x20000488
 8001ec8:	20000ab4 	.word	0x20000ab4
 8001ecc:	20000444 	.word	0x20000444
 8001ed0:	20000ae4 	.word	0x20000ae4

08001ed4 <MC_Scheduler>:
  if (((uint8_t)1) == bMCBootCompleted)
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <MC_Scheduler+0x78>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d000      	beq.n	8001ede <MC_Scheduler+0xa>
 8001edc:	4770      	bx	lr
{
 8001ede:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8001ee0:	4c1b      	ldr	r4, [pc, #108]	; (8001f50 <MC_Scheduler+0x7c>)
 8001ee2:	8823      	ldrh	r3, [r4, #0]
 8001ee4:	b19b      	cbz	r3, 8001f0e <MC_Scheduler+0x3a>
      hMFTaskCounterM1--;
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 8001eea:	4a1a      	ldr	r2, [pc, #104]	; (8001f54 <MC_Scheduler+0x80>)
      hMFTaskCounterM1--;
 8001eec:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8001eee:	8813      	ldrh	r3, [r2, #0]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	b11b      	cbz	r3, 8001efc <MC_Scheduler+0x28>
      hBootCapDelayCounterM1--;
 8001ef4:	8813      	ldrh	r3, [r2, #0]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8001efc:	4a16      	ldr	r2, [pc, #88]	; (8001f58 <MC_Scheduler+0x84>)
 8001efe:	8813      	ldrh	r3, [r2, #0]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	b11b      	cbz	r3, 8001f0c <MC_Scheduler+0x38>
      hStopPermanencyCounterM1--;
 8001f04:	8813      	ldrh	r3, [r2, #0]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	8013      	strh	r3, [r2, #0]
}
 8001f0c:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001f0e:	4d13      	ldr	r5, [pc, #76]	; (8001f5c <MC_Scheduler+0x88>)
      TSK_MediumFrequencyTaskM1();
 8001f10:	f7ff fe2c 	bl	8001b6c <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8001f14:	f7ff fa12 	bl	800133c <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001f18:	4629      	mov	r1, r5
 8001f1a:	f851 0b0c 	ldr.w	r0, [r1], #12
 8001f1e:	6883      	ldr	r3, [r0, #8]
 8001f20:	4798      	blx	r3
 8001f22:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8001f24:	b130      	cbz	r0, 8001f34 <MC_Scheduler+0x60>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8001f26:	4629      	mov	r1, r5
 8001f28:	220a      	movs	r2, #10
 8001f2a:	f851 0b08 	ldr.w	r0, [r1], #8
 8001f2e:	6803      	ldr	r3, [r0, #0]
 8001f30:	4798      	blx	r3
 8001f32:	b908      	cbnz	r0, 8001f38 <MC_Scheduler+0x64>
{
 8001f34:	2301      	movs	r3, #1
 8001f36:	e7d8      	b.n	8001eea <MC_Scheduler+0x16>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8001f38:	4628      	mov	r0, r5
 8001f3a:	f004 fd53 	bl	80069e4 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8001f3e:	6828      	ldr	r0, [r5, #0]
 8001f40:	89ea      	ldrh	r2, [r5, #14]
 8001f42:	6846      	ldr	r6, [r0, #4]
 8001f44:	68a9      	ldr	r1, [r5, #8]
 8001f46:	230a      	movs	r3, #10
 8001f48:	47b0      	blx	r6
 8001f4a:	e7f3      	b.n	8001f34 <MC_Scheduler+0x60>
 8001f4c:	20000ada 	.word	0x20000ada
 8001f50:	20000ade 	.word	0x20000ade
 8001f54:	20000adc 	.word	0x20000adc
 8001f58:	20000ae0 	.word	0x20000ae0
 8001f5c:	200004cc 	.word	0x200004cc

08001f60 <MC_RunMotorControlTasks>:
{
 8001f60:	b508      	push	{r3, lr}
  if (0U == bMCBootCompleted)
 8001f62:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <MC_RunMotorControlTasks+0x10>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	b903      	cbnz	r3, 8001f6a <MC_RunMotorControlTasks+0xa>
}
 8001f68:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8001f6a:	f7ff ffb3 	bl	8001ed4 <MC_Scheduler>
}
 8001f6e:	bd08      	pop	{r3, pc}
 8001f70:	20000ada 	.word	0x20000ada

08001f74 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t bMotorNbr = 0;

  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
  if (SWITCH_OVER == Mci[M1].State)
 8001f78:	f8df 8180 	ldr.w	r8, [pc, #384]	; 80020fc <TSK_HighFrequencyTask+0x188>
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001f7c:	4c5e      	ldr	r4, [pc, #376]	; (80020f8 <TSK_HighFrequencyTask+0x184>)
  if (SWITCH_OVER == Mci[M1].State)
 8001f7e:	f898 301d 	ldrb.w	r3, [r8, #29]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001f82:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 8001f86:	b088      	sub	sp, #32
  if (SWITCH_OVER == Mci[M1].State)
 8001f88:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001f8a:	9005      	str	r0, [sp, #20]
  if (SWITCH_OVER == Mci[M1].State)
 8001f8c:	f000 80a7 	beq.w	80020de <TSK_HighFrequencyTask+0x16a>
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  MC_ControlMode_t mode;

  mode = MCI_GetControlMode( &Mci[M1] );
 8001f90:	485a      	ldr	r0, [pc, #360]	; (80020fc <TSK_HighFrequencyTask+0x188>)
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001f92:	4f5b      	ldr	r7, [pc, #364]	; (8002100 <TSK_HighFrequencyTask+0x18c>)
  mode = MCI_GetControlMode( &Mci[M1] );
 8001f94:	f7ff fad4 	bl	8001540 <MCI_GetControlMode>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001f98:	4b5a      	ldr	r3, [pc, #360]	; (8002104 <TSK_HighFrequencyTask+0x190>)
  mode = MCI_GetControlMode( &Mci[M1] );
 8001f9a:	4681      	mov	r9, r0
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	f006 f81d 	bl	8007fdc <STC_GetSpeedSensor>
 8001fa2:	4606      	mov	r6, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001fa4:	f005 ffbe 	bl	8007f24 <SPD_GetElAngle>
 8001fa8:	4605      	mov	r5, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 8001faa:	4630      	mov	r0, r6
 8001fac:	f005 ffc2 	bl	8007f34 <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001fb0:	a902      	add	r1, sp, #8
 8001fb2:	6838      	ldr	r0, [r7, #0]
 8001fb4:	f000 f9da 	bl	800236c <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8001fb8:	9802      	ldr	r0, [sp, #8]
 8001fba:	f7ff fb81 	bl	80016c0 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001fbe:	4629      	mov	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 8001fc0:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001fc2:	f7ff fbf3 	bl	80017ac <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001fc6:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001fca:	9000      	str	r0, [sp, #0]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001fcc:	b203      	sxth	r3, r0
 8001fce:	1ac9      	subs	r1, r1, r3
 8001fd0:	4b4d      	ldr	r3, [pc, #308]	; (8002108 <TSK_HighFrequencyTask+0x194>)
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	f004 fff0 	bl	8006fb8 <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001fd8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8001fdc:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8001fe0:	1ac9      	subs	r1, r1, r3
 8001fe2:	4b4a      	ldr	r3, [pc, #296]	; (800210c <TSK_HighFrequencyTask+0x198>)
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001fe4:	4682      	mov	sl, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	f004 ffe6 	bl	8006fb8 <PI_Controller>
 8001fec:	fa1f f18a 	uxth.w	r1, sl
  if (mode == MCM_OPEN_LOOP_VOLTAGE_MODE)
 8001ff0:	f1b9 0f01 	cmp.w	r9, #1
 8001ff4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001ff8:	d06b      	beq.n	80020d2 <TSK_HighFrequencyTask+0x15e>
  {
    Vqd = OL_VqdConditioning(pOpenLoop[M1]);
  }
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001ffa:	4845      	ldr	r0, [pc, #276]	; (8002110 <TSK_HighFrequencyTask+0x19c>)
 8001ffc:	f004 fcc2 	bl	8006984 <Circle_Limitation>
 8002000:	4681      	mov	r9, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8002002:	4630      	mov	r0, r6
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8002004:	f8cd 9004 	str.w	r9, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8002008:	f005 ff94 	bl	8007f34 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 800200c:	4629      	mov	r1, r5
 800200e:	9801      	ldr	r0, [sp, #4]
 8002010:	f7ff fc0e 	bl	8001830 <MCM_Rev_Park>
 8002014:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002016:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002018:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800201a:	f000 f9a9 	bl	8002370 <PWMC_SetPhaseVoltage>

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 800201e:	9b02      	ldr	r3, [sp, #8]
 8002020:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002022:	4601      	mov	r1, r0
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8002024:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Iqd = Iqd;
  FOCVars[M1].Valphabeta = Valphabeta;
 8002026:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8002028:	6063      	str	r3, [r4, #4]
  if(hFOCreturn == MC_DURATION)
 800202a:	2901      	cmp	r1, #1
  FOCVars[M1].Iqd = Iqd;
 800202c:	9b00      	ldr	r3, [sp, #0]
  FOCVars[M1].Vqd = Vqd;
 800202e:	f8c4 9016 	str.w	r9, [r4, #22]
  FOCVars[M1].Iqd = Iqd;
 8002032:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8002034:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 8002038:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 800203a:	d03f      	beq.n	80020bc <TSK_HighFrequencyTask+0x148>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 800203c:	4835      	ldr	r0, [pc, #212]	; (8002114 <TSK_HighFrequencyTask+0x1a0>)
 800203e:	f005 ff45 	bl	8007ecc <RUC_FirstAccelerationStageReached>
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8002042:	6862      	ldr	r2, [r4, #4]
 8002044:	9206      	str	r2, [sp, #24]
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8002046:	4603      	mov	r3, r0
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8002048:	4833      	ldr	r0, [pc, #204]	; (8002118 <TSK_HighFrequencyTask+0x1a4>)
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 800204a:	461c      	mov	r4, r3
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 800204c:	f004 fc92 	bl	8006974 <VBS_GetAvBusVoltage_d>
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8002050:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8002052:	4603      	mov	r3, r0
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8002054:	4831      	ldr	r0, [pc, #196]	; (800211c <TSK_HighFrequencyTask+0x1a8>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8002056:	f8ad 301c 	strh.w	r3, [sp, #28]
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 800205a:	f006 f861 	bl	8008120 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /*  Only in case of Sensor-less */
 800205e:	482f      	ldr	r0, [pc, #188]	; (800211c <TSK_HighFrequencyTask+0x1a8>)
 8002060:	f006 f9f8 	bl	8008454 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (false == IsAccelerationStageReached)
 8002064:	b1b4      	cbz	r4, 8002094 <TSK_HighFrequencyTask+0x120>
    if(((uint16_t)START == Mci[M1].State) || ((uint16_t)SWITCH_OVER == Mci[M1].State) || ((uint16_t)RUN == Mci[M1].State))
 8002066:	f898 301d 	ldrb.w	r3, [r8, #29]
 800206a:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800206e:	2a04      	cmp	r2, #4
 8002070:	d019      	beq.n	80020a6 <TSK_HighFrequencyTask+0x132>
 8002072:	2b13      	cmp	r3, #19
 8002074:	d017      	beq.n	80020a6 <TSK_HighFrequencyTask+0x132>
  DAC_Exec(&DAC_Handle);
 8002076:	482a      	ldr	r0, [pc, #168]	; (8002120 <TSK_HighFrequencyTask+0x1ac>)
 8002078:	f7fe fddc 	bl	8000c34 <DAC_Exec>
  GLOBAL_TIMESTAMP++;
 800207c:	4a29      	ldr	r2, [pc, #164]	; (8002124 <TSK_HighFrequencyTask+0x1b0>)
  if (0U == MCPA_UART_A.Mark)
 800207e:	482a      	ldr	r0, [pc, #168]	; (8002128 <TSK_HighFrequencyTask+0x1b4>)
  GLOBAL_TIMESTAMP++;
 8002080:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8002082:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
  GLOBAL_TIMESTAMP++;
 8002086:	3301      	adds	r3, #1
 8002088:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 800208a:	b9e1      	cbnz	r1, 80020c6 <TSK_HighFrequencyTask+0x152>
}
 800208c:	2000      	movs	r0, #0
 800208e:	b008      	add	sp, #32
 8002090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      STO_ResetPLL(&STO_PLL_M1);
 8002094:	4821      	ldr	r0, [pc, #132]	; (800211c <TSK_HighFrequencyTask+0x1a8>)
 8002096:	f006 fb07 	bl	80086a8 <STO_ResetPLL>
    if(((uint16_t)START == Mci[M1].State) || ((uint16_t)SWITCH_OVER == Mci[M1].State) || ((uint16_t)RUN == Mci[M1].State))
 800209a:	f898 301d 	ldrb.w	r3, [r8, #29]
 800209e:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 80020a2:	2a04      	cmp	r2, #4
 80020a4:	d1e5      	bne.n	8002072 <TSK_HighFrequencyTask+0xfe>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 80020a6:	481d      	ldr	r0, [pc, #116]	; (800211c <TSK_HighFrequencyTask+0x1a8>)
 80020a8:	f005 ff3c 	bl	8007f24 <SPD_GetElAngle>
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 80020ac:	a904      	add	r1, sp, #16
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 80020ae:	4603      	mov	r3, r0
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 80020b0:	481e      	ldr	r0, [pc, #120]	; (800212c <TSK_HighFrequencyTask+0x1b8>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 80020b2:	f8ad 3010 	strh.w	r3, [sp, #16]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 80020b6:	f006 fb29 	bl	800870c <VSS_CalcElAngle>
 80020ba:	e7dc      	b.n	8002076 <TSK_HighFrequencyTask+0x102>
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 80020bc:	480f      	ldr	r0, [pc, #60]	; (80020fc <TSK_HighFrequencyTask+0x188>)
 80020be:	2200      	movs	r2, #0
 80020c0:	f7ff f98e 	bl	80013e0 <MCI_FaultProcessing>
 80020c4:	e7d7      	b.n	8002076 <TSK_HighFrequencyTask+0x102>
    MCPA_dataLog (&MCPA_UART_A);
 80020c6:	f004 fd55 	bl	8006b74 <MCPA_dataLog>
}
 80020ca:	2000      	movs	r0, #0
 80020cc:	b008      	add	sp, #32
 80020ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    Vqd = OL_VqdConditioning(pOpenLoop[M1]);
 80020d2:	4b17      	ldr	r3, [pc, #92]	; (8002130 <TSK_HighFrequencyTask+0x1bc>)
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	f004 ff0b 	bl	8006ef0 <OL_VqdConditioning>
 80020da:	4601      	mov	r1, r0
 80020dc:	e78d      	b.n	8001ffa <TSK_HighFrequencyTask+0x86>
    if (!REMNG_RampCompleted(pREMNG[M1]))
 80020de:	4d15      	ldr	r5, [pc, #84]	; (8002134 <TSK_HighFrequencyTask+0x1c0>)
 80020e0:	6828      	ldr	r0, [r5, #0]
 80020e2:	f005 fddb 	bl	8007c9c <REMNG_RampCompleted>
 80020e6:	2800      	cmp	r0, #0
 80020e8:	f47f af52 	bne.w	8001f90 <TSK_HighFrequencyTask+0x1c>
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 80020ec:	6828      	ldr	r0, [r5, #0]
 80020ee:	f005 fdb3 	bl	8007c58 <REMNG_Calc>
 80020f2:	8220      	strh	r0, [r4, #16]
 80020f4:	e74c      	b.n	8001f90 <TSK_HighFrequencyTask+0x1c>
 80020f6:	bf00      	nop
 80020f8:	20000ab4 	.word	0x20000ab4
 80020fc:	20000a7c 	.word	0x20000a7c
 8002100:	20000aec 	.word	0x20000aec
 8002104:	20000488 	.word	0x20000488
 8002108:	20000484 	.word	0x20000484
 800210c:	20000480 	.word	0x20000480
 8002110:	20000034 	.word	0x20000034
 8002114:	20000234 	.word	0x20000234
 8002118:	20000008 	.word	0x20000008
 800211c:	200002c0 	.word	0x200002c0
 8002120:	200005e0 	.word	0x200005e0
 8002124:	20005a54 	.word	0x20005a54
 8002128:	200004a0 	.word	0x200004a0
 800212c:	20000444 	.word	0x20000444
 8002130:	20000ae4 	.word	0x20000ae4
 8002134:	20000ae8 	.word	0x20000ae8

08002138 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8002138:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800213a:	4b20      	ldr	r3, [pc, #128]	; (80021bc <TSK_SafetyTask_PWMOFF+0x84>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800213c:	4e20      	ldr	r6, [pc, #128]	; (80021c0 <TSK_SafetyTask_PWMOFF+0x88>)
{
 800213e:	b082      	sub	sp, #8
 8002140:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002142:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002146:	f004 fea1 	bl	8006e8c <NTC_CalcAvTemp>
 800214a:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800214c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002150:	f000 fa6c 	bl	800262c <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002154:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002158:	4328      	orrs	r0, r5
 800215a:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(M1 == bMotor)
 800215c:	b184      	cbz	r4, 8002180 <TSK_SafetyTask_PWMOFF+0x48>
  {
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* process faults */
 800215e:	4819      	ldr	r0, [pc, #100]	; (80021c4 <TSK_SafetyTask_PWMOFF+0x8c>)
 8002160:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8002164:	43ea      	mvns	r2, r5
 8002166:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800216a:	b292      	uxth	r2, r2
 800216c:	4629      	mov	r1, r5
 800216e:	9001      	str	r0, [sp, #4]
 8002170:	f7ff f936 	bl	80013e0 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8002174:	9801      	ldr	r0, [sp, #4]
 8002176:	f7ff f9dd 	bl	8001534 <MCI_GetFaultState>
 800217a:	b940      	cbnz	r0, 800218e <TSK_SafetyTask_PWMOFF+0x56>
  }

  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 800217c:	b002      	add	sp, #8
 800217e:	bd70      	pop	{r4, r5, r6, pc}
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 8002180:	4811      	ldr	r0, [pc, #68]	; (80021c8 <TSK_SafetyTask_PWMOFF+0x90>)
 8002182:	f005 fd2d 	bl	8007be0 <RVBS_CalcAvVbus>
 8002186:	f000 000e 	and.w	r0, r0, #14
 800218a:	4305      	orrs	r5, r0
 800218c:	e7e7      	b.n	800215e <TSK_SafetyTask_PWMOFF+0x26>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800218e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002192:	f000 fa23 	bl	80025dc <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0)
 8002196:	480d      	ldr	r0, [pc, #52]	; (80021cc <TSK_SafetyTask_PWMOFF+0x94>)
 8002198:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800219c:	b953      	cbnz	r3, 80021b4 <TSK_SafetyTask_PWMOFF+0x7c>
    FOC_Clear(bMotor);
 800219e:	4620      	mov	r0, r4
 80021a0:	f7ff fba0 	bl	80018e4 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 80021a4:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <TSK_SafetyTask_PWMOFF+0x98>)
 80021a6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 80021aa:	b002      	add	sp, #8
 80021ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 80021b0:	f004 bf60 	b.w	8007074 <PQD_Clear>
      MCPA_flushDataLog (&MCPA_UART_A);
 80021b4:	f004 fda2 	bl	8006cfc <MCPA_flushDataLog>
 80021b8:	e7f1      	b.n	800219e <TSK_SafetyTask_PWMOFF+0x66>
 80021ba:	bf00      	nop
 80021bc:	2000048c 	.word	0x2000048c
 80021c0:	20000aec 	.word	0x20000aec
 80021c4:	20000a7c 	.word	0x20000a7c
 80021c8:	20000008 	.word	0x20000008
 80021cc:	200004a0 	.word	0x200004a0
 80021d0:	2000047c 	.word	0x2000047c

080021d4 <TSK_SafetyTask>:
{
 80021d4:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <TSK_SafetyTask+0x1c>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d000      	beq.n	80021e0 <TSK_SafetyTask+0xc>
}
 80021de:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80021e0:	2000      	movs	r0, #0
 80021e2:	f7ff ffa9 	bl	8002138 <TSK_SafetyTask_PWMOFF>
}
 80021e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 80021ea:	f001 bc21 	b.w	8003a30 <RCM_ExecUserConv>
 80021ee:	bf00      	nop
 80021f0:	20000ada 	.word	0x20000ada

080021f4 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80021f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 80021f6:	4b05      	ldr	r3, [pc, #20]	; (800220c <TSK_HardwareFaultTask+0x18>)
 80021f8:	6818      	ldr	r0, [r3, #0]
 80021fa:	f005 f907 	bl	800740c <R3_1_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80021fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8002202:	4803      	ldr	r0, [pc, #12]	; (8002210 <TSK_HardwareFaultTask+0x1c>)
 8002204:	2200      	movs	r2, #0
 8002206:	2180      	movs	r1, #128	; 0x80
 8002208:	f7ff b8ea 	b.w	80013e0 <MCI_FaultProcessing>
 800220c:	20000aec 	.word	0x20000aec
 8002210:	20000a7c 	.word	0x20000a7c

08002214 <startMediumFrequencyTask>:

/* startMediumFrequencyTask function */
void startMediumFrequencyTask(void const * argument)
{
 8002214:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MF task 1 */
  /* Infinite loop */
  for(;;)
  {
    /* delay of 500us */
    vTaskDelay(1);
 8002216:	2001      	movs	r0, #1
 8002218:	f004 fa82 	bl	8006720 <vTaskDelay>
    MC_RunMotorControlTasks();
 800221c:	f7ff fea0 	bl	8001f60 <MC_RunMotorControlTasks>
  for(;;)
 8002220:	e7f9      	b.n	8002216 <startMediumFrequencyTask+0x2>
 8002222:	bf00      	nop

08002224 <StartSafetyTask>:
  /* USER CODE END MF task 1 */
}

/* startSafetyTask function */
void StartSafetyTask(void const * argument)
{
 8002224:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SF task 1 */
  /* Infinite loop */
  for(;;)
  {
    /* delay of 500us */
    vTaskDelay(1);
 8002226:	2001      	movs	r0, #1
 8002228:	f004 fa7a 	bl	8006720 <vTaskDelay>
    TSK_SafetyTask();
 800222c:	f7ff ffd2 	bl	80021d4 <TSK_SafetyTask>
  for(;;)
 8002230:	e7f9      	b.n	8002226 <StartSafetyTask+0x2>
 8002232:	bf00      	nop

08002234 <UI_HandleStartStopButton_cb>:
  }
  /* USER CODE END SF task 1 */
}

__weak void UI_HandleStartStopButton_cb (void)
{
 8002234:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 8002236:	f7ff f877 	bl	8001328 <MC_GetSTMStateMotor1>
 800223a:	b918      	cbnz	r0, 8002244 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 800223c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 8002240:	f7ff b85a 	b.w	80012f8 <MC_StartMotor1>
}
 8002244:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 8002248:	f7ff b85c 	b.w	8001304 <MC_StopMotor1>

0800224c <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 800224c:	b430      	push	{r4, r5}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800224e:	4a35      	ldr	r2, [pc, #212]	; (8002324 <mc_lock_pins+0xd8>)
 8002250:	4b35      	ldr	r3, [pc, #212]	; (8002328 <mc_lock_pins+0xdc>)
 8002252:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002254:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002258:	61d1      	str	r1, [r2, #28]
 800225a:	b08c      	sub	sp, #48	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800225c:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800225e:	69d3      	ldr	r3, [r2, #28]
 8002260:	930b      	str	r3, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002262:	f44f 7100 	mov.w	r1, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002266:	f44f 3381 	mov.w	r3, #66048	; 0x10200
  (void) temp;
 800226a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800226c:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800226e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002270:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002272:	69d3      	ldr	r3, [r2, #28]
 8002274:	930a      	str	r3, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002276:	2140      	movs	r1, #64	; 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002278:	4b2c      	ldr	r3, [pc, #176]	; (800232c <mc_lock_pins+0xe0>)
  (void) temp;
 800227a:	980a      	ldr	r0, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800227c:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800227e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002280:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002282:	69d3      	ldr	r3, [r2, #28]
 8002284:	9309      	str	r3, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002286:	f44f 3182 	mov.w	r1, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 800228a:	f44f 6080 	mov.w	r0, #1024	; 0x400
  (void) temp;
 800228e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002290:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002292:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002294:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002296:	69d4      	ldr	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002298:	4b25      	ldr	r3, [pc, #148]	; (8002330 <mc_lock_pins+0xe4>)
  temp = READ_REG(GPIOx->LCKR);
 800229a:	9408      	str	r4, [sp, #32]
  (void) temp;
 800229c:	9d08      	ldr	r5, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800229e:	f44f 3488 	mov.w	r4, #69632	; 0x11000
  WRITE_REG(GPIOx->LCKR, PinMask);
 80022a2:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022a6:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80022a8:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022aa:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80022ac:	69dc      	ldr	r4, [r3, #28]
 80022ae:	9407      	str	r4, [sp, #28]
  (void) temp;
 80022b0:	9d07      	ldr	r5, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022b2:	f44f 3484 	mov.w	r4, #67584	; 0x10800
  WRITE_REG(GPIOx->LCKR, PinMask);
 80022b6:	f44f 6500 	mov.w	r5, #2048	; 0x800
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022ba:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80022bc:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022be:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80022c0:	69dc      	ldr	r4, [r3, #28]
 80022c2:	9406      	str	r4, [sp, #24]
  (void) temp;
 80022c4:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022c6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80022c8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022ca:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80022cc:	69d9      	ldr	r1, [r3, #28]
 80022ce:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80022d0:	2401      	movs	r4, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  (void) temp;
 80022d6:	9805      	ldr	r0, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022d8:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80022da:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022dc:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80022de:	69d0      	ldr	r0, [r2, #28]
 80022e0:	9004      	str	r0, [sp, #16]
  (void) temp;
 80022e2:	9d04      	ldr	r5, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022e4:	4813      	ldr	r0, [pc, #76]	; (8002334 <mc_lock_pins+0xe8>)
 80022e6:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80022e8:	2502      	movs	r5, #2
 80022ea:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022ec:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80022ee:	69d2      	ldr	r2, [r2, #28]
 80022f0:	9203      	str	r2, [sp, #12]
  (void) temp;
 80022f2:	9a03      	ldr	r2, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022f4:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80022f6:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022f8:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80022fa:	69da      	ldr	r2, [r3, #28]
 80022fc:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80022fe:	2004      	movs	r0, #4
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002300:	4a0d      	ldr	r2, [pc, #52]	; (8002338 <mc_lock_pins+0xec>)
  (void) temp;
 8002302:	9d02      	ldr	r5, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002304:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002306:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002308:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800230a:	69da      	ldr	r2, [r3, #28]
 800230c:	9201      	str	r2, [sp, #4]
  (void) temp;
 800230e:	9a01      	ldr	r2, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002310:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002312:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002314:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	9300      	str	r3, [sp, #0]
  (void) temp;
 800231a:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
}
 800231c:	b00c      	add	sp, #48	; 0x30
 800231e:	bc30      	pop	{r4, r5}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40020000 	.word	0x40020000
 8002328:	00010100 	.word	0x00010100
 800232c:	00010040 	.word	0x00010040
 8002330:	40020800 	.word	0x40020800
 8002334:	00010002 	.word	0x00010002
 8002338:	00010004 	.word	0x00010004

0800233c <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 800233c:	b508      	push	{r3, lr}

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 800233e:	4803      	ldr	r0, [pc, #12]	; (800234c <MX_MotorControl_Init+0x10>)
 8002340:	f7ff fb1c 	bl	800197c <MCboot>
  mc_lock_pins();
}
 8002344:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8002348:	f7ff bf80 	b.w	800224c <mc_lock_pins>
 800234c:	20001c7c 	.word	0x20001c7c

08002350 <vPortSetupTimerInterrupt>:

void vPortSetupTimerInterrupt( void )
{
 8002350:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  ( void )HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8002352:	f002 fe37 	bl	8004fc4 <HAL_RCC_GetHCLKFreq>
 8002356:	4b04      	ldr	r3, [pc, #16]	; (8002368 <vPortSetupTimerInterrupt+0x18>)
 8002358:	fba3 3000 	umull	r3, r0, r3, r0
 800235c:	09c0      	lsrs	r0, r0, #7
}
 800235e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ( void )HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8002362:	f002 b9c9 	b.w	80046f8 <HAL_SYSTICK_Config>
 8002366:	bf00      	nop
 8002368:	10624dd3 	.word	0x10624dd3

0800236c <PWMC_GetPhaseCurrents>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 800236c:	6803      	ldr	r3, [r0, #0]
 800236e:	4718      	bx	r3

08002370 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8002370:	b530      	push	{r4, r5, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002372:	f8b0 e060 	ldrh.w	lr, [r0, #96]	; 0x60
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002376:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002378:	ea4f 4c21 	mov.w	ip, r1, asr #16
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 800237c:	b20b      	sxth	r3, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800237e:	fb0e fc0c 	mul.w	ip, lr, ip
 8002382:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002386:	fb02 f303 	mul.w	r3, r2, r3
{
 800238a:	b083      	sub	sp, #12

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 800238c:	eb03 024c 	add.w	r2, r3, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 8002390:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
{
 8002394:	9101      	str	r1, [sp, #4]
    wZ = (wUBeta - wUAlpha) / 2;
 8002396:	eb03 74d3 	add.w	r4, r3, r3, lsr #31
    wY = (wUBeta + wUAlpha) / 2;
 800239a:	eb02 71d2 	add.w	r1, r2, r2, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 800239e:	1c55      	adds	r5, r2, #1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80023a0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 80023a4:	ea4f 0161 	mov.w	r1, r1, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 80023a8:	ea4f 0464 	mov.w	r4, r4, asr #1
    if (wY < 0)
 80023ac:	f2c0 8088 	blt.w	80024c0 <PWMC_SetPhaseVoltage+0x150>
          pHandle->highDuty = (uint16_t)wTimePhA;
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 80023b0:	1c5d      	adds	r5, r3, #1
 80023b2:	db5d      	blt.n	8002470 <PWMC_SetPhaseVoltage+0x100>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80023b4:	1b09      	subs	r1, r1, r4
 80023b6:	bf44      	itt	mi
 80023b8:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 80023bc:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	bfbc      	itt	lt
 80023c4:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 80023c8:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 80023cc:	2a00      	cmp	r2, #0
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80023ce:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
        wTimePhC = wTimePhA - (wY / 131072);
 80023d2:	bfb8      	it	lt
 80023d4:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80023d8:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 80023dc:	bfb8      	it	lt
 80023de:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 80023e2:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 80023e6:	eba1 42a2 	sub.w	r2, r1, r2, asr #18

        pHandle->lowDuty = (uint16_t)wTimePhB;
 80023ea:	fa1f fe83 	uxth.w	lr, r3
        pHandle->midDuty = (uint16_t)wTimePhA;
 80023ee:	fa1f fc81 	uxth.w	ip, r1
        pHandle->highDuty = (uint16_t)wTimePhC;
 80023f2:	b294      	uxth	r4, r2
 80023f4:	2501      	movs	r5, #1
          pHandle->highDuty = (uint16_t)wTimePhA;
 80023f6:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    if (1U == pHandle->DTTest)
 80023fa:	f8b0 405e 	ldrh.w	r4, [r0, #94]	; 0x5e
          pHandle->Sector = SECTOR_4;
 80023fe:	f880 506a 	strb.w	r5, [r0, #106]	; 0x6a
 8002402:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8002406:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800240a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800240e:	b289      	uxth	r1, r1
 8002410:	b29b      	uxth	r3, r3
 8002412:	b292      	uxth	r2, r2
    if (1U == pHandle->DTTest)
 8002414:	2c01      	cmp	r4, #1
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8002416:	f8a0 e046 	strh.w	lr, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhB;
 800241a:	f8a0 c048 	strh.w	ip, [r0, #72]	; 0x48
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 800241e:	87c1      	strh	r1, [r0, #62]	; 0x3e
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8002420:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8002424:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
    if (1U == pHandle->DTTest)
 8002428:	d11d      	bne.n	8002466 <PWMC_SetPhaseVoltage+0xf6>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 800242a:	f9b0 4050 	ldrsh.w	r4, [r0, #80]	; 0x50
 800242e:	2c00      	cmp	r4, #0
      {
        pHandle->CntPhA += pHandle->DTCompCnt;
 8002430:	f8b0 4062 	ldrh.w	r4, [r0, #98]	; 0x62
 8002434:	bfcc      	ite	gt
 8002436:	1909      	addgt	r1, r1, r4
      }
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
 8002438:	1b09      	suble	r1, r1, r4
 800243a:	b289      	uxth	r1, r1
 800243c:	87c1      	strh	r1, [r0, #62]	; 0x3e
      }

      if (pHandle->Ib > 0)
 800243e:	f9b0 1052 	ldrsh.w	r1, [r0, #82]	; 0x52
 8002442:	2900      	cmp	r1, #0
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
      }

      if (pHandle->Ic > 0)
 8002444:	f9b0 1054 	ldrsh.w	r1, [r0, #84]	; 0x54
        pHandle->CntPhB += pHandle->DTCompCnt;
 8002448:	bfcc      	ite	gt
 800244a:	191b      	addgt	r3, r3, r4
        pHandle->CntPhB -= pHandle->DTCompCnt;
 800244c:	1b1b      	suble	r3, r3, r4
      if (pHandle->Ic > 0)
 800244e:	2900      	cmp	r1, #0
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8002450:	b29b      	uxth	r3, r3
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 8002452:	bfcc      	ite	gt
 8002454:	18a4      	addgt	r4, r4, r2
      }
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8002456:	1b12      	suble	r2, r2, r4
 8002458:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
        pHandle->CntPhC += pHandle->DTCompCnt;
 800245c:	bfcc      	ite	gt
 800245e:	f8a0 4042 	strhgt.w	r4, [r0, #66]	; 0x42
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8002462:	f8a0 2042 	strhle.w	r2, [r0, #66]	; 0x42
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002466:	6943      	ldr	r3, [r0, #20]
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 8002468:	b003      	add	sp, #12
 800246a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 800246e:	4718      	bx	r3
        if ( wX <= 0 )
 8002470:	f1bc 0f00 	cmp.w	ip, #0
 8002474:	dd46      	ble.n	8002504 <PWMC_SetPhaseVoltage+0x194>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002476:	ebbc 0404 	subs.w	r4, ip, r4
 800247a:	bf44      	itt	mi
 800247c:	f504 347f 	addmi.w	r4, r4, #261120	; 0x3fc00
 8002480:	f204 34ff 	addwmi	r4, r4, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8002484:	2b00      	cmp	r3, #0
 8002486:	bfb8      	it	lt
 8002488:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800248c:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
          wTimePhB = wTimePhA + (wZ / 131072);
 8002490:	bfb8      	it	lt
 8002492:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
          wTimePhC = wTimePhB - (wX / 131072);
 8002496:	f1bc 0200 	subs.w	r2, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800249a:	eb0e 41a4 	add.w	r1, lr, r4, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 800249e:	bfb8      	it	lt
 80024a0:	f502 32ff 	addlt.w	r2, r2, #130560	; 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 80024a4:	eb01 43a3 	add.w	r3, r1, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80024a8:	bfb8      	it	lt
 80024aa:	f202 12ff 	addwlt	r2, r2, #511	; 0x1ff
 80024ae:	eba3 4262 	sub.w	r2, r3, r2, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhA;
 80024b2:	fa1f fe81 	uxth.w	lr, r1
          pHandle->midDuty = (uint16_t)wTimePhB;
 80024b6:	fa1f fc83 	uxth.w	ip, r3
          pHandle->highDuty = (uint16_t)wTimePhC;
 80024ba:	b294      	uxth	r4, r2
 80024bc:	2500      	movs	r5, #0
 80024be:	e79a      	b.n	80023f6 <PWMC_SetPhaseVoltage+0x86>
      if (wZ < 0)
 80024c0:	1c5d      	adds	r5, r3, #1
 80024c2:	db69      	blt.n	8002598 <PWMC_SetPhaseVoltage+0x228>
        if (wX <= 0)
 80024c4:	f1bc 0f00 	cmp.w	ip, #0
 80024c8:	dd41      	ble.n	800254e <PWMC_SetPhaseVoltage+0x1de>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80024ca:	ebb1 010c 	subs.w	r1, r1, ip
 80024ce:	bf44      	itt	mi
 80024d0:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 80024d4:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 80024d8:	2a00      	cmp	r2, #0
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80024da:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
          wTimePhC = wTimePhA - (wY / 131072);
 80024de:	bfb8      	it	lt
 80024e0:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80024e4:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 80024e8:	bfb8      	it	lt
 80024ea:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
 80024ee:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 80024f2:	eb02 436c 	add.w	r3, r2, ip, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhB;
 80024f6:	fa1f fe83 	uxth.w	lr, r3
          pHandle->midDuty = (uint16_t)wTimePhC;
 80024fa:	fa1f fc82 	uxth.w	ip, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 80024fe:	b28c      	uxth	r4, r1
 8002500:	2502      	movs	r5, #2
 8002502:	e778      	b.n	80023f6 <PWMC_SetPhaseVoltage+0x86>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002504:	ebb1 010c 	subs.w	r1, r1, ip
 8002508:	bf44      	itt	mi
 800250a:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 800250e:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8002512:	2a00      	cmp	r2, #0
 8002514:	bfb8      	it	lt
 8002516:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 800251a:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
          wTimePhC = wTimePhA - (wY / 131072);
 800251e:	bfb8      	it	lt
 8002520:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
          wTimePhB = wTimePhC + (wX / 131072);
 8002524:	f1bc 0300 	subs.w	r3, ip, #0
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002528:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 800252c:	bfb8      	it	lt
 800252e:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
          wTimePhC = wTimePhA - (wY / 131072);
 8002532:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002536:	bfb8      	it	lt
 8002538:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 800253c:	eb02 4363 	add.w	r3, r2, r3, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhA;
 8002540:	fa1f fe81 	uxth.w	lr, r1
          pHandle->midDuty = (uint16_t)wTimePhC;
 8002544:	fa1f fc82 	uxth.w	ip, r2
          pHandle->highDuty = (uint16_t)wTimePhB;
 8002548:	b29c      	uxth	r4, r3
 800254a:	2505      	movs	r5, #5
 800254c:	e753      	b.n	80023f6 <PWMC_SetPhaseVoltage+0x86>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 800254e:	ebbc 0404 	subs.w	r4, ip, r4
 8002552:	bf44      	itt	mi
 8002554:	f504 347f 	addmi.w	r4, r4, #261120	; 0x3fc00
 8002558:	f204 34ff 	addwmi	r4, r4, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 800255c:	2b00      	cmp	r3, #0
 800255e:	bfb8      	it	lt
 8002560:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002564:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
          wTimePhB = wTimePhA + (wZ / 131072);
 8002568:	bfb8      	it	lt
 800256a:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
          wTimePhC = wTimePhB - (wX / 131072);
 800256e:	f1bc 0200 	subs.w	r2, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002572:	eb0e 41a4 	add.w	r1, lr, r4, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002576:	bfb8      	it	lt
 8002578:	f502 32ff 	addlt.w	r2, r2, #130560	; 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 800257c:	eb01 43a3 	add.w	r3, r1, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002580:	bfb8      	it	lt
 8002582:	f202 12ff 	addwlt	r2, r2, #511	; 0x1ff
 8002586:	eba3 4262 	sub.w	r2, r3, r2, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhC;
 800258a:	fa1f fe82 	uxth.w	lr, r2
          pHandle->midDuty = (uint16_t)wTimePhB;
 800258e:	fa1f fc83 	uxth.w	ip, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002592:	b28c      	uxth	r4, r1
 8002594:	2503      	movs	r5, #3
 8002596:	e72e      	b.n	80023f6 <PWMC_SetPhaseVoltage+0x86>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002598:	1b09      	subs	r1, r1, r4
 800259a:	bf44      	itt	mi
 800259c:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 80025a0:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	bfbc      	itt	lt
 80025a8:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 80025ac:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 80025b0:	2a00      	cmp	r2, #0
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80025b2:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
        wTimePhC = wTimePhA - (wY / 131072) ;
 80025b6:	bfb8      	it	lt
 80025b8:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80025bc:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 80025c0:	bfb8      	it	lt
 80025c2:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 80025c6:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 80025ca:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        pHandle->lowDuty = (uint16_t)wTimePhC;
 80025ce:	fa1f fe82 	uxth.w	lr, r2
        pHandle->midDuty = (uint16_t)wTimePhA;
 80025d2:	fa1f fc81 	uxth.w	ip, r1
        pHandle->highDuty = (uint16_t)wTimePhB;
 80025d6:	b29c      	uxth	r4, r3
 80025d8:	2504      	movs	r5, #4
 80025da:	e70c      	b.n	80023f6 <PWMC_SetPhaseVoltage+0x86>

080025dc <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 80025dc:	6843      	ldr	r3, [r0, #4]
 80025de:	4718      	bx	r3

080025e0 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 80025e0:	6883      	ldr	r3, [r0, #8]
 80025e2:	4718      	bx	r3

080025e4 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 80025e4:	b510      	push	{r4, lr}
 80025e6:	4604      	mov	r4, r0
 80025e8:	b082      	sub	sp, #8
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 80025ea:	b199      	cbz	r1, 8002614 <PWMC_CurrentReadingCalibr+0x30>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 80025ec:	2901      	cmp	r1, #1
 80025ee:	d002      	beq.n	80025f6 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 80025f0:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 80025f2:	b002      	add	sp, #8
 80025f4:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 80025f6:	f8b0 304e 	ldrh.w	r3, [r0, #78]	; 0x4e
 80025fa:	b19b      	cbz	r3, 8002624 <PWMC_CurrentReadingCalibr+0x40>
        pHandle->OffCalibrWaitTimeCounter--;
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29b      	uxth	r3, r3
 8002600:	9101      	str	r1, [sp, #4]
 8002602:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f2      	bne.n	80025f0 <PWMC_CurrentReadingCalibr+0xc>
          pHandle->pFctCurrReadingCalib(pHandle);
 800260a:	68c3      	ldr	r3, [r0, #12]
 800260c:	4798      	blx	r3
          retVal = true;
 800260e:	9901      	ldr	r1, [sp, #4]
 8002610:	4608      	mov	r0, r1
 8002612:	e7ee      	b.n	80025f2 <PWMC_CurrentReadingCalibr+0xe>
      PWMC_SwitchOffPWM(pHandle);
 8002614:	f7ff ffe2 	bl	80025dc <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 8002618:	4620      	mov	r0, r4
 800261a:	68e3      	ldr	r3, [r4, #12]
 800261c:	4798      	blx	r3
      retVal = true;
 800261e:	2001      	movs	r0, #1
}
 8002620:	b002      	add	sp, #8
 8002622:	bd10      	pop	{r4, pc}
        retVal = true;
 8002624:	4608      	mov	r0, r1
}
 8002626:	b002      	add	sp, #8
 8002628:	bd10      	pop	{r4, pc}
 800262a:	bf00      	nop

0800262c <PWMC_CheckOverCurrent>:
__weak uint16_t PWMC_CheckOverCurrent(PWMC_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_PWR_CUR_FDB
  return ((MC_NULL == pHandle) ? MC_NO_FAULTS : (uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
#else
  return ((uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
 800262c:	6983      	ldr	r3, [r0, #24]
 800262e:	4718      	bx	r3

08002630 <RI_SetRegCommandParser>:

static uint8_t RI_SetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t dataAvailable);
static uint8_t RI_GetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t maxSize);
static uint8_t RI_MovString(const char_t * srcString, char_t * destString, uint16_t *size, int16_t maxSize);
__weak uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8002630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  }
  else
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
 8002634:	e9d0 5701 	ldrd	r5, r7, [r0, #4]
{
 8002638:	b089      	sub	sp, #36	; 0x24
    uint8_t * txData = pHandle->txBuffer;
    int16_t rxLength = pHandle->rxLength;
    uint16_t size = 0U;
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 800263a:	2400      	movs	r4, #0
    int16_t rxLength = pHandle->rxLength;
 800263c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    pHandle->txLength = 0;
 8002640:	81c4      	strh	r4, [r0, #14]
{
 8002642:	4680      	mov	r8, r0
    uint8_t accessResult;
    while (rxLength > 0)
 8002644:	eb07 0b01 	add.w	fp, r7, r1
  uint8_t retVal = MCP_CMD_OK;
 8002648:	9401      	str	r4, [sp, #4]
    while (rxLength > 0)
 800264a:	2b00      	cmp	r3, #0
 800264c:	f340 83ca 	ble.w	8002de4 <RI_SetRegCommandParser+0x7b4>
    {
       number_of_item++;
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8002650:	462e      	mov	r6, r5
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002652:	fa1f fa83 	uxth.w	sl, r3
      accessResult = RI_SetReg (*dataElementID,rxData,&size,rxLength);
 8002656:	f836 0b02 	ldrh.w	r0, [r6], #2

    typeID = (uint8_t)dataID & TYPE_MASK;
    motorID = 0U;
    MCI_Handle_t *pMCIN = &Mci[motorID];

    switch (typeID)
 800265a:	f000 0138 	and.w	r1, r0, #56	; 0x38
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 800265e:	f1aa 0302 	sub.w	r3, sl, #2
       number_of_item++;
 8002662:	3401      	adds	r4, #1
    uint16_t regID = dataID & REG_MASK;
 8002664:	f020 0207 	bic.w	r2, r0, #7
    switch (typeID)
 8002668:	3908      	subs	r1, #8
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 800266a:	fa1f f983 	uxth.w	r9, r3
       number_of_item++;
 800266e:	b2e4      	uxtb	r4, r4
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002670:	b21b      	sxth	r3, r3
    uint16_t regID = dataID & REG_MASK;
 8002672:	b292      	uxth	r2, r2
    switch (typeID)
 8002674:	2920      	cmp	r1, #32
 8002676:	d812      	bhi.n	800269e <RI_SetRegCommandParser+0x6e>
 8002678:	e8df f001 	tbb	[pc, r1]
 800267c:	111111a6 	.word	0x111111a6
 8002680:	11111111 	.word	0x11111111
 8002684:	1111117f 	.word	0x1111117f
 8002688:	11111111 	.word	0x11111111
 800268c:	111111b5 	.word	0x111111b5
 8002690:	11111111 	.word	0x11111111
 8002694:	1111112b 	.word	0x1111112b
 8002698:	11111111 	.word	0x11111111
 800269c:	58          	.byte	0x58
 800269d:	00          	.byte	0x00
 800269e:	2007      	movs	r0, #7
        if ((1U == number_of_item) && (0 == rxLength))
 80026a0:	2c01      	cmp	r4, #1
 80026a2:	d03a      	beq.n	800271a <RI_SetRegCommandParser+0xea>
        if (txSyncFreeSpace !=0 )
 80026a4:	45bb      	cmp	fp, r7
 80026a6:	f000 80ae 	beq.w	8002806 <RI_SetRegCommandParser+0x1d6>
          *txData = accessResult;
 80026aa:	f807 0b01 	strb.w	r0, [r7], #1
          pHandle->txLength++;
 80026ae:	f8b8 200e 	ldrh.w	r2, [r8, #14]
 80026b2:	3201      	adds	r2, #1
 80026b4:	f8a8 200e 	strh.w	r2, [r8, #14]
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80026b8:	b148      	cbz	r0, 80026ce <RI_SetRegCommandParser+0x9e>
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 80026ba:	2807      	cmp	r0, #7
 80026bc:	d103      	bne.n	80026c6 <RI_SetRegCommandParser+0x96>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80026be:	2001      	movs	r0, #1
}
 80026c0:	b009      	add	sp, #36	; 0x24
 80026c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 80026c6:	280a      	cmp	r0, #10
 80026c8:	d0f9      	beq.n	80026be <RI_SetRegCommandParser+0x8e>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80026ca:	2201      	movs	r2, #1
 80026cc:	9201      	str	r2, [sp, #4]
 80026ce:	4635      	mov	r5, r6
 80026d0:	e7bb      	b.n	800264a <RI_SetRegCommandParser+0x1a>

  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */

  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80026d2:	f995 2002 	ldrsb.w	r2, [r5, #2]
 80026d6:	2a00      	cmp	r2, #0
 80026d8:	f000 82fb 	beq.w	8002cd2 <RI_SetRegCommandParser+0x6a2>
 80026dc:	2b01      	cmp	r3, #1
 80026de:	f340 82fc 	ble.w	8002cda <RI_SetRegCommandParser+0x6aa>
 80026e2:	1ce9      	adds	r1, r5, #3
 80026e4:	ea6f 0c05 	mvn.w	ip, r5
 80026e8:	e002      	b.n	80026f0 <RI_SetRegCommandParser+0xc0>
 80026ea:	429a      	cmp	r2, r3
 80026ec:	f280 8254 	bge.w	8002b98 <RI_SetRegCommandParser+0x568>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
 80026f0:	eb0c 0201 	add.w	r2, ip, r1
 80026f4:	4608      	mov	r0, r1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80026f6:	f911 5b01 	ldrsb.w	r5, [r1], #1
 80026fa:	b292      	uxth	r2, r2
 80026fc:	2d00      	cmp	r5, #0
 80026fe:	d1f4      	bne.n	80026ea <RI_SetRegCommandParser+0xba>
      rxData = rxData+size;
 8002700:	4613      	mov	r3, r2
      rxLength = (int16_t) (rxLength - size);
 8002702:	eba9 0902 	sub.w	r9, r9, r2
        if ((1U == number_of_item) && (0 == rxLength))
 8002706:	2c01      	cmp	r4, #1
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 8002708:	f04f 0200 	mov.w	r2, #0
      rxData = rxData+size;
 800270c:	441e      	add	r6, r3
    *tempdestString = (int8_t)0;
 800270e:	7002      	strb	r2, [r0, #0]
      rxLength = (int16_t) (rxLength - size);
 8002710:	fa0f f389 	sxth.w	r3, r9
        retVal = MCP_ERROR_RO_REG;
 8002714:	f04f 0004 	mov.w	r0, #4
        if ((1U == number_of_item) && (0 == rxLength))
 8002718:	d1c4      	bne.n	80026a4 <RI_SetRegCommandParser+0x74>
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1c2      	bne.n	80026a4 <RI_SetRegCommandParser+0x74>
      if (MCP_CMD_OK == retVal)
 800271e:	2800      	cmp	r0, #0
 8002720:	d1ce      	bne.n	80026c0 <RI_SetRegCommandParser+0x90>
      pHandle->txLength = 0;
 8002722:	f8a8 000e 	strh.w	r0, [r8, #14]
}
 8002726:	b009      	add	sp, #36	; 0x24
 8002728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint16_t rawSize = *(uint16_t *) data; //cstat !MISRAC2012-Rule-11.3
 800272c:	f8b5 c002 	ldrh.w	ip, [r5, #2]
        *size = rawSize + 2U;
 8002730:	f10c 0a02 	add.w	sl, ip, #2
 8002734:	fa1f fa8a 	uxth.w	sl, sl
        if (*size > dataAvailable )
 8002738:	459a      	cmp	sl, r3
 800273a:	f300 8233 	bgt.w	8002ba4 <RI_SetRegCommandParser+0x574>
 800273e:	f5b2 7f0a 	cmp.w	r2, #552	; 0x228
        rawData++;
 8002742:	f105 0104 	add.w	r1, r5, #4
          switch (regID)
 8002746:	f000 826b 	beq.w	8002c20 <RI_SetRegCommandParser+0x5f0>
 800274a:	f200 820c 	bhi.w	8002b66 <RI_SetRegCommandParser+0x536>
 800274e:	f5b2 7fd4 	cmp.w	r2, #424	; 0x1a8
 8002752:	f000 8299 	beq.w	8002c88 <RI_SetRegCommandParser+0x658>
 8002756:	f240 81fb 	bls.w	8002b50 <RI_SetRegCommandParser+0x520>
 800275a:	f5b2 7ff4 	cmp.w	r2, #488	; 0x1e8
 800275e:	f040 8215 	bne.w	8002b8c <RI_SetRegCommandParser+0x55c>
              MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8002762:	48af      	ldr	r0, [pc, #700]	; (8002a20 <RI_SetRegCommandParser+0x3f0>)
 8002764:	892a      	ldrh	r2, [r5, #8]
 8002766:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
 800276a:	f7fe fe05 	bl	8001378 <MCI_ExecTorqueRamp>
      rxLength = (int16_t) (rxLength - size);
 800276e:	eba9 030a 	sub.w	r3, r9, sl
      rxData = rxData+size;
 8002772:	4456      	add	r6, sl
      rxLength = (int16_t) (rxLength - size);
 8002774:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002776:	2000      	movs	r0, #0
              break;
 8002778:	e792      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
        uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 800277a:	f5b2 6f15 	cmp.w	r2, #2384	; 0x950
 800277e:	f8b5 9002 	ldrh.w	r9, [r5, #2]
        switch (regID)
 8002782:	f000 8300 	beq.w	8002d86 <RI_SetRegCommandParser+0x756>
 8002786:	f200 80ad 	bhi.w	80028e4 <RI_SetRegCommandParser+0x2b4>
 800278a:	f5b2 7f34 	cmp.w	r2, #720	; 0x2d0
 800278e:	f000 8319 	beq.w	8002dc4 <RI_SetRegCommandParser+0x794>
 8002792:	f240 808f 	bls.w	80028b4 <RI_SetRegCommandParser+0x284>
 8002796:	f5b2 6f92 	cmp.w	r2, #1168	; 0x490
 800279a:	f000 8308 	beq.w	8002dae <RI_SetRegCommandParser+0x77e>
 800279e:	d944      	bls.n	800282a <RI_SetRegCommandParser+0x1fa>
 80027a0:	f5b2 6fd2 	cmp.w	r2, #1680	; 0x690
 80027a4:	f000 8313 	beq.w	8002dce <RI_SetRegCommandParser+0x79e>
 80027a8:	d931      	bls.n	800280e <RI_SetRegCommandParser+0x1de>
 80027aa:	f5b2 6f05 	cmp.w	r2, #2128	; 0x850
 80027ae:	d005      	beq.n	80027bc <RI_SetRegCommandParser+0x18c>
 80027b0:	f240 81b7 	bls.w	8002b22 <RI_SetRegCommandParser+0x4f2>
 80027b4:	f5b2 6f11 	cmp.w	r2, #2320	; 0x910
 80027b8:	f040 81ac 	bne.w	8002b14 <RI_SetRegCommandParser+0x4e4>
      rxLength = (int16_t) (rxLength - size);
 80027bc:	f1aa 0304 	sub.w	r3, sl, #4
 80027c0:	b21b      	sxth	r3, r3
      rxData = rxData+size;
 80027c2:	1d2e      	adds	r6, r5, #4
            retVal = MCP_ERROR_RO_REG;
 80027c4:	2004      	movs	r0, #4
            break;
 80027c6:	e76b      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
        switch (regID)
 80027c8:	2a88      	cmp	r2, #136	; 0x88
 80027ca:	f000 81ed 	beq.w	8002ba8 <RI_SetRegCommandParser+0x578>
 80027ce:	f020 0087 	bic.w	r0, r0, #135	; 0x87
      rxLength = (int16_t) (rxLength - size);
 80027d2:	f1aa 0303 	sub.w	r3, sl, #3
 80027d6:	2848      	cmp	r0, #72	; 0x48
 80027d8:	b21b      	sxth	r3, r3
      rxData = rxData+size;
 80027da:	f105 0603 	add.w	r6, r5, #3
 80027de:	f000 81b5 	beq.w	8002b4c <RI_SetRegCommandParser+0x51c>
            retVal = MCP_ERROR_UNKNOWN_REG;
 80027e2:	2005      	movs	r0, #5
            break;
 80027e4:	e75c      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
        switch (regID)
 80027e6:	2a98      	cmp	r2, #152	; 0x98
 80027e8:	f000 81f1 	beq.w	8002bce <RI_SetRegCommandParser+0x59e>
 80027ec:	f200 81a4 	bhi.w	8002b38 <RI_SetRegCommandParser+0x508>
 80027f0:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 80027f4:	2818      	cmp	r0, #24
 80027f6:	f000 81a5 	beq.w	8002b44 <RI_SetRegCommandParser+0x514>
      rxLength = (int16_t) (rxLength - size);
 80027fa:	f1aa 0a06 	sub.w	sl, sl, #6
 80027fe:	fa0f f38a 	sxth.w	r3, sl
      rxData = rxData+size;
 8002802:	1dae      	adds	r6, r5, #6
 8002804:	e7ed      	b.n	80027e2 <RI_SetRegCommandParser+0x1b2>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002806:	2008      	movs	r0, #8
}
 8002808:	b009      	add	sp, #36	; 0x24
 800280a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800280e:	f5b2 6fca 	cmp.w	r2, #1616	; 0x650
 8002812:	d11d      	bne.n	8002850 <RI_SetRegCommandParser+0x220>
            DAC_SetChannelConfig(&DAC_Handle , DAC_CH1, regdata16);
 8002814:	4883      	ldr	r0, [pc, #524]	; (8002a24 <RI_SetRegCommandParser+0x3f4>)
 8002816:	464a      	mov	r2, r9
 8002818:	2100      	movs	r1, #0
 800281a:	f7fe fa17 	bl	8000c4c <DAC_SetChannelConfig>
      rxLength = (int16_t) (rxLength - size);
 800281e:	f1aa 0304 	sub.w	r3, sl, #4
      rxData = rxData+size;
 8002822:	1d2e      	adds	r6, r5, #4
      rxLength = (int16_t) (rxLength - size);
 8002824:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002826:	2000      	movs	r0, #0
            break;
 8002828:	e73a      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
 800282a:	f5b2 7f64 	cmp.w	r2, #912	; 0x390
 800282e:	f000 82b2 	beq.w	8002d96 <RI_SetRegCommandParser+0x766>
 8002832:	d914      	bls.n	800285e <RI_SetRegCommandParser+0x22e>
 8002834:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8002838:	d10b      	bne.n	8002852 <RI_SetRegCommandParser+0x222>
            PID_SetKI (&stoPLLSensor[motorID]->PIRegulator, (int16_t)regdata16);
 800283a:	487b      	ldr	r0, [pc, #492]	; (8002a28 <RI_SetRegCommandParser+0x3f8>)
 800283c:	fa0f f189 	sxth.w	r1, r9
 8002840:	f004 fb7c 	bl	8006f3c <PID_SetKI>
      rxLength = (int16_t) (rxLength - size);
 8002844:	f1aa 0304 	sub.w	r3, sl, #4
      rxData = rxData+size;
 8002848:	1d2e      	adds	r6, r5, #4
      rxLength = (int16_t) (rxLength - size);
 800284a:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 800284c:	2000      	movs	r0, #0
            break;
 800284e:	e727      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
 8002850:	d914      	bls.n	800287c <RI_SetRegCommandParser+0x24c>
      rxLength = (int16_t) (rxLength - size);
 8002852:	f1aa 0304 	sub.w	r3, sl, #4
 8002856:	b21b      	sxth	r3, r3
      rxData = rxData+size;
 8002858:	1d2e      	adds	r6, r5, #4
            retVal = MCP_ERROR_UNKNOWN_REG;
 800285a:	2005      	movs	r0, #5
            break;
 800285c:	e720      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
 800285e:	f5b2 7f44 	cmp.w	r2, #784	; 0x310
 8002862:	d111      	bne.n	8002888 <RI_SetRegCommandParser+0x258>
            PID_SetKD(pPIDId[motorID], (int16_t)regdata16);
 8002864:	4b71      	ldr	r3, [pc, #452]	; (8002a2c <RI_SetRegCommandParser+0x3fc>)
 8002866:	fa0f f189 	sxth.w	r1, r9
      rxData = rxData+size;
 800286a:	1d2e      	adds	r6, r5, #4
            PID_SetKD(pPIDId[motorID], (int16_t)regdata16);
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	f004 fb95 	bl	8006f9c <PID_SetKD>
      rxLength = (int16_t) (rxLength - size);
 8002872:	f1aa 0304 	sub.w	r3, sl, #4
 8002876:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002878:	2000      	movs	r0, #0
            break;
 800287a:	e711      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
 800287c:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 8002880:	f5b0 6fb2 	cmp.w	r0, #1424	; 0x590
 8002884:	d1e5      	bne.n	8002852 <RI_SetRegCommandParser+0x222>
 8002886:	e799      	b.n	80027bc <RI_SetRegCommandParser+0x18c>
 8002888:	f5b2 7f54 	cmp.w	r2, #848	; 0x350
 800288c:	d1e1      	bne.n	8002852 <RI_SetRegCommandParser+0x222>
            STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 800288e:	aa05      	add	r2, sp, #20
 8002890:	f10d 0112 	add.w	r1, sp, #18
 8002894:	4866      	ldr	r0, [pc, #408]	; (8002a30 <RI_SetRegCommandParser+0x400>)
 8002896:	f005 fef5 	bl	8008684 <STO_PLL_GetObserverGains>
            STO_PLL_SetObserverGains(stoPLLSensor[motorID], (int16_t)regdata16, hC2);
 800289a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
      rxData = rxData+size;
 800289e:	1d2e      	adds	r6, r5, #4
            STO_PLL_SetObserverGains(stoPLLSensor[motorID], (int16_t)regdata16, hC2);
 80028a0:	fa0f f189 	sxth.w	r1, r9
            STO_PLL_SetObserverGains(stoPLLSensor[motorID], hC1, (int16_t)regdata16);
 80028a4:	4862      	ldr	r0, [pc, #392]	; (8002a30 <RI_SetRegCommandParser+0x400>)
 80028a6:	f005 fef5 	bl	8008694 <STO_PLL_SetObserverGains>
      rxLength = (int16_t) (rxLength - size);
 80028aa:	f1aa 0304 	sub.w	r3, sl, #4
 80028ae:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 80028b0:	2000      	movs	r0, #0
 80028b2:	e6f5      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
 80028b4:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 80028b8:	f000 8236 	beq.w	8002d28 <RI_SetRegCommandParser+0x6f8>
 80028bc:	d941      	bls.n	8002942 <RI_SetRegCommandParser+0x312>
 80028be:	f5b2 7f04 	cmp.w	r2, #528	; 0x210
 80028c2:	f000 822c 	beq.w	8002d1e <RI_SetRegCommandParser+0x6ee>
 80028c6:	f5b2 7f24 	cmp.w	r2, #656	; 0x290
 80028ca:	d12b      	bne.n	8002924 <RI_SetRegCommandParser+0x2f4>
            PID_SetKP(pPIDId[motorID], (int16_t)regdata16);
 80028cc:	4b57      	ldr	r3, [pc, #348]	; (8002a2c <RI_SetRegCommandParser+0x3fc>)
 80028ce:	fa0f f189 	sxth.w	r1, r9
      rxData = rxData+size;
 80028d2:	1d2e      	adds	r6, r5, #4
            PID_SetKP(pPIDId[motorID], (int16_t)regdata16);
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	f004 fb2f 	bl	8006f38 <PID_SetKP>
      rxLength = (int16_t) (rxLength - size);
 80028da:	f1aa 0304 	sub.w	r3, sl, #4
 80028de:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 80028e0:	2000      	movs	r0, #0
            break;
 80028e2:	e6dd      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
 80028e4:	f241 5350 	movw	r3, #5456	; 0x1550
 80028e8:	429a      	cmp	r2, r3
 80028ea:	f000 8200 	beq.w	8002cee <RI_SetRegCommandParser+0x6be>
 80028ee:	d869      	bhi.n	80029c4 <RI_SetRegCommandParser+0x394>
 80028f0:	f241 4350 	movw	r3, #5200	; 0x1450
 80028f4:	429a      	cmp	r2, r3
 80028f6:	f000 8208 	beq.w	8002d0a <RI_SetRegCommandParser+0x6da>
 80028fa:	d950      	bls.n	800299e <RI_SetRegCommandParser+0x36e>
 80028fc:	f241 43d0 	movw	r3, #5328	; 0x14d0
 8002900:	429a      	cmp	r2, r3
 8002902:	f000 81f8 	beq.w	8002cf6 <RI_SetRegCommandParser+0x6c6>
 8002906:	f241 5310 	movw	r3, #5392	; 0x1510
 800290a:	429a      	cmp	r2, r3
 800290c:	d12a      	bne.n	8002964 <RI_SetRegCommandParser+0x334>
            PID_SetKPDivisorPOW2(pPIDId[motorID], regdata16);
 800290e:	4b47      	ldr	r3, [pc, #284]	; (8002a2c <RI_SetRegCommandParser+0x3fc>)
 8002910:	4649      	mov	r1, r9
      rxData = rxData+size;
 8002912:	1d2e      	adds	r6, r5, #4
            PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	f004 fb1f 	bl	8006f58 <PID_SetKPDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 800291a:	f1aa 0304 	sub.w	r3, sl, #4
 800291e:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002920:	2000      	movs	r0, #0
            break;
 8002922:	e6bd      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
 8002924:	f5b2 7fe8 	cmp.w	r2, #464	; 0x1d0
 8002928:	d193      	bne.n	8002852 <RI_SetRegCommandParser+0x222>
            PID_SetKI(pPIDIq[motorID], (int16_t)regdata16);
 800292a:	4b42      	ldr	r3, [pc, #264]	; (8002a34 <RI_SetRegCommandParser+0x404>)
 800292c:	fa0f f189 	sxth.w	r1, r9
      rxData = rxData+size;
 8002930:	1d2e      	adds	r6, r5, #4
            PID_SetKI(pPIDId[motorID], (int16_t)regdata16);
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	f004 fb02 	bl	8006f3c <PID_SetKI>
      rxLength = (int16_t) (rxLength - size);
 8002938:	f1aa 0304 	sub.w	r3, sl, #4
 800293c:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 800293e:	2000      	movs	r0, #0
            break;
 8002940:	e6ae      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
 8002942:	2ad0      	cmp	r2, #208	; 0xd0
 8002944:	f000 8214 	beq.w	8002d70 <RI_SetRegCommandParser+0x740>
 8002948:	f5b2 7f88 	cmp.w	r2, #272	; 0x110
 800294c:	d119      	bne.n	8002982 <RI_SetRegCommandParser+0x352>
            PID_SetKD(pPIDSpeed[motorID], (int16_t)regdata16);
 800294e:	483a      	ldr	r0, [pc, #232]	; (8002a38 <RI_SetRegCommandParser+0x408>)
 8002950:	fa0f f189 	sxth.w	r1, r9
 8002954:	f004 fb22 	bl	8006f9c <PID_SetKD>
      rxLength = (int16_t) (rxLength - size);
 8002958:	f1aa 0304 	sub.w	r3, sl, #4
      rxData = rxData+size;
 800295c:	1d2e      	adds	r6, r5, #4
      rxLength = (int16_t) (rxLength - size);
 800295e:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002960:	2000      	movs	r0, #0
            break;
 8002962:	e69d      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
 8002964:	f241 4390 	movw	r3, #5264	; 0x1490
 8002968:	429a      	cmp	r2, r3
 800296a:	f47f af72 	bne.w	8002852 <RI_SetRegCommandParser+0x222>
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 800296e:	4832      	ldr	r0, [pc, #200]	; (8002a38 <RI_SetRegCommandParser+0x408>)
 8002970:	4649      	mov	r1, r9
 8002972:	f004 faff 	bl	8006f74 <PID_SetKIDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002976:	f1aa 0304 	sub.w	r3, sl, #4
      rxData = rxData+size;
 800297a:	1d2e      	adds	r6, r5, #4
      rxLength = (int16_t) (rxLength - size);
 800297c:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 800297e:	2000      	movs	r0, #0
            break;
 8002980:	e68e      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
 8002982:	2a90      	cmp	r2, #144	; 0x90
 8002984:	f47f af65 	bne.w	8002852 <RI_SetRegCommandParser+0x222>
            PID_SetKP(pPIDSpeed[motorID], (int16_t)regdata16);
 8002988:	482b      	ldr	r0, [pc, #172]	; (8002a38 <RI_SetRegCommandParser+0x408>)
 800298a:	fa0f f189 	sxth.w	r1, r9
 800298e:	f004 fad3 	bl	8006f38 <PID_SetKP>
      rxLength = (int16_t) (rxLength - size);
 8002992:	f1aa 0304 	sub.w	r3, sl, #4
      rxData = rxData+size;
 8002996:	1d2e      	adds	r6, r5, #4
      rxLength = (int16_t) (rxLength - size);
 8002998:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 800299a:	2000      	movs	r0, #0
            break;
 800299c:	e680      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
 800299e:	f5b2 6f35 	cmp.w	r2, #2896	; 0xb50
 80029a2:	f43f af0b 	beq.w	80027bc <RI_SetRegCommandParser+0x18c>
 80029a6:	d94d      	bls.n	8002a44 <RI_SetRegCommandParser+0x414>
 80029a8:	f5b2 6f65 	cmp.w	r2, #3664	; 0xe50
 80029ac:	d004      	beq.n	80029b8 <RI_SetRegCommandParser+0x388>
 80029ae:	d929      	bls.n	8002a04 <RI_SetRegCommandParser+0x3d4>
 80029b0:	f5b2 6f69 	cmp.w	r2, #3728	; 0xe90
 80029b4:	f47f af4d 	bne.w	8002852 <RI_SetRegCommandParser+0x222>
      rxLength = (int16_t) (rxLength - size);
 80029b8:	f1aa 0304 	sub.w	r3, sl, #4
 80029bc:	b21b      	sxth	r3, r3
      rxData = rxData+size;
 80029be:	1d2e      	adds	r6, r5, #4
  uint8_t retVal = MCP_CMD_OK;
 80029c0:	2000      	movs	r0, #0
 80029c2:	e66d      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
 80029c4:	f241 6350 	movw	r3, #5712	; 0x1650
 80029c8:	429a      	cmp	r2, r3
 80029ca:	f000 81cd 	beq.w	8002d68 <RI_SetRegCommandParser+0x738>
 80029ce:	d968      	bls.n	8002aa2 <RI_SetRegCommandParser+0x472>
 80029d0:	f641 1310 	movw	r3, #6416	; 0x1910
 80029d4:	429a      	cmp	r2, r3
 80029d6:	f000 81bd 	beq.w	8002d54 <RI_SetRegCommandParser+0x724>
 80029da:	d946      	bls.n	8002a6a <RI_SetRegCommandParser+0x43a>
 80029dc:	f641 23d0 	movw	r3, #6864	; 0x1ad0
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d151      	bne.n	8002a88 <RI_SetRegCommandParser+0x458>
            OL_UpdateVoltage( pOL[motorID], ((regdata16 * 32767) / 100));
 80029e4:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <RI_SetRegCommandParser+0x40c>)
 80029e6:	4816      	ldr	r0, [pc, #88]	; (8002a40 <RI_SetRegCommandParser+0x410>)
 80029e8:	ebc9 39c9 	rsb	r9, r9, r9, lsl #15
 80029ec:	fba3 3109 	umull	r3, r1, r3, r9
 80029f0:	f341 114f 	sbfx	r1, r1, #5, #16
 80029f4:	f004 fa80 	bl	8006ef8 <OL_UpdateVoltage>
      rxLength = (int16_t) (rxLength - size);
 80029f8:	f1aa 0304 	sub.w	r3, sl, #4
      rxData = rxData+size;
 80029fc:	1d2e      	adds	r6, r5, #4
      rxLength = (int16_t) (rxLength - size);
 80029fe:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002a00:	2000      	movs	r0, #0
            break;
 8002a02:	e64d      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
 8002a04:	f5b2 6f41 	cmp.w	r2, #3088	; 0xc10
 8002a08:	f43f aed8 	beq.w	80027bc <RI_SetRegCommandParser+0x18c>
 8002a0c:	d942      	bls.n	8002a94 <RI_SetRegCommandParser+0x464>
 8002a0e:	f5b2 6f45 	cmp.w	r2, #3152	; 0xc50
 8002a12:	f43f aed3 	beq.w	80027bc <RI_SetRegCommandParser+0x18c>
 8002a16:	f5b2 6f49 	cmp.w	r2, #3216	; 0xc90
 8002a1a:	f43f aecf 	beq.w	80027bc <RI_SetRegCommandParser+0x18c>
 8002a1e:	e718      	b.n	8002852 <RI_SetRegCommandParser+0x222>
 8002a20:	20000a7c 	.word	0x20000a7c
 8002a24:	200005e0 	.word	0x200005e0
 8002a28:	200002f4 	.word	0x200002f4
 8002a2c:	20000480 	.word	0x20000480
 8002a30:	200002c0 	.word	0x200002c0
 8002a34:	20000484 	.word	0x20000484
 8002a38:	20000150 	.word	0x20000150
 8002a3c:	51eb851f 	.word	0x51eb851f
 8002a40:	200000e8 	.word	0x200000e8
 8002a44:	f5b2 6f19 	cmp.w	r2, #2448	; 0x990
 8002a48:	d13f      	bne.n	8002aca <RI_SetRegCommandParser+0x49a>
            currComp = MCI_GetIqdref(pMCIN);
 8002a4a:	48ba      	ldr	r0, [pc, #744]	; (8002d34 <RI_SetRegCommandParser+0x704>)
 8002a4c:	f7fe fe00 	bl	8001650 <MCI_GetIqdref>
      rxData = rxData+size;
 8002a50:	1d2e      	adds	r6, r5, #4
            currComp = MCI_GetIqdref(pMCIN);
 8002a52:	9005      	str	r0, [sp, #20]
            currComp.d = (int16_t)regdata16;
 8002a54:	f8ad 9016 	strh.w	r9, [sp, #22]
            MCI_SetCurrentReferences(pMCIN,currComp);
 8002a58:	48b6      	ldr	r0, [pc, #728]	; (8002d34 <RI_SetRegCommandParser+0x704>)
 8002a5a:	9905      	ldr	r1, [sp, #20]
 8002a5c:	f7fe fd74 	bl	8001548 <MCI_SetCurrentReferences>
      rxLength = (int16_t) (rxLength - size);
 8002a60:	f1aa 0304 	sub.w	r3, sl, #4
 8002a64:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002a66:	2000      	movs	r0, #0
 8002a68:	e61a      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
 8002a6a:	f641 03d0 	movw	r3, #6352	; 0x18d0
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	f47f aeef 	bne.w	8002852 <RI_SetRegCommandParser+0x222>
            PID_SetKIDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 8002a74:	48b0      	ldr	r0, [pc, #704]	; (8002d38 <RI_SetRegCommandParser+0x708>)
 8002a76:	4649      	mov	r1, r9
 8002a78:	f004 fa7c 	bl	8006f74 <PID_SetKIDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002a7c:	f1aa 0304 	sub.w	r3, sl, #4
      rxData = rxData+size;
 8002a80:	1d2e      	adds	r6, r5, #4
      rxLength = (int16_t) (rxLength - size);
 8002a82:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002a84:	2000      	movs	r0, #0
            break;
 8002a86:	e60b      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
 8002a88:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	f43f ae95 	beq.w	80027bc <RI_SetRegCommandParser+0x18c>
 8002a92:	e6de      	b.n	8002852 <RI_SetRegCommandParser+0x222>
 8002a94:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 8002a98:	f5b0 6f39 	cmp.w	r0, #2960	; 0xb90
 8002a9c:	f47f aed9 	bne.w	8002852 <RI_SetRegCommandParser+0x222>
 8002aa0:	e68c      	b.n	80027bc <RI_SetRegCommandParser+0x18c>
 8002aa2:	f241 53d0 	movw	r3, #5584	; 0x15d0
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	f000 811d 	beq.w	8002ce6 <RI_SetRegCommandParser+0x6b6>
 8002aac:	f241 6310 	movw	r3, #5648	; 0x1610
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d116      	bne.n	8002ae2 <RI_SetRegCommandParser+0x4b2>
            PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 8002ab4:	4ba1      	ldr	r3, [pc, #644]	; (8002d3c <RI_SetRegCommandParser+0x70c>)
 8002ab6:	4649      	mov	r1, r9
      rxData = rxData+size;
 8002ab8:	1d2e      	adds	r6, r5, #4
            PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	f004 fa5a 	bl	8006f74 <PID_SetKIDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002ac0:	f1aa 0304 	sub.w	r3, sl, #4
 8002ac4:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002ac6:	2000      	movs	r0, #0
            break;
 8002ac8:	e5ea      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
 8002aca:	f4ff aec2 	bcc.w	8002852 <RI_SetRegCommandParser+0x222>
 8002ace:	f5b2 6f25 	cmp.w	r2, #2640	; 0xa50
 8002ad2:	f43f aedc 	beq.w	800288e <RI_SetRegCommandParser+0x25e>
 8002ad6:	d914      	bls.n	8002b02 <RI_SetRegCommandParser+0x4d2>
 8002ad8:	f5b2 6f29 	cmp.w	r2, #2704	; 0xa90
 8002adc:	f43f aed7 	beq.w	800288e <RI_SetRegCommandParser+0x25e>
 8002ae0:	e6b7      	b.n	8002852 <RI_SetRegCommandParser+0x222>
 8002ae2:	f241 5390 	movw	r3, #5520	; 0x1590
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	f47f aeb3 	bne.w	8002852 <RI_SetRegCommandParser+0x222>
            PID_SetKDDivisorPOW2(pPIDId[motorID], regdata16);
 8002aec:	4b94      	ldr	r3, [pc, #592]	; (8002d40 <RI_SetRegCommandParser+0x710>)
 8002aee:	4649      	mov	r1, r9
      rxData = rxData+size;
 8002af0:	1d2e      	adds	r6, r5, #4
            PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 8002af2:	6818      	ldr	r0, [r3, #0]
 8002af4:	f004 fa5a 	bl	8006fac <PID_SetKDDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002af8:	f1aa 0304 	sub.w	r3, sl, #4
 8002afc:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002afe:	2000      	movs	r0, #0
            break;
 8002b00:	e5ce      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
 8002b02:	f5b2 6f1d 	cmp.w	r2, #2512	; 0x9d0
 8002b06:	f43f aec2 	beq.w	800288e <RI_SetRegCommandParser+0x25e>
 8002b0a:	f5b2 6f21 	cmp.w	r2, #2576	; 0xa10
 8002b0e:	f43f aebe 	beq.w	800288e <RI_SetRegCommandParser+0x25e>
 8002b12:	e69e      	b.n	8002852 <RI_SetRegCommandParser+0x222>
 8002b14:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 8002b18:	f5b0 6f09 	cmp.w	r0, #2192	; 0x890
 8002b1c:	f43f ae4e 	beq.w	80027bc <RI_SetRegCommandParser+0x18c>
 8002b20:	e697      	b.n	8002852 <RI_SetRegCommandParser+0x222>
 8002b22:	f5b2 6f01 	cmp.w	r2, #2064	; 0x810
 8002b26:	f43f ae49 	beq.w	80027bc <RI_SetRegCommandParser+0x18c>
 8002b2a:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 8002b2e:	f5b0 6ff2 	cmp.w	r0, #1936	; 0x790
 8002b32:	f43f ae43 	beq.w	80027bc <RI_SetRegCommandParser+0x18c>
 8002b36:	e68c      	b.n	8002852 <RI_SetRegCommandParser+0x222>
 8002b38:	2ad8      	cmp	r2, #216	; 0xd8
 8002b3a:	d003      	beq.n	8002b44 <RI_SetRegCommandParser+0x514>
 8002b3c:	f5b2 7f8c 	cmp.w	r2, #280	; 0x118
 8002b40:	f47f ae5b 	bne.w	80027fa <RI_SetRegCommandParser+0x1ca>
      rxLength = (int16_t) (rxLength - size);
 8002b44:	f1aa 0306 	sub.w	r3, sl, #6
 8002b48:	b21b      	sxth	r3, r3
      rxData = rxData+size;
 8002b4a:	1dae      	adds	r6, r5, #6
            retVal = MCP_ERROR_RO_REG;
 8002b4c:	2004      	movs	r0, #4
 8002b4e:	e5a7      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
 8002b50:	2aa8      	cmp	r2, #168	; 0xa8
 8002b52:	d002      	beq.n	8002b5a <RI_SetRegCommandParser+0x52a>
 8002b54:	d916      	bls.n	8002b84 <RI_SetRegCommandParser+0x554>
 8002b56:	2ae8      	cmp	r2, #232	; 0xe8
 8002b58:	d118      	bne.n	8002b8c <RI_SetRegCommandParser+0x55c>
      rxLength = (int16_t) (rxLength - size);
 8002b5a:	eba9 030a 	sub.w	r3, r9, sl
      rxData = rxData+size;
 8002b5e:	4456      	add	r6, sl
      rxLength = (int16_t) (rxLength - size);
 8002b60:	b21b      	sxth	r3, r3
              retVal = MCP_ERROR_RO_REG;
 8002b62:	2004      	movs	r0, #4
 8002b64:	e59c      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
 8002b66:	f5b2 7f5a 	cmp.w	r2, #872	; 0x368
 8002b6a:	f000 809e 	beq.w	8002caa <RI_SetRegCommandParser+0x67a>
 8002b6e:	f5b2 6fa5 	cmp.w	r2, #1320	; 0x528
 8002b72:	d10b      	bne.n	8002b8c <RI_SetRegCommandParser+0x55c>
              retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8002b74:	4873      	ldr	r0, [pc, #460]	; (8002d44 <RI_SetRegCommandParser+0x714>)
 8002b76:	f004 f8ef 	bl	8006d58 <MCPA_cfgLog>
      rxLength = (int16_t) (rxLength - size);
 8002b7a:	eba9 030a 	sub.w	r3, r9, sl
      rxData = rxData+size;
 8002b7e:	4456      	add	r6, sl
      rxLength = (int16_t) (rxLength - size);
 8002b80:	b21b      	sxth	r3, r3
              break;
 8002b82:	e58d      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
 8002b84:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 8002b88:	2828      	cmp	r0, #40	; 0x28
 8002b8a:	d0e6      	beq.n	8002b5a <RI_SetRegCommandParser+0x52a>
      rxLength = (int16_t) (rxLength - size);
 8002b8c:	eba9 030a 	sub.w	r3, r9, sl
      rxData = rxData+size;
 8002b90:	4456      	add	r6, sl
      rxLength = (int16_t) (rxLength - size);
 8002b92:	b21b      	sxth	r3, r3
              retVal = MCP_ERROR_UNKNOWN_REG;
 8002b94:	2005      	movs	r0, #5
              break;
 8002b96:	e583      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
      rxLength = (int16_t) (rxLength - size);
 8002b98:	eba9 0302 	sub.w	r3, r9, r2
      rxData = rxData+size;
 8002b9c:	4416      	add	r6, r2
      rxLength = (int16_t) (rxLength - size);
 8002b9e:	b21b      	sxth	r3, r3
        retVal = MCP_ERROR_RO_REG;
 8002ba0:	2004      	movs	r0, #4
 8002ba2:	e57d      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
          retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
 8002ba4:	200a      	movs	r0, #10
 8002ba6:	e57b      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
            uint8_t regdata8 = *data;
 8002ba8:	78ab      	ldrb	r3, [r5, #2]
            if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d02a      	beq.n	8002c04 <RI_SetRegCommandParser+0x5d4>
            if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	f000 8086 	beq.w	8002cc0 <RI_SetRegCommandParser+0x690>
            if ((uint8_t)regdata8 == MCM_OPEN_LOOP_CURRENT_MODE)
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d01c      	beq.n	8002bf2 <RI_SetRegCommandParser+0x5c2>
            if ((uint8_t)regdata8 == MCM_OPEN_LOOP_VOLTAGE_MODE)
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d12b      	bne.n	8002c14 <RI_SetRegCommandParser+0x5e4>
              MCI_SetOpenLoopVoltage(pMCIN);
 8002bbc:	485d      	ldr	r0, [pc, #372]	; (8002d34 <RI_SetRegCommandParser+0x704>)
 8002bbe:	f7fe fc01 	bl	80013c4 <MCI_SetOpenLoopVoltage>
      rxLength = (int16_t) (rxLength - size);
 8002bc2:	f1aa 0303 	sub.w	r3, sl, #3
      rxData = rxData+size;
 8002bc6:	1cee      	adds	r6, r5, #3
      rxLength = (int16_t) (rxLength - size);
 8002bc8:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002bca:	2000      	movs	r0, #0
 8002bcc:	e568      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
            MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8002bce:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8002bd2:	4a5d      	ldr	r2, [pc, #372]	; (8002d48 <RI_SetRegCommandParser+0x718>)
 8002bd4:	4857      	ldr	r0, [pc, #348]	; (8002d34 <RI_SetRegCommandParser+0x704>)
 8002bd6:	fb82 2103 	smull	r2, r1, r2, r3
 8002bda:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8002bde:	b209      	sxth	r1, r1
 8002be0:	2200      	movs	r2, #0
 8002be2:	f7fe fbbf 	bl	8001364 <MCI_ExecSpeedRamp>
      rxLength = (int16_t) (rxLength - size);
 8002be6:	f1aa 0306 	sub.w	r3, sl, #6
      rxData = rxData+size;
 8002bea:	1dae      	adds	r6, r5, #6
      rxLength = (int16_t) (rxLength - size);
 8002bec:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002bee:	2000      	movs	r0, #0
            break;
 8002bf0:	e556      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
              MCI_SetOpenLoopCurrent(pMCIN);
 8002bf2:	4850      	ldr	r0, [pc, #320]	; (8002d34 <RI_SetRegCommandParser+0x704>)
 8002bf4:	f7fe fbd8 	bl	80013a8 <MCI_SetOpenLoopCurrent>
      rxLength = (int16_t) (rxLength - size);
 8002bf8:	f1aa 0303 	sub.w	r3, sl, #3
      rxData = rxData+size;
 8002bfc:	1cee      	adds	r6, r5, #3
      rxLength = (int16_t) (rxLength - size);
 8002bfe:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002c00:	2000      	movs	r0, #0
 8002c02:	e54d      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
              MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8002c04:	484b      	ldr	r0, [pc, #300]	; (8002d34 <RI_SetRegCommandParser+0x704>)
 8002c06:	f7fe fd4d 	bl	80016a4 <MCI_GetTeref>
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	4601      	mov	r1, r0
 8002c0e:	4849      	ldr	r0, [pc, #292]	; (8002d34 <RI_SetRegCommandParser+0x704>)
 8002c10:	f7fe fbb2 	bl	8001378 <MCI_ExecTorqueRamp>
      rxLength = (int16_t) (rxLength - size);
 8002c14:	f1aa 0303 	sub.w	r3, sl, #3
 8002c18:	b21b      	sxth	r3, r3
      rxData = rxData+size;
 8002c1a:	1cee      	adds	r6, r5, #3
  uint8_t retVal = MCP_CMD_OK;
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	e53f      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
              if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8002c20:	f01c 0307 	ands.w	r3, ip, #7
 8002c24:	d12a      	bne.n	8002c7c <RI_SetRegCommandParser+0x64c>
              uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 8002c26:	fa5f fc8c 	uxtb.w	ip, ip
              if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8002c2a:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 8002c2e:	d825      	bhi.n	8002c7c <RI_SetRegCommandParser+0x64c>
                for (i = 0; i <nbrOfPhase; i++)
 8002c30:	ea5f 02dc 	movs.w	r2, ip, lsr #3
 8002c34:	d020      	beq.n	8002c78 <RI_SetRegCommandParser+0x648>
 8002c36:	e9cd 9402 	strd	r9, r4, [sp, #8]
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4691      	mov	r9, r2
 8002c3e:	461c      	mov	r4, r3
                revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002c40:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8002c44:	4b40      	ldr	r3, [pc, #256]	; (8002d48 <RI_SetRegCommandParser+0x718>)
 8002c46:	fb83 e00c 	smull	lr, r0, r3, ip
 8002c4a:	eba0 70ec 	sub.w	r0, r0, ip, asr #31
 8002c4e:	f8ad 0016 	strh.w	r0, [sp, #22]
                revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002c52:	f9b5 0008 	ldrsh.w	r0, [r5, #8]
 8002c56:	f8ad 0018 	strh.w	r0, [sp, #24]
                revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002c5a:	8968      	ldrh	r0, [r5, #10]
 8002c5c:	f8ad 0014 	strh.w	r0, [sp, #20]
                for (i = 0; i <nbrOfPhase; i++)
 8002c60:	3401      	adds	r4, #1
                (void)RUC_SetPhase( RevUpControl[motorID], i, &revUpPhase);
 8002c62:	483a      	ldr	r0, [pc, #232]	; (8002d4c <RI_SetRegCommandParser+0x71c>)
 8002c64:	aa05      	add	r2, sp, #20
 8002c66:	f005 f93b 	bl	8007ee0 <RUC_SetPhase>
                for (i = 0; i <nbrOfPhase; i++)
 8002c6a:	b2e1      	uxtb	r1, r4
 8002c6c:	4589      	cmp	r9, r1
 8002c6e:	f105 0508 	add.w	r5, r5, #8
 8002c72:	d8e5      	bhi.n	8002c40 <RI_SetRegCommandParser+0x610>
 8002c74:	e9dd 9402 	ldrd	r9, r4, [sp, #8]
  uint8_t retVal = MCP_CMD_OK;
 8002c78:	2000      	movs	r0, #0
 8002c7a:	e000      	b.n	8002c7e <RI_SetRegCommandParser+0x64e>
                retVal = MCP_ERROR_BAD_RAW_FORMAT;
 8002c7c:	200a      	movs	r0, #10
      rxLength = (int16_t) (rxLength - size);
 8002c7e:	eba9 030a 	sub.w	r3, r9, sl
      rxData = rxData+size;
 8002c82:	4456      	add	r6, sl
      rxLength = (int16_t) (rxLength - size);
 8002c84:	b21b      	sxth	r3, r3
 8002c86:	e50b      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
              MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8002c88:	686b      	ldr	r3, [r5, #4]
 8002c8a:	492f      	ldr	r1, [pc, #188]	; (8002d48 <RI_SetRegCommandParser+0x718>)
 8002c8c:	892a      	ldrh	r2, [r5, #8]
 8002c8e:	fb81 0103 	smull	r0, r1, r1, r3
 8002c92:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8002c96:	4827      	ldr	r0, [pc, #156]	; (8002d34 <RI_SetRegCommandParser+0x704>)
 8002c98:	b209      	sxth	r1, r1
 8002c9a:	f7fe fb63 	bl	8001364 <MCI_ExecSpeedRamp>
      rxLength = (int16_t) (rxLength - size);
 8002c9e:	eba9 030a 	sub.w	r3, r9, sl
      rxData = rxData+size;
 8002ca2:	4456      	add	r6, sl
      rxLength = (int16_t) (rxLength - size);
 8002ca4:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002ca6:	2000      	movs	r0, #0
              break;
 8002ca8:	e4fa      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
              currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002caa:	6869      	ldr	r1, [r5, #4]
              MCI_SetCurrentReferences(pMCIN, currComp);
 8002cac:	4821      	ldr	r0, [pc, #132]	; (8002d34 <RI_SetRegCommandParser+0x704>)
              currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002cae:	9105      	str	r1, [sp, #20]
              MCI_SetCurrentReferences(pMCIN, currComp);
 8002cb0:	f7fe fc4a 	bl	8001548 <MCI_SetCurrentReferences>
      rxLength = (int16_t) (rxLength - size);
 8002cb4:	eba9 030a 	sub.w	r3, r9, sl
      rxData = rxData+size;
 8002cb8:	4456      	add	r6, sl
      rxLength = (int16_t) (rxLength - size);
 8002cba:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	e4ef      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
              MCI_SetSpeedMode(pMCIN);
 8002cc0:	481c      	ldr	r0, [pc, #112]	; (8002d34 <RI_SetRegCommandParser+0x704>)
 8002cc2:	f7fe fb63 	bl	800138c <MCI_SetSpeedMode>
      rxLength = (int16_t) (rxLength - size);
 8002cc6:	f1aa 0303 	sub.w	r3, sl, #3
      rxData = rxData+size;
 8002cca:	1cee      	adds	r6, r5, #3
      rxLength = (int16_t) (rxLength - size);
 8002ccc:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002cce:	2000      	movs	r0, #0
 8002cd0:	e4e6      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002cd2:	2301      	movs	r3, #1
  const char_t *tempsrcString = srcString;
 8002cd4:	4630      	mov	r0, r6
  *size= 1U ; /* /0 is the min String size */
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	e513      	b.n	8002702 <RI_SetRegCommandParser+0xd2>
      rxLength = (int16_t) (rxLength - size);
 8002cda:	f1aa 0303 	sub.w	r3, sl, #3
 8002cde:	b21b      	sxth	r3, r3
      rxData = rxData+size;
 8002ce0:	1cee      	adds	r6, r5, #3
        retVal = MCP_ERROR_RO_REG;
 8002ce2:	2004      	movs	r0, #4
 8002ce4:	e4dc      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
            PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 8002ce6:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <RI_SetRegCommandParser+0x70c>)
 8002ce8:	4649      	mov	r1, r9
      rxData = rxData+size;
 8002cea:	1d2e      	adds	r6, r5, #4
 8002cec:	e612      	b.n	8002914 <RI_SetRegCommandParser+0x2e4>
            PID_SetKIDivisorPOW2(pPIDId[motorID], regdata16);
 8002cee:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <RI_SetRegCommandParser+0x710>)
 8002cf0:	4649      	mov	r1, r9
      rxData = rxData+size;
 8002cf2:	1d2e      	adds	r6, r5, #4
 8002cf4:	e6e1      	b.n	8002aba <RI_SetRegCommandParser+0x48a>
            PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002cf6:	4816      	ldr	r0, [pc, #88]	; (8002d50 <RI_SetRegCommandParser+0x720>)
 8002cf8:	4649      	mov	r1, r9
 8002cfa:	f004 f957 	bl	8006fac <PID_SetKDDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002cfe:	f1aa 0304 	sub.w	r3, sl, #4
      rxData = rxData+size;
 8002d02:	1d2e      	adds	r6, r5, #4
      rxLength = (int16_t) (rxLength - size);
 8002d04:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002d06:	2000      	movs	r0, #0
            break;
 8002d08:	e4ca      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
            PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002d0a:	4811      	ldr	r0, [pc, #68]	; (8002d50 <RI_SetRegCommandParser+0x720>)
 8002d0c:	4649      	mov	r1, r9
 8002d0e:	f004 f923 	bl	8006f58 <PID_SetKPDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002d12:	f1aa 0304 	sub.w	r3, sl, #4
      rxData = rxData+size;
 8002d16:	1d2e      	adds	r6, r5, #4
      rxLength = (int16_t) (rxLength - size);
 8002d18:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002d1a:	2000      	movs	r0, #0
            break;
 8002d1c:	e4c0      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
            PID_SetKD(pPIDIq[motorID], (int16_t)regdata16);
 8002d1e:	4b07      	ldr	r3, [pc, #28]	; (8002d3c <RI_SetRegCommandParser+0x70c>)
 8002d20:	fa0f f189 	sxth.w	r1, r9
      rxData = rxData+size;
 8002d24:	1d2e      	adds	r6, r5, #4
 8002d26:	e5a1      	b.n	800286c <RI_SetRegCommandParser+0x23c>
            PID_SetKP(pPIDIq[motorID], (int16_t)regdata16);
 8002d28:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <RI_SetRegCommandParser+0x70c>)
 8002d2a:	fa0f f189 	sxth.w	r1, r9
      rxData = rxData+size;
 8002d2e:	1d2e      	adds	r6, r5, #4
 8002d30:	e5d0      	b.n	80028d4 <RI_SetRegCommandParser+0x2a4>
 8002d32:	bf00      	nop
 8002d34:	20000a7c 	.word	0x20000a7c
 8002d38:	200002f4 	.word	0x200002f4
 8002d3c:	20000484 	.word	0x20000484
 8002d40:	20000480 	.word	0x20000480
 8002d44:	200004a0 	.word	0x200004a0
 8002d48:	2aaaaaab 	.word	0x2aaaaaab
 8002d4c:	20000234 	.word	0x20000234
 8002d50:	20000150 	.word	0x20000150
            PID_SetKPDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 8002d54:	4824      	ldr	r0, [pc, #144]	; (8002de8 <RI_SetRegCommandParser+0x7b8>)
 8002d56:	4649      	mov	r1, r9
 8002d58:	f004 f8fe 	bl	8006f58 <PID_SetKPDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002d5c:	f1aa 0304 	sub.w	r3, sl, #4
      rxData = rxData+size;
 8002d60:	1d2e      	adds	r6, r5, #4
      rxLength = (int16_t) (rxLength - size);
 8002d62:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002d64:	2000      	movs	r0, #0
            break;
 8002d66:	e49b      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
            PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 8002d68:	4b20      	ldr	r3, [pc, #128]	; (8002dec <RI_SetRegCommandParser+0x7bc>)
 8002d6a:	4649      	mov	r1, r9
      rxData = rxData+size;
 8002d6c:	1d2e      	adds	r6, r5, #4
 8002d6e:	e6c0      	b.n	8002af2 <RI_SetRegCommandParser+0x4c2>
            PID_SetKI(pPIDSpeed[motorID], (int16_t)regdata16);
 8002d70:	481f      	ldr	r0, [pc, #124]	; (8002df0 <RI_SetRegCommandParser+0x7c0>)
 8002d72:	fa0f f189 	sxth.w	r1, r9
 8002d76:	f004 f8e1 	bl	8006f3c <PID_SetKI>
      rxLength = (int16_t) (rxLength - size);
 8002d7a:	f1aa 0304 	sub.w	r3, sl, #4
      rxData = rxData+size;
 8002d7e:	1d2e      	adds	r6, r5, #4
      rxLength = (int16_t) (rxLength - size);
 8002d80:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002d82:	2000      	movs	r0, #0
            break;
 8002d84:	e48c      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
            currComp = MCI_GetIqdref(pMCIN);
 8002d86:	481b      	ldr	r0, [pc, #108]	; (8002df4 <RI_SetRegCommandParser+0x7c4>)
 8002d88:	f7fe fc62 	bl	8001650 <MCI_GetIqdref>
      rxData = rxData+size;
 8002d8c:	1d2e      	adds	r6, r5, #4
            currComp = MCI_GetIqdref(pMCIN);
 8002d8e:	9005      	str	r0, [sp, #20]
            currComp.q = (int16_t)regdata16;
 8002d90:	f8ad 9014 	strh.w	r9, [sp, #20]
            MCI_SetCurrentReferences(pMCIN,currComp);
 8002d94:	e660      	b.n	8002a58 <RI_SetRegCommandParser+0x428>
            STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 8002d96:	aa05      	add	r2, sp, #20
 8002d98:	f10d 0112 	add.w	r1, sp, #18
 8002d9c:	4816      	ldr	r0, [pc, #88]	; (8002df8 <RI_SetRegCommandParser+0x7c8>)
 8002d9e:	f005 fc71 	bl	8008684 <STO_PLL_GetObserverGains>
      rxData = rxData+size;
 8002da2:	1d2e      	adds	r6, r5, #4
            STO_PLL_SetObserverGains(stoPLLSensor[motorID], hC1, (int16_t)regdata16);
 8002da4:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8002da8:	fa0f f289 	sxth.w	r2, r9
 8002dac:	e57a      	b.n	80028a4 <RI_SetRegCommandParser+0x274>
            PID_SetKP (&stoPLLSensor[motorID]->PIRegulator, (int16_t)regdata16);
 8002dae:	480e      	ldr	r0, [pc, #56]	; (8002de8 <RI_SetRegCommandParser+0x7b8>)
 8002db0:	fa0f f189 	sxth.w	r1, r9
 8002db4:	f004 f8c0 	bl	8006f38 <PID_SetKP>
      rxLength = (int16_t) (rxLength - size);
 8002db8:	f1aa 0304 	sub.w	r3, sl, #4
      rxData = rxData+size;
 8002dbc:	1d2e      	adds	r6, r5, #4
      rxLength = (int16_t) (rxLength - size);
 8002dbe:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002dc0:	2000      	movs	r0, #0
            break;
 8002dc2:	e46d      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
            PID_SetKI(pPIDId[motorID], (int16_t)regdata16);
 8002dc4:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <RI_SetRegCommandParser+0x7cc>)
 8002dc6:	fa0f f189 	sxth.w	r1, r9
      rxData = rxData+size;
 8002dca:	1d2e      	adds	r6, r5, #4
 8002dcc:	e5b1      	b.n	8002932 <RI_SetRegCommandParser+0x302>
            DAC_SetChannelConfig(&DAC_Handle , DAC_CH2, regdata16);
 8002dce:	480c      	ldr	r0, [pc, #48]	; (8002e00 <RI_SetRegCommandParser+0x7d0>)
 8002dd0:	464a      	mov	r2, r9
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	f7fd ff3a 	bl	8000c4c <DAC_SetChannelConfig>
      rxLength = (int16_t) (rxLength - size);
 8002dd8:	f1aa 0304 	sub.w	r3, sl, #4
      rxData = rxData+size;
 8002ddc:	1d2e      	adds	r6, r5, #4
      rxLength = (int16_t) (rxLength - size);
 8002dde:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002de0:	2000      	movs	r0, #0
            break;
 8002de2:	e45d      	b.n	80026a0 <RI_SetRegCommandParser+0x70>
 8002de4:	9801      	ldr	r0, [sp, #4]
 8002de6:	e49a      	b.n	800271e <RI_SetRegCommandParser+0xee>
 8002de8:	200002f4 	.word	0x200002f4
 8002dec:	20000484 	.word	0x20000484
 8002df0:	20000150 	.word	0x20000150
 8002df4:	20000a7c 	.word	0x20000a7c
 8002df8:	200002c0 	.word	0x200002c0
 8002dfc:	20000480 	.word	0x20000480
 8002e00:	200005e0 	.word	0x200005e0

08002e04 <RI_GetRegCommandParser>:
{
 8002e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t rxLength = pHandle->rxLength;
 8002e08:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t * rxData = pHandle->rxBuffer;
 8002e0c:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 8002e10:	6886      	ldr	r6, [r0, #8]
    pHandle->txLength = 0;
 8002e12:	2300      	movs	r3, #0
{
 8002e14:	b099      	sub	sp, #100	; 0x64
    pHandle->txLength = 0;
 8002e16:	81c3      	strh	r3, [r0, #14]
    while (rxLength > 0U)
 8002e18:	f1b8 0f00 	cmp.w	r8, #0
 8002e1c:	f000 838d 	beq.w	800353a <RI_GetRegCommandParser+0x736>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8002e20:	f8df a390 	ldr.w	sl, [pc, #912]	; 80031b4 <RI_GetRegCommandParser+0x3b0>
                (void)RUC_GetPhase( RevUpControl[motorID] ,i, &revUpPhase);
 8002e24:	f8df b390 	ldr.w	fp, [pc, #912]	; 80031b8 <RI_GetRegCommandParser+0x3b4>
 8002e28:	b20c      	sxth	r4, r1
 8002e2a:	4607      	mov	r7, r0
    while (rxLength > 0U)
 8002e2c:	4619      	mov	r1, r3
    uint8_t * rxData = pHandle->rxBuffer;
 8002e2e:	464d      	mov	r5, r9
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8002e30:	f835 3b02 	ldrh.w	r3, [r5], #2
    switch (typeID)
 8002e34:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002e38:	3a08      	subs	r2, #8
    uint16_t regID = dataID & REG_MASK;
 8002e3a:	f023 0307 	bic.w	r3, r3, #7
 8002e3e:	b29b      	uxth	r3, r3
    switch (typeID)
 8002e40:	2a20      	cmp	r2, #32
 8002e42:	d812      	bhi.n	8002e6a <RI_GetRegCommandParser+0x66>
 8002e44:	e8df f002 	tbb	[pc, r2]
 8002e48:	111111ad 	.word	0x111111ad
 8002e4c:	11111111 	.word	0x11111111
 8002e50:	11111168 	.word	0x11111168
 8002e54:	11111111 	.word	0x11111111
 8002e58:	111111bb 	.word	0x111111bb
 8002e5c:	11111111 	.word	0x11111111
 8002e60:	11111131 	.word	0x11111131
 8002e64:	11111111 	.word	0x11111111
 8002e68:	15          	.byte	0x15
 8002e69:	00          	.byte	0x00
 8002e6a:	2007      	movs	r0, #7
}
 8002e6c:	b019      	add	sp, #100	; 0x64
 8002e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rawData++;
 8002e72:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 8002e76:	f106 0202 	add.w	r2, r6, #2
        switch (regID)
 8002e7a:	f000 82e4 	beq.w	8003446 <RI_GetRegCommandParser+0x642>
 8002e7e:	f200 80e0 	bhi.w	8003042 <RI_GetRegCommandParser+0x23e>
 8002e82:	2ba8      	cmp	r3, #168	; 0xa8
 8002e84:	f000 82f2 	beq.w	800346c <RI_GetRegCommandParser+0x668>
 8002e88:	f200 80d1 	bhi.w	800302e <RI_GetRegCommandParser+0x22a>
 8002e8c:	2b28      	cmp	r3, #40	; 0x28
 8002e8e:	f000 82c9 	beq.w	8003424 <RI_GetRegCommandParser+0x620>
 8002e92:	2b68      	cmp	r3, #104	; 0x68
 8002e94:	f040 8091 	bne.w	8002fba <RI_GetRegCommandParser+0x1b6>
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8002e98:	233c      	movs	r3, #60	; 0x3c
            if (((*rawSize) + 2U) > freeSpace)
 8002e9a:	2c3d      	cmp	r4, #61	; 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8002e9c:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8002e9e:	f200 8325 	bhi.w	80034ec <RI_GetRegCommandParser+0x6e8>
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002ea2:	2008      	movs	r0, #8
}
 8002ea4:	b019      	add	sp, #100	; 0x64
 8002ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (regID)
 8002eaa:	2ba0      	cmp	r3, #160	; 0xa0
 8002eac:	f000 8248 	beq.w	8003340 <RI_GetRegCommandParser+0x53c>
 8002eb0:	f200 809f 	bhi.w	8002ff2 <RI_GetRegCommandParser+0x1ee>
 8002eb4:	2b20      	cmp	r3, #32
 8002eb6:	f000 825b 	beq.w	8003370 <RI_GetRegCommandParser+0x56c>
 8002eba:	2b60      	cmp	r3, #96	; 0x60
 8002ebc:	d17d      	bne.n	8002fba <RI_GetRegCommandParser+0x1b6>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002ebe:	48b5      	ldr	r0, [pc, #724]	; (8003194 <RI_GetRegCommandParser+0x390>)
 8002ec0:	f990 1000 	ldrsb.w	r1, [r0]
 8002ec4:	2900      	cmp	r1, #0
 8002ec6:	f000 8284 	beq.w	80033d2 <RI_GetRegCommandParser+0x5ce>
 8002eca:	2c01      	cmp	r4, #1
 8002ecc:	f340 8236 	ble.w	800333c <RI_GetRegCommandParser+0x538>
 8002ed0:	46b4      	mov	ip, r6
 8002ed2:	f1c6 0201 	rsb	r2, r6, #1
 8002ed6:	e002      	b.n	8002ede <RI_GetRegCommandParser+0xda>
 8002ed8:	42a3      	cmp	r3, r4
 8002eda:	f280 822f 	bge.w	800333c <RI_GetRegCommandParser+0x538>
    *tempdestString = *tempsrcString;
 8002ede:	f80c 1b01 	strb.w	r1, [ip], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002ee2:	f910 1f01 	ldrsb.w	r1, [r0, #1]!
 8002ee6:	eb0c 0302 	add.w	r3, ip, r2
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2900      	cmp	r1, #0
 8002eee:	d1f3      	bne.n	8002ed8 <RI_GetRegCommandParser+0xd4>
        txData = txData+size;
 8002ef0:	4618      	mov	r0, r3
    *tempdestString = (int8_t)0;
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f88c 2000 	strb.w	r2, [ip]
        pHandle->txLength += size;
 8002ef8:	89f9      	ldrh	r1, [r7, #14]
        if (freeSpace >= 2U)
 8002efa:	b2a4      	uxth	r4, r4
        pHandle->txLength += size;
 8002efc:	4419      	add	r1, r3
    while (rxLength > 0U)
 8002efe:	eb09 0208 	add.w	r2, r9, r8
        freeSpaceS16 = freeSpaceS16-size;
 8002f02:	1ae3      	subs	r3, r4, r3
    while (rxLength > 0U)
 8002f04:	b292      	uxth	r2, r2
        freeSpaceS16 = freeSpaceS16-size;
 8002f06:	b21c      	sxth	r4, r3
    while (rxLength > 0U)
 8002f08:	b2ab      	uxth	r3, r5
        pHandle->txLength += size;
 8002f0a:	b289      	uxth	r1, r1
    while (rxLength > 0U)
 8002f0c:	4293      	cmp	r3, r2
        pHandle->txLength += size;
 8002f0e:	81f9      	strh	r1, [r7, #14]
        txData = txData+size;
 8002f10:	4406      	add	r6, r0
    while (rxLength > 0U)
 8002f12:	d18d      	bne.n	8002e30 <RI_GetRegCommandParser+0x2c>
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8002f14:	2000      	movs	r0, #0
 8002f16:	e7a9      	b.n	8002e6c <RI_GetRegCommandParser+0x68>
        if (freeSpace >= 2U)
 8002f18:	b2a4      	uxth	r4, r4
 8002f1a:	2c01      	cmp	r4, #1
 8002f1c:	d9c1      	bls.n	8002ea2 <RI_GetRegCommandParser+0x9e>
          switch (regID)
 8002f1e:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8002f22:	f000 8347 	beq.w	80035b4 <RI_GetRegCommandParser+0x7b0>
 8002f26:	f200 80b7 	bhi.w	8003098 <RI_GetRegCommandParser+0x294>
 8002f2a:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 8002f2e:	f000 834b 	beq.w	80035c8 <RI_GetRegCommandParser+0x7c4>
 8002f32:	d91b      	bls.n	8002f6c <RI_GetRegCommandParser+0x168>
 8002f34:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8002f38:	f000 8341 	beq.w	80035be <RI_GetRegCommandParser+0x7ba>
 8002f3c:	f240 8113 	bls.w	8003166 <RI_GetRegCommandParser+0x362>
 8002f40:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8002f44:	f000 8377 	beq.w	8003636 <RI_GetRegCommandParser+0x832>
 8002f48:	f240 80d9 	bls.w	80030fe <RI_GetRegCommandParser+0x2fa>
 8002f4c:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8002f50:	f000 834c 	beq.w	80035ec <RI_GetRegCommandParser+0x7e8>
 8002f54:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8002f58:	d12f      	bne.n	8002fba <RI_GetRegCommandParser+0x1b6>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8002f5a:	4650      	mov	r0, sl
 8002f5c:	f7fe fb78 	bl	8001650 <MCI_GetIqdref>
 8002f60:	8030      	strh	r0, [r6, #0]
 8002f62:	900e      	str	r0, [sp, #56]	; 0x38
              break;
 8002f64:	2002      	movs	r0, #2
        pHandle->txLength += size;
 8002f66:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 8002f68:	4603      	mov	r3, r0
              break;
 8002f6a:	e7c7      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
 8002f6c:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 8002f70:	f000 8339 	beq.w	80035e6 <RI_GetRegCommandParser+0x7e2>
 8002f74:	f240 80e7 	bls.w	8003146 <RI_GetRegCommandParser+0x342>
 8002f78:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 8002f7c:	f000 8326 	beq.w	80035cc <RI_GetRegCommandParser+0x7c8>
 8002f80:	f240 80d0 	bls.w	8003124 <RI_GetRegCommandParser+0x320>
 8002f84:	f5b3 7f64 	cmp.w	r3, #912	; 0x390
 8002f88:	f000 836c 	beq.w	8003664 <RI_GetRegCommandParser+0x860>
 8002f8c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8002f90:	d113      	bne.n	8002fba <RI_GetRegCommandParser+0x1b6>
              *regdata16 = PID_GetKI (&stoPLLSensor[motorID]->PIRegulator);
 8002f92:	4881      	ldr	r0, [pc, #516]	; (8003198 <RI_GetRegCommandParser+0x394>)
 8002f94:	f003 ffd8 	bl	8006f48 <PID_GetKI>
 8002f98:	8030      	strh	r0, [r6, #0]
              break;
 8002f9a:	2002      	movs	r0, #2
        pHandle->txLength += size;
 8002f9c:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 8002f9e:	4603      	mov	r3, r0
              break;
 8002fa0:	e7ac      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
        if (freeSpace > 0U)
 8002fa2:	2c00      	cmp	r4, #0
 8002fa4:	f43f af7d 	beq.w	8002ea2 <RI_GetRegCommandParser+0x9e>
          switch (regID)
 8002fa8:	2b88      	cmp	r3, #136	; 0x88
 8002faa:	f000 8200 	beq.w	80033ae <RI_GetRegCommandParser+0x5aa>
 8002fae:	2bc8      	cmp	r3, #200	; 0xc8
 8002fb0:	f000 81f4 	beq.w	800339c <RI_GetRegCommandParser+0x598>
 8002fb4:	2b48      	cmp	r3, #72	; 0x48
 8002fb6:	f000 8203 	beq.w	80033c0 <RI_GetRegCommandParser+0x5bc>
 8002fba:	2005      	movs	r0, #5
  return (retVal);
 8002fbc:	e756      	b.n	8002e6c <RI_GetRegCommandParser+0x68>
        if (freeSpace >= 4U)
 8002fbe:	b2a4      	uxth	r4, r4
 8002fc0:	2c03      	cmp	r4, #3
 8002fc2:	f67f af6e 	bls.w	8002ea2 <RI_GetRegCommandParser+0x9e>
          switch (regID)
 8002fc6:	2bd8      	cmp	r3, #216	; 0xd8
 8002fc8:	f000 826c 	beq.w	80034a4 <RI_GetRegCommandParser+0x6a0>
 8002fcc:	f200 81a1 	bhi.w	8003312 <RI_GetRegCommandParser+0x50e>
 8002fd0:	2b58      	cmp	r3, #88	; 0x58
 8002fd2:	f000 8263 	beq.w	800349c <RI_GetRegCommandParser+0x698>
 8002fd6:	2b98      	cmp	r3, #152	; 0x98
 8002fd8:	f040 8190 	bne.w	80032fc <RI_GetRegCommandParser+0x4f8>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002fdc:	4650      	mov	r0, sl
 8002fde:	f7fe fb09 	bl	80015f4 <MCI_GetMecSpeedRefUnit>
 8002fe2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002fe6:	0040      	lsls	r0, r0, #1
 8002fe8:	6030      	str	r0, [r6, #0]
        pHandle->txLength += size;
 8002fea:	2004      	movs	r0, #4
 8002fec:	89f9      	ldrh	r1, [r7, #14]
          *size = 4;
 8002fee:	4603      	mov	r3, r0
 8002ff0:	e784      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
 8002ff2:	2be0      	cmp	r3, #224	; 0xe0
 8002ff4:	d1e1      	bne.n	8002fba <RI_GetRegCommandParser+0x1b6>
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8002ff6:	4b69      	ldr	r3, [pc, #420]	; (800319c <RI_GetRegCommandParser+0x398>)
 8002ff8:	6818      	ldr	r0, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002ffa:	f990 1024 	ldrsb.w	r1, [r0, #36]	; 0x24
 8002ffe:	2900      	cmp	r1, #0
 8003000:	f000 81e7 	beq.w	80033d2 <RI_GetRegCommandParser+0x5ce>
 8003004:	2c01      	cmp	r4, #1
 8003006:	f340 8199 	ble.w	800333c <RI_GetRegCommandParser+0x538>
 800300a:	3024      	adds	r0, #36	; 0x24
 800300c:	46b4      	mov	ip, r6
 800300e:	f1c6 0201 	rsb	r2, r6, #1
 8003012:	e002      	b.n	800301a <RI_GetRegCommandParser+0x216>
 8003014:	42a3      	cmp	r3, r4
 8003016:	f280 8191 	bge.w	800333c <RI_GetRegCommandParser+0x538>
    *tempdestString = *tempsrcString;
 800301a:	f80c 1b01 	strb.w	r1, [ip], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800301e:	f910 1f01 	ldrsb.w	r1, [r0, #1]!
 8003022:	eb0c 0302 	add.w	r3, ip, r2
 8003026:	b29b      	uxth	r3, r3
 8003028:	2900      	cmp	r1, #0
 800302a:	d1f3      	bne.n	8003014 <RI_GetRegCommandParser+0x210>
 800302c:	e760      	b.n	8002ef0 <RI_GetRegCommandParser+0xec>
 800302e:	2be8      	cmp	r3, #232	; 0xe8
 8003030:	d1c3      	bne.n	8002fba <RI_GetRegCommandParser+0x1b6>
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8003032:	230e      	movs	r3, #14
            if (((*rawSize) + 2U) > freeSpace)
 8003034:	2c0f      	cmp	r4, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8003036:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8003038:	f67f af33 	bls.w	8002ea2 <RI_GetRegCommandParser+0x9e>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 800303c:	4b58      	ldr	r3, [pc, #352]	; (80031a0 <RI_GetRegCommandParser+0x39c>)
        if (freeSpace >= 2U)
 800303e:	b2a4      	uxth	r4, r4
 8003040:	e21b      	b.n	800347a <RI_GetRegCommandParser+0x676>
 8003042:	f5b3 7f0a 	cmp.w	r3, #552	; 0x228
 8003046:	f000 81c8 	beq.w	80033da <RI_GetRegCommandParser+0x5d6>
 800304a:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 800304e:	d114      	bne.n	800307a <RI_GetRegCommandParser+0x276>
            *rawSize = 4;
 8003050:	2304      	movs	r3, #4
 8003052:	8033      	strh	r3, [r6, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8003054:	4650      	mov	r0, sl
 8003056:	f7fe fafb 	bl	8001650 <MCI_GetIqdref>
 800305a:	8070      	strh	r0, [r6, #2]
 800305c:	9004      	str	r0, [sp, #16]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 800305e:	4650      	mov	r0, sl
 8003060:	f7fe faf6 	bl	8001650 <MCI_GetIqdref>
 8003064:	9003      	str	r0, [sp, #12]
 8003066:	f3c0 400f 	ubfx	r0, r0, #16, #16
        if (freeSpace >= 2U)
 800306a:	b2a4      	uxth	r4, r4
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 800306c:	80b0      	strh	r0, [r6, #4]
        *size = (*rawSize) + 2U;
 800306e:	8833      	ldrh	r3, [r6, #0]
        pHandle->txLength += size;
 8003070:	89f9      	ldrh	r1, [r7, #14]
        *size = (*rawSize) + 2U;
 8003072:	3302      	adds	r3, #2
 8003074:	b29b      	uxth	r3, r3
        txData = txData+size;
 8003076:	4618      	mov	r0, r3
        break;
 8003078:	e740      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
 800307a:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 800307e:	d19c      	bne.n	8002fba <RI_GetRegCommandParser+0x1b6>
            *rawSize = 4;
 8003080:	2304      	movs	r3, #4
 8003082:	8033      	strh	r3, [r6, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 8003084:	4650      	mov	r0, sl
 8003086:	f7fe faa3 	bl	80015d0 <MCI_GetLastRampFinalTorque>
 800308a:	8070      	strh	r0, [r6, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 800308c:	4650      	mov	r0, sl
 800308e:	f7fe faa3 	bl	80015d8 <MCI_GetLastRampFinalDuration>
        if (freeSpace >= 2U)
 8003092:	b2a4      	uxth	r4, r4
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8003094:	80b0      	strh	r0, [r6, #4]
        *size = (*rawSize) + 2U;
 8003096:	e7ea      	b.n	800306e <RI_GetRegCommandParser+0x26a>
 8003098:	f241 4250 	movw	r2, #5200	; 0x1450
 800309c:	4293      	cmp	r3, r2
 800309e:	f000 82dc 	beq.w	800365a <RI_GetRegCommandParser+0x856>
 80030a2:	f240 80b0 	bls.w	8003206 <RI_GetRegCommandParser+0x402>
 80030a6:	f241 52d0 	movw	r2, #5584	; 0x15d0
 80030aa:	4293      	cmp	r3, r2
 80030ac:	f000 82a8 	beq.w	8003600 <RI_GetRegCommandParser+0x7fc>
 80030b0:	f240 8084 	bls.w	80031bc <RI_GetRegCommandParser+0x3b8>
 80030b4:	f641 02d0 	movw	r2, #6352	; 0x18d0
 80030b8:	4293      	cmp	r3, r2
 80030ba:	f000 82ba 	beq.w	8003632 <RI_GetRegCommandParser+0x82e>
 80030be:	f240 8096 	bls.w	80031ee <RI_GetRegCommandParser+0x3ea>
 80030c2:	f641 1210 	movw	r2, #6416	; 0x1910
 80030c6:	4293      	cmp	r3, r2
 80030c8:	f000 82b1 	beq.w	800362e <RI_GetRegCommandParser+0x82a>
 80030cc:	f641 22d0 	movw	r2, #6864	; 0x1ad0
 80030d0:	4293      	cmp	r3, r2
 80030d2:	f47f af72 	bne.w	8002fba <RI_GetRegCommandParser+0x1b6>
	          *regdata16 = ((OL_GetVoltage(pOL[motorID])*100)/32767);
 80030d6:	4833      	ldr	r0, [pc, #204]	; (80031a4 <RI_GetRegCommandParser+0x3a0>)
 80030d8:	f003 ff10 	bl	8006efc <OL_GetVoltage>
 80030dc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80030e0:	4a31      	ldr	r2, [pc, #196]	; (80031a8 <RI_GetRegCommandParser+0x3a4>)
 80030e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	fb82 1203 	smull	r1, r2, r2, r3
 80030ec:	441a      	add	r2, r3
 80030ee:	17db      	asrs	r3, r3, #31
 80030f0:	ebc3 33a2 	rsb	r3, r3, r2, asr #14
 80030f4:	8033      	strh	r3, [r6, #0]
        pHandle->txLength += size;
 80030f6:	2002      	movs	r0, #2
 80030f8:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 80030fa:	4603      	mov	r3, r0
 80030fc:	e6fe      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
 80030fe:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8003102:	f000 828b 	beq.w	800361c <RI_GetRegCommandParser+0x818>
 8003106:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 800310a:	f47f af56 	bne.w	8002fba <RI_GetRegCommandParser+0x1b6>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 800310e:	4650      	mov	r0, sl
 8003110:	f7fe fa82 	bl	8001618 <MCI_GetIalphabeta>
 8003114:	9011      	str	r0, [sp, #68]	; 0x44
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).beta;
 8003116:	f3c0 400f 	ubfx	r0, r0, #16, #16
 800311a:	8030      	strh	r0, [r6, #0]
              break;
 800311c:	2002      	movs	r0, #2
        pHandle->txLength += size;
 800311e:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 8003120:	4603      	mov	r3, r0
              break;
 8003122:	e6eb      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
 8003124:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8003128:	f000 8299 	beq.w	800365e <RI_GetRegCommandParser+0x85a>
 800312c:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8003130:	f47f af43 	bne.w	8002fba <RI_GetRegCommandParser+0x1b6>
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 8003134:	4b1d      	ldr	r3, [pc, #116]	; (80031ac <RI_GetRegCommandParser+0x3a8>)
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	f003 ff32 	bl	8006fa0 <PID_GetKD>
 800313c:	8030      	strh	r0, [r6, #0]
              break;
 800313e:	2002      	movs	r0, #2
        pHandle->txLength += size;
 8003140:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 8003142:	4603      	mov	r3, r0
              break;
 8003144:	e6da      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
 8003146:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800314a:	f000 8256 	beq.w	80035fa <RI_GetRegCommandParser+0x7f6>
 800314e:	f240 808f 	bls.w	8003270 <RI_GetRegCommandParser+0x46c>
 8003152:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 8003156:	f000 825e 	beq.w	8003616 <RI_GetRegCommandParser+0x812>
 800315a:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 800315e:	f47f af2c 	bne.w	8002fba <RI_GetRegCommandParser+0x1b6>
              *regdata16 = PID_GetKD(pPIDIq[motorID]);
 8003162:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <RI_GetRegCommandParser+0x3ac>)
 8003164:	e7e7      	b.n	8003136 <RI_GetRegCommandParser+0x332>
 8003166:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 800316a:	f000 8293 	beq.w	8003694 <RI_GetRegCommandParser+0x890>
 800316e:	f240 8087 	bls.w	8003280 <RI_GetRegCommandParser+0x47c>
 8003172:	f5b3 6fd2 	cmp.w	r3, #1680	; 0x690
 8003176:	f000 8284 	beq.w	8003682 <RI_GetRegCommandParser+0x87e>
 800317a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800317e:	f47f af1c 	bne.w	8002fba <RI_GetRegCommandParser+0x1b6>
              *regdata16 = MCI_GetIab(pMCIN).a;
 8003182:	4650      	mov	r0, sl
 8003184:	f7fe fa3a 	bl	80015fc <MCI_GetIab>
 8003188:	8030      	strh	r0, [r6, #0]
 800318a:	9014      	str	r0, [sp, #80]	; 0x50
              break;
 800318c:	2002      	movs	r0, #2
        pHandle->txLength += size;
 800318e:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 8003190:	4603      	mov	r3, r0
              break;
 8003192:	e6b3      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
 8003194:	08008cb4 	.word	0x08008cb4
 8003198:	200002f4 	.word	0x200002f4
 800319c:	20000498 	.word	0x20000498
 80031a0:	20000494 	.word	0x20000494
 80031a4:	200000e8 	.word	0x200000e8
 80031a8:	80010003 	.word	0x80010003
 80031ac:	20000480 	.word	0x20000480
 80031b0:	20000484 	.word	0x20000484
 80031b4:	20000a7c 	.word	0x20000a7c
 80031b8:	20000234 	.word	0x20000234
 80031bc:	f241 5210 	movw	r2, #5392	; 0x1510
 80031c0:	4293      	cmp	r3, r2
 80031c2:	f000 825c 	beq.w	800367e <RI_GetRegCommandParser+0x87a>
 80031c6:	d96c      	bls.n	80032a2 <RI_GetRegCommandParser+0x49e>
 80031c8:	f241 5250 	movw	r2, #5456	; 0x1550
 80031cc:	4293      	cmp	r3, r2
 80031ce:	f000 81ef 	beq.w	80035b0 <RI_GetRegCommandParser+0x7ac>
 80031d2:	f241 5290 	movw	r2, #5520	; 0x1590
 80031d6:	4293      	cmp	r3, r2
 80031d8:	f47f aeef 	bne.w	8002fba <RI_GetRegCommandParser+0x1b6>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 80031dc:	4bb5      	ldr	r3, [pc, #724]	; (80034b4 <RI_GetRegCommandParser+0x6b0>)
 80031de:	6818      	ldr	r0, [r3, #0]
 80031e0:	f003 fee2 	bl	8006fa8 <PID_GetKDDivisorPOW2>
 80031e4:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 80031e6:	2002      	movs	r0, #2
 80031e8:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 80031ea:	4603      	mov	r3, r0
 80031ec:	e686      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
 80031ee:	f241 6210 	movw	r2, #5648	; 0x1610
 80031f2:	4293      	cmp	r3, r2
 80031f4:	f000 81b3 	beq.w	800355e <RI_GetRegCommandParser+0x75a>
 80031f8:	f241 6250 	movw	r2, #5712	; 0x1650
 80031fc:	4293      	cmp	r3, r2
 80031fe:	f47f aedc 	bne.w	8002fba <RI_GetRegCommandParser+0x1b6>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 8003202:	4bad      	ldr	r3, [pc, #692]	; (80034b8 <RI_GetRegCommandParser+0x6b4>)
 8003204:	e7eb      	b.n	80031de <RI_GetRegCommandParser+0x3da>
 8003206:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 800320a:	f000 81a0 	beq.w	800354e <RI_GetRegCommandParser+0x74a>
 800320e:	d91a      	bls.n	8003246 <RI_GetRegCommandParser+0x442>
 8003210:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 8003214:	f000 81c3 	beq.w	800359e <RI_GetRegCommandParser+0x79a>
 8003218:	d908      	bls.n	800322c <RI_GetRegCommandParser+0x428>
 800321a:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 800321e:	d002      	beq.n	8003226 <RI_GetRegCommandParser+0x422>
 8003220:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 8003224:	d156      	bne.n	80032d4 <RI_GetRegCommandParser+0x4d0>
 8003226:	2002      	movs	r0, #2
 8003228:	4603      	mov	r3, r0
 800322a:	e667      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
 800322c:	f5b3 6f3d 	cmp.w	r3, #3024	; 0xbd0
 8003230:	f000 81ac 	beq.w	800358c <RI_GetRegCommandParser+0x788>
 8003234:	f5b3 6f41 	cmp.w	r3, #3088	; 0xc10
 8003238:	f47f aebf 	bne.w	8002fba <RI_GetRegCommandParser+0x1b6>
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).beta;
 800323c:	489f      	ldr	r0, [pc, #636]	; (80034bc <RI_GetRegCommandParser+0x6b8>)
 800323e:	f005 fa0d 	bl	800865c <STO_PLL_GetEstimatedCurrent>
 8003242:	9007      	str	r0, [sp, #28]
 8003244:	e767      	b.n	8003116 <RI_GetRegCommandParser+0x312>
 8003246:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 800324a:	f000 8196 	beq.w	800357a <RI_GetRegCommandParser+0x776>
 800324e:	d934      	bls.n	80032ba <RI_GetRegCommandParser+0x4b6>
 8003250:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8003254:	f000 818c 	beq.w	8003570 <RI_GetRegCommandParser+0x76c>
 8003258:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 800325c:	f47f aead 	bne.w	8002fba <RI_GetRegCommandParser+0x1b6>
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 8003260:	4896      	ldr	r0, [pc, #600]	; (80034bc <RI_GetRegCommandParser+0x6b8>)
 8003262:	f004 fe5f 	bl	8007f24 <SPD_GetElAngle>
 8003266:	8030      	strh	r0, [r6, #0]
              break;
 8003268:	2002      	movs	r0, #2
        pHandle->txLength += size;
 800326a:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 800326c:	4603      	mov	r3, r0
              break;
 800326e:	e645      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
 8003270:	2bd0      	cmp	r3, #208	; 0xd0
 8003272:	f000 81ce 	beq.w	8003612 <RI_GetRegCommandParser+0x80e>
 8003276:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800327a:	d134      	bne.n	80032e6 <RI_GetRegCommandParser+0x4e2>
              *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 800327c:	4890      	ldr	r0, [pc, #576]	; (80034c0 <RI_GetRegCommandParser+0x6bc>)
 800327e:	e75b      	b.n	8003138 <RI_GetRegCommandParser+0x334>
 8003280:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 8003284:	f000 815b 	beq.w	800353e <RI_GetRegCommandParser+0x73a>
 8003288:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 800328c:	f47f ae95 	bne.w	8002fba <RI_GetRegCommandParser+0x1b6>
              *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 8003290:	4b8c      	ldr	r3, [pc, #560]	; (80034c4 <RI_GetRegCommandParser+0x6c0>)
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	f003 fe16 	bl	8006ec4 <NTC_GetAvTemp_C>
 8003298:	8030      	strh	r0, [r6, #0]
              break;
 800329a:	2002      	movs	r0, #2
        pHandle->txLength += size;
 800329c:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 800329e:	4603      	mov	r3, r0
              break;
 80032a0:	e62c      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
 80032a2:	f241 4290 	movw	r2, #5264	; 0x1490
 80032a6:	4293      	cmp	r3, r2
 80032a8:	f000 81a5 	beq.w	80035f6 <RI_GetRegCommandParser+0x7f2>
 80032ac:	f241 42d0 	movw	r2, #5328	; 0x14d0
 80032b0:	4293      	cmp	r3, r2
 80032b2:	f47f ae82 	bne.w	8002fba <RI_GetRegCommandParser+0x1b6>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDSpeed[motorID]);
 80032b6:	4882      	ldr	r0, [pc, #520]	; (80034c0 <RI_GetRegCommandParser+0x6bc>)
 80032b8:	e792      	b.n	80031e0 <RI_GetRegCommandParser+0x3dc>
 80032ba:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 80032be:	f000 81c3 	beq.w	8003648 <RI_GetRegCommandParser+0x844>
 80032c2:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 80032c6:	f47f ae78 	bne.w	8002fba <RI_GetRegCommandParser+0x1b6>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 80032ca:	4650      	mov	r0, sl
 80032cc:	f7fe f9ce 	bl	800166c <MCI_GetVqd>
 80032d0:	900b      	str	r0, [sp, #44]	; 0x2c
 80032d2:	e720      	b.n	8003116 <RI_GetRegCommandParser+0x312>
 80032d4:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 80032d8:	f47f ae6f 	bne.w	8002fba <RI_GetRegCommandParser+0x1b6>
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).beta;
 80032dc:	4877      	ldr	r0, [pc, #476]	; (80034bc <RI_GetRegCommandParser+0x6b8>)
 80032de:	f005 f9b1 	bl	8008644 <STO_PLL_GetEstimatedBemf>
 80032e2:	9005      	str	r0, [sp, #20]
 80032e4:	e717      	b.n	8003116 <RI_GetRegCommandParser+0x312>
 80032e6:	2b90      	cmp	r3, #144	; 0x90
 80032e8:	f47f ae67 	bne.w	8002fba <RI_GetRegCommandParser+0x1b6>
              *regdata16 = PID_GetKP(pPIDSpeed[motorID]);
 80032ec:	4874      	ldr	r0, [pc, #464]	; (80034c0 <RI_GetRegCommandParser+0x6bc>)
              *regdata16 = PID_GetKP (&stoPLLSensor[motorID]->PIRegulator);
 80032ee:	f003 fe27 	bl	8006f40 <PID_GetKP>
 80032f2:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 80032f4:	2002      	movs	r0, #2
 80032f6:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 80032f8:	4603      	mov	r3, r0
 80032fa:	e5ff      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
 80032fc:	2b18      	cmp	r3, #24
 80032fe:	f47f ae5c 	bne.w	8002fba <RI_GetRegCommandParser+0x1b6>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8003302:	4650      	mov	r0, sl
 8003304:	f7fe f916 	bl	8001534 <MCI_GetFaultState>
 8003308:	6030      	str	r0, [r6, #0]
        pHandle->txLength += size;
 800330a:	2004      	movs	r0, #4
 800330c:	89f9      	ldrh	r1, [r7, #14]
          *size = 4;
 800330e:	4603      	mov	r3, r0
 8003310:	e5f4      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
 8003312:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8003316:	f000 80e1 	beq.w	80034dc <RI_GetRegCommandParser+0x6d8>
 800331a:	f641 3258 	movw	r2, #7000	; 0x1b58
 800331e:	4293      	cmp	r3, r2
 8003320:	f47f ae4b 	bne.w	8002fba <RI_GetRegCommandParser+0x1b6>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 8003324:	4b68      	ldr	r3, [pc, #416]	; (80034c8 <RI_GetRegCommandParser+0x6c4>)
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	f003 fea8 	bl	800707c <PQD_GetAvrgElMotorPowerW>
 800332c:	ed8d 0a00 	vstr	s0, [sp]
              *regdataU32 = ReadVal.U32_Val;
 8003330:	9b00      	ldr	r3, [sp, #0]
 8003332:	6033      	str	r3, [r6, #0]
        pHandle->txLength += size;
 8003334:	2004      	movs	r0, #4
 8003336:	89f9      	ldrh	r1, [r7, #14]
          *size = 4;
 8003338:	4603      	mov	r3, r0
 800333a:	e5df      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
    retVal = MCP_ERROR_STRING_FORMAT;
 800333c:	2006      	movs	r0, #6
 800333e:	e595      	b.n	8002e6c <RI_GetRegCommandParser+0x68>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID] ,charData, size, freeSpace);
 8003340:	4b62      	ldr	r3, [pc, #392]	; (80034cc <RI_GetRegCommandParser+0x6c8>)
 8003342:	6818      	ldr	r0, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003344:	f990 1000 	ldrsb.w	r1, [r0]
 8003348:	2900      	cmp	r1, #0
 800334a:	d042      	beq.n	80033d2 <RI_GetRegCommandParser+0x5ce>
 800334c:	2c01      	cmp	r4, #1
 800334e:	ddf5      	ble.n	800333c <RI_GetRegCommandParser+0x538>
 8003350:	46b4      	mov	ip, r6
 8003352:	f1c6 0201 	rsb	r2, r6, #1
 8003356:	e001      	b.n	800335c <RI_GetRegCommandParser+0x558>
 8003358:	42a3      	cmp	r3, r4
 800335a:	daef      	bge.n	800333c <RI_GetRegCommandParser+0x538>
    *tempdestString = *tempsrcString;
 800335c:	f80c 1b01 	strb.w	r1, [ip], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003360:	f910 1f01 	ldrsb.w	r1, [r0, #1]!
 8003364:	eb0c 0302 	add.w	r3, ip, r2
 8003368:	b29b      	uxth	r3, r3
 800336a:	2900      	cmp	r1, #0
 800336c:	d1f4      	bne.n	8003358 <RI_GetRegCommandParser+0x554>
 800336e:	e5bf      	b.n	8002ef0 <RI_GetRegCommandParser+0xec>
 8003370:	4857      	ldr	r0, [pc, #348]	; (80034d0 <RI_GetRegCommandParser+0x6cc>)
 8003372:	f990 1000 	ldrsb.w	r1, [r0]
 8003376:	b361      	cbz	r1, 80033d2 <RI_GetRegCommandParser+0x5ce>
 8003378:	2c01      	cmp	r4, #1
 800337a:	dddf      	ble.n	800333c <RI_GetRegCommandParser+0x538>
 800337c:	46b4      	mov	ip, r6
 800337e:	f1c6 0201 	rsb	r2, r6, #1
 8003382:	e001      	b.n	8003388 <RI_GetRegCommandParser+0x584>
 8003384:	42a3      	cmp	r3, r4
 8003386:	dad9      	bge.n	800333c <RI_GetRegCommandParser+0x538>
    *tempdestString = *tempsrcString;
 8003388:	f80c 1b01 	strb.w	r1, [ip], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800338c:	f910 1f01 	ldrsb.w	r1, [r0, #1]!
 8003390:	eb0c 0302 	add.w	r3, ip, r2
 8003394:	b29b      	uxth	r3, r3
 8003396:	2900      	cmp	r1, #0
 8003398:	d1f4      	bne.n	8003384 <RI_GetRegCommandParser+0x580>
 800339a:	e5a9      	b.n	8002ef0 <RI_GetRegCommandParser+0xec>
              *data = (RevUpControl[motorID] != MC_NULL) ? (uint8_t)RUC_GetNumberOfPhases(RevUpControl[motorID]) : 0U;
 800339c:	4658      	mov	r0, fp
 800339e:	f004 fdad 	bl	8007efc <RUC_GetNumberOfPhases>
 80033a2:	7030      	strb	r0, [r6, #0]
              break;
 80033a4:	2001      	movs	r0, #1
        pHandle->txLength += size;
 80033a6:	89f9      	ldrh	r1, [r7, #14]
        if (freeSpace >= 2U)
 80033a8:	b2a4      	uxth	r4, r4
          *size = 1;
 80033aa:	4603      	mov	r3, r0
              break;
 80033ac:	e5a6      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 80033ae:	4650      	mov	r0, sl
 80033b0:	f7fe f8c6 	bl	8001540 <MCI_GetControlMode>
 80033b4:	7030      	strb	r0, [r6, #0]
              break;
 80033b6:	2001      	movs	r0, #1
        pHandle->txLength += size;
 80033b8:	89f9      	ldrh	r1, [r7, #14]
        if (freeSpace >= 2U)
 80033ba:	b2a4      	uxth	r4, r4
          *size = 1;
 80033bc:	4603      	mov	r3, r0
              break;
 80033be:	e59d      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 80033c0:	4650      	mov	r0, sl
 80033c2:	f7fe f869 	bl	8001498 <MCI_GetSTMState>
 80033c6:	7030      	strb	r0, [r6, #0]
        if (freeSpace >= 2U)
 80033c8:	2001      	movs	r0, #1
        pHandle->txLength += size;
 80033ca:	89f9      	ldrh	r1, [r7, #14]
        if (freeSpace >= 2U)
 80033cc:	b2a4      	uxth	r4, r4
          *size = 1;
 80033ce:	4603      	mov	r3, r0
 80033d0:	e594      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80033d2:	2001      	movs	r0, #1
 80033d4:	46b4      	mov	ip, r6
  *size= 1U ; /* /0 is the min String size */
 80033d6:	4603      	mov	r3, r0
 80033d8:	e58b      	b.n	8002ef2 <RI_GetRegCommandParser+0xee>
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 80033da:	2328      	movs	r3, #40	; 0x28
            if (((*rawSize) + 2U) > freeSpace)
 80033dc:	2c29      	cmp	r4, #41	; 0x29
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 80033de:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 80033e0:	f67f ad5f 	bls.w	8002ea2 <RI_GetRegCommandParser+0x9e>
 80033e4:	2200      	movs	r2, #0
 80033e6:	e9cd 9400 	strd	r9, r4, [sp]
 80033ea:	46b1      	mov	r9, r6
 80033ec:	4614      	mov	r4, r2
                (void)RUC_GetPhase( RevUpControl[motorID] ,i, &revUpPhase);
 80033ee:	b2e1      	uxtb	r1, r4
 80033f0:	aa15      	add	r2, sp, #84	; 0x54
 80033f2:	4658      	mov	r0, fp
 80033f4:	f004 fd86 	bl	8007f04 <RUC_GetPhase>
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80033f8:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
 80033fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003400:	0052      	lsls	r2, r2, #1
 8003402:	f8c9 2002 	str.w	r2, [r9, #2]
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8003406:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
 800340a:	f8a9 2006 	strh.w	r2, [r9, #6]
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 800340e:	3401      	adds	r4, #1
                *durationms  = revUpPhase.hDurationms;
 8003410:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8003414:	f829 2f08 	strh.w	r2, [r9, #8]!
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 8003418:	2c05      	cmp	r4, #5
 800341a:	d1e8      	bne.n	80033ee <RI_GetRegCommandParser+0x5ea>
        if (freeSpace >= 2U)
 800341c:	e9dd 9400 	ldrd	r9, r4, [sp]
 8003420:	b2a4      	uxth	r4, r4
 8003422:	e624      	b.n	800306e <RI_GetRegCommandParser+0x26a>
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8003424:	230a      	movs	r3, #10
            if (((*rawSize) + 2U) > freeSpace)
 8003426:	2c0b      	cmp	r4, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8003428:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 800342a:	f67f ad3a 	bls.w	8002ea2 <RI_GetRegCommandParser+0x9e>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 800342e:	4b29      	ldr	r3, [pc, #164]	; (80034d4 <RI_GetRegCommandParser+0x6d0>)
 8003430:	6819      	ldr	r1, [r3, #0]
 8003432:	6011      	str	r1, [r2, #0]
 8003434:	6859      	ldr	r1, [r3, #4]
 8003436:	891b      	ldrh	r3, [r3, #8]
 8003438:	8113      	strh	r3, [r2, #8]
        if (freeSpace >= 2U)
 800343a:	200c      	movs	r0, #12
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 800343c:	6051      	str	r1, [r2, #4]
        pHandle->txLength += size;
 800343e:	89f9      	ldrh	r1, [r7, #14]
        if (freeSpace >= 2U)
 8003440:	b2a4      	uxth	r4, r4
        *size = (*rawSize) + 2U;
 8003442:	4603      	mov	r3, r0
 8003444:	e55a      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8003446:	4650      	mov	r0, sl
 8003448:	f7fe f8be 	bl	80015c8 <MCI_GetLastRampFinalSpeed>
 800344c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003450:	0040      	lsls	r0, r0, #1
 8003452:	f8c6 0002 	str.w	r0, [r6, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8003456:	4650      	mov	r0, sl
 8003458:	f7fe f8be 	bl	80015d8 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 800345c:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 800345e:	80f0      	strh	r0, [r6, #6]
            *rawSize = 6;
 8003460:	8033      	strh	r3, [r6, #0]
        if (freeSpace >= 2U)
 8003462:	2008      	movs	r0, #8
        pHandle->txLength += size;
 8003464:	89f9      	ldrh	r1, [r7, #14]
        if (freeSpace >= 2U)
 8003466:	b2a4      	uxth	r4, r4
        *size = (*rawSize) + 2U;
 8003468:	4603      	mov	r3, r0
 800346a:	e547      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
            *rawSize = sizeof(ApplicationConfig_reg_t);
 800346c:	230e      	movs	r3, #14
            if ((*rawSize) +2  > freeSpace)
 800346e:	2c0f      	cmp	r4, #15
            *rawSize = sizeof(ApplicationConfig_reg_t);
 8003470:	8033      	strh	r3, [r6, #0]
            if ((*rawSize) +2  > freeSpace)
 8003472:	f77f ad16 	ble.w	8002ea2 <RI_GetRegCommandParser+0x9e>
              memcpy(rawData, ApplicationConfig_reg[motorID], sizeof(ApplicationConfig_reg_t));
 8003476:	4b18      	ldr	r3, [pc, #96]	; (80034d8 <RI_GetRegCommandParser+0x6d4>)
        if (freeSpace >= 2U)
 8003478:	b2a4      	uxth	r4, r4
              (void)memcpy(rawData, (uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6859      	ldr	r1, [r3, #4]
 800347e:	f8d3 c000 	ldr.w	ip, [r3]
 8003482:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8003486:	f8c2 e008 	str.w	lr, [r2, #8]
 800348a:	f8c2 c000 	str.w	ip, [r2]
 800348e:	6051      	str	r1, [r2, #4]
 8003490:	899b      	ldrh	r3, [r3, #12]
 8003492:	8193      	strh	r3, [r2, #12]
        if (freeSpace >= 2U)
 8003494:	2010      	movs	r0, #16
        pHandle->txLength += size;
 8003496:	89f9      	ldrh	r1, [r7, #14]
        *size = (*rawSize) + 2U;
 8003498:	4603      	mov	r3, r0
 800349a:	e52f      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 800349c:	4650      	mov	r0, sl
 800349e:	f7fe f8a1 	bl	80015e4 <MCI_GetAvrgMecSpeedUnit>
 80034a2:	e59e      	b.n	8002fe2 <RI_GetRegCommandParser+0x1de>
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(stoPLLSensor[motorID]);
 80034a4:	4805      	ldr	r0, [pc, #20]	; (80034bc <RI_GetRegCommandParser+0x6b8>)
 80034a6:	f005 f903 	bl	80086b0 <STO_PLL_GetEstimatedBemfLevel>
 80034aa:	6030      	str	r0, [r6, #0]
        pHandle->txLength += size;
 80034ac:	2004      	movs	r0, #4
 80034ae:	89f9      	ldrh	r1, [r7, #14]
          *size = 4;
 80034b0:	4603      	mov	r3, r0
 80034b2:	e523      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
 80034b4:	20000480 	.word	0x20000480
 80034b8:	20000484 	.word	0x20000484
 80034bc:	200002c0 	.word	0x200002c0
 80034c0:	20000150 	.word	0x20000150
 80034c4:	2000048c 	.word	0x2000048c
 80034c8:	2000047c 	.word	0x2000047c
 80034cc:	2000049c 	.word	0x2000049c
 80034d0:	08008cc4 	.word	0x08008cc4
 80034d4:	08008d48 	.word	0x08008d48
 80034d8:	20000490 	.word	0x20000490
              *regdata32 = STO_PLL_GetObservedBemfLevel(stoPLLSensor[motorID]);
 80034dc:	486f      	ldr	r0, [pc, #444]	; (800369c <RI_GetRegCommandParser+0x898>)
 80034de:	f005 f8eb 	bl	80086b8 <STO_PLL_GetObservedBemfLevel>
 80034e2:	6030      	str	r0, [r6, #0]
        pHandle->txLength += size;
 80034e4:	2004      	movs	r0, #4
 80034e6:	89f9      	ldrh	r1, [r7, #14]
          *size = 4;
 80034e8:	4603      	mov	r3, r0
 80034ea:	e507      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 80034ec:	4b6c      	ldr	r3, [pc, #432]	; (80036a0 <RI_GetRegCommandParser+0x89c>)
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4696      	mov	lr, r2
 80034f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80034f6:	9200      	str	r2, [sp, #0]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	6859      	ldr	r1, [r3, #4]
 80034fe:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8003502:	f8ce c00c 	str.w	ip, [lr, #12]
 8003506:	f8ce 0000 	str.w	r0, [lr]
 800350a:	f8ce 1004 	str.w	r1, [lr, #4]
 800350e:	f8ce 2008 	str.w	r2, [lr, #8]
 8003512:	9a00      	ldr	r2, [sp, #0]
 8003514:	3310      	adds	r3, #16
 8003516:	4293      	cmp	r3, r2
 8003518:	f10e 0e10 	add.w	lr, lr, #16
 800351c:	d1ec      	bne.n	80034f8 <RI_GetRegCommandParser+0x6f4>
 800351e:	6819      	ldr	r1, [r3, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f8ce 3008 	str.w	r3, [lr, #8]
 8003528:	f8ce 1000 	str.w	r1, [lr]
 800352c:	f8ce 2004 	str.w	r2, [lr, #4]
        if (freeSpace >= 2U)
 8003530:	203e      	movs	r0, #62	; 0x3e
        pHandle->txLength += size;
 8003532:	89f9      	ldrh	r1, [r7, #14]
        if (freeSpace >= 2U)
 8003534:	b2a4      	uxth	r4, r4
        *size = (*rawSize) + 2U;
 8003536:	4603      	mov	r3, r0
 8003538:	e4e0      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
  uint8_t retVal = MCP_CMD_NOK;
 800353a:	2001      	movs	r0, #1
 800353c:	e496      	b.n	8002e6c <RI_GetRegCommandParser+0x68>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 800353e:	4859      	ldr	r0, [pc, #356]	; (80036a4 <RI_GetRegCommandParser+0x8a0>)
 8003540:	f003 fa1a 	bl	8006978 <VBS_GetAvBusVoltage_V>
 8003544:	8030      	strh	r0, [r6, #0]
              break;
 8003546:	2002      	movs	r0, #2
        pHandle->txLength += size;
 8003548:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 800354a:	4603      	mov	r3, r0
              break;
 800354c:	e4d6      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 800354e:	4853      	ldr	r0, [pc, #332]	; (800369c <RI_GetRegCommandParser+0x898>)
 8003550:	f004 fd22 	bl	8007f98 <SPD_GetS16Speed>
 8003554:	8030      	strh	r0, [r6, #0]
              break;
 8003556:	2002      	movs	r0, #2
        pHandle->txLength += size;
 8003558:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 800355a:	4603      	mov	r3, r0
              break;
 800355c:	e4ce      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 800355e:	4b52      	ldr	r3, [pc, #328]	; (80036a8 <RI_GetRegCommandParser+0x8a4>)
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDId[motorID]);
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	f003 fd01 	bl	8006f68 <PID_GetKIDivisorPOW2>
 8003566:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003568:	2002      	movs	r0, #2
 800356a:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 800356c:	4603      	mov	r3, r0
 800356e:	e4c5      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 8003570:	4650      	mov	r0, sl
 8003572:	f7fe f889 	bl	8001688 <MCI_GetValphabeta>
 8003576:	9009      	str	r0, [sp, #36]	; 0x24
 8003578:	e5cd      	b.n	8003116 <RI_GetRegCommandParser+0x312>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 800357a:	4650      	mov	r0, sl
 800357c:	f7fe f884 	bl	8001688 <MCI_GetValphabeta>
 8003580:	8030      	strh	r0, [r6, #0]
 8003582:	900a      	str	r0, [sp, #40]	; 0x28
              break;
 8003584:	2002      	movs	r0, #2
        pHandle->txLength += size;
 8003586:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 8003588:	4603      	mov	r3, r0
              break;
 800358a:	e4b7      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 800358c:	4843      	ldr	r0, [pc, #268]	; (800369c <RI_GetRegCommandParser+0x898>)
 800358e:	f005 f865 	bl	800865c <STO_PLL_GetEstimatedCurrent>
 8003592:	8030      	strh	r0, [r6, #0]
 8003594:	9008      	str	r0, [sp, #32]
              break;
 8003596:	2002      	movs	r0, #2
        pHandle->txLength += size;
 8003598:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 800359a:	4603      	mov	r3, r0
              break;
 800359c:	e4ae      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 800359e:	483f      	ldr	r0, [pc, #252]	; (800369c <RI_GetRegCommandParser+0x898>)
 80035a0:	f005 f850 	bl	8008644 <STO_PLL_GetEstimatedBemf>
 80035a4:	8030      	strh	r0, [r6, #0]
 80035a6:	9006      	str	r0, [sp, #24]
              break;
 80035a8:	2002      	movs	r0, #2
        pHandle->txLength += size;
 80035aa:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 80035ac:	4603      	mov	r3, r0
              break;
 80035ae:	e4a5      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDId[motorID]);
 80035b0:	4b3e      	ldr	r3, [pc, #248]	; (80036ac <RI_GetRegCommandParser+0x8a8>)
 80035b2:	e7d5      	b.n	8003560 <RI_GetRegCommandParser+0x75c>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 80035b4:	4650      	mov	r0, sl
 80035b6:	f7fe f84b 	bl	8001650 <MCI_GetIqdref>
 80035ba:	900d      	str	r0, [sp, #52]	; 0x34
 80035bc:	e5ab      	b.n	8003116 <RI_GetRegCommandParser+0x312>
              *regdata16 = MCI_GetIab(pMCIN).b;
 80035be:	4650      	mov	r0, sl
 80035c0:	f7fe f81c 	bl	80015fc <MCI_GetIab>
 80035c4:	9013      	str	r0, [sp, #76]	; 0x4c
 80035c6:	e5a6      	b.n	8003116 <RI_GetRegCommandParser+0x312>
              *regdata16 = PID_GetKP (&stoPLLSensor[motorID]->PIRegulator);
 80035c8:	4839      	ldr	r0, [pc, #228]	; (80036b0 <RI_GetRegCommandParser+0x8ac>)
 80035ca:	e690      	b.n	80032ee <RI_GetRegCommandParser+0x4ea>
              STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 80035cc:	4833      	ldr	r0, [pc, #204]	; (800369c <RI_GetRegCommandParser+0x898>)
 80035ce:	f10d 010a 	add.w	r1, sp, #10
 80035d2:	aa15      	add	r2, sp, #84	; 0x54
 80035d4:	f005 f856 	bl	8008684 <STO_PLL_GetObserverGains>
              *regdata16 = hC1;
 80035d8:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80035dc:	8033      	strh	r3, [r6, #0]
        pHandle->txLength += size;
 80035de:	2002      	movs	r0, #2
 80035e0:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 80035e2:	4603      	mov	r3, r0
 80035e4:	e48a      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 80035e6:	4b31      	ldr	r3, [pc, #196]	; (80036ac <RI_GetRegCommandParser+0x8a8>)
 80035e8:	6818      	ldr	r0, [r3, #0]
 80035ea:	e680      	b.n	80032ee <RI_GetRegCommandParser+0x4ea>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 80035ec:	4650      	mov	r0, sl
 80035ee:	f7fe f821 	bl	8001634 <MCI_GetIqd>
 80035f2:	900f      	str	r0, [sp, #60]	; 0x3c
 80035f4:	e58f      	b.n	8003116 <RI_GetRegCommandParser+0x312>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(pPIDSpeed[motorID]);
 80035f6:	482f      	ldr	r0, [pc, #188]	; (80036b4 <RI_GetRegCommandParser+0x8b0>)
 80035f8:	e7b3      	b.n	8003562 <RI_GetRegCommandParser+0x75e>
              *regdata16 = PID_GetKP(pPIDIq[motorID]);
 80035fa:	4b2b      	ldr	r3, [pc, #172]	; (80036a8 <RI_GetRegCommandParser+0x8a4>)
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	e676      	b.n	80032ee <RI_GetRegCommandParser+0x4ea>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDIq[motorID]);
 8003600:	4b29      	ldr	r3, [pc, #164]	; (80036a8 <RI_GetRegCommandParser+0x8a4>)
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	f003 fca6 	bl	8006f54 <PID_GetKPDivisorPOW2>
 8003608:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 800360a:	2002      	movs	r0, #2
 800360c:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 800360e:	4603      	mov	r3, r0
 8003610:	e474      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
              *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 8003612:	4828      	ldr	r0, [pc, #160]	; (80036b4 <RI_GetRegCommandParser+0x8b0>)
 8003614:	e4be      	b.n	8002f94 <RI_GetRegCommandParser+0x190>
              *regdata16 = PID_GetKI(pPIDIq[motorID]);
 8003616:	4b24      	ldr	r3, [pc, #144]	; (80036a8 <RI_GetRegCommandParser+0x8a4>)
 8003618:	6818      	ldr	r0, [r3, #0]
 800361a:	e4bb      	b.n	8002f94 <RI_GetRegCommandParser+0x190>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 800361c:	4650      	mov	r0, sl
 800361e:	f7fd fffb 	bl	8001618 <MCI_GetIalphabeta>
 8003622:	8030      	strh	r0, [r6, #0]
 8003624:	9012      	str	r0, [sp, #72]	; 0x48
              break;
 8003626:	2002      	movs	r0, #2
        pHandle->txLength += size;
 8003628:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 800362a:	4603      	mov	r3, r0
              break;
 800362c:	e466      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
              *regdataU16 = PID_GetKPDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 800362e:	4820      	ldr	r0, [pc, #128]	; (80036b0 <RI_GetRegCommandParser+0x8ac>)
 8003630:	e7e8      	b.n	8003604 <RI_GetRegCommandParser+0x800>
              *regdataU16 = PID_GetKIDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 8003632:	481f      	ldr	r0, [pc, #124]	; (80036b0 <RI_GetRegCommandParser+0x8ac>)
 8003634:	e795      	b.n	8003562 <RI_GetRegCommandParser+0x75e>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8003636:	4650      	mov	r0, sl
 8003638:	f7fd fffc 	bl	8001634 <MCI_GetIqd>
 800363c:	8030      	strh	r0, [r6, #0]
 800363e:	9010      	str	r0, [sp, #64]	; 0x40
              break;
 8003640:	2002      	movs	r0, #2
        pHandle->txLength += size;
 8003642:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 8003644:	4603      	mov	r3, r0
              break;
 8003646:	e459      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8003648:	4650      	mov	r0, sl
 800364a:	f7fe f80f 	bl	800166c <MCI_GetVqd>
 800364e:	8030      	strh	r0, [r6, #0]
 8003650:	900c      	str	r0, [sp, #48]	; 0x30
              break;
 8003652:	2002      	movs	r0, #2
        pHandle->txLength += size;
 8003654:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 8003656:	4603      	mov	r3, r0
              break;
 8003658:	e450      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(pPIDSpeed[motorID]);
 800365a:	4816      	ldr	r0, [pc, #88]	; (80036b4 <RI_GetRegCommandParser+0x8b0>)
 800365c:	e7d2      	b.n	8003604 <RI_GetRegCommandParser+0x800>
              *regdata16 = PID_GetKI(pPIDId[motorID]);
 800365e:	4b13      	ldr	r3, [pc, #76]	; (80036ac <RI_GetRegCommandParser+0x8a8>)
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	e497      	b.n	8002f94 <RI_GetRegCommandParser+0x190>
              STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 8003664:	480d      	ldr	r0, [pc, #52]	; (800369c <RI_GetRegCommandParser+0x898>)
 8003666:	f10d 010a 	add.w	r1, sp, #10
 800366a:	aa15      	add	r2, sp, #84	; 0x54
 800366c:	f005 f80a 	bl	8008684 <STO_PLL_GetObserverGains>
              *regdata16 = hC2;
 8003670:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
 8003674:	8033      	strh	r3, [r6, #0]
        pHandle->txLength += size;
 8003676:	2002      	movs	r0, #2
 8003678:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 800367a:	4603      	mov	r3, r0
 800367c:	e43e      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 800367e:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <RI_GetRegCommandParser+0x8a8>)
 8003680:	e7bf      	b.n	8003602 <RI_GetRegCommandParser+0x7fe>
              *regdata16 = (int16_t)DAC_GetChannelConfig(&DAC_Handle , DAC_CH2);
 8003682:	480d      	ldr	r0, [pc, #52]	; (80036b8 <RI_GetRegCommandParser+0x8b4>)
 8003684:	2101      	movs	r1, #1
 8003686:	f7fd fae9 	bl	8000c5c <DAC_GetChannelConfig>
 800368a:	8030      	strh	r0, [r6, #0]
              break;
 800368c:	2002      	movs	r0, #2
        pHandle->txLength += size;
 800368e:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 8003690:	4603      	mov	r3, r0
              break;
 8003692:	e433      	b.n	8002efc <RI_GetRegCommandParser+0xf8>
              *regdata16 = (int16_t)DAC_GetChannelConfig(&DAC_Handle , DAC_CH1);
 8003694:	4808      	ldr	r0, [pc, #32]	; (80036b8 <RI_GetRegCommandParser+0x8b4>)
 8003696:	2100      	movs	r1, #0
 8003698:	e7f5      	b.n	8003686 <RI_GetRegCommandParser+0x882>
 800369a:	bf00      	nop
 800369c:	200002c0 	.word	0x200002c0
 80036a0:	20000498 	.word	0x20000498
 80036a4:	20000008 	.word	0x20000008
 80036a8:	20000484 	.word	0x20000484
 80036ac:	20000480 	.word	0x20000480
 80036b0:	200002f4 	.word	0x200002f4
 80036b4:	20000150 	.word	0x20000150
 80036b8:	200005e0 	.word	0x200005e0

080036bc <RI_GetIDSize>:

  return (retVal);
}
uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 80036bc:	f000 0038 	and.w	r0, r0, #56	; 0x38
 80036c0:	3808      	subs	r0, #8
 80036c2:	b2c0      	uxtb	r0, r0
 80036c4:	2810      	cmp	r0, #16
 80036c6:	bf9a      	itte	ls
 80036c8:	4b01      	ldrls	r3, [pc, #4]	; (80036d0 <RI_GetIDSize+0x14>)
 80036ca:	5c18      	ldrbls	r0, [r3, r0]
 80036cc:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 80036ce:	4770      	bx	lr
 80036d0:	08008f9c 	.word	0x08008f9c

080036d4 <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[vmotorID];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 80036d4:	f000 0338 	and.w	r3, r0, #56	; 0x38
 80036d8:	2b10      	cmp	r3, #16
 80036da:	d003      	beq.n	80036e4 <RI_GetPtrReg+0x10>
 80036dc:	4a43      	ldr	r2, [pc, #268]	; (80037ec <RI_GetPtrReg+0x118>)
            break;
          }
          default:
          {
            *dataPtr = &nullData16;
            retVal = MCP_ERROR_UNKNOWN_REG;
 80036de:	2005      	movs	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 80036e0:	600a      	str	r2, [r1, #0]
    }
#ifdef NULL_PTR_REG_INT
  }
#endif
  return (retVal);
}
 80036e2:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 80036e4:	f020 0007 	bic.w	r0, r0, #7
 80036e8:	f5b0 6f1d 	cmp.w	r0, #2512	; 0x9d0
 80036ec:	b283      	uxth	r3, r0
 80036ee:	d073      	beq.n	80037d8 <RI_GetPtrReg+0x104>
 80036f0:	d80f      	bhi.n	8003712 <RI_GetPtrReg+0x3e>
 80036f2:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 80036f6:	d074      	beq.n	80037e2 <RI_GetPtrReg+0x10e>
 80036f8:	d824      	bhi.n	8003744 <RI_GetPtrReg+0x70>
 80036fa:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 80036fe:	d058      	beq.n	80037b2 <RI_GetPtrReg+0xde>
 8003700:	d915      	bls.n	800372e <RI_GetPtrReg+0x5a>
 8003702:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8003706:	d1e9      	bne.n	80036dc <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8003708:	4b39      	ldr	r3, [pc, #228]	; (80037f0 <RI_GetPtrReg+0x11c>)
 800370a:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800370c:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 800370e:	3206      	adds	r2, #6
            break;
 8003710:	e7e6      	b.n	80036e0 <RI_GetPtrReg+0xc>
 8003712:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 8003716:	d049      	beq.n	80037ac <RI_GetPtrReg+0xd8>
 8003718:	d929      	bls.n	800376e <RI_GetPtrReg+0x9a>
 800371a:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 800371e:	d041      	beq.n	80037a4 <RI_GetPtrReg+0xd0>
 8003720:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 8003724:	d119      	bne.n	800375a <RI_GetPtrReg+0x86>
 8003726:	4a33      	ldr	r2, [pc, #204]	; (80037f4 <RI_GetPtrReg+0x120>)
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8003728:	600a      	str	r2, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800372a:	2000      	movs	r0, #0
}
 800372c:	4770      	bx	lr
 800372e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003732:	d04d      	beq.n	80037d0 <RI_GetPtrReg+0xfc>
 8003734:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8003738:	d1d0      	bne.n	80036dc <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 800373a:	4b2d      	ldr	r3, [pc, #180]	; (80037f0 <RI_GetPtrReg+0x11c>)
 800373c:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800373e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8003740:	3202      	adds	r2, #2
            break;
 8003742:	e7cd      	b.n	80036e0 <RI_GetPtrReg+0xc>
 8003744:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8003748:	d038      	beq.n	80037bc <RI_GetPtrReg+0xe8>
 800374a:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 800374e:	d119      	bne.n	8003784 <RI_GetPtrReg+0xb0>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8003750:	4b27      	ldr	r3, [pc, #156]	; (80037f0 <RI_GetPtrReg+0x11c>)
 8003752:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003754:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8003756:	3212      	adds	r2, #18
            break;
 8003758:	e7c2      	b.n	80036e0 <RI_GetPtrReg+0xc>
 800375a:	4827      	ldr	r0, [pc, #156]	; (80037f8 <RI_GetPtrReg+0x124>)
 800375c:	4a23      	ldr	r2, [pc, #140]	; (80037ec <RI_GetPtrReg+0x118>)
 800375e:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 8003762:	bf0a      	itet	eq
 8003764:	4602      	moveq	r2, r0
 8003766:	2005      	movne	r0, #5
 8003768:	2000      	moveq	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 800376a:	600a      	str	r2, [r1, #0]
}
 800376c:	4770      	bx	lr
 800376e:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8003772:	d028      	beq.n	80037c6 <RI_GetPtrReg+0xf2>
 8003774:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8003778:	d10c      	bne.n	8003794 <RI_GetPtrReg+0xc0>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 800377a:	4b1d      	ldr	r3, [pc, #116]	; (80037f0 <RI_GetPtrReg+0x11c>)
 800377c:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800377e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8003780:	321c      	adds	r2, #28
            break;
 8003782:	e7ad      	b.n	80036e0 <RI_GetPtrReg+0xc>
 8003784:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8003788:	d1a8      	bne.n	80036dc <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 800378a:	4b19      	ldr	r3, [pc, #100]	; (80037f0 <RI_GetPtrReg+0x11c>)
 800378c:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800378e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8003790:	320e      	adds	r2, #14
            break;
 8003792:	e7a5      	b.n	80036e0 <RI_GetPtrReg+0xc>
 8003794:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8003798:	d1a0      	bne.n	80036dc <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 800379a:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <RI_GetPtrReg+0x11c>)
 800379c:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800379e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 80037a0:	3218      	adds	r2, #24
            break;
 80037a2:	e79d      	b.n	80036e0 <RI_GetPtrReg+0xc>
 80037a4:	4a15      	ldr	r2, [pc, #84]	; (80037fc <RI_GetPtrReg+0x128>)
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 80037a6:	600a      	str	r2, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80037a8:	2000      	movs	r0, #0
}
 80037aa:	4770      	bx	lr
 80037ac:	4a14      	ldr	r2, [pc, #80]	; (8003800 <RI_GetPtrReg+0x12c>)
  uint8_t retVal = MCP_CMD_OK;
 80037ae:	2000      	movs	r0, #0
 80037b0:	e796      	b.n	80036e0 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 80037b2:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <RI_GetPtrReg+0x11c>)
 80037b4:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80037b6:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 80037b8:	3204      	adds	r2, #4
            break;
 80037ba:	e791      	b.n	80036e0 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 80037bc:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <RI_GetPtrReg+0x11c>)
 80037be:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80037c0:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 80037c2:	3210      	adds	r2, #16
            break;
 80037c4:	e78c      	b.n	80036e0 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 80037c6:	4b0a      	ldr	r3, [pc, #40]	; (80037f0 <RI_GetPtrReg+0x11c>)
 80037c8:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80037ca:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 80037cc:	321a      	adds	r2, #26
            break;
 80037ce:	e787      	b.n	80036e0 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 80037d0:	4b07      	ldr	r3, [pc, #28]	; (80037f0 <RI_GetPtrReg+0x11c>)
  uint8_t retVal = MCP_CMD_OK;
 80037d2:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 80037d4:	685a      	ldr	r2, [r3, #4]
             break;
 80037d6:	e783      	b.n	80036e0 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 80037d8:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <RI_GetPtrReg+0x11c>)
 80037da:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80037dc:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 80037de:	3216      	adds	r2, #22
            break;
 80037e0:	e77e      	b.n	80036e0 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 80037e2:	4b03      	ldr	r3, [pc, #12]	; (80037f0 <RI_GetPtrReg+0x11c>)
 80037e4:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80037e6:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 80037e8:	320c      	adds	r2, #12
            break;
 80037ea:	e779      	b.n	80036e0 <RI_GetPtrReg+0xc>
 80037ec:	20001c80 	.word	0x20001c80
 80037f0:	20000a7c 	.word	0x20000a7c
 80037f4:	20000332 	.word	0x20000332
 80037f8:	200002cc 	.word	0x200002cc
 80037fc:	20000330 	.word	0x20000330
 8003800:	200002c4 	.word	0x200002c4

08003804 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003804:	4b6b      	ldr	r3, [pc, #428]	; (80039b4 <RCM_RegisterRegConv+0x1b0>)
 8003806:	681a      	ldr	r2, [r3, #0]
{
 8003808:	b570      	push	{r4, r5, r6, lr}
 800380a:	4601      	mov	r1, r0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800380c:	2a00      	cmp	r2, #0
 800380e:	d02f      	beq.n	8003870 <RCM_RegisterRegConv+0x6c>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003810:	f890 c004 	ldrb.w	ip, [r0, #4]
 8003814:	7910      	ldrb	r0, [r2, #4]
 8003816:	4584      	cmp	ip, r0
 8003818:	d01d      	beq.n	8003856 <RCM_RegisterRegConv+0x52>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800381a:	685c      	ldr	r4, [r3, #4]
 800381c:	2c00      	cmp	r4, #0
 800381e:	f000 80ac 	beq.w	800397a <RCM_RegisterRegConv+0x176>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003822:	7922      	ldrb	r2, [r4, #4]
 8003824:	4562      	cmp	r2, ip
  uint8_t handle = 255U;
 8003826:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800382a:	d02b      	beq.n	8003884 <RCM_RegisterRegConv+0x80>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800382c:	689c      	ldr	r4, [r3, #8]
 800382e:	2c00      	cmp	r4, #0
 8003830:	f000 808f 	beq.w	8003952 <RCM_RegisterRegConv+0x14e>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003834:	7922      	ldrb	r2, [r4, #4]
 8003836:	4562      	cmp	r2, ip
 8003838:	d02a      	beq.n	8003890 <RCM_RegisterRegConv+0x8c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800383a:	68dc      	ldr	r4, [r3, #12]
 800383c:	2c00      	cmp	r4, #0
 800383e:	f000 8091 	beq.w	8003964 <RCM_RegisterRegConv+0x160>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003842:	7922      	ldrb	r2, [r4, #4]
 8003844:	4562      	cmp	r2, ip
 8003846:	f000 8092 	beq.w	800396e <RCM_RegisterRegConv+0x16a>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 800384a:	2803      	cmp	r0, #3
 800384c:	bf88      	it	hi
 800384e:	20ff      	movhi	r0, #255	; 0xff
 8003850:	f240 80a1 	bls.w	8003996 <RCM_RegisterRegConv+0x192>
    }
#ifdef NULL_PTR_REG_CON_MNG
  }
#endif
  return (handle);
}
 8003854:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003856:	6810      	ldr	r0, [r2, #0]
 8003858:	680a      	ldr	r2, [r1, #0]
 800385a:	4290      	cmp	r0, r2
 800385c:	d01e      	beq.n	800389c <RCM_RegisterRegConv+0x98>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800385e:	685c      	ldr	r4, [r3, #4]
 8003860:	2c00      	cmp	r4, #0
 8003862:	d1de      	bne.n	8003822 <RCM_RegisterRegConv+0x1e>
 8003864:	689c      	ldr	r4, [r3, #8]
 8003866:	2c00      	cmp	r4, #0
 8003868:	f000 809a 	beq.w	80039a0 <RCM_RegisterRegConv+0x19c>
      i++;
 800386c:	2001      	movs	r0, #1
 800386e:	e7e1      	b.n	8003834 <RCM_RegisterRegConv+0x30>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003870:	685c      	ldr	r4, [r3, #4]
 8003872:	2c00      	cmp	r4, #0
 8003874:	f000 808d 	beq.w	8003992 <RCM_RegisterRegConv+0x18e>
 8003878:	f890 c004 	ldrb.w	ip, [r0, #4]
    uint8_t i = 0;
 800387c:	4610      	mov	r0, r2
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800387e:	7922      	ldrb	r2, [r4, #4]
 8003880:	4562      	cmp	r2, ip
 8003882:	d1d3      	bne.n	800382c <RCM_RegisterRegConv+0x28>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003884:	6824      	ldr	r4, [r4, #0]
 8003886:	680a      	ldr	r2, [r1, #0]
 8003888:	4294      	cmp	r4, r2
 800388a:	d1cf      	bne.n	800382c <RCM_RegisterRegConv+0x28>
      i++;
 800388c:	2001      	movs	r0, #1
 800388e:	e006      	b.n	800389e <RCM_RegisterRegConv+0x9a>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003890:	6824      	ldr	r4, [r4, #0]
 8003892:	680a      	ldr	r2, [r1, #0]
 8003894:	4294      	cmp	r4, r2
 8003896:	d1d0      	bne.n	800383a <RCM_RegisterRegConv+0x36>
      i++;
 8003898:	2002      	movs	r0, #2
 800389a:	e000      	b.n	800389e <RCM_RegisterRegConv+0x9a>
    uint8_t i = 0;
 800389c:	2000      	movs	r0, #0
      RCM_handle_array [handle] = regConv;
 800389e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80038a2:	6893      	ldr	r3, [r2, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80038a4:	4c44      	ldr	r4, [pc, #272]	; (80039b8 <RCM_RegisterRegConv+0x1b4>)
 80038a6:	2500      	movs	r5, #0
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 80038a8:	07db      	lsls	r3, r3, #31
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80038aa:	f844 5030 	str.w	r5, [r4, r0, lsl #3]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 80038ae:	d411      	bmi.n	80038d4 <RCM_RegisterRegConv+0xd0>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80038b0:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80038b2:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80038b6:	f023 0320 	bic.w	r3, r3, #32
 80038ba:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80038bc:	6014      	str	r4, [r2, #0]
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80038be:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80038c0:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80038c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038c8:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80038ca:	6014      	str	r4, [r2, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80038cc:	6893      	ldr	r3, [r2, #8]
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80038d4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80038d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80038da:	62d3      	str	r3, [r2, #44]	; 0x2c
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 80038dc:	790b      	ldrb	r3, [r1, #4]
 80038de:	2b09      	cmp	r3, #9
 80038e0:	d82d      	bhi.n	800393e <RCM_RegisterRegConv+0x13a>
 80038e2:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 80038e6:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 80038ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038ee:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80038f6:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80038fa:	fab4 f484 	clz	r4, r4
 80038fe:	fa2e fe04 	lsr.w	lr, lr, r4
 8003902:	320c      	adds	r2, #12
  MODIFY_REG(*preg,
 8003904:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8003908:	f852 402e 	ldr.w	r4, [r2, lr, lsl #2]
 800390c:	f04f 7cf8 	mov.w	ip, #32505856	; 0x1f00000
 8003910:	fa9c f5ac 	rbit	r5, ip
 8003914:	fab5 f585 	clz	r5, r5
 8003918:	fa9c fcac 	rbit	ip, ip
 800391c:	688e      	ldr	r6, [r1, #8]
 800391e:	fabc fc8c 	clz	ip, ip
 8003922:	fa23 f105 	lsr.w	r1, r3, r5
 8003926:	fa23 f30c 	lsr.w	r3, r3, ip
 800392a:	fa06 f503 	lsl.w	r5, r6, r3
 800392e:	2307      	movs	r3, #7
 8003930:	408b      	lsls	r3, r1
 8003932:	ea24 0303 	bic.w	r3, r4, r3
 8003936:	432b      	orrs	r3, r5
 8003938:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
}
 800393c:	bd70      	pop	{r4, r5, r6, pc}
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 800393e:	2403      	movs	r4, #3
 8003940:	f06f 051d 	mvn.w	r5, #29
 8003944:	fb14 5403 	smlabb	r4, r4, r3, r5
 8003948:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800394c:	f003 7e00 	and.w	lr, r3, #33554432	; 0x2000000
 8003950:	e7cf      	b.n	80038f2 <RCM_RegisterRegConv+0xee>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003952:	2804      	cmp	r0, #4
 8003954:	d917      	bls.n	8003986 <RCM_RegisterRegConv+0x182>
 8003956:	68dc      	ldr	r4, [r3, #12]
 8003958:	b114      	cbz	r4, 8003960 <RCM_RegisterRegConv+0x15c>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800395a:	7922      	ldrb	r2, [r4, #4]
 800395c:	4594      	cmp	ip, r2
 800395e:	d01c      	beq.n	800399a <RCM_RegisterRegConv+0x196>
 8003960:	680a      	ldr	r2, [r1, #0]
 8003962:	e799      	b.n	8003898 <RCM_RegisterRegConv+0x94>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003964:	2804      	cmp	r0, #4
 8003966:	680a      	ldr	r2, [r1, #0]
 8003968:	d999      	bls.n	800389e <RCM_RegisterRegConv+0x9a>
      i++;
 800396a:	2003      	movs	r0, #3
 800396c:	e797      	b.n	800389e <RCM_RegisterRegConv+0x9a>
 800396e:	680a      	ldr	r2, [r1, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003970:	6824      	ldr	r4, [r4, #0]
 8003972:	4294      	cmp	r4, r2
 8003974:	f47f af69 	bne.w	800384a <RCM_RegisterRegConv+0x46>
 8003978:	e7f7      	b.n	800396a <RCM_RegisterRegConv+0x166>
      i++;
 800397a:	2001      	movs	r0, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800397c:	689c      	ldr	r4, [r3, #8]
 800397e:	b11c      	cbz	r4, 8003988 <RCM_RegisterRegConv+0x184>
 8003980:	f891 c004 	ldrb.w	ip, [r1, #4]
 8003984:	e756      	b.n	8003834 <RCM_RegisterRegConv+0x30>
 8003986:	4620      	mov	r0, r4
 8003988:	68dc      	ldr	r4, [r3, #12]
 800398a:	b124      	cbz	r4, 8003996 <RCM_RegisterRegConv+0x192>
 800398c:	f891 c004 	ldrb.w	ip, [r1, #4]
 8003990:	e757      	b.n	8003842 <RCM_RegisterRegConv+0x3e>
    uint8_t i = 0;
 8003992:	4620      	mov	r0, r4
 8003994:	e7f2      	b.n	800397c <RCM_RegisterRegConv+0x178>
 8003996:	680a      	ldr	r2, [r1, #0]
 8003998:	e781      	b.n	800389e <RCM_RegisterRegConv+0x9a>
 800399a:	680a      	ldr	r2, [r1, #0]
      i++;
 800399c:	2002      	movs	r0, #2
 800399e:	e7e7      	b.n	8003970 <RCM_RegisterRegConv+0x16c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80039a0:	68dc      	ldr	r4, [r3, #12]
 80039a2:	2c00      	cmp	r4, #0
 80039a4:	f43f af72 	beq.w	800388c <RCM_RegisterRegConv+0x88>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80039a8:	7920      	ldrb	r0, [r4, #4]
 80039aa:	4560      	cmp	r0, ip
      i++;
 80039ac:	bf08      	it	eq
 80039ae:	2001      	moveq	r0, #1
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80039b0:	d0de      	beq.n	8003970 <RCM_RegisterRegConv+0x16c>
 80039b2:	e76b      	b.n	800388c <RCM_RegisterRegConv+0x88>
 80039b4:	20001ca8 	.word	0x20001ca8
 80039b8:	20001c84 	.word	0x20001c84

080039bc <RCM_ExecRegularConv>:
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80039bc:	4b1b      	ldr	r3, [pc, #108]	; (8003a2c <RCM_ExecRegularConv+0x70>)
 80039be:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                               LL_ADC_REG_RANK_1,
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80039c2:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80039c4:	6812      	ldr	r2, [r2, #0]
 80039c6:	2b09      	cmp	r3, #9
 80039c8:	d827      	bhi.n	8003a1a <RCM_ExecRegularConv+0x5e>
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80039ca:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80039ce:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80039d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039d6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80039da:	fa91 f1a1 	rbit	r1, r1
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80039de:	f44f 7c00 	mov.w	ip, #512	; 0x200
 80039e2:	fab1 f181 	clz	r1, r1
 80039e6:	f102 002c 	add.w	r0, r2, #44	; 0x2c
 80039ea:	fa2c fc01 	lsr.w	ip, ip, r1
  MODIFY_REG(*preg,
 80039ee:	f003 031f 	and.w	r3, r3, #31
 80039f2:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
 80039f6:	f021 011f 	bic.w	r1, r1, #31
 80039fa:	4319      	orrs	r1, r3

  (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET(&RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos);
 80039fc:	0153      	lsls	r3, r2, #5
 80039fe:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
 8003a02:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8003a06:	2101      	movs	r1, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003a08:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8003a0a:	f8c3 1178 	str.w	r1, [r3, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8003a0e:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while (LL_ADC_IsActiveFlag_EOCS(RCM_handle_array[handle]->regADC) == 0u) {}
 8003a10:	079b      	lsls	r3, r3, #30
 8003a12:	d5fc      	bpl.n	8003a0e <RCM_ExecRegularConv+0x52>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003a14:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  retVal = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
  return retVal;
}
 8003a16:	b280      	uxth	r0, r0
 8003a18:	4770      	bx	lr
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003a1a:	2103      	movs	r1, #3
 8003a1c:	f06f 001d 	mvn.w	r0, #29
 8003a20:	fb11 0103 	smlabb	r1, r1, r3, r0
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003a24:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8003a28:	e7d5      	b.n	80039d6 <RCM_ExecRegularConv+0x1a>
 8003a2a:	bf00      	nop
 8003a2c:	20001ca8 	.word	0x20001ca8

08003a30 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
 8003a30:	b570      	push	{r4, r5, r6, lr}
  if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8003a32:	4c0f      	ldr	r4, [pc, #60]	; (8003a70 <RCM_ExecUserConv+0x40>)
 8003a34:	7823      	ldrb	r3, [r4, #0]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d000      	beq.n	8003a3c <RCM_ExecUserConv+0xc>
    else
    {
      /* Nothing to do */
    }
  }
}
 8003a3a:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003a3c:	4b0d      	ldr	r3, [pc, #52]	; (8003a74 <RCM_ExecUserConv+0x44>)
 8003a3e:	781d      	ldrb	r5, [r3, #0]
 8003a40:	4628      	mov	r0, r5
 8003a42:	f7ff ffbb 	bl	80039bc <RCM_ExecRegularConv>
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 8003a46:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <RCM_ExecUserConv+0x48>)
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003a48:	4a0c      	ldr	r2, [pc, #48]	; (8003a7c <RCM_ExecUserConv+0x4c>)
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 8003a4a:	f853 6035 	ldr.w	r6, [r3, r5, lsl #3]
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003a4e:	8010      	strh	r0, [r2, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8003a50:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003a52:	4601      	mov	r1, r0
    RCM_UserConvState = RCM_USERCONV_EOC;
 8003a54:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 8003a56:	2e00      	cmp	r6, #0
 8003a58:	d0ef      	beq.n	8003a3a <RCM_ExecUserConv+0xa>
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003a5a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003a5e:	4628      	mov	r0, r5
 8003a60:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8003a62:	2300      	movs	r3, #0
 8003a64:	7023      	strb	r3, [r4, #0]
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003a66:	4633      	mov	r3, r6
}
 8003a68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003a6c:	4718      	bx	r3
 8003a6e:	bf00      	nop
 8003a70:	20001ca5 	.word	0x20001ca5
 8003a74:	20001ca4 	.word	0x20001ca4
 8003a78:	20001c84 	.word	0x20001c84
 8003a7c:	20001ca6 	.word	0x20001ca6

08003a80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a80:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a82:	4b0e      	ldr	r3, [pc, #56]	; (8003abc <HAL_MspInit+0x3c>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	9200      	str	r2, [sp, #0]
 8003a88:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003a8a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003a8e:	6459      	str	r1, [r3, #68]	; 0x44
 8003a90:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8003a92:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
 8003a96:	9000      	str	r0, [sp, #0]
 8003a98:	9800      	ldr	r0, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a9a:	9201      	str	r2, [sp, #4]
 8003a9c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003a9e:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8003aa2:	6418      	str	r0, [r3, #64]	; 0x40
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	9301      	str	r3, [sp, #4]
 8003aac:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003aae:	210f      	movs	r1, #15
 8003ab0:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ab4:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ab6:	f000 bdd3 	b.w	8004660 <HAL_NVIC_SetPriority>
 8003aba:	bf00      	nop
 8003abc:	40023800 	.word	0x40023800

08003ac0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ac0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8003ac2:	4b20      	ldr	r3, [pc, #128]	; (8003b44 <HAL_ADC_MspInit+0x84>)
 8003ac4:	6802      	ldr	r2, [r0, #0]
{
 8003ac6:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac8:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8003aca:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003acc:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003ad0:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8003ad4:	9408      	str	r4, [sp, #32]
  if(hadc->Instance==ADC1)
 8003ad6:	d001      	beq.n	8003adc <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003ad8:	b00a      	add	sp, #40	; 0x28
 8003ada:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003adc:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8003ae0:	9401      	str	r4, [sp, #4]
 8003ae2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ae4:	4818      	ldr	r0, [pc, #96]	; (8003b48 <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ae6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aea:	645a      	str	r2, [r3, #68]	; 0x44
 8003aec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aee:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003af2:	9201      	str	r2, [sp, #4]
 8003af4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003af6:	9402      	str	r4, [sp, #8]
 8003af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003afa:	f042 0204 	orr.w	r2, r2, #4
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
 8003b00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b02:	f002 0204 	and.w	r2, r2, #4
 8003b06:	9202      	str	r2, [sp, #8]
 8003b08:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b0a:	9403      	str	r4, [sp, #12]
 8003b0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	631a      	str	r2, [r3, #48]	; 0x30
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b1c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 8003b1e:	2207      	movs	r2, #7
 8003b20:	2303      	movs	r3, #3
 8003b22:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b26:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b28:	f000 fe98 	bl	800485c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b30:	4806      	ldr	r0, [pc, #24]	; (8003b4c <HAL_ADC_MspInit+0x8c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b32:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b34:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8003b36:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b3a:	f000 fe8f 	bl	800485c <HAL_GPIO_Init>
}
 8003b3e:	b00a      	add	sp, #40	; 0x28
 8003b40:	bd10      	pop	{r4, pc}
 8003b42:	bf00      	nop
 8003b44:	40012000 	.word	0x40012000
 8003b48:	40020800 	.word	0x40020800
 8003b4c:	40020000 	.word	0x40020000

08003b50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b50:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8003b52:	4a19      	ldr	r2, [pc, #100]	; (8003bb8 <HAL_TIM_Base_MspInit+0x68>)
 8003b54:	6801      	ldr	r1, [r0, #0]
{
 8003b56:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b58:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8003b5a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b5c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003b60:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003b64:	9306      	str	r3, [sp, #24]
  if(htim_base->Instance==TIM1)
 8003b66:	d001      	beq.n	8003b6c <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003b68:	b008      	add	sp, #32
 8003b6a:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b6c:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8003b74:	f040 0001 	orr.w	r0, r0, #1
 8003b78:	6450      	str	r0, [r2, #68]	; 0x44
 8003b7a:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8003b7c:	f000 0001 	and.w	r0, r0, #1
 8003b80:	9000      	str	r0, [sp, #0]
 8003b82:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b84:	9301      	str	r3, [sp, #4]
 8003b86:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8003b88:	480c      	ldr	r0, [pc, #48]	; (8003bbc <HAL_TIM_Base_MspInit+0x6c>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b8a:	2401      	movs	r4, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b8c:	4323      	orrs	r3, r4
 8003b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8003b90:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b92:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8003b94:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8003bb0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b98:	4023      	ands	r3, r4
 8003b9a:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8003b9c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8003b9e:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ba2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ba4:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8003ba6:	f000 fe59 	bl	800485c <HAL_GPIO_Init>
}
 8003baa:	b008      	add	sp, #32
 8003bac:	bd10      	pop	{r4, pc}
 8003bae:	bf00      	nop
 8003bb0:	00000040 	.word	0x00000040
 8003bb4:	00000002 	.word	0x00000002
 8003bb8:	40010000 	.word	0x40010000
 8003bbc:	40020000 	.word	0x40020000

08003bc0 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM3)
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <HAL_TIM_PWM_MspInit+0x2c>)
 8003bc2:	6802      	ldr	r2, [r0, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d000      	beq.n	8003bca <HAL_TIM_PWM_MspInit+0xa>
 8003bc8:	4770      	bx	lr
{
 8003bca:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003bcc:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	9201      	str	r2, [sp, #4]
 8003bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bd6:	f042 0202 	orr.w	r2, r2, #2
 8003bda:	641a      	str	r2, [r3, #64]	; 0x40
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	9301      	str	r3, [sp, #4]
 8003be4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003be6:	b002      	add	sp, #8
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40000400 	.word	0x40000400

08003bf0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003bf0:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8003bf2:	6802      	ldr	r2, [r0, #0]
 8003bf4:	4922      	ldr	r1, [pc, #136]	; (8003c80 <HAL_TIM_MspPostInit+0x90>)
{
 8003bf6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf8:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8003bfa:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bfc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003c00:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003c04:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 8003c06:	d004      	beq.n	8003c12 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8003c08:	491e      	ldr	r1, [pc, #120]	; (8003c84 <HAL_TIM_MspPostInit+0x94>)
 8003c0a:	428a      	cmp	r2, r1
 8003c0c:	d01b      	beq.n	8003c46 <HAL_TIM_MspPostInit+0x56>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003c0e:	b009      	add	sp, #36	; 0x24
 8003c10:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c12:	4a1d      	ldr	r2, [pc, #116]	; (8003c88 <HAL_TIM_MspPostInit+0x98>)
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c18:	481c      	ldr	r0, [pc, #112]	; (8003c8c <HAL_TIM_MspPostInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c1a:	f041 0101 	orr.w	r1, r1, #1
 8003c1e:	6311      	str	r1, [r2, #48]	; 0x30
 8003c20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c22:	f002 0201 	and.w	r2, r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c26:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c28:	9200      	str	r2, [sp, #0]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003c2a:	f44f 64e0 	mov.w	r4, #1792	; 0x700
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003c2e:	2201      	movs	r2, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c30:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c32:	e9cd 4302 	strd	r4, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c36:	e9cd 3304 	strd	r3, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c3a:	9d00      	ldr	r5, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003c3c:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c3e:	f000 fe0d 	bl	800485c <HAL_GPIO_Init>
}
 8003c42:	b009      	add	sp, #36	; 0x24
 8003c44:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c46:	4a10      	ldr	r2, [pc, #64]	; (8003c88 <HAL_TIM_MspPostInit+0x98>)
 8003c48:	9301      	str	r3, [sp, #4]
 8003c4a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(DAC_EMUL_CH1_GPIO_Port, &GPIO_InitStruct);
 8003c4c:	480f      	ldr	r0, [pc, #60]	; (8003c8c <HAL_TIM_MspPostInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	6313      	str	r3, [r2, #48]	; 0x30
 8003c54:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = DAC_EMUL_CH1_Pin;
 8003c56:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8003c78 <HAL_TIM_MspPostInit+0x88>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(DAC_EMUL_CH1_GPIO_Port, &GPIO_InitStruct);
 8003c60:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c62:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = DAC_EMUL_CH1_Pin;
 8003c64:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c68:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c6a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(DAC_EMUL_CH1_GPIO_Port, &GPIO_InitStruct);
 8003c6c:	f000 fdf6 	bl	800485c <HAL_GPIO_Init>
}
 8003c70:	b009      	add	sp, #36	; 0x24
 8003c72:	bd30      	pop	{r4, r5, pc}
 8003c74:	f3af 8000 	nop.w
 8003c78:	00000080 	.word	0x00000080
 8003c7c:	00000002 	.word	0x00000002
 8003c80:	40010000 	.word	0x40010000
 8003c84:	40000400 	.word	0x40000400
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	40020000 	.word	0x40020000

08003c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c90:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8003c92:	4b32      	ldr	r3, [pc, #200]	; (8003d5c <HAL_UART_MspInit+0xcc>)
 8003c94:	6802      	ldr	r2, [r0, #0]
{
 8003c96:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c98:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 8003c9a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c9c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003ca0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003ca4:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART2)
 8003ca6:	d001      	beq.n	8003cac <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003ca8:	b008      	add	sp, #32
 8003caa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8003cac:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8003cb0:	9400      	str	r4, [sp, #0]
 8003cb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003cb4:	4e2a      	ldr	r6, [pc, #168]	; (8003d60 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003cb6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003cba:	641a      	str	r2, [r3, #64]	; 0x40
 8003cbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cbe:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003cc2:	9200      	str	r2, [sp, #0]
 8003cc4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cc6:	9401      	str	r4, [sp, #4]
 8003cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	631a      	str	r2, [r3, #48]	; 0x30
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003cd8:	220c      	movs	r2, #12
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ce0:	4605      	mov	r5, r0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ce2:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce4:	481f      	ldr	r0, [pc, #124]	; (8003d64 <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ce6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce8:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cea:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cec:	f000 fdb6 	bl	800485c <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003cf0:	4a1d      	ldr	r2, [pc, #116]	; (8003d68 <HAL_UART_MspInit+0xd8>)
 8003cf2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003cf6:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003cfa:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d00:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d04:	e9c6 3404 	strd	r3, r4, [r6, #16]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003d08:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d0c:	e9c6 4408 	strd	r4, r4, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003d10:	f000 fd0c 	bl	800472c <HAL_DMA_Init>
 8003d14:	b9d8      	cbnz	r0, 8003d4e <HAL_UART_MspInit+0xbe>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003d16:	4c15      	ldr	r4, [pc, #84]	; (8003d6c <HAL_UART_MspInit+0xdc>)
 8003d18:	4915      	ldr	r1, [pc, #84]	; (8003d70 <HAL_UART_MspInit+0xe0>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003d1a:	63ae      	str	r6, [r5, #56]	; 0x38
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003d1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d20:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003d22:	e9c4 1200 	strd	r1, r2, [r4]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003d26:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d28:	2140      	movs	r1, #64	; 0x40
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003d2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d2e:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d32:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003d36:	e9c4 3307 	strd	r3, r3, [r4, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003d3a:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003d3c:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d3e:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003d40:	f000 fcf4 	bl	800472c <HAL_DMA_Init>
 8003d44:	b930      	cbnz	r0, 8003d54 <HAL_UART_MspInit+0xc4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003d46:	636c      	str	r4, [r5, #52]	; 0x34
 8003d48:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8003d4a:	b008      	add	sp, #32
 8003d4c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8003d4e:	f7fd fad1 	bl	80012f4 <Error_Handler>
 8003d52:	e7e0      	b.n	8003d16 <HAL_UART_MspInit+0x86>
      Error_Handler();
 8003d54:	f7fd face 	bl	80012f4 <Error_Handler>
 8003d58:	e7f5      	b.n	8003d46 <HAL_UART_MspInit+0xb6>
 8003d5a:	bf00      	nop
 8003d5c:	40004400 	.word	0x40004400
 8003d60:	200008d8 	.word	0x200008d8
 8003d64:	40020000 	.word	0x40020000
 8003d68:	40026088 	.word	0x40026088
 8003d6c:	20000938 	.word	0x20000938
 8003d70:	400260a0 	.word	0x400260a0

08003d74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d74:	b570      	push	{r4, r5, r6, lr}
 8003d76:	b088      	sub	sp, #32
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003d78:	4b23      	ldr	r3, [pc, #140]	; (8003e08 <HAL_InitTick+0x94>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	9202      	str	r2, [sp, #8]
 8003d7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d80:	f042 0201 	orr.w	r2, r2, #1
 8003d84:	641a      	str	r2, [r3, #64]	; 0x40
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	9302      	str	r3, [sp, #8]
{
 8003d8e:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d90:	a901      	add	r1, sp, #4
 8003d92:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003d94:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d96:	f001 f93b 	bl	8005010 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003d9a:	9b06      	ldr	r3, [sp, #24]
 8003d9c:	b9db      	cbnz	r3, 8003dd6 <HAL_InitTick+0x62>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003d9e:	f001 f917 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 8003da2:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003da4:	4a19      	ldr	r2, [pc, #100]	; (8003e0c <HAL_InitTick+0x98>)

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8003da6:	4c1a      	ldr	r4, [pc, #104]	; (8003e10 <HAL_InitTick+0x9c>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003da8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dac:	0c9b      	lsrs	r3, r3, #18
 8003dae:	3b01      	subs	r3, #1
  htim2.Instance = TIM2;
 8003db0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
  htim2.Init.Prescaler = uwPrescalerValue;
  htim2.Init.ClockDivision = 0;
 8003db4:	2200      	movs	r2, #0
  htim2.Init.Prescaler = uwPrescalerValue;
 8003db6:	e9c4 1300 	strd	r1, r3, [r4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim2);
 8003dba:	4620      	mov	r0, r4
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8003dbc:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim2.Init.ClockDivision = 0;
 8003dc0:	6122      	str	r2, [r4, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dc2:	60a2      	str	r2, [r4, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dc4:	61a2      	str	r2, [r4, #24]
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8003dc6:	60e3      	str	r3, [r4, #12]
  status = HAL_TIM_Base_Init(&htim2);
 8003dc8:	f001 f944 	bl	8005054 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8003dcc:	4606      	mov	r6, r0
 8003dce:	b130      	cbz	r0, 8003dde <HAL_InitTick+0x6a>
    }
  }

 /* Return function status */
  return status;
}
 8003dd0:	4630      	mov	r0, r6
 8003dd2:	b008      	add	sp, #32
 8003dd4:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003dd6:	f001 f8fb 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 8003dda:	0043      	lsls	r3, r0, #1
 8003ddc:	e7e2      	b.n	8003da4 <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim2);
 8003dde:	4620      	mov	r0, r4
 8003de0:	f001 f9b6 	bl	8005150 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8003de4:	4606      	mov	r6, r0
 8003de6:	2800      	cmp	r0, #0
 8003de8:	d1f2      	bne.n	8003dd0 <HAL_InitTick+0x5c>
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003dea:	201c      	movs	r0, #28
 8003dec:	f000 fc76 	bl	80046dc <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003df0:	2d0f      	cmp	r5, #15
 8003df2:	d901      	bls.n	8003df8 <HAL_InitTick+0x84>
        status = HAL_ERROR;
 8003df4:	2601      	movs	r6, #1
 8003df6:	e7eb      	b.n	8003dd0 <HAL_InitTick+0x5c>
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8003df8:	4632      	mov	r2, r6
 8003dfa:	4629      	mov	r1, r5
 8003dfc:	201c      	movs	r0, #28
 8003dfe:	f000 fc2f 	bl	8004660 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e02:	4b04      	ldr	r3, [pc, #16]	; (8003e14 <HAL_InitTick+0xa0>)
 8003e04:	601d      	str	r5, [r3, #0]
 8003e06:	e7e3      	b.n	8003dd0 <HAL_InitTick+0x5c>
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	431bde83 	.word	0x431bde83
 8003e10:	20001cb8 	.word	0x20001cb8
 8003e14:	2000056c 	.word	0x2000056c

08003e18 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003e18:	4801      	ldr	r0, [pc, #4]	; (8003e20 <TIM2_IRQHandler+0x8>)
 8003e1a:	f001 bbdf 	b.w	80055dc <HAL_TIM_IRQHandler>
 8003e1e:	bf00      	nop
 8003e20:	20001cb8 	.word	0x20001cb8

08003e24 <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8003e24:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <ADC_IRQHandler+0x18>)
 8003e26:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 8003e28:	0752      	lsls	r2, r2, #29
 8003e2a:	d400      	bmi.n	8003e2e <ADC_IRQHandler+0xa>
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
  }
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003e2c:	4770      	bx	lr
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	f022 020c 	bic.w	r2, r2, #12
 8003e34:	601a      	str	r2, [r3, #0]
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 8003e36:	f7fe b89d 	b.w	8001f74 <TSK_HighFrequencyTask>
 8003e3a:	bf00      	nop
 8003e3c:	40012000 	.word	0x40012000

08003e40 <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 8003e40:	4804      	ldr	r0, [pc, #16]	; (8003e54 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003e42:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8003e46:	685b      	ldr	r3, [r3, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003e48:	f06f 0201 	mvn.w	r2, #1
 8003e4c:	611a      	str	r2, [r3, #16]
  R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8003e4e:	f003 bd09 	b.w	8007864 <R3_1_TIMx_UP_IRQHandler>
 8003e52:	bf00      	nop
 8003e54:	2000018c 	.word	0x2000018c

08003e58 <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8003e58:	4808      	ldr	r0, [pc, #32]	; (8003e7c <TIM1_BRK_TIM9_IRQHandler+0x24>)
{
 8003e5a:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8003e5c:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8003e60:	685b      	ldr	r3, [r3, #4]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	0612      	lsls	r2, r2, #24
 8003e66:	d504      	bpl.n	8003e72 <TIM1_BRK_TIM9_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003e68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e6c:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    R3_1_BRK_IRQHandler(&PWM_Handle_M1);
 8003e6e:	f003 fd1b 	bl	80078a8 <R3_1_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8003e72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8003e76:	f7fe b82d 	b.w	8001ed4 <MC_Scheduler>
 8003e7a:	bf00      	nop
 8003e7c:	2000018c 	.word	0x2000018c

08003e80 <DMA1_Stream5_IRQHandler>:
    retVal = 0;
  }
  else
  {
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LISR,(Stream<=3)?0:1);
    retVal = ((READ_BIT(*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) ) == (1 << __LL_DMA_IT_TC_BIT(Stream))) ? 1UL : 0UL);
 8003e80:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <DMA1_Stream5_IRQHandler+0x18>)
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	0512      	lsls	r2, r2, #20
 8003e86:	d400      	bmi.n	8003e8a <DMA1_Stream5_IRQHandler+0xa>
  }
  /* USER CODE BEGIN DMA1_Stream5_IRQHandler 1 */

  /* USER CODE BEGIN DMA1_Stream5_IRQHandler 1 */

}
 8003e88:	4770      	bx	lr
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) );
 8003e8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 8003e8e:	4803      	ldr	r0, [pc, #12]	; (8003e9c <DMA1_Stream5_IRQHandler+0x1c>)
 8003e90:	60da      	str	r2, [r3, #12]
 8003e92:	f7fc be5d 	b.w	8000b50 <ASPEP_HWDataReceivedIT>
 8003e96:	bf00      	nop
 8003e98:	40026000 	.word	0x40026000
 8003e9c:	200004f0 	.word	0x200004f0

08003ea0 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART2_IRQHandler(void)
{
 8003ea0:	b510      	push	{r4, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8003ea2:	4b51      	ldr	r3, [pc, #324]	; (8003fe8 <USART2_IRQHandler+0x148>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART2_IRQHandler 0 */

  /* USER CODE END UUSART2_IRQHandler 0 */

  if ( LL_USART_IsActiveFlag_TC (USARTA) )
 8003ea6:	0651      	lsls	r1, r2, #25
{
 8003ea8:	b084      	sub	sp, #16
  if ( LL_USART_IsActiveFlag_TC (USARTA) )
 8003eaa:	f100 808e 	bmi.w	8003fca <USART2_IRQHandler+0x12a>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8003eae:	4b4e      	ldr	r3, [pc, #312]	; (8003fe8 <USART2_IRQHandler+0x148>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
  }
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
 8003eb2:	0712      	lsls	r2, r2, #28
 8003eb4:	d402      	bmi.n	8003ebc <USART2_IRQHandler+0x1c>
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	0794      	lsls	r4, r2, #30
 8003eba:	d57e      	bpl.n	8003fba <USART2_IRQHandler+0x11a>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 8003ebc:	4b4a      	ldr	r3, [pc, #296]	; (8003fe8 <USART2_IRQHandler+0x148>)
 8003ebe:	695a      	ldr	r2, [r3, #20]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 8003ec0:	07d1      	lsls	r1, r2, #31
 8003ec2:	d52d      	bpl.n	8003f20 <USART2_IRQHandler+0x80>
  tmpreg = USARTx->SR;
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 8003ec8:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->DR;
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 8003ece:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->SR;
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 8003ed4:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->DR;
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 8003eda:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->SR;
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8003ee0:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003ee6:	9b01      	ldr	r3, [sp, #4]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003eec:	f202 4314 	addw	r3, r2, #1044	; 0x414
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef8:	f202 4014 	addw	r0, r2, #1044	; 0x414
 8003efc:	e840 3100 	strex	r1, r3, [r0]
 8003f00:	2900      	cmp	r1, #0
 8003f02:	d1f3      	bne.n	8003eec <USART2_IRQHandler+0x4c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f04:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003f08:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 8003f0c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003f10:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f14:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 8003f18:	e840 3100 	strex	r1, r3, [r0]
 8003f1c:	2900      	cmp	r1, #0
 8003f1e:	d1f3      	bne.n	8003f08 <USART2_IRQHandler+0x68>
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8003f20:	4b31      	ldr	r3, [pc, #196]	; (8003fe8 <USART2_IRQHandler+0x148>)
 8003f22:	681a      	ldr	r2, [r3, #0]
    LL_USART_ClearFlag_NE(USARTA);
    /* We disable ERROR interrupt to avoid to trig one Overrun IT per additional byte recevied*/
    LL_USART_DisableIT_ERROR (USARTA);
    LL_USART_EnableIT_IDLE (USARTA);
  }
  if ( LL_USART_IsActiveFlag_IDLE (USARTA) && LL_USART_IsEnabledIT_IDLE (USARTA) )
 8003f24:	06d2      	lsls	r2, r2, #27
 8003f26:	d546      	bpl.n	8003fb6 <USART2_IRQHandler+0x116>
  return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	06db      	lsls	r3, r3, #27
 8003f2c:	d543      	bpl.n	8003fb6 <USART2_IRQHandler+0x116>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003f32:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 8003f36:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003f3a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3e:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 8003f42:	e840 3100 	strex	r1, r3, [r0]
 8003f46:	2900      	cmp	r1, #0
 8003f48:	d1f3      	bne.n	8003f32 <USART2_IRQHandler+0x92>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003f4e:	f202 4314 	addw	r3, r2, #1044	; 0x414
 8003f52:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003f56:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5a:	f202 4014 	addw	r0, r2, #1044	; 0x414
 8003f5e:	e840 3100 	strex	r1, r3, [r0]
 8003f62:	2900      	cmp	r1, #0
 8003f64:	d1f3      	bne.n	8003f4e <USART2_IRQHandler+0xae>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003f6a:	f202 4314 	addw	r3, r2, #1044	; 0x414
 8003f6e:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003f72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f76:	f202 4014 	addw	r0, r2, #1044	; 0x414
 8003f7a:	e840 3100 	strex	r1, r3, [r0]
 8003f7e:	2900      	cmp	r1, #0
 8003f80:	d1f3      	bne.n	8003f6a <USART2_IRQHandler+0xca>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003f82:	4b19      	ldr	r3, [pc, #100]	; (8003fe8 <USART2_IRQHandler+0x148>)
 8003f84:	685b      	ldr	r3, [r3, #4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f86:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003f8a:	f202 4314 	addw	r3, r2, #1044	; 0x414
 8003f8e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	f202 4014 	addw	r0, r2, #1044	; 0x414
 8003f9a:	e840 3100 	strex	r1, r3, [r0]
 8003f9e:	2900      	cmp	r1, #0
 8003fa0:	d1f3      	bne.n	8003f8a <USART2_IRQHandler+0xea>
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TE_BIT(Stream) );
 8003fa2:	4b12      	ldr	r3, [pc, #72]	; (8003fec <USART2_IRQHandler+0x14c>)
    /* We disable the DMA request, Read the dummy data, endable back the DMA request */
    LL_USART_DisableDMAReq_RX (USARTA);
    LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX (USARTA);
    LL_DMA_ClearFlag_TE (DMA_RX_A, DMACH_RX_A );
    ASPEP_HWDMAReset (&aspepOverUartA);
 8003fa4:	4812      	ldr	r0, [pc, #72]	; (8003ff0 <USART2_IRQHandler+0x150>)
 8003fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003faa:	60da      	str	r2, [r3, #12]
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 8003fac:	b004      	add	sp, #16
 8003fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ASPEP_HWDMAReset (&aspepOverUartA);
 8003fb2:	f7fc be1b 	b.w	8000bec <ASPEP_HWDMAReset>
}
 8003fb6:	b004      	add	sp, #16
 8003fb8:	bd10      	pop	{r4, pc}
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8003fba:	681b      	ldr	r3, [r3, #0]
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
 8003fbc:	0758      	lsls	r0, r3, #29
 8003fbe:	d5af      	bpl.n	8003f20 <USART2_IRQHandler+0x80>
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 8003fc0:	4b09      	ldr	r3, [pc, #36]	; (8003fe8 <USART2_IRQHandler+0x148>)
 8003fc2:	695a      	ldr	r2, [r3, #20]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 8003fc4:	07d1      	lsls	r1, r2, #31
 8003fc6:	d5ab      	bpl.n	8003f20 <USART2_IRQHandler+0x80>
 8003fc8:	e77c      	b.n	8003ec4 <USART2_IRQHandler+0x24>
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8003fca:	4908      	ldr	r1, [pc, #32]	; (8003fec <USART2_IRQHandler+0x14c>)
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8003fcc:	4808      	ldr	r0, [pc, #32]	; (8003ff0 <USART2_IRQHandler+0x150>)
 8003fce:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8003fd2:	f06f 0440 	mvn.w	r4, #64	; 0x40
 8003fd6:	f022 0201 	bic.w	r2, r2, #1
 8003fda:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
 8003fde:	601c      	str	r4, [r3, #0]
 8003fe0:	f7fc fc0a 	bl	80007f8 <ASPEP_HWDataTransmittedIT>
 8003fe4:	e763      	b.n	8003eae <USART2_IRQHandler+0xe>
 8003fe6:	bf00      	nop
 8003fe8:	40004400 	.word	0x40004400
 8003fec:	40026000 	.word	0x40026000
 8003ff0:	200004f0 	.word	0x200004f0

08003ff4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003ff4:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8003ff6:	f7fe f8fd 	bl	80021f4 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003ffa:	e7fe      	b.n	8003ffa <HardFault_Handler+0x6>

08003ffc <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 8003ffc:	4b04      	ldr	r3, [pc, #16]	; (8004010 <EXTI15_10_IRQHandler+0x14>)
 8003ffe:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC13.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13) )
 8004000:	0492      	lsls	r2, r2, #18
 8004002:	d400      	bmi.n	8004006 <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);
    UI_HandleStartStopButton_cb ();
  }

}
 8004004:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8004006:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800400a:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 800400c:	f7fe b912 	b.w	8002234 <UI_HandleStartStopButton_cb>
 8004010:	40013c00 	.word	0x40013c00

08004014 <UASPEP_INIT>:
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 8004014:	6802      	ldr	r2, [r0, #0]
 8004016:	4611      	mov	r1, r2
 8004018:	f06f 0340 	mvn.w	r3, #64	; 0x40
{
 800401c:	b470      	push	{r4, r5, r6}
 800401e:	f841 3b0c 	str.w	r3, [r1], #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004022:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8004026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402a:	e841 3400 	strex	r4, r3, [r1]
 800402e:	2c00      	cmp	r4, #0
 8004030:	d1f7      	bne.n	8004022 <UASPEP_INIT+0xe>
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8004032:	f102 0114 	add.w	r1, r2, #20
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004036:	e851 3f00 	ldrex	r3, [r1]
 800403a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403e:	e841 3400 	strex	r4, r3, [r1]
 8004042:	2c00      	cmp	r4, #0
 8004044:	d1f7      	bne.n	8004036 <UASPEP_INIT+0x22>
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8004046:	6901      	ldr	r1, [r0, #16]
 8004048:	4e16      	ldr	r6, [pc, #88]	; (80040a4 <UASPEP_INIT+0x90>)
 800404a:	6883      	ldr	r3, [r0, #8]
 800404c:	5c74      	ldrb	r4, [r6, r1]
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 800404e:	6845      	ldr	r5, [r0, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8004050:	4423      	add	r3, r4
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->DR);
 8004052:	1d11      	adds	r1, r2, #4
 8004054:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8004056:	68c3      	ldr	r3, [r0, #12]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8004058:	4611      	mov	r1, r2
 800405a:	f06f 0440 	mvn.w	r4, #64	; 0x40
 800405e:	f841 4b14 	str.w	r4, [r1], #20
 8004062:	5cf4      	ldrb	r4, [r6, r3]
 8004064:	592b      	ldr	r3, [r5, r4]
 8004066:	f043 0310 	orr.w	r3, r3, #16
 800406a:	512b      	str	r3, [r5, r4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8004070:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	e841 3400 	strex	r4, r3, [r1]
 8004078:	2c00      	cmp	r4, #0
 800407a:	d1f7      	bne.n	800406c <UASPEP_INIT+0x58>
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 800407c:	68c3      	ldr	r3, [r0, #12]
 800407e:	5cf3      	ldrb	r3, [r6, r3]
 8004080:	441d      	add	r5, r3
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->DR);
 8004082:	1d11      	adds	r1, r2, #4
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8004084:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8004088:	60a9      	str	r1, [r5, #8]
 800408a:	f842 3b14 	str.w	r3, [r2], #20
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004096:	e842 3100 	strex	r1, r3, [r2]
 800409a:	2900      	cmp	r1, #0
 800409c:	d1f7      	bne.n	800408e <UASPEP_INIT+0x7a>
}
 800409e:	bc70      	pop	{r4, r5, r6}
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	08008fb0 	.word	0x08008fb0

080040a8 <UASPEP_SEND_PACKET>:
  }
#endif
}

bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 80040a8:	b4f0      	push	{r4, r5, r6, r7}
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  bool result;
  if (0U == LL_DMA_IsEnabledStream(pHandle->txDMA, pHandle->txChannel))
 80040aa:	6905      	ldr	r5, [r0, #16]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 80040ac:	4e1b      	ldr	r6, [pc, #108]	; (800411c <UASPEP_SEND_PACKET+0x74>)
 80040ae:	6884      	ldr	r4, [r0, #8]
 80040b0:	5d73      	ldrb	r3, [r6, r5]
 80040b2:	58e7      	ldr	r7, [r4, r3]
 80040b4:	07ff      	lsls	r7, r7, #31
 80040b6:	4423      	add	r3, r4
 80040b8:	d422      	bmi.n	8004100 <UASPEP_SEND_PACKET+0x58>
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 80040ba:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 80040bc:	6859      	ldr	r1, [r3, #4]
 80040be:	0c09      	lsrs	r1, r1, #16
 80040c0:	0409      	lsls	r1, r1, #16
 80040c2:	430a      	orrs	r2, r1
 80040c4:	605a      	str	r2, [r3, #4]
  if (NULL == DMAx)
 80040c6:	b1ac      	cbz	r4, 80040f4 <UASPEP_SEND_PACKET+0x4c>
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 80040c8:	2d03      	cmp	r5, #3
 80040ca:	bf94      	ite	ls
 80040cc:	2200      	movls	r2, #0
 80040ce:	2201      	movhi	r2, #1
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) );
 80040d0:	f015 0503 	ands.w	r5, r5, #3
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 80040d4:	f104 0308 	add.w	r3, r4, #8
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) );
 80040d8:	d015      	beq.n	8004106 <UASPEP_SEND_PACKET+0x5e>
 80040da:	2d01      	cmp	r5, #1
 80040dc:	d01a      	beq.n	8004114 <UASPEP_SEND_PACKET+0x6c>
 80040de:	2d02      	cmp	r5, #2
 80040e0:	bf0c      	ite	eq
 80040e2:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
 80040e6:	f04f 6100 	movne.w	r1, #134217728	; 0x8000000
 80040ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80040ee:	6903      	ldr	r3, [r0, #16]
 80040f0:	5cf3      	ldrb	r3, [r6, r3]
 80040f2:	4423      	add	r3, r4
 80040f4:	681a      	ldr	r2, [r3, #0]
    //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
    LL_DMA_SetMemoryAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)data);
    LL_DMA_SetDataLength(pHandle->txDMA, pHandle->txChannel, length);
    LL_DMA_ClearFlag_TC(pHandle->txDMA, pHandle->txChannel);
    LL_DMA_EnableStream(pHandle->txDMA, pHandle->txChannel);
    result = true;
 80040f6:	2001      	movs	r0, #1
 80040f8:	4302      	orrs	r2, r0
  else
  {
    result = false;
  }
  return result;
}
 80040fa:	bcf0      	pop	{r4, r5, r6, r7}
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	4770      	bx	lr
    result = false;
 8004100:	2000      	movs	r0, #0
}
 8004102:	bcf0      	pop	{r4, r5, r6, r7}
 8004104:	4770      	bx	lr
 8004106:	2120      	movs	r1, #32
 8004108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800410c:	6903      	ldr	r3, [r0, #16]
 800410e:	5cf3      	ldrb	r3, [r6, r3]
 8004110:	4423      	add	r3, r4
 8004112:	e7ef      	b.n	80040f4 <UASPEP_SEND_PACKET+0x4c>
 8004114:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004118:	e7f6      	b.n	8004108 <UASPEP_SEND_PACKET+0x60>
 800411a:	bf00      	nop
 800411c:	08008fb0 	.word	0x08008fb0

08004120 <UASPEP_RECEIVE_BUFFER>:

void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 8004120:	b430      	push	{r4, r5}
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8004122:	68c3      	ldr	r3, [r0, #12]
 8004124:	4d09      	ldr	r5, [pc, #36]	; (800414c <UASPEP_RECEIVE_BUFFER+0x2c>)
 8004126:	6844      	ldr	r4, [r0, #4]
 8004128:	5ce8      	ldrb	r0, [r5, r3]
 800412a:	eb04 0c00 	add.w	ip, r4, r0
 800412e:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8004132:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8004136:	0c1b      	lsrs	r3, r3, #16
 8004138:	041b      	lsls	r3, r3, #16
 800413a:	431a      	orrs	r2, r3
 800413c:	f8cc 2004 	str.w	r2, [ip, #4]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8004140:	5823      	ldr	r3, [r4, r0]
 8004142:	f043 0301 	orr.w	r3, r3, #1
 8004146:	5023      	str	r3, [r4, r0]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);
  LL_DMA_EnableStream(pHandle->rxDMA, pHandle->rxChannel);
}
 8004148:	bc30      	pop	{r4, r5}
 800414a:	4770      	bx	lr
 800414c:	08008fb0 	.word	0x08008fb0

08004150 <UASPEP_IDLE_ENABLE>:

void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8004150:	6802      	ldr	r2, [r0, #0]
{
 8004152:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 8004154:	6813      	ldr	r3, [r2, #0]
 8004156:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8004158:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 800415a:	6853      	ldr	r3, [r2, #4]
 800415c:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800415e:	9b01      	ldr	r3, [sp, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004160:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004162:	e852 3f00 	ldrex	r3, [r2]
 8004166:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416a:	e842 3100 	strex	r1, r3, [r2]
 800416e:	2900      	cmp	r1, #0
 8004170:	d1f7      	bne.n	8004162 <UASPEP_IDLE_ENABLE+0x12>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8004172:	b002      	add	sp, #8
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop

08004178 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004178:	4a03      	ldr	r2, [pc, #12]	; (8004188 <SystemInit+0x10>)
 800417a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800417e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004182:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004186:	4770      	bx	lr
 8004188:	e000ed00 	.word	0xe000ed00

0800418c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800418c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800418e:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <HAL_Init+0x30>)
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004196:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800419e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041a6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041a8:	2003      	movs	r0, #3
 80041aa:	f000 fa47 	bl	800463c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041ae:	2000      	movs	r0, #0
 80041b0:	f7ff fde0 	bl	8003d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041b4:	f7ff fc64 	bl	8003a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80041b8:	2000      	movs	r0, #0
 80041ba:	bd08      	pop	{r3, pc}
 80041bc:	40023c00 	.word	0x40023c00

080041c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80041c0:	4a03      	ldr	r2, [pc, #12]	; (80041d0 <HAL_IncTick+0x10>)
 80041c2:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <HAL_IncTick+0x14>)
 80041c4:	6811      	ldr	r1, [r2, #0]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	440b      	add	r3, r1
 80041ca:	6013      	str	r3, [r2, #0]
}
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	20001d00 	.word	0x20001d00
 80041d4:	20000568 	.word	0x20000568

080041d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80041d8:	4b01      	ldr	r3, [pc, #4]	; (80041e0 <HAL_GetTick+0x8>)
 80041da:	6818      	ldr	r0, [r3, #0]
}
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	20001d00 	.word	0x20001d00

080041e4 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80041e4:	2800      	cmp	r0, #0
 80041e6:	f000 809e 	beq.w	8004326 <HAL_ADC_Init+0x142>
{
 80041ea:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80041ec:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80041ee:	4604      	mov	r4, r0
 80041f0:	b13d      	cbz	r5, 8004202 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80041f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041f4:	06db      	lsls	r3, r3, #27
 80041f6:	d50c      	bpl.n	8004212 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80041f8:	2300      	movs	r3, #0
 80041fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 80041fe:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8004200:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8004202:	f7ff fc5d 	bl	8003ac0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004206:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004208:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 800420a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800420e:	06db      	lsls	r3, r3, #27
 8004210:	d4f2      	bmi.n	80041f8 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8004212:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004214:	4a47      	ldr	r2, [pc, #284]	; (8004334 <HAL_ADC_Init+0x150>)
    ADC_STATE_CLR_SET(hadc->State,
 8004216:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800421a:	f023 0302 	bic.w	r3, r3, #2
 800421e:	f043 0302 	orr.w	r3, r3, #2
 8004222:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004224:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004226:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004228:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 800422c:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800422e:	6851      	ldr	r1, [r2, #4]
 8004230:	6860      	ldr	r0, [r4, #4]
 8004232:	4301      	orrs	r1, r0
 8004234:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004236:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004238:	6920      	ldr	r0, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800423a:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800423c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004240:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004248:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800424a:	685a      	ldr	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800424c:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800424e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004252:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	430a      	orrs	r2, r1
 8004258:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800425a:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800425c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800425e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004262:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	4302      	orrs	r2, r0
 8004268:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800426a:	4a33      	ldr	r2, [pc, #204]	; (8004338 <HAL_ADC_Init+0x154>)
 800426c:	4291      	cmp	r1, r2
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800426e:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004270:	d051      	beq.n	8004316 <HAL_ADC_Init+0x132>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004272:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004276:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004278:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	4311      	orrs	r1, r2
 800427e:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004286:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	4302      	orrs	r2, r0
 800428c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	f022 0202 	bic.w	r2, r2, #2
 8004294:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	7e21      	ldrb	r1, [r4, #24]
 800429a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800429e:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80042a0:	f894 2020 	ldrb.w	r2, [r4, #32]
 80042a4:	2a00      	cmp	r2, #0
 80042a6:	d040      	beq.n	800432a <HAL_ADC_Init+0x146>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80042a8:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80042ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042b0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80042b8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	3901      	subs	r1, #1
 80042be:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80042c2:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042c6:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042c8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80042cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d0:	3901      	subs	r1, #1
 80042d2:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80042d6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80042d8:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80042da:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80042dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80042e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 80042e8:	ea42 2240 	orr.w	r2, r2, r0, lsl #9
 80042ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80042f6:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80042f8:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80042fa:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80042fe:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004300:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8004302:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004304:	f023 0303 	bic.w	r3, r3, #3
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800430e:	2300      	movs	r3, #0
 8004310:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004314:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004316:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800431a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004322:	609a      	str	r2, [r3, #8]
 8004324:	e7b3      	b.n	800428e <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8004326:	2001      	movs	r0, #1
}
 8004328:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004330:	605a      	str	r2, [r3, #4]
 8004332:	e7c7      	b.n	80042c4 <HAL_ADC_Init+0xe0>
 8004334:	40012300 	.word	0x40012300
 8004338:	0f000001 	.word	0x0f000001

0800433c <HAL_ADC_ConfigChannel>:
{
 800433c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 800433e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004342:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8004344:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004346:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8004348:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800434a:	f000 809b 	beq.w	8004484 <HAL_ADC_ConfigChannel+0x148>
 800434e:	2301      	movs	r3, #1
 8004350:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004354:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004356:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004358:	2c09      	cmp	r4, #9
 800435a:	d82c      	bhi.n	80043b6 <HAL_ADC_ConfigChannel+0x7a>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800435c:	691a      	ldr	r2, [r3, #16]
 800435e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8004362:	f04f 0c07 	mov.w	ip, #7
 8004366:	fa0c fc05 	lsl.w	ip, ip, r5
 800436a:	ea22 020c 	bic.w	r2, r2, ip
 800436e:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004370:	688a      	ldr	r2, [r1, #8]
 8004372:	40aa      	lsls	r2, r5
 8004374:	691d      	ldr	r5, [r3, #16]
 8004376:	432a      	orrs	r2, r5
 8004378:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 800437a:	684a      	ldr	r2, [r1, #4]
 800437c:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800437e:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 8004380:	d82f      	bhi.n	80043e2 <HAL_ADC_ConfigChannel+0xa6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004382:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004386:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004388:	3a05      	subs	r2, #5
 800438a:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800438e:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004392:	fa0e f202 	lsl.w	r2, lr, r2
 8004396:	ea21 0202 	bic.w	r2, r1, r2
 800439a:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800439c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800439e:	ea4c 0202 	orr.w	r2, ip, r2
 80043a2:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80043a4:	4a39      	ldr	r2, [pc, #228]	; (800448c <HAL_ADC_ConfigChannel+0x150>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d030      	beq.n	800440c <HAL_ADC_ConfigChannel+0xd0>
  __HAL_UNLOCK(hadc);
 80043aa:	2300      	movs	r3, #0
 80043ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80043b0:	4618      	mov	r0, r3
}
 80043b2:	b003      	add	sp, #12
 80043b4:	bd30      	pop	{r4, r5, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80043b6:	fa1f fc84 	uxth.w	ip, r4
 80043ba:	eb0c 0e4c 	add.w	lr, ip, ip, lsl #1
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	f1ae 0e1e 	sub.w	lr, lr, #30
 80043c4:	2507      	movs	r5, #7
 80043c6:	fa05 f50e 	lsl.w	r5, r5, lr
 80043ca:	ea22 0205 	bic.w	r2, r2, r5
 80043ce:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80043d0:	688a      	ldr	r2, [r1, #8]
 80043d2:	68dd      	ldr	r5, [r3, #12]
 80043d4:	fa02 f20e 	lsl.w	r2, r2, lr
 80043d8:	432a      	orrs	r2, r5
 80043da:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 80043dc:	684a      	ldr	r2, [r1, #4]
 80043de:	2a06      	cmp	r2, #6
 80043e0:	d9cf      	bls.n	8004382 <HAL_ADC_ConfigChannel+0x46>
  else if (sConfig->Rank < 13U)
 80043e2:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80043e4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 80043e8:	d836      	bhi.n	8004458 <HAL_ADC_ConfigChannel+0x11c>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80043ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043ec:	3a23      	subs	r2, #35	; 0x23
 80043ee:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80043f0:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80043f4:	fa05 f202 	lsl.w	r2, r5, r2
 80043f8:	ea21 0202 	bic.w	r2, r1, r2
 80043fc:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80043fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004400:	ea4c 0202 	orr.w	r2, ip, r2
 8004404:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004406:	4a21      	ldr	r2, [pc, #132]	; (800448c <HAL_ADC_ConfigChannel+0x150>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d1ce      	bne.n	80043aa <HAL_ADC_ConfigChannel+0x6e>
 800440c:	2c12      	cmp	r4, #18
 800440e:	d032      	beq.n	8004476 <HAL_ADC_ConfigChannel+0x13a>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004410:	f1a4 0310 	sub.w	r3, r4, #16
 8004414:	2b01      	cmp	r3, #1
 8004416:	d8c8      	bhi.n	80043aa <HAL_ADC_ConfigChannel+0x6e>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004418:	4a1d      	ldr	r2, [pc, #116]	; (8004490 <HAL_ADC_ConfigChannel+0x154>)
 800441a:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800441c:	2c10      	cmp	r4, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800441e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004422:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004424:	d1c1      	bne.n	80043aa <HAL_ADC_ConfigChannel+0x6e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004426:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <HAL_ADC_ConfigChannel+0x158>)
 8004428:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8004432:	f202 3283 	addw	r2, r2, #899	; 0x383
 8004436:	fba2 2303 	umull	r2, r3, r2, r3
 800443a:	0c9b      	lsrs	r3, r3, #18
 800443c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8004444:	9b01      	ldr	r3, [sp, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0af      	beq.n	80043aa <HAL_ADC_ConfigChannel+0x6e>
        counter--;
 800444a:	9b01      	ldr	r3, [sp, #4]
 800444c:	3b01      	subs	r3, #1
 800444e:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8004450:	9b01      	ldr	r3, [sp, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f9      	bne.n	800444a <HAL_ADC_ConfigChannel+0x10e>
 8004456:	e7a8      	b.n	80043aa <HAL_ADC_ConfigChannel+0x6e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004458:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800445a:	3a41      	subs	r2, #65	; 0x41
 800445c:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800445e:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004462:	fa05 f202 	lsl.w	r2, r5, r2
 8004466:	ea21 0202 	bic.w	r2, r1, r2
 800446a:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800446c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446e:	ea4c 0202 	orr.w	r2, ip, r2
 8004472:	62da      	str	r2, [r3, #44]	; 0x2c
 8004474:	e796      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x68>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004476:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 800447a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800447e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004482:	e792      	b.n	80043aa <HAL_ADC_ConfigChannel+0x6e>
  __HAL_LOCK(hadc);
 8004484:	2002      	movs	r0, #2
}
 8004486:	b003      	add	sp, #12
 8004488:	bd30      	pop	{r4, r5, pc}
 800448a:	bf00      	nop
 800448c:	40012000 	.word	0x40012000
 8004490:	40012300 	.word	0x40012300
 8004494:	20000564 	.word	0x20000564

08004498 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8004498:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800449a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800449e:	698e      	ldr	r6, [r1, #24]
  __HAL_LOCK(hadc);
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	f000 80c3 	beq.w	800462c <HAL_ADCEx_InjectedConfigChannel+0x194>
 80044a6:	2301      	movs	r3, #1
 80044a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80044ac:	680d      	ldr	r5, [r1, #0]
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80044ae:	6803      	ldr	r3, [r0, #0]
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80044b0:	2d09      	cmp	r5, #9
 80044b2:	d864      	bhi.n	800457e <HAL_ADCEx_InjectedConfigChannel+0xe6>
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80044b4:	691a      	ldr	r2, [r3, #16]
 80044b6:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80044ba:	2407      	movs	r4, #7
 80044bc:	40bc      	lsls	r4, r7
 80044be:	ea22 0204 	bic.w	r2, r2, r4
 80044c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80044c4:	688a      	ldr	r2, [r1, #8]
 80044c6:	691c      	ldr	r4, [r3, #16]
 80044c8:	40ba      	lsls	r2, r7
 80044ca:	4322      	orrs	r2, r4
 80044cc:	611a      	str	r2, [r3, #16]
 80044ce:	46ac      	mov	ip, r5
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80044d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80044d2:	690f      	ldr	r7, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80044d4:	684c      	ldr	r4, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80044d6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80044da:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80044dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044de:	f107 3eff 	add.w	lr, r7, #4294967295
 80044e2:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
 80044e6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80044e8:	1ce2      	adds	r2, r4, #3
 80044ea:	1bd2      	subs	r2, r2, r7
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80044f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80044f4:	f04f 0e1f 	mov.w	lr, #31
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80044f8:	fa0c fc02 	lsl.w	ip, ip, r2
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80044fc:	fa0e f202 	lsl.w	r2, lr, r2
 8004500:	ea27 0202 	bic.w	r2, r7, r2
 8004504:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004508:	ea4c 0202 	orr.w	r2, ip, r2
 800450c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800450e:	4a48      	ldr	r2, [pc, #288]	; (8004630 <HAL_ADCEx_InjectedConfigChannel+0x198>)
 8004510:	4296      	cmp	r6, r2
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8004518:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800451a:	689a      	ldr	r2, [r3, #8]
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800451c:	d065      	beq.n	80045ea <HAL_ADCEx_InjectedConfigChannel+0x152>
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800451e:	4316      	orrs	r6, r2
 8004520:	609e      	str	r6, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004522:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8004524:	69ce      	ldr	r6, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004526:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800452a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	4332      	orrs	r2, r6
 8004530:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8004532:	7d4a      	ldrb	r2, [r1, #21]
 8004534:	2a00      	cmp	r2, #0
 8004536:	d033      	beq.n	80045a0 <HAL_ADCEx_InjectedConfigChannel+0x108>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800453e:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8004540:	7d0a      	ldrb	r2, [r1, #20]
 8004542:	2a00      	cmp	r2, #0
 8004544:	d033      	beq.n	80045ae <HAL_ADCEx_InjectedConfigChannel+0x116>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8004546:	685a      	ldr	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 8004548:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800454a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800454e:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8004550:	d033      	beq.n	80045ba <HAL_ADCEx_InjectedConfigChannel+0x122>
 8004552:	2c03      	cmp	r4, #3
 8004554:	d058      	beq.n	8004608 <HAL_ADCEx_InjectedConfigChannel+0x170>
 8004556:	2c01      	cmp	r4, #1
 8004558:	d04b      	beq.n	80045f2 <HAL_ADCEx_InjectedConfigChannel+0x15a>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800455a:	6a1a      	ldr	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800455c:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800455e:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8004562:	f022 020f 	bic.w	r2, r2, #15
 8004566:	621a      	str	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8004568:	6a1a      	ldr	r2, [r3, #32]
 800456a:	430a      	orrs	r2, r1
 800456c:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800456e:	4a31      	ldr	r2, [pc, #196]	; (8004634 <HAL_ADCEx_InjectedConfigChannel+0x19c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d02f      	beq.n	80045d4 <HAL_ADCEx_InjectedConfigChannel+0x13c>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004574:	2300      	movs	r3, #0
 8004576:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800457a:	4618      	mov	r0, r3
}
 800457c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800457e:	fa1f fc85 	uxth.w	ip, r5
 8004582:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 8004586:	68da      	ldr	r2, [r3, #12]
 8004588:	3c1e      	subs	r4, #30
 800458a:	2707      	movs	r7, #7
 800458c:	40a7      	lsls	r7, r4
 800458e:	ea22 0207 	bic.w	r2, r2, r7
 8004592:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004594:	688a      	ldr	r2, [r1, #8]
 8004596:	40a2      	lsls	r2, r4
 8004598:	68dc      	ldr	r4, [r3, #12]
 800459a:	4322      	orrs	r2, r4
 800459c:	60da      	str	r2, [r3, #12]
 800459e:	e797      	b.n	80044d0 <HAL_ADCEx_InjectedConfigChannel+0x38>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a6:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80045a8:	7d0a      	ldrb	r2, [r1, #20]
 80045aa:	2a00      	cmp	r2, #0
 80045ac:	d1cb      	bne.n	8004546 <HAL_ADCEx_InjectedConfigChannel+0xae>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80045ae:	685a      	ldr	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 80045b0:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80045b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045b6:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 80045b8:	d1cb      	bne.n	8004552 <HAL_ADCEx_InjectedConfigChannel+0xba>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80045ba:	699a      	ldr	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80045bc:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80045be:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80045c2:	f022 020f 	bic.w	r2, r2, #15
 80045c6:	619a      	str	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80045c8:	699a      	ldr	r2, [r3, #24]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80045ce:	4a19      	ldr	r2, [pc, #100]	; (8004634 <HAL_ADCEx_InjectedConfigChannel+0x19c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d1cf      	bne.n	8004574 <HAL_ADCEx_InjectedConfigChannel+0xdc>
 80045d4:	2d12      	cmp	r5, #18
 80045d6:	d022      	beq.n	800461e <HAL_ADCEx_InjectedConfigChannel+0x186>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80045d8:	3d10      	subs	r5, #16
 80045da:	2d01      	cmp	r5, #1
 80045dc:	d8ca      	bhi.n	8004574 <HAL_ADCEx_InjectedConfigChannel+0xdc>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80045de:	4a16      	ldr	r2, [pc, #88]	; (8004638 <HAL_ADCEx_InjectedConfigChannel+0x1a0>)
 80045e0:	6853      	ldr	r3, [r2, #4]
 80045e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045e6:	6053      	str	r3, [r2, #4]
 80045e8:	e7c4      	b.n	8004574 <HAL_ADCEx_InjectedConfigChannel+0xdc>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80045ea:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80045ee:	609a      	str	r2, [r3, #8]
 80045f0:	e79f      	b.n	8004532 <HAL_ADCEx_InjectedConfigChannel+0x9a>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80045f2:	695a      	ldr	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80045f4:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80045f6:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80045fa:	f022 020f 	bic.w	r2, r2, #15
 80045fe:	615a      	str	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004600:	695a      	ldr	r2, [r3, #20]
 8004602:	430a      	orrs	r2, r1
 8004604:	615a      	str	r2, [r3, #20]
      break;
 8004606:	e7b2      	b.n	800456e <HAL_ADCEx_InjectedConfigChannel+0xd6>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8004608:	69da      	ldr	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800460a:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800460c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8004610:	f022 020f 	bic.w	r2, r2, #15
 8004614:	61da      	str	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	430a      	orrs	r2, r1
 800461a:	61da      	str	r2, [r3, #28]
      break;
 800461c:	e7a7      	b.n	800456e <HAL_ADCEx_InjectedConfigChannel+0xd6>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800461e:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8004622:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004626:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800462a:	e7a3      	b.n	8004574 <HAL_ADCEx_InjectedConfigChannel+0xdc>
  __HAL_LOCK(hadc);
 800462c:	2002      	movs	r0, #2
}
 800462e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004630:	000f0001 	.word	0x000f0001
 8004634:	40012000 	.word	0x40012000
 8004638:	40012300 	.word	0x40012300

0800463c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800463c:	4907      	ldr	r1, [pc, #28]	; (800465c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800463e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004640:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004642:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004646:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800464a:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800464c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800464e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004656:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	e000ed00 	.word	0xe000ed00

08004660 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004660:	4b1c      	ldr	r3, [pc, #112]	; (80046d4 <HAL_NVIC_SetPriority+0x74>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004668:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800466a:	f1c3 0e07 	rsb	lr, r3, #7
 800466e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004672:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004676:	bf28      	it	cs
 8004678:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800467c:	f1bc 0f06 	cmp.w	ip, #6
 8004680:	d91b      	bls.n	80046ba <HAL_NVIC_SetPriority+0x5a>
 8004682:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004684:	f04f 3cff 	mov.w	ip, #4294967295
 8004688:	fa0c fc03 	lsl.w	ip, ip, r3
 800468c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004690:	f04f 3cff 	mov.w	ip, #4294967295
 8004694:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004698:	ea21 010c 	bic.w	r1, r1, ip
 800469c:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800469e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046a0:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80046a4:	db0c      	blt.n	80046c0 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80046aa:	0109      	lsls	r1, r1, #4
 80046ac:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80046b0:	b2c9      	uxtb	r1, r1
 80046b2:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80046b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80046ba:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046bc:	4613      	mov	r3, r2
 80046be:	e7e7      	b.n	8004690 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c0:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <HAL_NVIC_SetPriority+0x78>)
 80046c2:	f000 000f 	and.w	r0, r0, #15
 80046c6:	0109      	lsls	r1, r1, #4
 80046c8:	4403      	add	r3, r0
 80046ca:	b2c9      	uxtb	r1, r1
 80046cc:	7619      	strb	r1, [r3, #24]
 80046ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80046d2:	bf00      	nop
 80046d4:	e000ed00 	.word	0xe000ed00
 80046d8:	e000ecfc 	.word	0xe000ecfc

080046dc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80046dc:	2800      	cmp	r0, #0
 80046de:	db07      	blt.n	80046f0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046e0:	0941      	lsrs	r1, r0, #5
 80046e2:	4a04      	ldr	r2, [pc, #16]	; (80046f4 <HAL_NVIC_EnableIRQ+0x18>)
 80046e4:	f000 001f 	and.w	r0, r0, #31
 80046e8:	2301      	movs	r3, #1
 80046ea:	4083      	lsls	r3, r0
 80046ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	e000e100 	.word	0xe000e100

080046f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046f8:	3801      	subs	r0, #1
 80046fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80046fe:	d210      	bcs.n	8004722 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004700:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004702:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004706:	4c08      	ldr	r4, [pc, #32]	; (8004728 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004708:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800470a:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800470e:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004712:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004714:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004716:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004718:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800471a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800471e:	6119      	str	r1, [r3, #16]
 8004720:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004722:	2001      	movs	r0, #1
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	e000ed00 	.word	0xe000ed00

0800472c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800472c:	b538      	push	{r3, r4, r5, lr}
 800472e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8004730:	f7ff fd52 	bl	80041d8 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004734:	2c00      	cmp	r4, #0
 8004736:	d052      	beq.n	80047de <HAL_DMA_Init+0xb2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004738:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 800473a:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 800473c:	2102      	movs	r1, #2
 800473e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8004742:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	f022 0201 	bic.w	r2, r2, #1
 800474c:	4605      	mov	r5, r0
 800474e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004750:	e005      	b.n	800475e <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004752:	f7ff fd41 	bl	80041d8 <HAL_GetTick>
 8004756:	1b43      	subs	r3, r0, r5
 8004758:	2b05      	cmp	r3, #5
 800475a:	d839      	bhi.n	80047d0 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800475c:	6823      	ldr	r3, [r4, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	07d1      	lsls	r1, r2, #31
 8004762:	d4f6      	bmi.n	8004752 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004764:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8004768:	68e1      	ldr	r1, [r4, #12]
 800476a:	4302      	orrs	r2, r0
 800476c:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800476e:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004772:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004774:	432a      	orrs	r2, r5
 8004776:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004778:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 800477a:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800477c:	4302      	orrs	r2, r0
 800477e:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004780:	4933      	ldr	r1, [pc, #204]	; (8004850 <HAL_DMA_Init+0x124>)
 8004782:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8004784:	6a25      	ldr	r5, [r4, #32]
 8004786:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004788:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800478a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800478c:	2904      	cmp	r1, #4
 800478e:	d028      	beq.n	80047e2 <HAL_DMA_Init+0xb6>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004790:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004792:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004794:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004798:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800479a:	b2d8      	uxtb	r0, r3
 800479c:	4a2d      	ldr	r2, [pc, #180]	; (8004854 <HAL_DMA_Init+0x128>)
  hdma->Instance->FCR = tmp;
 800479e:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047a0:	3810      	subs	r0, #16
 80047a2:	fba2 5200 	umull	r5, r2, r2, r0
 80047a6:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047a8:	492b      	ldr	r1, [pc, #172]	; (8004858 <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80047aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047ae:	5c89      	ldrb	r1, [r1, r2]
 80047b0:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80047b2:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 80047b6:	285f      	cmp	r0, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80047b8:	bf88      	it	hi
 80047ba:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047bc:	223f      	movs	r2, #63	; 0x3f
 80047be:	408a      	lsls	r2, r1
 80047c0:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047c2:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047c4:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 80047c6:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047c8:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80047ca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80047ce:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047d2:	2220      	movs	r2, #32
 80047d4:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047d6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 80047da:	4618      	mov	r0, r3
}
 80047dc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80047de:	2001      	movs	r0, #1
}
 80047e0:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047e2:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 80047e6:	4329      	orrs	r1, r5
 80047e8:	4311      	orrs	r1, r2
  hdma->Instance->CR = tmp;  
 80047ea:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 80047ec:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 80047ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047f0:	f021 0107 	bic.w	r1, r1, #7
 80047f4:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 80047f6:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047fa:	2d00      	cmp	r5, #0
 80047fc:	d0cd      	beq.n	800479a <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047fe:	b178      	cbz	r0, 8004820 <HAL_DMA_Init+0xf4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004800:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8004804:	d016      	beq.n	8004834 <HAL_DMA_Init+0x108>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004806:	2a02      	cmp	r2, #2
 8004808:	d903      	bls.n	8004812 <HAL_DMA_Init+0xe6>
 800480a:	2a03      	cmp	r2, #3
 800480c:	d1c5      	bne.n	800479a <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800480e:	01ea      	lsls	r2, r5, #7
 8004810:	d5c3      	bpl.n	800479a <HAL_DMA_Init+0x6e>
        hdma->State = HAL_DMA_STATE_READY;
 8004812:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004814:	2240      	movs	r2, #64	; 0x40
 8004816:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004818:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800481c:	4618      	mov	r0, r3
}
 800481e:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8004820:	2a01      	cmp	r2, #1
 8004822:	d003      	beq.n	800482c <HAL_DMA_Init+0x100>
 8004824:	f032 0202 	bics.w	r2, r2, #2
 8004828:	d1b7      	bne.n	800479a <HAL_DMA_Init+0x6e>
 800482a:	e7f0      	b.n	800480e <HAL_DMA_Init+0xe2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800482c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8004830:	d1b3      	bne.n	800479a <HAL_DMA_Init+0x6e>
 8004832:	e7ee      	b.n	8004812 <HAL_DMA_Init+0xe6>
    switch (tmp)
 8004834:	2a03      	cmp	r2, #3
 8004836:	d8b0      	bhi.n	800479a <HAL_DMA_Init+0x6e>
 8004838:	a001      	add	r0, pc, #4	; (adr r0, 8004840 <HAL_DMA_Init+0x114>)
 800483a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800483e:	bf00      	nop
 8004840:	08004813 	.word	0x08004813
 8004844:	0800480f 	.word	0x0800480f
 8004848:	08004813 	.word	0x08004813
 800484c:	0800482d 	.word	0x0800482d
 8004850:	f010803f 	.word	0xf010803f
 8004854:	aaaaaaab 	.word	0xaaaaaaab
 8004858:	08008fd0 	.word	0x08008fd0

0800485c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800485c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004860:	2200      	movs	r2, #0
 8004862:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004864:	4e71      	ldr	r6, [pc, #452]	; (8004a2c <HAL_GPIO_Init+0x1d0>)
{
 8004866:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004868:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 800486a:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800486e:	4689      	mov	r9, r1
 8004870:	e004      	b.n	800487c <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004872:	3301      	adds	r3, #1
 8004874:	2b10      	cmp	r3, #16
 8004876:	f102 0202 	add.w	r2, r2, #2
 800487a:	d079      	beq.n	8004970 <HAL_GPIO_Init+0x114>
    ioposition = 0x01U << position;
 800487c:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004880:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8004884:	43a1      	bics	r1, r4
 8004886:	d1f4      	bne.n	8004872 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004888:	f8d9 c004 	ldr.w	ip, [r9, #4]
 800488c:	f00c 0103 	and.w	r1, ip, #3
 8004890:	1e4d      	subs	r5, r1, #1
 8004892:	2d01      	cmp	r5, #1
 8004894:	d96f      	bls.n	8004976 <HAL_GPIO_Init+0x11a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004896:	2903      	cmp	r1, #3
 8004898:	f040 80b0 	bne.w	80049fc <HAL_GPIO_Init+0x1a0>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800489c:	4091      	lsls	r1, r2
 800489e:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 80048a0:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048a2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048a4:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048a6:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 80048aa:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048ac:	d0e1      	beq.n	8004872 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ae:	4d60      	ldr	r5, [pc, #384]	; (8004a30 <HAL_GPIO_Init+0x1d4>)
 80048b0:	2100      	movs	r1, #0
 80048b2:	9103      	str	r1, [sp, #12]
 80048b4:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80048b6:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80048ba:	6469      	str	r1, [r5, #68]	; 0x44
 80048bc:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80048be:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80048c2:	9103      	str	r1, [sp, #12]
 80048c4:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80048c6:	f023 0103 	bic.w	r1, r3, #3
 80048ca:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80048ce:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048d2:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80048d6:	688d      	ldr	r5, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048d8:	00bf      	lsls	r7, r7, #2
 80048da:	f04f 0e0f 	mov.w	lr, #15
 80048de:	fa0e fe07 	lsl.w	lr, lr, r7
 80048e2:	ea25 080e 	bic.w	r8, r5, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048e6:	4d53      	ldr	r5, [pc, #332]	; (8004a34 <HAL_GPIO_Init+0x1d8>)
 80048e8:	42a8      	cmp	r0, r5
 80048ea:	d017      	beq.n	800491c <HAL_GPIO_Init+0xc0>
 80048ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80048f0:	42a8      	cmp	r0, r5
 80048f2:	f000 8087 	beq.w	8004a04 <HAL_GPIO_Init+0x1a8>
 80048f6:	4d50      	ldr	r5, [pc, #320]	; (8004a38 <HAL_GPIO_Init+0x1dc>)
 80048f8:	42a8      	cmp	r0, r5
 80048fa:	f000 8088 	beq.w	8004a0e <HAL_GPIO_Init+0x1b2>
 80048fe:	4d4f      	ldr	r5, [pc, #316]	; (8004a3c <HAL_GPIO_Init+0x1e0>)
 8004900:	42a8      	cmp	r0, r5
 8004902:	f000 808b 	beq.w	8004a1c <HAL_GPIO_Init+0x1c0>
 8004906:	4d4e      	ldr	r5, [pc, #312]	; (8004a40 <HAL_GPIO_Init+0x1e4>)
 8004908:	42a8      	cmp	r0, r5
 800490a:	bf0c      	ite	eq
 800490c:	f04f 0e04 	moveq.w	lr, #4
 8004910:	f04f 0e07 	movne.w	lr, #7
 8004914:	fa0e f707 	lsl.w	r7, lr, r7
 8004918:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800491c:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8004920:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8004922:	ea6f 050b 	mvn.w	r5, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004926:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800492a:	bf0c      	ite	eq
 800492c:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 800492e:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8004932:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8004934:	68f1      	ldr	r1, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004936:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 800493a:	bf0c      	ite	eq
 800493c:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 800493e:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->FTSR = temp;
 8004942:	60f1      	str	r1, [r6, #12]

        temp = EXTI->EMR;
 8004944:	6871      	ldr	r1, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004946:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800494a:	bf0c      	ite	eq
 800494c:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 800494e:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->EMR = temp;
 8004952:	6071      	str	r1, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004954:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004956:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 800495a:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 800495e:	bf0c      	ite	eq
 8004960:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 8004962:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004966:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 8004968:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800496a:	f102 0202 	add.w	r2, r2, #2
 800496e:	d185      	bne.n	800487c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004970:	b005      	add	sp, #20
 8004972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004976:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 800497a:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800497e:	fa05 f702 	lsl.w	r7, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004982:	2503      	movs	r5, #3
 8004984:	fa05 f802 	lsl.w	r8, r5, r2
 8004988:	ea2e 0e08 	bic.w	lr, lr, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 800498c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8004990:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004992:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004994:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004998:	f3cc 1700 	ubfx	r7, ip, #4, #1
 800499c:	409f      	lsls	r7, r3
 800499e:	ea47 070e 	orr.w	r7, r7, lr
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049a2:	ea6f 0508 	mvn.w	r5, r8
        GPIOx->OTYPER = temp;
 80049a6:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80049a8:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049aa:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049ae:	f8d9 7008 	ldr.w	r7, [r9, #8]
 80049b2:	4097      	lsls	r7, r2
 80049b4:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049b8:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 80049ba:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049bc:	fa01 f102 	lsl.w	r1, r1, r2
 80049c0:	f47f af6e 	bne.w	80048a0 <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 80049c4:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80049c8:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049cc:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80049d0:	f8de 7020 	ldr.w	r7, [lr, #32]
 80049d4:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049d6:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049da:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049de:	fa07 f708 	lsl.w	r7, r7, r8
 80049e2:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049e4:	270f      	movs	r7, #15
 80049e6:	fa07 f808 	lsl.w	r8, r7, r8
 80049ea:	9f00      	ldr	r7, [sp, #0]
 80049ec:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049f0:	9f01      	ldr	r7, [sp, #4]
 80049f2:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 80049f6:	f8ce 7020 	str.w	r7, [lr, #32]
 80049fa:	e751      	b.n	80048a0 <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049fc:	2503      	movs	r5, #3
 80049fe:	4095      	lsls	r5, r2
 8004a00:	43ed      	mvns	r5, r5
 8004a02:	e7d1      	b.n	80049a8 <HAL_GPIO_Init+0x14c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a04:	fa0a f707 	lsl.w	r7, sl, r7
 8004a08:	ea48 0807 	orr.w	r8, r8, r7
 8004a0c:	e786      	b.n	800491c <HAL_GPIO_Init+0xc0>
 8004a0e:	f04f 0e02 	mov.w	lr, #2
 8004a12:	fa0e f707 	lsl.w	r7, lr, r7
 8004a16:	ea48 0807 	orr.w	r8, r8, r7
 8004a1a:	e77f      	b.n	800491c <HAL_GPIO_Init+0xc0>
 8004a1c:	f04f 0e03 	mov.w	lr, #3
 8004a20:	fa0e f707 	lsl.w	r7, lr, r7
 8004a24:	ea48 0807 	orr.w	r8, r8, r7
 8004a28:	e778      	b.n	800491c <HAL_GPIO_Init+0xc0>
 8004a2a:	bf00      	nop
 8004a2c:	40013c00 	.word	0x40013c00
 8004a30:	40023800 	.word	0x40023800
 8004a34:	40020000 	.word	0x40020000
 8004a38:	40020800 	.word	0x40020800
 8004a3c:	40020c00 	.word	0x40020c00
 8004a40:	40021000 	.word	0x40021000

08004a44 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a44:	b902      	cbnz	r2, 8004a48 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a46:	0409      	lsls	r1, r1, #16
 8004a48:	6181      	str	r1, [r0, #24]
  }
}
 8004a4a:	4770      	bx	lr

08004a4c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	f000 81a2 	beq.w	8004d96 <HAL_RCC_OscConfig+0x34a>
{
 8004a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a56:	6803      	ldr	r3, [r0, #0]
 8004a58:	07dd      	lsls	r5, r3, #31
{
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a5e:	d52f      	bpl.n	8004ac0 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a60:	499e      	ldr	r1, [pc, #632]	; (8004cdc <HAL_RCC_OscConfig+0x290>)
 8004a62:	688a      	ldr	r2, [r1, #8]
 8004a64:	f002 020c 	and.w	r2, r2, #12
 8004a68:	2a04      	cmp	r2, #4
 8004a6a:	f000 80ed 	beq.w	8004c48 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a6e:	688a      	ldr	r2, [r1, #8]
 8004a70:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a74:	2a08      	cmp	r2, #8
 8004a76:	f000 80e3 	beq.w	8004c40 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a7a:	6863      	ldr	r3, [r4, #4]
 8004a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a80:	f000 80ec 	beq.w	8004c5c <HAL_RCC_OscConfig+0x210>
 8004a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a88:	f000 8175 	beq.w	8004d76 <HAL_RCC_OscConfig+0x32a>
 8004a8c:	4d93      	ldr	r5, [pc, #588]	; (8004cdc <HAL_RCC_OscConfig+0x290>)
 8004a8e:	682a      	ldr	r2, [r5, #0]
 8004a90:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004a94:	602a      	str	r2, [r5, #0]
 8004a96:	682a      	ldr	r2, [r5, #0]
 8004a98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a9c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f040 80e1 	bne.w	8004c66 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa4:	f7ff fb98 	bl	80041d8 <HAL_GetTick>
 8004aa8:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aaa:	e005      	b.n	8004ab8 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aac:	f7ff fb94 	bl	80041d8 <HAL_GetTick>
 8004ab0:	1b80      	subs	r0, r0, r6
 8004ab2:	2864      	cmp	r0, #100	; 0x64
 8004ab4:	f200 8101 	bhi.w	8004cba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ab8:	682b      	ldr	r3, [r5, #0]
 8004aba:	039b      	lsls	r3, r3, #14
 8004abc:	d4f6      	bmi.n	8004aac <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	079f      	lsls	r7, r3, #30
 8004ac2:	d528      	bpl.n	8004b16 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ac4:	4a85      	ldr	r2, [pc, #532]	; (8004cdc <HAL_RCC_OscConfig+0x290>)
 8004ac6:	6891      	ldr	r1, [r2, #8]
 8004ac8:	f011 0f0c 	tst.w	r1, #12
 8004acc:	f000 8090 	beq.w	8004bf0 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ad0:	6891      	ldr	r1, [r2, #8]
 8004ad2:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ad6:	2908      	cmp	r1, #8
 8004ad8:	f000 8086 	beq.w	8004be8 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004adc:	68e3      	ldr	r3, [r4, #12]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 810e 	beq.w	8004d00 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ae4:	4b7e      	ldr	r3, [pc, #504]	; (8004ce0 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae6:	4e7d      	ldr	r6, [pc, #500]	; (8004cdc <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8004ae8:	2201      	movs	r2, #1
 8004aea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004aec:	f7ff fb74 	bl	80041d8 <HAL_GetTick>
 8004af0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004af2:	e005      	b.n	8004b00 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004af4:	f7ff fb70 	bl	80041d8 <HAL_GetTick>
 8004af8:	1b40      	subs	r0, r0, r5
 8004afa:	2802      	cmp	r0, #2
 8004afc:	f200 80dd 	bhi.w	8004cba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b00:	6833      	ldr	r3, [r6, #0]
 8004b02:	0798      	lsls	r0, r3, #30
 8004b04:	d5f6      	bpl.n	8004af4 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b06:	6833      	ldr	r3, [r6, #0]
 8004b08:	6922      	ldr	r2, [r4, #16]
 8004b0a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004b0e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004b12:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b14:	6823      	ldr	r3, [r4, #0]
 8004b16:	071a      	lsls	r2, r3, #28
 8004b18:	d451      	bmi.n	8004bbe <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b1a:	0758      	lsls	r0, r3, #29
 8004b1c:	d52f      	bpl.n	8004b7e <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b1e:	4a6f      	ldr	r2, [pc, #444]	; (8004cdc <HAL_RCC_OscConfig+0x290>)
 8004b20:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004b22:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8004b26:	d07f      	beq.n	8004c28 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8004b28:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b2a:	4e6e      	ldr	r6, [pc, #440]	; (8004ce4 <HAL_RCC_OscConfig+0x298>)
 8004b2c:	6833      	ldr	r3, [r6, #0]
 8004b2e:	05d9      	lsls	r1, r3, #23
 8004b30:	f140 80b3 	bpl.w	8004c9a <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b34:	68a3      	ldr	r3, [r4, #8]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	f000 80c3 	beq.w	8004cc2 <HAL_RCC_OscConfig+0x276>
 8004b3c:	2b05      	cmp	r3, #5
 8004b3e:	f000 812c 	beq.w	8004d9a <HAL_RCC_OscConfig+0x34e>
 8004b42:	4e66      	ldr	r6, [pc, #408]	; (8004cdc <HAL_RCC_OscConfig+0x290>)
 8004b44:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8004b46:	f022 0201 	bic.w	r2, r2, #1
 8004b4a:	6732      	str	r2, [r6, #112]	; 0x70
 8004b4c:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8004b4e:	f022 0204 	bic.w	r2, r2, #4
 8004b52:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f040 80b9 	bne.w	8004ccc <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b5a:	f7ff fb3d 	bl	80041d8 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b5e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004b62:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b64:	e005      	b.n	8004b72 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b66:	f7ff fb37 	bl	80041d8 <HAL_GetTick>
 8004b6a:	1bc0      	subs	r0, r0, r7
 8004b6c:	4540      	cmp	r0, r8
 8004b6e:	f200 80a4 	bhi.w	8004cba <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b72:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004b74:	0798      	lsls	r0, r3, #30
 8004b76:	d4f6      	bmi.n	8004b66 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b78:	2d00      	cmp	r5, #0
 8004b7a:	f040 8106 	bne.w	8004d8a <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b7e:	69a0      	ldr	r0, [r4, #24]
 8004b80:	b1c8      	cbz	r0, 8004bb6 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b82:	4d56      	ldr	r5, [pc, #344]	; (8004cdc <HAL_RCC_OscConfig+0x290>)
 8004b84:	68ab      	ldr	r3, [r5, #8]
 8004b86:	f003 030c 	and.w	r3, r3, #12
 8004b8a:	2b08      	cmp	r3, #8
 8004b8c:	f000 80c9 	beq.w	8004d22 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b90:	4b53      	ldr	r3, [pc, #332]	; (8004ce0 <HAL_RCC_OscConfig+0x294>)
 8004b92:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b94:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004b96:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b98:	f000 8109 	beq.w	8004dae <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7ff fb1c 	bl	80041d8 <HAL_GetTick>
 8004ba0:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ba2:	e005      	b.n	8004bb0 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ba4:	f7ff fb18 	bl	80041d8 <HAL_GetTick>
 8004ba8:	1b00      	subs	r0, r0, r4
 8004baa:	2802      	cmp	r0, #2
 8004bac:	f200 8085 	bhi.w	8004cba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bb0:	682b      	ldr	r3, [r5, #0]
 8004bb2:	019b      	lsls	r3, r3, #6
 8004bb4:	d4f6      	bmi.n	8004ba4 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004bb6:	2000      	movs	r0, #0
}
 8004bb8:	b002      	add	sp, #8
 8004bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bbe:	6963      	ldr	r3, [r4, #20]
 8004bc0:	b30b      	cbz	r3, 8004c06 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8004bc2:	4b47      	ldr	r3, [pc, #284]	; (8004ce0 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bc4:	4e45      	ldr	r6, [pc, #276]	; (8004cdc <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8004bcc:	f7ff fb04 	bl	80041d8 <HAL_GetTick>
 8004bd0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bd2:	e004      	b.n	8004bde <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bd4:	f7ff fb00 	bl	80041d8 <HAL_GetTick>
 8004bd8:	1b40      	subs	r0, r0, r5
 8004bda:	2802      	cmp	r0, #2
 8004bdc:	d86d      	bhi.n	8004cba <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bde:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004be0:	079b      	lsls	r3, r3, #30
 8004be2:	d5f7      	bpl.n	8004bd4 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	e798      	b.n	8004b1a <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004be8:	6852      	ldr	r2, [r2, #4]
 8004bea:	0256      	lsls	r6, r2, #9
 8004bec:	f53f af76 	bmi.w	8004adc <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bf0:	4a3a      	ldr	r2, [pc, #232]	; (8004cdc <HAL_RCC_OscConfig+0x290>)
 8004bf2:	6812      	ldr	r2, [r2, #0]
 8004bf4:	0795      	lsls	r5, r2, #30
 8004bf6:	d544      	bpl.n	8004c82 <HAL_RCC_OscConfig+0x236>
 8004bf8:	68e2      	ldr	r2, [r4, #12]
 8004bfa:	2a01      	cmp	r2, #1
 8004bfc:	d041      	beq.n	8004c82 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 8004bfe:	2001      	movs	r0, #1
}
 8004c00:	b002      	add	sp, #8
 8004c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004c06:	4a36      	ldr	r2, [pc, #216]	; (8004ce0 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c08:	4e34      	ldr	r6, [pc, #208]	; (8004cdc <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 8004c0a:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8004c0e:	f7ff fae3 	bl	80041d8 <HAL_GetTick>
 8004c12:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c14:	e004      	b.n	8004c20 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c16:	f7ff fadf 	bl	80041d8 <HAL_GetTick>
 8004c1a:	1b40      	subs	r0, r0, r5
 8004c1c:	2802      	cmp	r0, #2
 8004c1e:	d84c      	bhi.n	8004cba <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c20:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004c22:	079f      	lsls	r7, r3, #30
 8004c24:	d4f7      	bmi.n	8004c16 <HAL_RCC_OscConfig+0x1ca>
 8004c26:	e7dd      	b.n	8004be4 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c30:	6413      	str	r3, [r2, #64]	; 0x40
 8004c32:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004c3c:	2501      	movs	r5, #1
 8004c3e:	e774      	b.n	8004b2a <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c40:	684a      	ldr	r2, [r1, #4]
 8004c42:	0250      	lsls	r0, r2, #9
 8004c44:	f57f af19 	bpl.w	8004a7a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c48:	4a24      	ldr	r2, [pc, #144]	; (8004cdc <HAL_RCC_OscConfig+0x290>)
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	0391      	lsls	r1, r2, #14
 8004c4e:	f57f af37 	bpl.w	8004ac0 <HAL_RCC_OscConfig+0x74>
 8004c52:	6862      	ldr	r2, [r4, #4]
 8004c54:	2a00      	cmp	r2, #0
 8004c56:	f47f af33 	bne.w	8004ac0 <HAL_RCC_OscConfig+0x74>
 8004c5a:	e7d0      	b.n	8004bfe <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c5c:	4a1f      	ldr	r2, [pc, #124]	; (8004cdc <HAL_RCC_OscConfig+0x290>)
 8004c5e:	6813      	ldr	r3, [r2, #0]
 8004c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c64:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004c66:	f7ff fab7 	bl	80041d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c6a:	4e1c      	ldr	r6, [pc, #112]	; (8004cdc <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8004c6c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c6e:	e004      	b.n	8004c7a <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c70:	f7ff fab2 	bl	80041d8 <HAL_GetTick>
 8004c74:	1b40      	subs	r0, r0, r5
 8004c76:	2864      	cmp	r0, #100	; 0x64
 8004c78:	d81f      	bhi.n	8004cba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7a:	6833      	ldr	r3, [r6, #0]
 8004c7c:	039a      	lsls	r2, r3, #14
 8004c7e:	d5f7      	bpl.n	8004c70 <HAL_RCC_OscConfig+0x224>
 8004c80:	e71d      	b.n	8004abe <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c82:	4916      	ldr	r1, [pc, #88]	; (8004cdc <HAL_RCC_OscConfig+0x290>)
 8004c84:	6920      	ldr	r0, [r4, #16]
 8004c86:	680a      	ldr	r2, [r1, #0]
 8004c88:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004c8c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004c90:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c92:	071a      	lsls	r2, r3, #28
 8004c94:	f57f af41 	bpl.w	8004b1a <HAL_RCC_OscConfig+0xce>
 8004c98:	e791      	b.n	8004bbe <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c9a:	6833      	ldr	r3, [r6, #0]
 8004c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004ca2:	f7ff fa99 	bl	80041d8 <HAL_GetTick>
 8004ca6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca8:	6833      	ldr	r3, [r6, #0]
 8004caa:	05da      	lsls	r2, r3, #23
 8004cac:	f53f af42 	bmi.w	8004b34 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cb0:	f7ff fa92 	bl	80041d8 <HAL_GetTick>
 8004cb4:	1bc0      	subs	r0, r0, r7
 8004cb6:	2802      	cmp	r0, #2
 8004cb8:	d9f6      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8004cba:	2003      	movs	r0, #3
}
 8004cbc:	b002      	add	sp, #8
 8004cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cc2:	4a06      	ldr	r2, [pc, #24]	; (8004cdc <HAL_RCC_OscConfig+0x290>)
 8004cc4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004cc6:	f043 0301 	orr.w	r3, r3, #1
 8004cca:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004ccc:	f7ff fa84 	bl	80041d8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd0:	4f02      	ldr	r7, [pc, #8]	; (8004cdc <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8004cd2:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cd4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd8:	e00b      	b.n	8004cf2 <HAL_RCC_OscConfig+0x2a6>
 8004cda:	bf00      	nop
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	42470000 	.word	0x42470000
 8004ce4:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ce8:	f7ff fa76 	bl	80041d8 <HAL_GetTick>
 8004cec:	1b80      	subs	r0, r0, r6
 8004cee:	4540      	cmp	r0, r8
 8004cf0:	d8e3      	bhi.n	8004cba <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cf4:	079b      	lsls	r3, r3, #30
 8004cf6:	d5f7      	bpl.n	8004ce8 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8004cf8:	2d00      	cmp	r5, #0
 8004cfa:	f43f af40 	beq.w	8004b7e <HAL_RCC_OscConfig+0x132>
 8004cfe:	e044      	b.n	8004d8a <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 8004d00:	4a42      	ldr	r2, [pc, #264]	; (8004e0c <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d02:	4e43      	ldr	r6, [pc, #268]	; (8004e10 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8004d04:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004d06:	f7ff fa67 	bl	80041d8 <HAL_GetTick>
 8004d0a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d0c:	e004      	b.n	8004d18 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d0e:	f7ff fa63 	bl	80041d8 <HAL_GetTick>
 8004d12:	1b40      	subs	r0, r0, r5
 8004d14:	2802      	cmp	r0, #2
 8004d16:	d8d0      	bhi.n	8004cba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d18:	6833      	ldr	r3, [r6, #0]
 8004d1a:	0799      	lsls	r1, r3, #30
 8004d1c:	d4f7      	bmi.n	8004d0e <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	e6f9      	b.n	8004b16 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d22:	2801      	cmp	r0, #1
 8004d24:	f43f af48 	beq.w	8004bb8 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8004d28:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d2a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d2c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d30:	4291      	cmp	r1, r2
 8004d32:	f47f af64 	bne.w	8004bfe <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d36:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d38:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3c:	4291      	cmp	r1, r2
 8004d3e:	f47f af5e 	bne.w	8004bfe <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d42:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004d44:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8004d48:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d4a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004d4e:	f47f af56 	bne.w	8004bfe <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d52:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004d54:	0852      	lsrs	r2, r2, #1
 8004d56:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8004d5a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d5c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004d60:	f47f af4d 	bne.w	8004bfe <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004d66:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d6a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
    return HAL_ERROR;
 8004d6e:	bf14      	ite	ne
 8004d70:	2001      	movne	r0, #1
 8004d72:	2000      	moveq	r0, #0
 8004d74:	e720      	b.n	8004bb8 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d76:	4b26      	ldr	r3, [pc, #152]	; (8004e10 <HAL_RCC_OscConfig+0x3c4>)
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004d86:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d88:	e76d      	b.n	8004c66 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d8a:	4a21      	ldr	r2, [pc, #132]	; (8004e10 <HAL_RCC_OscConfig+0x3c4>)
 8004d8c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d92:	6413      	str	r3, [r2, #64]	; 0x40
 8004d94:	e6f3      	b.n	8004b7e <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8004d96:	2001      	movs	r0, #1
}
 8004d98:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d9a:	4b1d      	ldr	r3, [pc, #116]	; (8004e10 <HAL_RCC_OscConfig+0x3c4>)
 8004d9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d9e:	f042 0204 	orr.w	r2, r2, #4
 8004da2:	671a      	str	r2, [r3, #112]	; 0x70
 8004da4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004da6:	f042 0201 	orr.w	r2, r2, #1
 8004daa:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dac:	e78e      	b.n	8004ccc <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 8004dae:	f7ff fa13 	bl	80041d8 <HAL_GetTick>
 8004db2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004db4:	e005      	b.n	8004dc2 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004db6:	f7ff fa0f 	bl	80041d8 <HAL_GetTick>
 8004dba:	1b80      	subs	r0, r0, r6
 8004dbc:	2802      	cmp	r0, #2
 8004dbe:	f63f af7c 	bhi.w	8004cba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dc2:	682b      	ldr	r3, [r5, #0]
 8004dc4:	0199      	lsls	r1, r3, #6
 8004dc6:	d4f6      	bmi.n	8004db6 <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dc8:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8004dcc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004dce:	430b      	orrs	r3, r1
 8004dd0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004dd4:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8004dd8:	0852      	lsrs	r2, r2, #1
 8004dda:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004dde:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8004de0:	490a      	ldr	r1, [pc, #40]	; (8004e0c <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8004de6:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004de8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004dea:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004dec:	f7ff f9f4 	bl	80041d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df0:	4d07      	ldr	r5, [pc, #28]	; (8004e10 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8004df2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df4:	e005      	b.n	8004e02 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004df6:	f7ff f9ef 	bl	80041d8 <HAL_GetTick>
 8004dfa:	1b00      	subs	r0, r0, r4
 8004dfc:	2802      	cmp	r0, #2
 8004dfe:	f63f af5c 	bhi.w	8004cba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e02:	682b      	ldr	r3, [r5, #0]
 8004e04:	019a      	lsls	r2, r3, #6
 8004e06:	d5f6      	bpl.n	8004df6 <HAL_RCC_OscConfig+0x3aa>
 8004e08:	e6d5      	b.n	8004bb6 <HAL_RCC_OscConfig+0x16a>
 8004e0a:	bf00      	nop
 8004e0c:	42470000 	.word	0x42470000
 8004e10:	40023800 	.word	0x40023800

08004e14 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004e14:	4b01      	ldr	r3, [pc, #4]	; (8004e1c <HAL_RCC_EnableCSS+0x8>)
 8004e16:	2201      	movs	r2, #1
 8004e18:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8004e1a:	4770      	bx	lr
 8004e1c:	42470000 	.word	0x42470000

08004e20 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e20:	4916      	ldr	r1, [pc, #88]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8004e22:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e24:	688b      	ldr	r3, [r1, #8]
 8004e26:	f003 030c 	and.w	r3, r3, #12
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d01b      	beq.n	8004e66 <HAL_RCC_GetSysClockFreq+0x46>
 8004e2e:	2b08      	cmp	r3, #8
 8004e30:	d117      	bne.n	8004e62 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e32:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e34:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e36:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e38:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e3c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e40:	d113      	bne.n	8004e6a <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e42:	480f      	ldr	r0, [pc, #60]	; (8004e80 <HAL_RCC_GetSysClockFreq+0x60>)
 8004e44:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004e48:	fba1 0100 	umull	r0, r1, r1, r0
 8004e4c:	f7fb f9c8 	bl	80001e0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e50:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x5c>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004e58:	3301      	adds	r3, #1
 8004e5a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004e5c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004e60:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8004e62:	4807      	ldr	r0, [pc, #28]	; (8004e80 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8004e64:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e66:	4807      	ldr	r0, [pc, #28]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8004e68:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e6a:	4806      	ldr	r0, [pc, #24]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x64>)
 8004e6c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004e70:	2300      	movs	r3, #0
 8004e72:	fba1 0100 	umull	r0, r1, r1, r0
 8004e76:	f7fb f9b3 	bl	80001e0 <__aeabi_uldivmod>
 8004e7a:	e7e9      	b.n	8004e50 <HAL_RCC_GetSysClockFreq+0x30>
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	00f42400 	.word	0x00f42400
 8004e84:	007a1200 	.word	0x007a1200

08004e88 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	f000 8087 	beq.w	8004f9c <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e8e:	4a48      	ldr	r2, [pc, #288]	; (8004fb0 <HAL_RCC_ClockConfig+0x128>)
 8004e90:	6813      	ldr	r3, [r2, #0]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	428b      	cmp	r3, r1
{
 8004e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e9c:	460d      	mov	r5, r1
 8004e9e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ea0:	d209      	bcs.n	8004eb6 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea2:	b2cb      	uxtb	r3, r1
 8004ea4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea6:	6813      	ldr	r3, [r2, #0]
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	428b      	cmp	r3, r1
 8004eae:	d002      	beq.n	8004eb6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004eb0:	2001      	movs	r0, #1
}
 8004eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	0798      	lsls	r0, r3, #30
 8004eba:	d514      	bpl.n	8004ee6 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ebc:	0759      	lsls	r1, r3, #29
 8004ebe:	d504      	bpl.n	8004eca <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ec0:	493c      	ldr	r1, [pc, #240]	; (8004fb4 <HAL_RCC_ClockConfig+0x12c>)
 8004ec2:	688a      	ldr	r2, [r1, #8]
 8004ec4:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8004ec8:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eca:	071a      	lsls	r2, r3, #28
 8004ecc:	d504      	bpl.n	8004ed8 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ece:	4939      	ldr	r1, [pc, #228]	; (8004fb4 <HAL_RCC_ClockConfig+0x12c>)
 8004ed0:	688a      	ldr	r2, [r1, #8]
 8004ed2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8004ed6:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ed8:	4936      	ldr	r1, [pc, #216]	; (8004fb4 <HAL_RCC_ClockConfig+0x12c>)
 8004eda:	68a0      	ldr	r0, [r4, #8]
 8004edc:	688a      	ldr	r2, [r1, #8]
 8004ede:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004ee2:	4302      	orrs	r2, r0
 8004ee4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ee6:	07df      	lsls	r7, r3, #31
 8004ee8:	d521      	bpl.n	8004f2e <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eea:	6862      	ldr	r2, [r4, #4]
 8004eec:	2a01      	cmp	r2, #1
 8004eee:	d057      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ef0:	1e93      	subs	r3, r2, #2
 8004ef2:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef4:	4b2f      	ldr	r3, [pc, #188]	; (8004fb4 <HAL_RCC_ClockConfig+0x12c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ef8:	d94d      	bls.n	8004f96 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004efa:	0799      	lsls	r1, r3, #30
 8004efc:	d5d8      	bpl.n	8004eb0 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004efe:	4e2d      	ldr	r6, [pc, #180]	; (8004fb4 <HAL_RCC_ClockConfig+0x12c>)
 8004f00:	68b3      	ldr	r3, [r6, #8]
 8004f02:	f023 0303 	bic.w	r3, r3, #3
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004f0a:	f7ff f965 	bl	80041d8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f0e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004f12:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f14:	e004      	b.n	8004f20 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f16:	f7ff f95f 	bl	80041d8 <HAL_GetTick>
 8004f1a:	1bc0      	subs	r0, r0, r7
 8004f1c:	4540      	cmp	r0, r8
 8004f1e:	d844      	bhi.n	8004faa <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f20:	68b3      	ldr	r3, [r6, #8]
 8004f22:	6862      	ldr	r2, [r4, #4]
 8004f24:	f003 030c 	and.w	r3, r3, #12
 8004f28:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004f2c:	d1f3      	bne.n	8004f16 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f2e:	4a20      	ldr	r2, [pc, #128]	; (8004fb0 <HAL_RCC_ClockConfig+0x128>)
 8004f30:	6813      	ldr	r3, [r2, #0]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	42ab      	cmp	r3, r5
 8004f38:	d906      	bls.n	8004f48 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f3a:	b2eb      	uxtb	r3, r5
 8004f3c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f3e:	6813      	ldr	r3, [r2, #0]
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	42ab      	cmp	r3, r5
 8004f46:	d1b3      	bne.n	8004eb0 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	075a      	lsls	r2, r3, #29
 8004f4c:	d506      	bpl.n	8004f5c <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f4e:	4919      	ldr	r1, [pc, #100]	; (8004fb4 <HAL_RCC_ClockConfig+0x12c>)
 8004f50:	68e0      	ldr	r0, [r4, #12]
 8004f52:	688a      	ldr	r2, [r1, #8]
 8004f54:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8004f58:	4302      	orrs	r2, r0
 8004f5a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f5c:	071b      	lsls	r3, r3, #28
 8004f5e:	d507      	bpl.n	8004f70 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f60:	4a14      	ldr	r2, [pc, #80]	; (8004fb4 <HAL_RCC_ClockConfig+0x12c>)
 8004f62:	6921      	ldr	r1, [r4, #16]
 8004f64:	6893      	ldr	r3, [r2, #8]
 8004f66:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004f6a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004f6e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f70:	f7ff ff56 	bl	8004e20 <HAL_RCC_GetSysClockFreq>
 8004f74:	4a0f      	ldr	r2, [pc, #60]	; (8004fb4 <HAL_RCC_ClockConfig+0x12c>)
 8004f76:	4c10      	ldr	r4, [pc, #64]	; (8004fb8 <HAL_RCC_ClockConfig+0x130>)
 8004f78:	6892      	ldr	r2, [r2, #8]
 8004f7a:	4910      	ldr	r1, [pc, #64]	; (8004fbc <HAL_RCC_ClockConfig+0x134>)
 8004f7c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004f80:	4603      	mov	r3, r0
 8004f82:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8004f84:	480e      	ldr	r0, [pc, #56]	; (8004fc0 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f86:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8004f88:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f8a:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8004f8c:	f7fe fef2 	bl	8003d74 <HAL_InitTick>
  return HAL_OK;
 8004f90:	2000      	movs	r0, #0
}
 8004f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f96:	0198      	lsls	r0, r3, #6
 8004f98:	d4b1      	bmi.n	8004efe <HAL_RCC_ClockConfig+0x76>
 8004f9a:	e789      	b.n	8004eb0 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8004f9c:	2001      	movs	r0, #1
}
 8004f9e:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fa0:	4b04      	ldr	r3, [pc, #16]	; (8004fb4 <HAL_RCC_ClockConfig+0x12c>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	039e      	lsls	r6, r3, #14
 8004fa6:	d4aa      	bmi.n	8004efe <HAL_RCC_ClockConfig+0x76>
 8004fa8:	e782      	b.n	8004eb0 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8004faa:	2003      	movs	r0, #3
 8004fac:	e781      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x2a>
 8004fae:	bf00      	nop
 8004fb0:	40023c00 	.word	0x40023c00
 8004fb4:	40023800 	.word	0x40023800
 8004fb8:	08008fb8 	.word	0x08008fb8
 8004fbc:	20000564 	.word	0x20000564
 8004fc0:	2000056c 	.word	0x2000056c

08004fc4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004fc4:	4b01      	ldr	r3, [pc, #4]	; (8004fcc <HAL_RCC_GetHCLKFreq+0x8>)
}
 8004fc6:	6818      	ldr	r0, [r3, #0]
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	20000564 	.word	0x20000564

08004fd0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fd0:	4b04      	ldr	r3, [pc, #16]	; (8004fe4 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8004fd2:	4905      	ldr	r1, [pc, #20]	; (8004fe8 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	4a05      	ldr	r2, [pc, #20]	; (8004fec <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004fd8:	6808      	ldr	r0, [r1, #0]
 8004fda:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004fde:	5cd3      	ldrb	r3, [r2, r3]
}
 8004fe0:	40d8      	lsrs	r0, r3
 8004fe2:	4770      	bx	lr
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	20000564 	.word	0x20000564
 8004fec:	08008fc8 	.word	0x08008fc8

08004ff0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ff0:	4b04      	ldr	r3, [pc, #16]	; (8005004 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8004ff2:	4905      	ldr	r1, [pc, #20]	; (8005008 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	4a05      	ldr	r2, [pc, #20]	; (800500c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004ff8:	6808      	ldr	r0, [r1, #0]
 8004ffa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004ffe:	5cd3      	ldrb	r3, [r2, r3]
}
 8005000:	40d8      	lsrs	r0, r3
 8005002:	4770      	bx	lr
 8005004:	40023800 	.word	0x40023800
 8005008:	20000564 	.word	0x20000564
 800500c:	08008fc8 	.word	0x08008fc8

08005010 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005010:	4b0e      	ldr	r3, [pc, #56]	; (800504c <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005012:	220f      	movs	r2, #15
 8005014:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	f002 0203 	and.w	r2, r2, #3
 800501c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005024:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800502c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	08db      	lsrs	r3, r3, #3
{
 8005032:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005034:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005038:	4c05      	ldr	r4, [pc, #20]	; (8005050 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800503a:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800503c:	6823      	ldr	r3, [r4, #0]
}
 800503e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005042:	f003 0307 	and.w	r3, r3, #7
 8005046:	600b      	str	r3, [r1, #0]
}
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40023800 	.word	0x40023800
 8005050:	40023c00 	.word	0x40023c00

08005054 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005054:	2800      	cmp	r0, #0
 8005056:	d076      	beq.n	8005146 <HAL_TIM_Base_Init+0xf2>
{
 8005058:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800505a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800505e:	4604      	mov	r4, r0
 8005060:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005064:	2b00      	cmp	r3, #0
 8005066:	d055      	beq.n	8005114 <HAL_TIM_Base_Init+0xc0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005068:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800506a:	4938      	ldr	r1, [pc, #224]	; (800514c <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 800506c:	2302      	movs	r3, #2
 800506e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005072:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005074:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005076:	d052      	beq.n	800511e <HAL_TIM_Base_Init+0xca>
 8005078:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800507c:	d021      	beq.n	80050c2 <HAL_TIM_Base_Init+0x6e>
 800507e:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8005082:	428a      	cmp	r2, r1
 8005084:	d01d      	beq.n	80050c2 <HAL_TIM_Base_Init+0x6e>
 8005086:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800508a:	428a      	cmp	r2, r1
 800508c:	d019      	beq.n	80050c2 <HAL_TIM_Base_Init+0x6e>
 800508e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005092:	428a      	cmp	r2, r1
 8005094:	d015      	beq.n	80050c2 <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005096:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800509a:	428a      	cmp	r2, r1
 800509c:	d015      	beq.n	80050ca <HAL_TIM_Base_Init+0x76>
 800509e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80050a2:	428a      	cmp	r2, r1
 80050a4:	d011      	beq.n	80050ca <HAL_TIM_Base_Init+0x76>
 80050a6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80050aa:	428a      	cmp	r2, r1
 80050ac:	d00d      	beq.n	80050ca <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050ae:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050b0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050b6:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80050b8:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050ba:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050bc:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80050be:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050c0:	e010      	b.n	80050e4 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 80050c2:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80050c8:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ca:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050cc:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80050ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050d2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050d8:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050da:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80050dc:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80050de:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050e0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80050e2:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050e4:	2301      	movs	r3, #1
 80050e6:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050e8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80050f0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80050f4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80050f8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005104:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005108:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800510c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005110:	2000      	movs	r0, #0
}
 8005112:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005114:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005118:	f7fe fd1a 	bl	8003b50 <HAL_TIM_Base_MspInit>
 800511c:	e7a4      	b.n	8005068 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800511e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005120:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005126:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800512c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800512e:	69a1      	ldr	r1, [r4, #24]
 8005130:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005134:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005136:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005138:	68e3      	ldr	r3, [r4, #12]
 800513a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800513c:	6863      	ldr	r3, [r4, #4]
 800513e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005140:	6963      	ldr	r3, [r4, #20]
 8005142:	6313      	str	r3, [r2, #48]	; 0x30
 8005144:	e7ce      	b.n	80050e4 <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 8005146:	2001      	movs	r0, #1
}
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40010000 	.word	0x40010000

08005150 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005150:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005154:	2b01      	cmp	r3, #1
 8005156:	d127      	bne.n	80051a8 <HAL_TIM_Base_Start_IT+0x58>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005158:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800515a:	4915      	ldr	r1, [pc, #84]	; (80051b0 <HAL_TIM_Base_Start_IT+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 800515c:	2202      	movs	r2, #2
 800515e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005162:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005164:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005166:	f042 0201 	orr.w	r2, r2, #1
 800516a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800516c:	d011      	beq.n	8005192 <HAL_TIM_Base_Start_IT+0x42>
 800516e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005172:	d00e      	beq.n	8005192 <HAL_TIM_Base_Start_IT+0x42>
 8005174:	4a0f      	ldr	r2, [pc, #60]	; (80051b4 <HAL_TIM_Base_Start_IT+0x64>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d00b      	beq.n	8005192 <HAL_TIM_Base_Start_IT+0x42>
 800517a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800517e:	4293      	cmp	r3, r2
 8005180:	d007      	beq.n	8005192 <HAL_TIM_Base_Start_IT+0x42>
 8005182:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005186:	4293      	cmp	r3, r2
 8005188:	d003      	beq.n	8005192 <HAL_TIM_Base_Start_IT+0x42>
 800518a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800518e:	4293      	cmp	r3, r2
 8005190:	d104      	bne.n	800519c <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005198:	2a06      	cmp	r2, #6
 800519a:	d007      	beq.n	80051ac <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 80051a2:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	4770      	bx	lr
    return HAL_ERROR;
 80051a8:	2001      	movs	r0, #1
 80051aa:	4770      	bx	lr
  return HAL_OK;
 80051ac:	2000      	movs	r0, #0
}
 80051ae:	4770      	bx	lr
 80051b0:	40010000 	.word	0x40010000
 80051b4:	40000400 	.word	0x40000400

080051b8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80051b8:	2800      	cmp	r0, #0
 80051ba:	d076      	beq.n	80052aa <HAL_TIM_PWM_Init+0xf2>
{
 80051bc:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80051be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80051c2:	4604      	mov	r4, r0
 80051c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d055      	beq.n	8005278 <HAL_TIM_PWM_Init+0xc0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051cc:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051ce:	4938      	ldr	r1, [pc, #224]	; (80052b0 <HAL_TIM_PWM_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 80051d0:	2302      	movs	r3, #2
 80051d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051d6:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80051d8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051da:	d052      	beq.n	8005282 <HAL_TIM_PWM_Init+0xca>
 80051dc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80051e0:	d021      	beq.n	8005226 <HAL_TIM_PWM_Init+0x6e>
 80051e2:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80051e6:	428a      	cmp	r2, r1
 80051e8:	d01d      	beq.n	8005226 <HAL_TIM_PWM_Init+0x6e>
 80051ea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80051ee:	428a      	cmp	r2, r1
 80051f0:	d019      	beq.n	8005226 <HAL_TIM_PWM_Init+0x6e>
 80051f2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80051f6:	428a      	cmp	r2, r1
 80051f8:	d015      	beq.n	8005226 <HAL_TIM_PWM_Init+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051fa:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 80051fe:	428a      	cmp	r2, r1
 8005200:	d015      	beq.n	800522e <HAL_TIM_PWM_Init+0x76>
 8005202:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005206:	428a      	cmp	r2, r1
 8005208:	d011      	beq.n	800522e <HAL_TIM_PWM_Init+0x76>
 800520a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800520e:	428a      	cmp	r2, r1
 8005210:	d00d      	beq.n	800522e <HAL_TIM_PWM_Init+0x76>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005212:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005214:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800521a:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800521c:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800521e:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005220:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005222:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005224:	e010      	b.n	8005248 <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8005226:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800522c:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800522e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005230:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005236:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005238:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800523c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800523e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005240:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005242:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005244:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005246:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005248:	2301      	movs	r3, #1
 800524a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800524c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005250:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005254:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005258:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800525c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005268:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800526c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005270:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005274:	2000      	movs	r0, #0
}
 8005276:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005278:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800527c:	f7fe fca0 	bl	8003bc0 <HAL_TIM_PWM_MspInit>
 8005280:	e7a4      	b.n	80051cc <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8005282:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005284:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800528a:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800528c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005290:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005292:	69a1      	ldr	r1, [r4, #24]
 8005294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005298:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800529a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800529c:	68e3      	ldr	r3, [r4, #12]
 800529e:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80052a0:	6863      	ldr	r3, [r4, #4]
 80052a2:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80052a4:	6963      	ldr	r3, [r4, #20]
 80052a6:	6313      	str	r3, [r2, #48]	; 0x30
 80052a8:	e7ce      	b.n	8005248 <HAL_TIM_PWM_Init+0x90>
    return HAL_ERROR;
 80052aa:	2001      	movs	r0, #1
}
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	40010000 	.word	0x40010000

080052b4 <HAL_TIM_PWM_ConfigChannel>:
{
 80052b4:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80052b6:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 80052ba:	2801      	cmp	r0, #1
 80052bc:	f000 80c5 	beq.w	800544a <HAL_TIM_PWM_ConfigChannel+0x196>
 80052c0:	2001      	movs	r0, #1
{
 80052c2:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 80052c4:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  switch (Channel)
 80052c8:	2a0c      	cmp	r2, #12
 80052ca:	d808      	bhi.n	80052de <HAL_TIM_PWM_ConfigChannel+0x2a>
 80052cc:	e8df f002 	tbb	[pc, r2]
 80052d0:	0707073b 	.word	0x0707073b
 80052d4:	07070765 	.word	0x07070765
 80052d8:	07070792 	.word	0x07070792
 80052dc:	0d          	.byte	0x0d
 80052dd:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  switch (Channel)
 80052e4:	2001      	movs	r0, #1
}
 80052e6:	bcf0      	pop	{r4, r5, r6, r7}
 80052e8:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052ea:	681a      	ldr	r2, [r3, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052ec:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052ee:	6a10      	ldr	r0, [r2, #32]
 80052f0:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 80052f4:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 80052f6:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80052f8:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 80052fa:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052fc:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005300:	ea44 2406 	orr.w	r4, r4, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005304:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005306:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800530a:	ea40 3006 	orr.w	r0, r0, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800530e:	4e68      	ldr	r6, [pc, #416]	; (80054b0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005310:	42b2      	cmp	r2, r6
 8005312:	f000 80b8 	beq.w	8005486 <HAL_TIM_PWM_ConfigChannel+0x1d2>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005316:	6055      	str	r5, [r2, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005318:	61d4      	str	r4, [r2, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800531a:	684c      	ldr	r4, [r1, #4]
 800531c:	6414      	str	r4, [r2, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800531e:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005320:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005322:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005324:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8005328:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800532a:	69d1      	ldr	r1, [r2, #28]
 800532c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005330:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005332:	69d1      	ldr	r1, [r2, #28]
 8005334:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8005338:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005340:	2000      	movs	r0, #0
}
 8005342:	bcf0      	pop	{r4, r5, r6, r7}
 8005344:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005346:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005348:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800534a:	6a10      	ldr	r0, [r2, #32]
 800534c:	f020 0001 	bic.w	r0, r0, #1
 8005350:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8005352:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005354:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8005356:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005358:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800535c:	4334      	orrs	r4, r6
  tmpccer |= OC_Config->OCPolarity;
 800535e:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8005360:	f020 0002 	bic.w	r0, r0, #2
  tmpccer |= OC_Config->OCPolarity;
 8005364:	4330      	orrs	r0, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005366:	4e52      	ldr	r6, [pc, #328]	; (80054b0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005368:	42b2      	cmp	r2, r6
 800536a:	d070      	beq.n	800544e <HAL_TIM_PWM_ConfigChannel+0x19a>
  TIMx->CR2 = tmpcr2;
 800536c:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 800536e:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8005370:	684c      	ldr	r4, [r1, #4]
 8005372:	6354      	str	r4, [r2, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8005374:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005376:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005378:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800537a:	f040 0008 	orr.w	r0, r0, #8
 800537e:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005380:	6991      	ldr	r1, [r2, #24]
 8005382:	f021 0104 	bic.w	r1, r1, #4
 8005386:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005388:	6991      	ldr	r1, [r2, #24]
 800538a:	4321      	orrs	r1, r4
 800538c:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005394:	2000      	movs	r0, #0
}
 8005396:	bcf0      	pop	{r4, r5, r6, r7}
 8005398:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800539a:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800539c:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800539e:	6a10      	ldr	r0, [r2, #32]
 80053a0:	f020 0010 	bic.w	r0, r0, #16
 80053a4:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 80053a6:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80053a8:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 80053aa:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053ac:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053b0:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053b4:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80053b6:	f020 0020 	bic.w	r0, r0, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053ba:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053be:	4e3c      	ldr	r6, [pc, #240]	; (80054b0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80053c0:	42b2      	cmp	r2, r6
 80053c2:	d051      	beq.n	8005468 <HAL_TIM_PWM_ConfigChannel+0x1b4>
  TIMx->CR2 = tmpcr2;
 80053c4:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 80053c6:	6194      	str	r4, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80053c8:	684c      	ldr	r4, [r1, #4]
 80053ca:	6394      	str	r4, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80053cc:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053ce:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053d0:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053d2:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80053d6:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053d8:	6991      	ldr	r1, [r2, #24]
 80053da:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80053de:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053e0:	6991      	ldr	r1, [r2, #24]
 80053e2:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 80053e6:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80053ee:	2000      	movs	r0, #0
}
 80053f0:	bcf0      	pop	{r4, r5, r6, r7}
 80053f2:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053f4:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 80053f6:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053f8:	6a10      	ldr	r0, [r2, #32]
 80053fa:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 80053fe:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8005400:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005402:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8005404:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005406:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800540a:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800540c:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800540e:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005412:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005416:	4e26      	ldr	r6, [pc, #152]	; (80054b0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005418:	42b2      	cmp	r2, r6
 800541a:	d03a      	beq.n	8005492 <HAL_TIM_PWM_ConfigChannel+0x1de>
  TIMx->CR2 = tmpcr2;
 800541c:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 800541e:	61d4      	str	r4, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8005420:	684c      	ldr	r4, [r1, #4]
 8005422:	63d4      	str	r4, [r2, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8005424:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005426:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005428:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800542a:	f040 0008 	orr.w	r0, r0, #8
 800542e:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005430:	69d1      	ldr	r1, [r2, #28]
 8005432:	f021 0104 	bic.w	r1, r1, #4
 8005436:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005438:	69d1      	ldr	r1, [r2, #28]
 800543a:	4321      	orrs	r1, r4
 800543c:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005444:	2000      	movs	r0, #0
}
 8005446:	bcf0      	pop	{r4, r5, r6, r7}
 8005448:	4770      	bx	lr
  __HAL_LOCK(htim);
 800544a:	2002      	movs	r0, #2
}
 800544c:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 800544e:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005450:	f020 0008 	bic.w	r0, r0, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005454:	4330      	orrs	r0, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8005456:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800545a:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800545e:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8005460:	f020 0004 	bic.w	r0, r0, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005464:	4335      	orrs	r5, r6
 8005466:	e781      	b.n	800536c <HAL_TIM_PWM_ConfigChannel+0xb8>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005468:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800546a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800546e:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005472:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005476:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800547a:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 800547c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005480:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 8005484:	e79e      	b.n	80053c4 <HAL_TIM_PWM_ConfigChannel+0x110>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005486:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005488:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800548c:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8005490:	e741      	b.n	8005316 <HAL_TIM_PWM_ConfigChannel+0x62>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005492:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005494:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005498:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800549c:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054a0:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054a4:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 80054a6:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054aa:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 80054ae:	e7b5      	b.n	800541c <HAL_TIM_PWM_ConfigChannel+0x168>
 80054b0:	40010000 	.word	0x40010000

080054b4 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80054b4:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80054b8:	2a01      	cmp	r2, #1
 80054ba:	d050      	beq.n	800555e <HAL_TIM_SlaveConfigSynchro+0xaa>
 80054bc:	4603      	mov	r3, r0
{
 80054be:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80054c0:	2202      	movs	r2, #2
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054c2:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 80054c8:	2001      	movs	r0, #1
 80054ca:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80054ce:	68a2      	ldr	r2, [r4, #8]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80054d0:	6848      	ldr	r0, [r1, #4]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80054d2:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 80054d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80054d8:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 80054da:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80054de:	432a      	orrs	r2, r5

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80054e0:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 80054e2:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 80054e4:	d060      	beq.n	80055a8 <HAL_TIM_SlaveConfigSynchro+0xf4>
 80054e6:	d90f      	bls.n	8005508 <HAL_TIM_SlaveConfigSynchro+0x54>
 80054e8:	2860      	cmp	r0, #96	; 0x60
 80054ea:	d03a      	beq.n	8005562 <HAL_TIM_SlaveConfigSynchro+0xae>
 80054ec:	2870      	cmp	r0, #112	; 0x70
 80054ee:	d10e      	bne.n	800550e <HAL_TIM_SlaveConfigSynchro+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054f0:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 80054f4:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054f6:	432a      	orrs	r2, r5
 80054f8:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054fa:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054fe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005502:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005504:	60a2      	str	r2, [r4, #8]
 8005506:	e00f      	b.n	8005528 <HAL_TIM_SlaveConfigSynchro+0x74>
  switch (sSlaveConfig->InputTrigger)
 8005508:	2840      	cmp	r0, #64	; 0x40
 800550a:	d03d      	beq.n	8005588 <HAL_TIM_SlaveConfigSynchro+0xd4>
 800550c:	d907      	bls.n	800551e <HAL_TIM_SlaveConfigSynchro+0x6a>
    htim->State = HAL_TIM_STATE_READY;
 800550e:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8005510:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8005512:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800551a:	bc30      	pop	{r4, r5}
 800551c:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 800551e:	2820      	cmp	r0, #32
 8005520:	d002      	beq.n	8005528 <HAL_TIM_SlaveConfigSynchro+0x74>
 8005522:	d912      	bls.n	800554a <HAL_TIM_SlaveConfigSynchro+0x96>
 8005524:	2830      	cmp	r0, #48	; 0x30
 8005526:	d1f2      	bne.n	800550e <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005528:	68e2      	ldr	r2, [r4, #12]
 800552a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800552e:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005530:	68e2      	ldr	r2, [r4, #12]
  __HAL_UNLOCK(htim);
 8005532:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 8005534:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005536:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800553a:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 800553c:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005540:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
  return HAL_OK;
 8005544:	4608      	mov	r0, r1
}
 8005546:	bc30      	pop	{r4, r5}
 8005548:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 800554a:	f030 0210 	bics.w	r2, r0, #16
 800554e:	d0eb      	beq.n	8005528 <HAL_TIM_SlaveConfigSynchro+0x74>
    htim->State = HAL_TIM_STATE_READY;
 8005550:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8005552:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8005554:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800555c:	e7dd      	b.n	800551a <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 800555e:	2002      	movs	r0, #2
}
 8005560:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005562:	6a22      	ldr	r2, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005564:	6888      	ldr	r0, [r1, #8]
 8005566:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005568:	f022 0210 	bic.w	r2, r2, #16
 800556c:	6222      	str	r2, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800556e:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8005570:	6a22      	ldr	r2, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005572:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005576:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800557a:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800557e:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8005582:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8005584:	6222      	str	r2, [r4, #32]
 8005586:	e7cf      	b.n	8005528 <HAL_TIM_SlaveConfigSynchro+0x74>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005588:	2d05      	cmp	r5, #5
 800558a:	d0c0      	beq.n	800550e <HAL_TIM_SlaveConfigSynchro+0x5a>
      tmpccer = htim->Instance->CCER;
 800558c:	6a20      	ldr	r0, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800558e:	6a22      	ldr	r2, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005590:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005592:	f022 0201 	bic.w	r2, r2, #1
 8005596:	6222      	str	r2, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005598:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800559a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800559e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80055a2:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 80055a4:	6220      	str	r0, [r4, #32]
      break;
 80055a6:	e7bf      	b.n	8005528 <HAL_TIM_SlaveConfigSynchro+0x74>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055a8:	688a      	ldr	r2, [r1, #8]
 80055aa:	6908      	ldr	r0, [r1, #16]
  tmpccer = TIMx->CCER;
 80055ac:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ae:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80055b2:	4311      	orrs	r1, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055b4:	6a22      	ldr	r2, [r4, #32]
 80055b6:	f022 0201 	bic.w	r2, r2, #1
 80055ba:	6222      	str	r2, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055bc:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055be:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055c2:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80055c6:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 80055c8:	6221      	str	r1, [r4, #32]
 80055ca:	e7ad      	b.n	8005528 <HAL_TIM_SlaveConfigSynchro+0x74>

080055cc <HAL_TIM_OC_DelayElapsedCallback>:
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop

080055d0 <HAL_TIM_IC_CaptureCallback>:
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop

080055d4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop

080055d8 <HAL_TIM_TriggerCallback>:
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop

080055dc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055dc:	6803      	ldr	r3, [r0, #0]
 80055de:	691a      	ldr	r2, [r3, #16]
 80055e0:	0791      	lsls	r1, r2, #30
{
 80055e2:	b510      	push	{r4, lr}
 80055e4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055e6:	d502      	bpl.n	80055ee <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	0792      	lsls	r2, r2, #30
 80055ec:	d45f      	bmi.n	80056ae <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	0750      	lsls	r0, r2, #29
 80055f2:	d502      	bpl.n	80055fa <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	0751      	lsls	r1, r2, #29
 80055f8:	d446      	bmi.n	8005688 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055fa:	691a      	ldr	r2, [r3, #16]
 80055fc:	0712      	lsls	r2, r2, #28
 80055fe:	d502      	bpl.n	8005606 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	0710      	lsls	r0, r2, #28
 8005604:	d42e      	bmi.n	8005664 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005606:	691a      	ldr	r2, [r3, #16]
 8005608:	06d2      	lsls	r2, r2, #27
 800560a:	d502      	bpl.n	8005612 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	06d0      	lsls	r0, r2, #27
 8005610:	d418      	bmi.n	8005644 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005612:	691a      	ldr	r2, [r3, #16]
 8005614:	07d1      	lsls	r1, r2, #31
 8005616:	d502      	bpl.n	800561e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	07d2      	lsls	r2, r2, #31
 800561c:	d45d      	bmi.n	80056da <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800561e:	691a      	ldr	r2, [r3, #16]
 8005620:	0610      	lsls	r0, r2, #24
 8005622:	d502      	bpl.n	800562a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	0611      	lsls	r1, r2, #24
 8005628:	d45f      	bmi.n	80056ea <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800562a:	691a      	ldr	r2, [r3, #16]
 800562c:	0652      	lsls	r2, r2, #25
 800562e:	d502      	bpl.n	8005636 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	0650      	lsls	r0, r2, #25
 8005634:	d461      	bmi.n	80056fa <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005636:	691a      	ldr	r2, [r3, #16]
 8005638:	0691      	lsls	r1, r2, #26
 800563a:	d502      	bpl.n	8005642 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	0692      	lsls	r2, r2, #26
 8005640:	d443      	bmi.n	80056ca <HAL_TIM_IRQHandler+0xee>
}
 8005642:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005644:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005648:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800564a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800564c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005654:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005656:	d064      	beq.n	8005722 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005658:	f7ff ffba 	bl	80055d0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800565e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005660:	7722      	strb	r2, [r4, #28]
 8005662:	e7d6      	b.n	8005612 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005664:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005668:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800566a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800566c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8005672:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005674:	d152      	bne.n	800571c <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005676:	f7ff ffa9 	bl	80055cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800567a:	4620      	mov	r0, r4
 800567c:	f7ff ffaa 	bl	80055d4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005680:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005682:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005684:	7722      	strb	r2, [r4, #28]
 8005686:	e7be      	b.n	8005606 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005688:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800568c:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800568e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005690:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005698:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800569a:	d13c      	bne.n	8005716 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800569c:	f7ff ff96 	bl	80055cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a0:	4620      	mov	r0, r4
 80056a2:	f7ff ff97 	bl	80055d4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056a8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056aa:	7722      	strb	r2, [r4, #28]
 80056ac:	e7a5      	b.n	80055fa <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056ae:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056b2:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056b4:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056b6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	079b      	lsls	r3, r3, #30
 80056bc:	d025      	beq.n	800570a <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80056be:	f7ff ff87 	bl	80055d0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056c4:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c6:	7722      	strb	r2, [r4, #28]
 80056c8:	e791      	b.n	80055ee <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056ca:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80056ce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056d0:	611a      	str	r2, [r3, #16]
}
 80056d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80056d6:	f000 b88d 	b.w	80057f4 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056da:	f06f 0201 	mvn.w	r2, #1
 80056de:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80056e0:	4620      	mov	r0, r4
 80056e2:	f7fb fdff 	bl	80012e4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	e799      	b.n	800561e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056ee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80056f0:	4620      	mov	r0, r4
 80056f2:	f000 f881 	bl	80057f8 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	e797      	b.n	800562a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056fe:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005700:	4620      	mov	r0, r4
 8005702:	f7ff ff69 	bl	80055d8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	e795      	b.n	8005636 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800570a:	f7ff ff5f 	bl	80055cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800570e:	4620      	mov	r0, r4
 8005710:	f7ff ff60 	bl	80055d4 <HAL_TIM_PWM_PulseFinishedCallback>
 8005714:	e7d5      	b.n	80056c2 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8005716:	f7ff ff5b 	bl	80055d0 <HAL_TIM_IC_CaptureCallback>
 800571a:	e7c4      	b.n	80056a6 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 800571c:	f7ff ff58 	bl	80055d0 <HAL_TIM_IC_CaptureCallback>
 8005720:	e7ae      	b.n	8005680 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005722:	f7ff ff53 	bl	80055cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005726:	4620      	mov	r0, r4
 8005728:	f7ff ff54 	bl	80055d4 <HAL_TIM_PWM_PulseFinishedCallback>
 800572c:	e796      	b.n	800565c <HAL_TIM_IRQHandler+0x80>
 800572e:	bf00      	nop

08005730 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005730:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005734:	2b01      	cmp	r3, #1
 8005736:	d02f      	beq.n	8005798 <HAL_TIMEx_MasterConfigSynchronization+0x68>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005738:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800573a:	2202      	movs	r2, #2
{
 800573c:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800573e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8005742:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005744:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8005746:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005748:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800574c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800574e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005750:	4a12      	ldr	r2, [pc, #72]	; (800579c <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d012      	beq.n	800577c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575a:	d00f      	beq.n	800577c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800575c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005760:	4293      	cmp	r3, r2
 8005762:	d00b      	beq.n	800577c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005764:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005768:	4293      	cmp	r3, r2
 800576a:	d007      	beq.n	800577c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800576c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005770:	4293      	cmp	r3, r2
 8005772:	d003      	beq.n	800577c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005774:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8005778:	4293      	cmp	r3, r2
 800577a:	d104      	bne.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800577c:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800577e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005782:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005784:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005786:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005788:	2201      	movs	r2, #1
 800578a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800578e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8005792:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8005794:	4618      	mov	r0, r3
}
 8005796:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005798:	2002      	movs	r0, #2
}
 800579a:	4770      	bx	lr
 800579c:	40010000 	.word	0x40010000

080057a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d023      	beq.n	80057f0 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 80057a8:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057aa:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80057ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b2:	4602      	mov	r2, r0
 80057b4:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057b6:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057b8:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057be:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057c4:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057c6:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057cc:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057ce:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057d0:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057d6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80057dc:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 80057de:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057e0:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 80057e2:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80057e4:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 80057e8:	4608      	mov	r0, r1
}
 80057ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057ee:	4770      	bx	lr
  __HAL_LOCK(htim);
 80057f0:	2002      	movs	r0, #2
}
 80057f2:	4770      	bx	lr

080057f4 <HAL_TIMEx_CommutCallback>:
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop

080057f8 <HAL_TIMEx_BreakCallback>:
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop

080057fc <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057fc:	2800      	cmp	r0, #0
 80057fe:	f000 808f 	beq.w	8005920 <HAL_UART_Init+0x124>
{
 8005802:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005804:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005808:	4604      	mov	r4, r0
 800580a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800580e:	2b00      	cmp	r3, #0
 8005810:	f000 8081 	beq.w	8005916 <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005814:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005816:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8005818:	2224      	movs	r2, #36	; 0x24
 800581a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800581e:	68da      	ldr	r2, [r3, #12]
 8005820:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005824:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005826:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005828:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800582a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800582e:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005830:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005832:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005834:	4302      	orrs	r2, r0
 8005836:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8005838:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800583a:	4302      	orrs	r2, r0
 800583c:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 800583e:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8005842:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005846:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8005848:	430a      	orrs	r2, r1
 800584a:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800584c:	695a      	ldr	r2, [r3, #20]
 800584e:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005850:	4934      	ldr	r1, [pc, #208]	; (8005924 <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005852:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005856:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005858:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800585a:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800585c:	d035      	beq.n	80058ca <HAL_UART_Init+0xce>
 800585e:	4a32      	ldr	r2, [pc, #200]	; (8005928 <HAL_UART_Init+0x12c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d032      	beq.n	80058ca <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005864:	f7ff fbb4 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005868:	69e3      	ldr	r3, [r4, #28]
 800586a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800586e:	d032      	beq.n	80058d6 <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005870:	6863      	ldr	r3, [r4, #4]
 8005872:	2119      	movs	r1, #25
 8005874:	009a      	lsls	r2, r3, #2
 8005876:	fba0 0101 	umull	r0, r1, r0, r1
 800587a:	0f9b      	lsrs	r3, r3, #30
 800587c:	f7fa fcb0 	bl	80001e0 <__aeabi_uldivmod>
 8005880:	492a      	ldr	r1, [pc, #168]	; (800592c <HAL_UART_Init+0x130>)
 8005882:	fba1 3200 	umull	r3, r2, r1, r0
 8005886:	0952      	lsrs	r2, r2, #5
 8005888:	2564      	movs	r5, #100	; 0x64
 800588a:	fb05 0012 	mls	r0, r5, r2, r0
 800588e:	0100      	lsls	r0, r0, #4
 8005890:	3032      	adds	r0, #50	; 0x32
 8005892:	6823      	ldr	r3, [r4, #0]
 8005894:	fba1 1000 	umull	r1, r0, r1, r0
 8005898:	0112      	lsls	r2, r2, #4
 800589a:	eb02 1250 	add.w	r2, r2, r0, lsr #5
 800589e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058a0:	691a      	ldr	r2, [r3, #16]
 80058a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058a6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058a8:	695a      	ldr	r2, [r3, #20]
 80058aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058ae:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80058b0:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b2:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80058b4:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80058b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058ba:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058bc:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058be:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058c2:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 80058c6:	4628      	mov	r0, r5
}
 80058c8:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 80058ca:	f7ff fb91 	bl	8004ff0 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058ce:	69e3      	ldr	r3, [r4, #28]
 80058d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d4:	d1cc      	bne.n	8005870 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058d6:	6862      	ldr	r2, [r4, #4]
 80058d8:	2119      	movs	r1, #25
 80058da:	1892      	adds	r2, r2, r2
 80058dc:	f04f 0300 	mov.w	r3, #0
 80058e0:	415b      	adcs	r3, r3
 80058e2:	fba0 0101 	umull	r0, r1, r0, r1
 80058e6:	f7fa fc7b 	bl	80001e0 <__aeabi_uldivmod>
 80058ea:	4b10      	ldr	r3, [pc, #64]	; (800592c <HAL_UART_Init+0x130>)
 80058ec:	fba3 2500 	umull	r2, r5, r3, r0
 80058f0:	096d      	lsrs	r5, r5, #5
 80058f2:	2264      	movs	r2, #100	; 0x64
 80058f4:	fb02 0215 	mls	r2, r2, r5, r0
 80058f8:	00d2      	lsls	r2, r2, #3
 80058fa:	3232      	adds	r2, #50	; 0x32
 80058fc:	fba3 3202 	umull	r3, r2, r3, r2
 8005900:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8005904:	0912      	lsrs	r2, r2, #4
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800590c:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8005910:	440a      	add	r2, r1
 8005912:	609a      	str	r2, [r3, #8]
 8005914:	e7c4      	b.n	80058a0 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8005916:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800591a:	f7fe f9b9 	bl	8003c90 <HAL_UART_MspInit>
 800591e:	e779      	b.n	8005814 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8005920:	2001      	movs	r0, #1
}
 8005922:	4770      	bx	lr
 8005924:	40011000 	.word	0x40011000
 8005928:	40011400 	.word	0x40011400
 800592c:	51eb851f 	.word	0x51eb851f

08005930 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005930:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8005932:	f000 ff25 	bl	8006780 <vTaskStartScheduler>
  
  return osOK;
}
 8005936:	2000      	movs	r0, #0
 8005938:	bd08      	pop	{r3, pc}
 800593a:	bf00      	nop

0800593c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800593c:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800593e:	6944      	ldr	r4, [r0, #20]
{
 8005940:	b086      	sub	sp, #24
 8005942:	4684      	mov	ip, r0
 8005944:	460b      	mov	r3, r1
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005946:	b1ac      	cbz	r4, 8005974 <osThreadCreate+0x38>
 8005948:	6986      	ldr	r6, [r0, #24]
 800594a:	b19e      	cbz	r6, 8005974 <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800594c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005950:	f8dc 1000 	ldr.w	r1, [ip]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005954:	f8dc 2010 	ldr.w	r2, [ip, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005958:	6840      	ldr	r0, [r0, #4]
  if (priority != osPriorityError) {
 800595a:	f1be 0f84 	cmp.w	lr, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800595e:	bf14      	ite	ne
 8005960:	f10e 0503 	addne.w	r5, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005964:	2500      	moveq	r5, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005966:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800596a:	9500      	str	r5, [sp, #0]
 800596c:	f000 fd7c 	bl	8006468 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 8005970:	b006      	add	sp, #24
 8005972:	bd70      	pop	{r4, r5, r6, pc}
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005974:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005978:	f8bc 2010 	ldrh.w	r2, [ip, #16]
  if (priority != osPriorityError) {
 800597c:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800597e:	bf14      	ite	ne
 8005980:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005982:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005984:	e9dc 1000 	ldrd	r1, r0, [ip]
 8005988:	9400      	str	r4, [sp, #0]
 800598a:	ac05      	add	r4, sp, #20
 800598c:	9401      	str	r4, [sp, #4]
 800598e:	f000 fe1f 	bl	80065d0 <xTaskCreate>
 8005992:	2801      	cmp	r0, #1
  return handle;
 8005994:	bf0c      	ite	eq
 8005996:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 8005998:	2000      	movne	r0, #0
}
 800599a:	b006      	add	sp, #24
 800599c:	bd70      	pop	{r4, r5, r6, pc}
 800599e:	bf00      	nop

080059a0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80059a0:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80059a2:	2801      	cmp	r0, #1
 80059a4:	bf38      	it	cc
 80059a6:	2001      	movcc	r0, #1
 80059a8:	f000 feba 	bl	8006720 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80059ac:	2000      	movs	r0, #0
 80059ae:	bd08      	pop	{r3, pc}

080059b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80059b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059b4:	4605      	mov	r5, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 80059b6:	f000 ff77 	bl	80068a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80059ba:	4a54      	ldr	r2, [pc, #336]	; (8005b0c <pvPortMalloc+0x15c>)
 80059bc:	6816      	ldr	r6, [r2, #0]
 80059be:	2e00      	cmp	r6, #0
 80059c0:	d06e      	beq.n	8005aa0 <pvPortMalloc+0xf0>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80059c2:	4b53      	ldr	r3, [pc, #332]	; (8005b10 <pvPortMalloc+0x160>)
 80059c4:	681f      	ldr	r7, [r3, #0]
 80059c6:	423d      	tst	r5, r7
 80059c8:	d12e      	bne.n	8005a28 <pvPortMalloc+0x78>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80059ca:	b36d      	cbz	r5, 8005a28 <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
 80059cc:	f105 0408 	add.w	r4, r5, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80059d0:	076d      	lsls	r5, r5, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80059d2:	bf1c      	itt	ne
 80059d4:	f024 0407 	bicne.w	r4, r4, #7
 80059d8:	3408      	addne	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80059da:	b32c      	cbz	r4, 8005a28 <pvPortMalloc+0x78>
 80059dc:	f8df c144 	ldr.w	ip, [pc, #324]	; 8005b24 <pvPortMalloc+0x174>
 80059e0:	f8dc 5000 	ldr.w	r5, [ip]
 80059e4:	42a5      	cmp	r5, r4
 80059e6:	d31f      	bcc.n	8005a28 <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 80059e8:	484a      	ldr	r0, [pc, #296]	; (8005b14 <pvPortMalloc+0x164>)
 80059ea:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059ec:	e003      	b.n	80059f6 <pvPortMalloc+0x46>
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	b122      	cbz	r2, 80059fc <pvPortMalloc+0x4c>
 80059f2:	4618      	mov	r0, r3
 80059f4:	4613      	mov	r3, r2
 80059f6:	6859      	ldr	r1, [r3, #4]
 80059f8:	42a1      	cmp	r1, r4
 80059fa:	d3f8      	bcc.n	80059ee <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80059fc:	42b3      	cmp	r3, r6
 80059fe:	d013      	beq.n	8005a28 <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a00:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a02:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a04:	f858 eb08 	ldr.w	lr, [r8], #8
 8005a08:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a0c:	2a10      	cmp	r2, #16
 8005a0e:	d929      	bls.n	8005a64 <pvPortMalloc+0xb4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a10:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a12:	0748      	lsls	r0, r1, #29
 8005a14:	d00f      	beq.n	8005a36 <pvPortMalloc+0x86>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	e7fe      	b.n	8005a26 <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a28:	f000 ff46 	bl	80068b8 <xTaskResumeAll>
 8005a2c:	f04f 0800 	mov.w	r8, #0
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 8005a30:	4640      	mov	r0, r8
 8005a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a36:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a38:	4a36      	ldr	r2, [pc, #216]	; (8005b14 <pvPortMalloc+0x164>)
						pxBlock->xBlockSize = xWantedSize;
 8005a3a:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a3c:	4614      	mov	r4, r2
 8005a3e:	6812      	ldr	r2, [r2, #0]
 8005a40:	4291      	cmp	r1, r2
 8005a42:	d8fb      	bhi.n	8005a3c <pvPortMalloc+0x8c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a44:	6860      	ldr	r0, [r4, #4]
 8005a46:	eb04 0e00 	add.w	lr, r4, r0
 8005a4a:	4571      	cmp	r1, lr
 8005a4c:	d04b      	beq.n	8005ae6 <pvPortMalloc+0x136>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a4e:	f8d1 e004 	ldr.w	lr, [r1, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a52:	eb01 000e 	add.w	r0, r1, lr
 8005a56:	4282      	cmp	r2, r0
 8005a58:	d051      	beq.n	8005afe <pvPortMalloc+0x14e>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a5a:	428c      	cmp	r4, r1
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a5c:	600a      	str	r2, [r1, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a5e:	bf18      	it	ne
 8005a60:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a62:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a64:	4a2c      	ldr	r2, [pc, #176]	; (8005b18 <pvPortMalloc+0x168>)
 8005a66:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a68:	1a6d      	subs	r5, r5, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a6a:	4285      	cmp	r5, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a6c:	bf38      	it	cc
 8005a6e:	6015      	strcc	r5, [r2, #0]
					xNumberOfSuccessfulAllocations++;
 8005a70:	4a2a      	ldr	r2, [pc, #168]	; (8005b1c <pvPortMalloc+0x16c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a72:	f8cc 5000 	str.w	r5, [ip]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a76:	4339      	orrs	r1, r7
					pxBlock->pxNextFreeBlock = NULL;
 8005a78:	2000      	movs	r0, #0
 8005a7a:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
 8005a7e:	6813      	ldr	r3, [r2, #0]
 8005a80:	3301      	adds	r3, #1
 8005a82:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8005a84:	f000 ff18 	bl	80068b8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a88:	f018 0f07 	tst.w	r8, #7
 8005a8c:	d0d0      	beq.n	8005a30 <pvPortMalloc+0x80>
 8005a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a92:	f383 8811 	msr	BASEPRI, r3
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	e7fe      	b.n	8005a9e <pvPortMalloc+0xee>
	uxAddress = ( size_t ) ucHeap;
 8005aa0:	4b1f      	ldr	r3, [pc, #124]	; (8005b20 <pvPortMalloc+0x170>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005aa2:	075e      	lsls	r6, r3, #29
 8005aa4:	d118      	bne.n	8005ad8 <pvPortMalloc+0x128>
 8005aa6:	f503 5670 	add.w	r6, r3, #15360	; 0x3c00
 8005aaa:	4619      	mov	r1, r3
	uxAddress -= xHeapStructSize;
 8005aac:	3e08      	subs	r6, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005aae:	f026 0607 	bic.w	r6, r6, #7
	pxEnd = ( void * ) uxAddress;
 8005ab2:	6016      	str	r6, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ab4:	4a18      	ldr	r2, [pc, #96]	; (8005b18 <pvPortMalloc+0x168>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ab6:	4817      	ldr	r0, [pc, #92]	; (8005b14 <pvPortMalloc+0x164>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ab8:	4c15      	ldr	r4, [pc, #84]	; (8005b10 <pvPortMalloc+0x160>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005aba:	6001      	str	r1, [r0, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005abc:	1af3      	subs	r3, r6, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005abe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ac0:	4a18      	ldr	r2, [pc, #96]	; (8005b24 <pvPortMalloc+0x174>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ac2:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ac6:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ac8:	2200      	movs	r2, #0
 8005aca:	6042      	str	r2, [r0, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005acc:	6027      	str	r7, [r4, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8005ace:	e9c6 2200 	strd	r2, r2, [r6]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ad2:	e9c1 6300 	strd	r6, r3, [r1]
}
 8005ad6:	e776      	b.n	80059c6 <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ad8:	1dd9      	adds	r1, r3, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ada:	f021 0107 	bic.w	r1, r1, #7
 8005ade:	f503 5670 	add.w	r6, r3, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	e7e2      	b.n	8005aac <pvPortMalloc+0xfc>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ae6:	6849      	ldr	r1, [r1, #4]
 8005ae8:	eb00 0e01 	add.w	lr, r0, r1
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005aec:	eb04 010e 	add.w	r1, r4, lr
 8005af0:	428a      	cmp	r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005af2:	f8c4 e004 	str.w	lr, [r4, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005af6:	d001      	beq.n	8005afc <pvPortMalloc+0x14c>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005af8:	6022      	str	r2, [r4, #0]
	if( pxIterator != pxBlockToInsert )
 8005afa:	e7b2      	b.n	8005a62 <pvPortMalloc+0xb2>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005afc:	4621      	mov	r1, r4
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005afe:	42b2      	cmp	r2, r6
 8005b00:	d0ab      	beq.n	8005a5a <pvPortMalloc+0xaa>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b02:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b04:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b06:	4470      	add	r0, lr
 8005b08:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b0a:	e7a6      	b.n	8005a5a <pvPortMalloc+0xaa>
 8005b0c:	20001d04 	.word	0x20001d04
 8005b10:	20005908 	.word	0x20005908
 8005b14:	2000591c 	.word	0x2000591c
 8005b18:	20005910 	.word	0x20005910
 8005b1c:	20005914 	.word	0x20005914
 8005b20:	20001d08 	.word	0x20001d08
 8005b24:	2000590c 	.word	0x2000590c

08005b28 <vPortFree>:
	if( pv != NULL )
 8005b28:	b1d0      	cbz	r0, 8005b60 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b2a:	4a2c      	ldr	r2, [pc, #176]	; (8005bdc <vPortFree+0xb4>)
 8005b2c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005b30:	6812      	ldr	r2, [r2, #0]
 8005b32:	4213      	tst	r3, r2
 8005b34:	d00b      	beq.n	8005b4e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b36:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005b3a:	b191      	cbz	r1, 8005b62 <vPortFree+0x3a>
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	e7fe      	b.n	8005b4c <vPortFree+0x24>
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b5e:	e7fe      	b.n	8005b5e <vPortFree+0x36>
 8005b60:	4770      	bx	lr
{
 8005b62:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b64:	ea23 0302 	bic.w	r3, r3, r2
{
 8005b68:	b082      	sub	sp, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b6a:	f840 3c04 	str.w	r3, [r0, #-4]
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b6e:	4c1c      	ldr	r4, [pc, #112]	; (8005be0 <vPortFree+0xb8>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b70:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8005b72:	f000 fe99 	bl	80068a8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b76:	9801      	ldr	r0, [sp, #4]
 8005b78:	6822      	ldr	r2, [r4, #0]
 8005b7a:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b7e:	4b19      	ldr	r3, [pc, #100]	; (8005be4 <vPortFree+0xbc>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b80:	440a      	add	r2, r1
		puc -= xHeapStructSize;
 8005b82:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b84:	6022      	str	r2, [r4, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b86:	461a      	mov	r2, r3
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4298      	cmp	r0, r3
 8005b8c:	d8fb      	bhi.n	8005b86 <vPortFree+0x5e>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b8e:	6854      	ldr	r4, [r2, #4]
 8005b90:	eb02 0e04 	add.w	lr, r2, r4
 8005b94:	4570      	cmp	r0, lr
 8005b96:	d010      	beq.n	8005bba <vPortFree+0x92>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b98:	eb00 0c01 	add.w	ip, r0, r1
 8005b9c:	4563      	cmp	r3, ip
 8005b9e:	d014      	beq.n	8005bca <vPortFree+0xa2>
	if( pxIterator != pxBlockToInsert )
 8005ba0:	4282      	cmp	r2, r0
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ba2:	6003      	str	r3, [r0, #0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ba4:	bf18      	it	ne
 8005ba6:	6010      	strne	r0, [r2, #0]
					xNumberOfSuccessfulFrees++;
 8005ba8:	4a0f      	ldr	r2, [pc, #60]	; (8005be8 <vPortFree+0xc0>)
 8005baa:	6813      	ldr	r3, [r2, #0]
 8005bac:	3301      	adds	r3, #1
 8005bae:	6013      	str	r3, [r2, #0]
}
 8005bb0:	b002      	add	sp, #8
 8005bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8005bb6:	f000 be7f 	b.w	80068b8 <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005bba:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005bbc:	1850      	adds	r0, r2, r1
 8005bbe:	4283      	cmp	r3, r0
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005bc0:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005bc2:	d001      	beq.n	8005bc8 <vPortFree+0xa0>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bc4:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 8005bc6:	e7ef      	b.n	8005ba8 <vPortFree+0x80>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005bc8:	4610      	mov	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005bca:	4c08      	ldr	r4, [pc, #32]	; (8005bec <vPortFree+0xc4>)
 8005bcc:	6824      	ldr	r4, [r4, #0]
 8005bce:	42a3      	cmp	r3, r4
 8005bd0:	d0e6      	beq.n	8005ba0 <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bd2:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bd6:	4421      	add	r1, r4
 8005bd8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bda:	e7e1      	b.n	8005ba0 <vPortFree+0x78>
 8005bdc:	20005908 	.word	0x20005908
 8005be0:	2000590c 	.word	0x2000590c
 8005be4:	2000591c 	.word	0x2000591c
 8005be8:	20005918 	.word	0x20005918
 8005bec:	20001d04 	.word	0x20001d04

08005bf0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bf0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005bf4:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bf8:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005bfa:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bfe:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c02:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop

08005c08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop

08005c10 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c10:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8005c16:	6802      	ldr	r2, [r0, #0]
{
 8005c18:	b410      	push	{r4}
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c1a:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8005c1c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8005c1e:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c20:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c22:	6099      	str	r1, [r3, #8]
}
 8005c24:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8005c28:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005c2a:	6002      	str	r2, [r0, #0]
}
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop

08005c30 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c30:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c32:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c34:	1c6b      	adds	r3, r5, #1
 8005c36:	d010      	beq.n	8005c5a <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c38:	f100 0308 	add.w	r3, r0, #8
 8005c3c:	461c      	mov	r4, r3
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	42aa      	cmp	r2, r5
 8005c44:	d9fa      	bls.n	8005c3c <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8005c46:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c48:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8005c4a:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c4c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c4e:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c50:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8005c52:	6108      	str	r0, [r1, #16]
}
 8005c54:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 8005c56:	6002      	str	r2, [r0, #0]
}
 8005c58:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c5a:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c5c:	6863      	ldr	r3, [r4, #4]
 8005c5e:	e7f2      	b.n	8005c46 <vListInsert+0x16>

08005c60 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c60:	6903      	ldr	r3, [r0, #16]
{
 8005c62:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c64:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c68:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c6a:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8005c6c:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c6e:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c70:	bf08      	it	eq
 8005c72:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8005c74:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8005c76:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 8005c7a:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8005c7c:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 8005c7e:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005c80:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8005c82:	6818      	ldr	r0, [r3, #0]
}
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop

08005c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c88:	4808      	ldr	r0, [pc, #32]	; (8005cac <prvPortStartFirstTask+0x24>)
 8005c8a:	6800      	ldr	r0, [r0, #0]
 8005c8c:	6800      	ldr	r0, [r0, #0]
 8005c8e:	f380 8808 	msr	MSP, r0
 8005c92:	f04f 0000 	mov.w	r0, #0
 8005c96:	f380 8814 	msr	CONTROL, r0
 8005c9a:	b662      	cpsie	i
 8005c9c:	b661      	cpsie	f
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	df00      	svc	0
 8005ca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005caa:	0000      	.short	0x0000
 8005cac:	e000ed08 	.word	0xe000ed08

08005cb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005cb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005cc0 <vPortEnableVFP+0x10>
 8005cb4:	6801      	ldr	r1, [r0, #0]
 8005cb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005cba:	6001      	str	r1, [r0, #0]
 8005cbc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005cbe:	0000      	.short	0x0000
 8005cc0:	e000ed88 	.word	0xe000ed88

08005cc4 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8005cc4:	4b0e      	ldr	r3, [pc, #56]	; (8005d00 <prvTaskExitError+0x3c>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
{
 8005cc8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8005cca:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8005ccc:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 8005cce:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8005cd0:	d008      	beq.n	8005ce4 <prvTaskExitError+0x20>
 8005cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	e7fe      	b.n	8005ce2 <prvTaskExitError+0x1e>
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8005cf4:	9b01      	ldr	r3, [sp, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0fc      	beq.n	8005cf4 <prvTaskExitError+0x30>
}
 8005cfa:	b002      	add	sp, #8
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	20000570 	.word	0x20000570

08005d04 <pxPortInitialiseStack>:
{
 8005d04:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d0a:	4c07      	ldr	r4, [pc, #28]	; (8005d28 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d0c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d10:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d14:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d18:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d1c:	e940 3209 	strd	r3, r2, [r0, #-36]	; 0x24
}
 8005d20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d24:	3844      	subs	r0, #68	; 0x44
 8005d26:	4770      	bx	lr
 8005d28:	08005cc5 	.word	0x08005cc5
 8005d2c:	00000000 	.word	0x00000000

08005d30 <SVC_Handler>:
	__asm volatile (
 8005d30:	4b07      	ldr	r3, [pc, #28]	; (8005d50 <pxCurrentTCBConst2>)
 8005d32:	6819      	ldr	r1, [r3, #0]
 8005d34:	6808      	ldr	r0, [r1, #0]
 8005d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d3a:	f380 8809 	msr	PSP, r0
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f04f 0000 	mov.w	r0, #0
 8005d46:	f380 8811 	msr	BASEPRI, r0
 8005d4a:	4770      	bx	lr
 8005d4c:	f3af 8000 	nop.w

08005d50 <pxCurrentTCBConst2>:
 8005d50:	2000592c 	.word	0x2000592c

08005d54 <vPortEnterCritical>:
 8005d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d58:	f383 8811 	msr	BASEPRI, r3
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8005d64:	4a0b      	ldr	r2, [pc, #44]	; (8005d94 <vPortEnterCritical+0x40>)
 8005d66:	6813      	ldr	r3, [r2, #0]
 8005d68:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8005d6a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8005d6c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8005d6e:	d000      	beq.n	8005d72 <vPortEnterCritical+0x1e>
}
 8005d70:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d72:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005d76:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d0f7      	beq.n	8005d70 <vPortEnterCritical+0x1c>
 8005d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	e7fe      	b.n	8005d90 <vPortEnterCritical+0x3c>
 8005d92:	bf00      	nop
 8005d94:	20000570 	.word	0x20000570

08005d98 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005d98:	4a08      	ldr	r2, [pc, #32]	; (8005dbc <vPortExitCritical+0x24>)
 8005d9a:	6813      	ldr	r3, [r2, #0]
 8005d9c:	b943      	cbnz	r3, 8005db0 <vPortExitCritical+0x18>
 8005d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	e7fe      	b.n	8005dae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8005db0:	3b01      	subs	r3, #1
 8005db2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005db4:	b90b      	cbnz	r3, 8005dba <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005db6:	f383 8811 	msr	BASEPRI, r3
}
 8005dba:	4770      	bx	lr
 8005dbc:	20000570 	.word	0x20000570

08005dc0 <PendSV_Handler>:
	__asm volatile
 8005dc0:	f3ef 8009 	mrs	r0, PSP
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	4b15      	ldr	r3, [pc, #84]	; (8005e20 <pxCurrentTCBConst>)
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	f01e 0f10 	tst.w	lr, #16
 8005dd0:	bf08      	it	eq
 8005dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dda:	6010      	str	r0, [r2, #0]
 8005ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005de0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005de4:	f380 8811 	msr	BASEPRI, r0
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f000 fd82 	bl	80068f8 <vTaskSwitchContext>
 8005df4:	f04f 0000 	mov.w	r0, #0
 8005df8:	f380 8811 	msr	BASEPRI, r0
 8005dfc:	bc09      	pop	{r0, r3}
 8005dfe:	6819      	ldr	r1, [r3, #0]
 8005e00:	6808      	ldr	r0, [r1, #0]
 8005e02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e06:	f01e 0f10 	tst.w	lr, #16
 8005e0a:	bf08      	it	eq
 8005e0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e10:	f380 8809 	msr	PSP, r0
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	f3af 8000 	nop.w

08005e20 <pxCurrentTCBConst>:
 8005e20:	2000592c 	.word	0x2000592c

08005e24 <SysTick_Handler>:
{
 8005e24:	b508      	push	{r3, lr}
	__asm volatile
 8005e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2a:	f383 8811 	msr	BASEPRI, r3
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8005e36:	f000 fd4f 	bl	80068d8 <xTaskIncrementTick>
 8005e3a:	b128      	cbz	r0, 8005e48 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e3c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e44:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f383 8811 	msr	BASEPRI, r3
}
 8005e4e:	bd08      	pop	{r3, pc}

08005e50 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e50:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005e54:	4a49      	ldr	r2, [pc, #292]	; (8005f7c <xPortStartScheduler+0x12c>)
 8005e56:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8005e5a:	4291      	cmp	r1, r2
 8005e5c:	d043      	beq.n	8005ee6 <xPortStartScheduler+0x96>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e5e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8005e62:	4b47      	ldr	r3, [pc, #284]	; (8005f80 <xPortStartScheduler+0x130>)
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d035      	beq.n	8005ed4 <xPortStartScheduler+0x84>
{
 8005e68:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e6a:	4b46      	ldr	r3, [pc, #280]	; (8005f84 <xPortStartScheduler+0x134>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e6c:	4846      	ldr	r0, [pc, #280]	; (8005f88 <xPortStartScheduler+0x138>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e6e:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e70:	4c46      	ldr	r4, [pc, #280]	; (8005f8c <xPortStartScheduler+0x13c>)
{
 8005e72:	b084      	sub	sp, #16
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e74:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e7a:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e84:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e88:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e90:	2107      	movs	r1, #7
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e92:	7003      	strb	r3, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e94:	0610      	lsls	r0, r2, #24
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e96:	6021      	str	r1, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e98:	bf48      	it	mi
 8005e9a:	2206      	movmi	r2, #6
 8005e9c:	d511      	bpl.n	8005ec2 <xPortStartScheduler+0x72>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005eaa:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005eae:	0609      	lsls	r1, r1, #24
 8005eb0:	4610      	mov	r0, r2
 8005eb2:	f102 32ff 	add.w	r2, r2, #4294967295
 8005eb6:	d4f2      	bmi.n	8005e9e <xPortStartScheduler+0x4e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005eb8:	2803      	cmp	r0, #3
 8005eba:	6020      	str	r0, [r4, #0]
 8005ebc:	f88d 3007 	strb.w	r3, [sp, #7]
 8005ec0:	d01a      	beq.n	8005ef8 <xPortStartScheduler+0xa8>
	__asm volatile
 8005ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	e7fe      	b.n	8005ed2 <xPortStartScheduler+0x82>
 8005ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ee4:	e7fe      	b.n	8005ee4 <xPortStartScheduler+0x94>
 8005ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ef6:	e7fe      	b.n	8005ef6 <xPortStartScheduler+0xa6>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ef8:	9b02      	ldr	r3, [sp, #8]
 8005efa:	4a22      	ldr	r2, [pc, #136]	; (8005f84 <xPortStartScheduler+0x134>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005efc:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f00:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f04:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f06:	6021      	str	r1, [r4, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f08:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f0a:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
	uxCriticalNesting = 0;
 8005f0e:	4c20      	ldr	r4, [pc, #128]	; (8005f90 <xPortStartScheduler+0x140>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f14:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f18:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
 8005f1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005f20:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	uxCriticalNesting = 0;
 8005f24:	2600      	movs	r6, #0
	vPortSetupTimerInterrupt();
 8005f26:	f7fc fa13 	bl	8002350 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005f2a:	6026      	str	r6, [r4, #0]
	vPortEnableVFP();
 8005f2c:	f7ff fec0 	bl	8005cb0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f30:	f8d5 3f34 	ldr.w	r3, [r5, #3892]	; 0xf34
 8005f34:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005f38:	f8c5 3f34 	str.w	r3, [r5, #3892]	; 0xf34
	prvPortStartFirstTask();
 8005f3c:	f7ff fea4 	bl	8005c88 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8005f40:	f000 fcda 	bl	80068f8 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8005f44:	6823      	ldr	r3, [r4, #0]
volatile uint32_t ulDummy = 0;
 8005f46:	9603      	str	r6, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 8005f48:	3301      	adds	r3, #1
 8005f4a:	d008      	beq.n	8005f5e <xPortStartScheduler+0x10e>
 8005f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f50:	f383 8811 	msr	BASEPRI, r3
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	e7fe      	b.n	8005f5c <xPortStartScheduler+0x10c>
 8005f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8005f6e:	9b03      	ldr	r3, [sp, #12]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d0fc      	beq.n	8005f6e <xPortStartScheduler+0x11e>
}
 8005f74:	2000      	movs	r0, #0
 8005f76:	b004      	add	sp, #16
 8005f78:	bd70      	pop	{r4, r5, r6, pc}
 8005f7a:	bf00      	nop
 8005f7c:	410fc271 	.word	0x410fc271
 8005f80:	410fc270 	.word	0x410fc270
 8005f84:	e000e400 	.word	0xe000e400
 8005f88:	20005924 	.word	0x20005924
 8005f8c:	20005928 	.word	0x20005928
 8005f90:	20000570 	.word	0x20000570

08005f94 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f98:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f9a:	f7ff fedb 	bl	8005d54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f9e:	4a34      	ldr	r2, [pc, #208]	; (8006070 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8005fa0:	4d34      	ldr	r5, [pc, #208]	; (8006074 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 8005fa2:	6813      	ldr	r3, [r2, #0]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005fa8:	682b      	ldr	r3, [r5, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d032      	beq.n	8006014 <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005fae:	4e32      	ldr	r6, [pc, #200]	; (8006078 <prvAddNewTaskToReadyList+0xe4>)
 8005fb0:	6833      	ldr	r3, [r6, #0]
 8005fb2:	b33b      	cbz	r3, 8006004 <prvAddNewTaskToReadyList+0x70>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005fb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005fb6:	4f31      	ldr	r7, [pc, #196]	; (800607c <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005fb8:	4831      	ldr	r0, [pc, #196]	; (8006080 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005fba:	4932      	ldr	r1, [pc, #200]	; (8006084 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8005fbc:	6802      	ldr	r2, [r0, #0]
 8005fbe:	3201      	adds	r2, #1
 8005fc0:	6002      	str	r2, [r0, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005fc2:	6808      	ldr	r0, [r1, #0]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	409a      	lsls	r2, r3
 8005fc8:	4302      	orrs	r2, r0
 8005fca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005fce:	600a      	str	r2, [r1, #0]
 8005fd0:	eb07 0083 	add.w	r0, r7, r3, lsl #2
 8005fd4:	1d21      	adds	r1, r4, #4
 8005fd6:	f7ff fe1b 	bl	8005c10 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005fda:	f7ff fedd 	bl	8005d98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005fde:	6833      	ldr	r3, [r6, #0]
 8005fe0:	b173      	cbz	r3, 8006000 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005fe2:	682a      	ldr	r2, [r5, #0]
 8005fe4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005fe6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d209      	bcs.n	8006000 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005fec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ff4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006004:	682a      	ldr	r2, [r5, #0]
 8006006:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006008:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800600a:	4f1c      	ldr	r7, [pc, #112]	; (800607c <prvAddNewTaskToReadyList+0xe8>)
 800600c:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800600e:	bf98      	it	ls
 8006010:	602c      	strls	r4, [r5, #0]
 8006012:	e7d1      	b.n	8005fb8 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 8006014:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006016:	6813      	ldr	r3, [r2, #0]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d003      	beq.n	8006024 <prvAddNewTaskToReadyList+0x90>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800601c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800601e:	4f17      	ldr	r7, [pc, #92]	; (800607c <prvAddNewTaskToReadyList+0xe8>)
 8006020:	4e15      	ldr	r6, [pc, #84]	; (8006078 <prvAddNewTaskToReadyList+0xe4>)
 8006022:	e7c9      	b.n	8005fb8 <prvAddNewTaskToReadyList+0x24>
 8006024:	4f15      	ldr	r7, [pc, #84]	; (800607c <prvAddNewTaskToReadyList+0xe8>)
 8006026:	463e      	mov	r6, r7
 8006028:	f107 088c 	add.w	r8, r7, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800602c:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800602e:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006030:	f7ff fdde 	bl	8005bf0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006034:	45b0      	cmp	r8, r6
 8006036:	d1f9      	bne.n	800602c <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006038:	f8df 9060 	ldr.w	r9, [pc, #96]	; 800609c <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 800603c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80060a0 <prvAddNewTaskToReadyList+0x10c>
 8006040:	4e0d      	ldr	r6, [pc, #52]	; (8006078 <prvAddNewTaskToReadyList+0xe4>)
	vListInitialise( &xDelayedTaskList1 );
 8006042:	4648      	mov	r0, r9
 8006044:	f7ff fdd4 	bl	8005bf0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006048:	4640      	mov	r0, r8
 800604a:	f7ff fdd1 	bl	8005bf0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800604e:	480e      	ldr	r0, [pc, #56]	; (8006088 <prvAddNewTaskToReadyList+0xf4>)
 8006050:	f7ff fdce 	bl	8005bf0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006054:	480d      	ldr	r0, [pc, #52]	; (800608c <prvAddNewTaskToReadyList+0xf8>)
 8006056:	f7ff fdcb 	bl	8005bf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800605a:	480d      	ldr	r0, [pc, #52]	; (8006090 <prvAddNewTaskToReadyList+0xfc>)
 800605c:	f7ff fdc8 	bl	8005bf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006060:	4b0c      	ldr	r3, [pc, #48]	; (8006094 <prvAddNewTaskToReadyList+0x100>)
 8006062:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006066:	4b0c      	ldr	r3, [pc, #48]	; (8006098 <prvAddNewTaskToReadyList+0x104>)
 8006068:	f8c3 8000 	str.w	r8, [r3]
		prvAddTaskToReadyList( pxNewTCB );
 800606c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
}
 800606e:	e7a3      	b.n	8005fb8 <prvAddNewTaskToReadyList+0x24>
 8006070:	200059c4 	.word	0x200059c4
 8006074:	2000592c 	.word	0x2000592c
 8006078:	20005a20 	.word	0x20005a20
 800607c:	20005938 	.word	0x20005938
 8006080:	200059d0 	.word	0x200059d0
 8006084:	200059d4 	.word	0x200059d4
 8006088:	20005a0c 	.word	0x20005a0c
 800608c:	20005a38 	.word	0x20005a38
 8006090:	20005a24 	.word	0x20005a24
 8006094:	20005930 	.word	0x20005930
 8006098:	20005934 	.word	0x20005934
 800609c:	200059d8 	.word	0x200059d8
 80060a0:	200059ec 	.word	0x200059ec

080060a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060a6:	4b1b      	ldr	r3, [pc, #108]	; (8006114 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060a8:	4e1b      	ldr	r6, [pc, #108]	; (8006118 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80060aa:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060ac:	6833      	ldr	r3, [r6, #0]
{
 80060ae:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060b0:	1d18      	adds	r0, r3, #4
{
 80060b2:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060b4:	f7ff fdd4 	bl	8005c60 <uxListRemove>
 80060b8:	b940      	cbnz	r0, 80060cc <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80060ba:	6833      	ldr	r3, [r6, #0]
 80060bc:	4917      	ldr	r1, [pc, #92]	; (800611c <prvAddCurrentTaskToDelayedList+0x78>)
 80060be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c0:	2201      	movs	r2, #1
 80060c2:	409a      	lsls	r2, r3
 80060c4:	680b      	ldr	r3, [r1, #0]
 80060c6:	ea23 0302 	bic.w	r3, r3, r2
 80060ca:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060cc:	1c6b      	adds	r3, r5, #1
 80060ce:	d017      	beq.n	8006100 <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060d0:	6833      	ldr	r3, [r6, #0]
 80060d2:	1964      	adds	r4, r4, r5
 80060d4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80060d6:	d307      	bcc.n	80060e8 <prvAddCurrentTaskToDelayedList+0x44>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060d8:	4b11      	ldr	r3, [pc, #68]	; (8006120 <prvAddCurrentTaskToDelayedList+0x7c>)
 80060da:	6818      	ldr	r0, [r3, #0]
 80060dc:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060e2:	3104      	adds	r1, #4
 80060e4:	f7ff bda4 	b.w	8005c30 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060e8:	4b0e      	ldr	r3, [pc, #56]	; (8006124 <prvAddCurrentTaskToDelayedList+0x80>)
 80060ea:	6818      	ldr	r0, [r3, #0]
 80060ec:	6831      	ldr	r1, [r6, #0]
 80060ee:	3104      	adds	r1, #4
 80060f0:	f7ff fd9e 	bl	8005c30 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060f4:	4b0c      	ldr	r3, [pc, #48]	; (8006128 <prvAddCurrentTaskToDelayedList+0x84>)
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 80060fa:	bf88      	it	hi
 80060fc:	601c      	strhi	r4, [r3, #0]
}
 80060fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006100:	2f00      	cmp	r7, #0
 8006102:	d0e5      	beq.n	80060d0 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006104:	6831      	ldr	r1, [r6, #0]
 8006106:	4809      	ldr	r0, [pc, #36]	; (800612c <prvAddCurrentTaskToDelayedList+0x88>)
}
 8006108:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800610c:	3104      	adds	r1, #4
 800610e:	f7ff bd7f 	b.w	8005c10 <vListInsertEnd>
 8006112:	bf00      	nop
 8006114:	20005a4c 	.word	0x20005a4c
 8006118:	2000592c 	.word	0x2000592c
 800611c:	200059d4 	.word	0x200059d4
 8006120:	20005934 	.word	0x20005934
 8006124:	20005930 	.word	0x20005930
 8006128:	20005a00 	.word	0x20005a00
 800612c:	20005a24 	.word	0x20005a24

08006130 <prvIdleTask>:
{
 8006130:	b580      	push	{r7, lr}
 8006132:	4d23      	ldr	r5, [pc, #140]	; (80061c0 <prvIdleTask+0x90>)
 8006134:	4f23      	ldr	r7, [pc, #140]	; (80061c4 <prvIdleTask+0x94>)
 8006136:	4e24      	ldr	r6, [pc, #144]	; (80061c8 <prvIdleTask+0x98>)
 8006138:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80061cc <prvIdleTask+0x9c>
				taskYIELD();
 800613c:	f04f 2ae0 	mov.w	sl, #3758153728	; 0xe000e000
 8006140:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006144:	682b      	ldr	r3, [r5, #0]
 8006146:	b35b      	cbz	r3, 80061a0 <prvIdleTask+0x70>
			taskENTER_CRITICAL();
 8006148:	f7ff fe04 	bl	8005d54 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006150:	1d20      	adds	r0, r4, #4
 8006152:	f7ff fd85 	bl	8005c60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006156:	6833      	ldr	r3, [r6, #0]
 8006158:	3b01      	subs	r3, #1
 800615a:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800615c:	682b      	ldr	r3, [r5, #0]
 800615e:	3b01      	subs	r3, #1
 8006160:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 8006162:	f7ff fe19 	bl	8005d98 <vPortExitCritical>
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006166:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800616a:	f002 fbdd 	bl	8008928 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800616e:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 8006172:	b163      	cbz	r3, 800618e <prvIdleTask+0x5e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006174:	2b01      	cmp	r3, #1
 8006176:	d01e      	beq.n	80061b6 <prvIdleTask+0x86>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006178:	2b02      	cmp	r3, #2
 800617a:	d0e3      	beq.n	8006144 <prvIdleTask+0x14>
 800617c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	e7fe      	b.n	800618c <prvIdleTask+0x5c>
				vPortFree( pxTCB->pxStack );
 800618e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006190:	f7ff fcca 	bl	8005b28 <vPortFree>
				vPortFree( pxTCB );
 8006194:	4620      	mov	r0, r4
 8006196:	f7ff fcc7 	bl	8005b28 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800619a:	682b      	ldr	r3, [r5, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1d3      	bne.n	8006148 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80061a0:	f8d8 3000 	ldr.w	r3, [r8]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d9cd      	bls.n	8006144 <prvIdleTask+0x14>
				taskYIELD();
 80061a8:	f8ca 9d04 	str.w	r9, [sl, #3332]	; 0xd04
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	e7c6      	b.n	8006144 <prvIdleTask+0x14>
				vPortFree( pxTCB );
 80061b6:	4620      	mov	r0, r4
 80061b8:	f7ff fcb6 	bl	8005b28 <vPortFree>
 80061bc:	e7c2      	b.n	8006144 <prvIdleTask+0x14>
 80061be:	bf00      	nop
 80061c0:	200059c8 	.word	0x200059c8
 80061c4:	20005a38 	.word	0x20005a38
 80061c8:	200059c4 	.word	0x200059c4
 80061cc:	20005938 	.word	0x20005938

080061d0 <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 80061d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80061d4:	4b4a      	ldr	r3, [pc, #296]	; (8006300 <xTaskIncrementTick.part.0+0x130>)
 80061d6:	681d      	ldr	r5, [r3, #0]
 80061d8:	3501      	adds	r5, #1
BaseType_t xTaskIncrementTick( void )
 80061da:	b083      	sub	sp, #12
		xTickCount = xConstTickCount;
 80061dc:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80061de:	2d00      	cmp	r5, #0
 80061e0:	d045      	beq.n	800626e <xTaskIncrementTick.part.0+0x9e>
 80061e2:	4b48      	ldr	r3, [pc, #288]	; (8006304 <xTaskIncrementTick.part.0+0x134>)
 80061e4:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	429d      	cmp	r5, r3
 80061ea:	d34d      	bcc.n	8006288 <xTaskIncrementTick.part.0+0xb8>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061ec:	4e46      	ldr	r6, [pc, #280]	; (8006308 <xTaskIncrementTick.part.0+0x138>)
 80061ee:	f8df 812c 	ldr.w	r8, [pc, #300]	; 800631c <xTaskIncrementTick.part.0+0x14c>
 80061f2:	6833      	ldr	r3, [r6, #0]
 80061f4:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006320 <xTaskIncrementTick.part.0+0x150>
 80061f8:	681c      	ldr	r4, [r3, #0]
 80061fa:	2c00      	cmp	r4, #0
 80061fc:	d07a      	beq.n	80062f4 <xTaskIncrementTick.part.0+0x124>
					prvAddTaskToReadyList( pxTCB );
 80061fe:	4f43      	ldr	r7, [pc, #268]	; (800630c <xTaskIncrementTick.part.0+0x13c>)
BaseType_t xSwitchRequired = pdFALSE;
 8006200:	2400      	movs	r4, #0
					prvAddTaskToReadyList( pxTCB );
 8006202:	f04f 0a01 	mov.w	sl, #1
 8006206:	e024      	b.n	8006252 <xTaskIncrementTick.part.0+0x82>
 8006208:	9100      	str	r1, [sp, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800620a:	f7ff fd29 	bl	8005c60 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800620e:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8006212:	9900      	ldr	r1, [sp, #0]
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006214:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006218:	b112      	cbz	r2, 8006220 <xTaskIncrementTick.part.0+0x50>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800621a:	f7ff fd21 	bl	8005c60 <uxListRemove>
 800621e:	9900      	ldr	r1, [sp, #0]
					prvAddTaskToReadyList( pxTCB );
 8006220:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	fa0a f200 	lsl.w	r2, sl, r0
 800622a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800622e:	431a      	orrs	r2, r3
 8006230:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8006234:	603a      	str	r2, [r7, #0]
 8006236:	f7ff fceb 	bl	8005c10 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800623a:	f8d9 2000 	ldr.w	r2, [r9]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800623e:	6830      	ldr	r0, [r6, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006240:	f8db 102c 	ldr.w	r1, [fp, #44]	; 0x2c
 8006244:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006246:	6803      	ldr	r3, [r0, #0]
							xSwitchRequired = pdTRUE;
 8006248:	4291      	cmp	r1, r2
 800624a:	bf28      	it	cs
 800624c:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800624e:	2b00      	cmp	r3, #0
 8006250:	d050      	beq.n	80062f4 <xTaskIncrementTick.part.0+0x124>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006252:	6833      	ldr	r3, [r6, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800625a:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800625e:	f10b 0104 	add.w	r1, fp, #4
					if( xConstTickCount < xItemValue )
 8006262:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006264:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 8006266:	d2cf      	bcs.n	8006208 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
 8006268:	9b01      	ldr	r3, [sp, #4]
 800626a:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800626c:	e011      	b.n	8006292 <xTaskIncrementTick.part.0+0xc2>
			taskSWITCH_DELAYED_LISTS();
 800626e:	4b26      	ldr	r3, [pc, #152]	; (8006308 <xTaskIncrementTick.part.0+0x138>)
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	6812      	ldr	r2, [r2, #0]
 8006274:	b30a      	cbz	r2, 80062ba <xTaskIncrementTick.part.0+0xea>
 8006276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	e7fe      	b.n	8006286 <xTaskIncrementTick.part.0+0xb6>
 8006288:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800631c <xTaskIncrementTick.part.0+0x14c>
 800628c:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8006320 <xTaskIncrementTick.part.0+0x150>
BaseType_t xSwitchRequired = pdFALSE;
 8006290:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006292:	f8d9 3000 	ldr.w	r3, [r9]
			if( xYieldPending != pdFALSE )
 8006296:	491e      	ldr	r1, [pc, #120]	; (8006310 <xTaskIncrementTick.part.0+0x140>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	f858 2003 	ldr.w	r2, [r8, r3]
			if( xYieldPending != pdFALSE )
 80062a4:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 80062a6:	2a02      	cmp	r2, #2
 80062a8:	bf28      	it	cs
 80062aa:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 80062ac:	2b00      	cmp	r3, #0
}
 80062ae:	bf0c      	ite	eq
 80062b0:	4620      	moveq	r0, r4
 80062b2:	2001      	movne	r0, #1
 80062b4:	b003      	add	sp, #12
 80062b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80062ba:	4a16      	ldr	r2, [pc, #88]	; (8006314 <xTaskIncrementTick.part.0+0x144>)
 80062bc:	6818      	ldr	r0, [r3, #0]
 80062be:	6811      	ldr	r1, [r2, #0]
 80062c0:	6019      	str	r1, [r3, #0]
 80062c2:	4915      	ldr	r1, [pc, #84]	; (8006318 <xTaskIncrementTick.part.0+0x148>)
 80062c4:	6010      	str	r0, [r2, #0]
 80062c6:	680a      	ldr	r2, [r1, #0]
 80062c8:	3201      	adds	r2, #1
 80062ca:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	6812      	ldr	r2, [r2, #0]
 80062d0:	b93a      	cbnz	r2, 80062e2 <xTaskIncrementTick.part.0+0x112>
		xNextTaskUnblockTime = portMAX_DELAY;
 80062d2:	4b0c      	ldr	r3, [pc, #48]	; (8006304 <xTaskIncrementTick.part.0+0x134>)
 80062d4:	9301      	str	r3, [sp, #4]
 80062d6:	461a      	mov	r2, r3
 80062d8:	f04f 33ff 	mov.w	r3, #4294967295
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	4613      	mov	r3, r2
 80062e0:	e781      	b.n	80061e6 <xTaskIncrementTick.part.0+0x16>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062e2:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062e4:	4a07      	ldr	r2, [pc, #28]	; (8006304 <xTaskIncrementTick.part.0+0x134>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062e6:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062e8:	9201      	str	r2, [sp, #4]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	6013      	str	r3, [r2, #0]
 80062f0:	4613      	mov	r3, r2
}
 80062f2:	e778      	b.n	80061e6 <xTaskIncrementTick.part.0+0x16>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062f4:	9a01      	ldr	r2, [sp, #4]
 80062f6:	f04f 33ff 	mov.w	r3, #4294967295
 80062fa:	6013      	str	r3, [r2, #0]
					break;
 80062fc:	e7c9      	b.n	8006292 <xTaskIncrementTick.part.0+0xc2>
 80062fe:	bf00      	nop
 8006300:	20005a4c 	.word	0x20005a4c
 8006304:	20005a00 	.word	0x20005a00
 8006308:	20005930 	.word	0x20005930
 800630c:	200059d4 	.word	0x200059d4
 8006310:	20005a50 	.word	0x20005a50
 8006314:	20005934 	.word	0x20005934
 8006318:	20005a04 	.word	0x20005a04
 800631c:	20005938 	.word	0x20005938
 8006320:	2000592c 	.word	0x2000592c

08006324 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8006324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 8006328:	4c45      	ldr	r4, [pc, #276]	; (8006440 <xTaskResumeAll.part.0+0x11c>)
BaseType_t xTaskResumeAll( void )
 800632a:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 800632c:	f7ff fd12 	bl	8005d54 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	3b01      	subs	r3, #1
 8006334:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d167      	bne.n	800640c <xTaskResumeAll.part.0+0xe8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800633c:	4b41      	ldr	r3, [pc, #260]	; (8006444 <xTaskResumeAll.part.0+0x120>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d063      	beq.n	800640c <xTaskResumeAll.part.0+0xe8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006344:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006460 <xTaskResumeAll.part.0+0x13c>
 8006348:	f8db 3000 	ldr.w	r3, [fp]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d073      	beq.n	8006438 <xTaskResumeAll.part.0+0x114>
 8006350:	4b3d      	ldr	r3, [pc, #244]	; (8006448 <xTaskResumeAll.part.0+0x124>)
 8006352:	4d3e      	ldr	r5, [pc, #248]	; (800644c <xTaskResumeAll.part.0+0x128>)
 8006354:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8006464 <xTaskResumeAll.part.0+0x140>
 8006358:	4f3d      	ldr	r7, [pc, #244]	; (8006450 <xTaskResumeAll.part.0+0x12c>)
 800635a:	9301      	str	r3, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800635c:	2601      	movs	r6, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800635e:	f8db 300c 	ldr.w	r3, [fp, #12]
 8006362:	f8d3 a00c 	ldr.w	sl, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006366:	f10a 0904 	add.w	r9, sl, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800636a:	f10a 0018 	add.w	r0, sl, #24
 800636e:	f7ff fc77 	bl	8005c60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006372:	4648      	mov	r0, r9
 8006374:	f7ff fc74 	bl	8005c60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006378:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 800637c:	682a      	ldr	r2, [r5, #0]
 800637e:	fa06 f300 	lsl.w	r3, r6, r0
 8006382:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006386:	4313      	orrs	r3, r2
 8006388:	4649      	mov	r1, r9
 800638a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800638e:	602b      	str	r3, [r5, #0]
 8006390:	f7ff fc3e 	bl	8005c10 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 800639a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639c:	429a      	cmp	r2, r3
 800639e:	d33d      	bcc.n	800641c <xTaskResumeAll.part.0+0xf8>
						xYieldPending = pdTRUE;
 80063a0:	9b01      	ldr	r3, [sp, #4]
 80063a2:	601e      	str	r6, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063a4:	f8db 3000 	ldr.w	r3, [fp]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1d8      	bne.n	800635e <xTaskResumeAll.part.0+0x3a>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063ac:	4b29      	ldr	r3, [pc, #164]	; (8006454 <xTaskResumeAll.part.0+0x130>)
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	6812      	ldr	r2, [r2, #0]
 80063b2:	2a00      	cmp	r2, #0
 80063b4:	d03b      	beq.n	800642e <xTaskResumeAll.part.0+0x10a>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063b6:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063b8:	4b27      	ldr	r3, [pc, #156]	; (8006458 <xTaskResumeAll.part.0+0x134>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063ba:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063bc:	68d2      	ldr	r2, [r2, #12]
 80063be:	6852      	ldr	r2, [r2, #4]
 80063c0:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80063c2:	4e26      	ldr	r6, [pc, #152]	; (800645c <xTaskResumeAll.part.0+0x138>)
 80063c4:	6835      	ldr	r5, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80063c6:	b195      	cbz	r5, 80063ee <xTaskResumeAll.part.0+0xca>
								xYieldPending = pdTRUE;
 80063c8:	2701      	movs	r7, #1
 80063ca:	e006      	b.n	80063da <xTaskResumeAll.part.0+0xb6>
 80063cc:	f7ff ff00 	bl	80061d0 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 80063d0:	b108      	cbz	r0, 80063d6 <xTaskResumeAll.part.0+0xb2>
								xYieldPending = pdTRUE;
 80063d2:	9b01      	ldr	r3, [sp, #4]
 80063d4:	601f      	str	r7, [r3, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80063d6:	3d01      	subs	r5, #1
 80063d8:	d008      	beq.n	80063ec <xTaskResumeAll.part.0+0xc8>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0f5      	beq.n	80063cc <xTaskResumeAll.part.0+0xa8>
		++xPendedTicks;
 80063e0:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80063e2:	3d01      	subs	r5, #1
		++xPendedTicks;
 80063e4:	f103 0301 	add.w	r3, r3, #1
 80063e8:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80063ea:	d1f6      	bne.n	80063da <xTaskResumeAll.part.0+0xb6>
						xPendedTicks = 0;
 80063ec:	6035      	str	r5, [r6, #0]
				if( xYieldPending != pdFALSE )
 80063ee:	9b01      	ldr	r3, [sp, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	b15b      	cbz	r3, 800640c <xTaskResumeAll.part.0+0xe8>
					taskYIELD_IF_USING_PREEMPTION();
 80063f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80063f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006408:	2001      	movs	r0, #1
 800640a:	e000      	b.n	800640e <xTaskResumeAll.part.0+0xea>
BaseType_t xAlreadyYielded = pdFALSE;
 800640c:	2000      	movs	r0, #0
 800640e:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8006410:	f7ff fcc2 	bl	8005d98 <vPortExitCritical>
}
 8006414:	9801      	ldr	r0, [sp, #4]
 8006416:	b003      	add	sp, #12
 8006418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800641c:	f8db 3000 	ldr.w	r3, [fp]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d19c      	bne.n	800635e <xTaskResumeAll.part.0+0x3a>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006424:	4b0b      	ldr	r3, [pc, #44]	; (8006454 <xTaskResumeAll.part.0+0x130>)
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	6812      	ldr	r2, [r2, #0]
 800642a:	2a00      	cmp	r2, #0
 800642c:	d1c3      	bne.n	80063b6 <xTaskResumeAll.part.0+0x92>
		xNextTaskUnblockTime = portMAX_DELAY;
 800642e:	4b0a      	ldr	r3, [pc, #40]	; (8006458 <xTaskResumeAll.part.0+0x134>)
 8006430:	f04f 32ff 	mov.w	r2, #4294967295
 8006434:	601a      	str	r2, [r3, #0]
 8006436:	e7c4      	b.n	80063c2 <xTaskResumeAll.part.0+0x9e>
 8006438:	4b03      	ldr	r3, [pc, #12]	; (8006448 <xTaskResumeAll.part.0+0x124>)
 800643a:	9301      	str	r3, [sp, #4]
 800643c:	e7c1      	b.n	80063c2 <xTaskResumeAll.part.0+0x9e>
 800643e:	bf00      	nop
 8006440:	200059cc 	.word	0x200059cc
 8006444:	200059c4 	.word	0x200059c4
 8006448:	20005a50 	.word	0x20005a50
 800644c:	200059d4 	.word	0x200059d4
 8006450:	2000592c 	.word	0x2000592c
 8006454:	20005930 	.word	0x20005930
 8006458:	20005a00 	.word	0x20005a00
 800645c:	20005a08 	.word	0x20005a08
 8006460:	20005a0c 	.word	0x20005a0c
 8006464:	20005938 	.word	0x20005938

08006468 <xTaskCreateStatic>:
	{
 8006468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800646c:	b084      	sub	sp, #16
 800646e:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8006472:	b1c5      	cbz	r5, 80064a6 <xTaskCreateStatic+0x3e>
		configASSERT( pxTaskBuffer != NULL );
 8006474:	b174      	cbz	r4, 8006494 <xTaskCreateStatic+0x2c>
 8006476:	4606      	mov	r6, r0
			volatile size_t xSize = sizeof( StaticTask_t );
 8006478:	20a0      	movs	r0, #160	; 0xa0
 800647a:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 800647c:	9803      	ldr	r0, [sp, #12]
 800647e:	28a0      	cmp	r0, #160	; 0xa0
 8006480:	d01a      	beq.n	80064b8 <xTaskCreateStatic+0x50>
 8006482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	e7fe      	b.n	8006492 <xTaskCreateStatic+0x2a>
 8006494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80064a4:	e7fe      	b.n	80064a4 <xTaskCreateStatic+0x3c>
 80064a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80064b6:	e7fe      	b.n	80064b6 <xTaskCreateStatic+0x4e>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80064b8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80064bc:	3a01      	subs	r2, #1
 80064be:	eb05 0282 	add.w	r2, r5, r2, lsl #2
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80064c2:	6325      	str	r5, [r4, #48]	; 0x30
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80064c4:	f022 0507 	bic.w	r5, r2, #7
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80064c8:	2202      	movs	r2, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80064ca:	9803      	ldr	r0, [sp, #12]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80064cc:	f884 209d 	strb.w	r2, [r4, #157]	; 0x9d
	if( pcName != NULL )
 80064d0:	2900      	cmp	r1, #0
 80064d2:	d078      	beq.n	80065c6 <xTaskCreateStatic+0x15e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064d4:	780a      	ldrb	r2, [r1, #0]
 80064d6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 80064da:	2a00      	cmp	r2, #0
 80064dc:	d03b      	beq.n	8006556 <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064de:	784a      	ldrb	r2, [r1, #1]
 80064e0:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 80064e4:	2a00      	cmp	r2, #0
 80064e6:	d036      	beq.n	8006556 <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064e8:	788a      	ldrb	r2, [r1, #2]
 80064ea:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 80064ee:	b392      	cbz	r2, 8006556 <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064f0:	78ca      	ldrb	r2, [r1, #3]
 80064f2:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 80064f6:	b372      	cbz	r2, 8006556 <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064f8:	790a      	ldrb	r2, [r1, #4]
 80064fa:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 80064fe:	b352      	cbz	r2, 8006556 <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006500:	794a      	ldrb	r2, [r1, #5]
 8006502:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 8006506:	b332      	cbz	r2, 8006556 <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006508:	798a      	ldrb	r2, [r1, #6]
 800650a:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 800650e:	b312      	cbz	r2, 8006556 <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006510:	79ca      	ldrb	r2, [r1, #7]
 8006512:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 8006516:	b1f2      	cbz	r2, 8006556 <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006518:	7a0a      	ldrb	r2, [r1, #8]
 800651a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 800651e:	b1d2      	cbz	r2, 8006556 <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006520:	7a4a      	ldrb	r2, [r1, #9]
 8006522:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 8006526:	b1b2      	cbz	r2, 8006556 <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006528:	7a8a      	ldrb	r2, [r1, #10]
 800652a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 800652e:	b192      	cbz	r2, 8006556 <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006530:	7aca      	ldrb	r2, [r1, #11]
 8006532:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 8006536:	b172      	cbz	r2, 8006556 <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006538:	7b0a      	ldrb	r2, [r1, #12]
 800653a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 800653e:	b152      	cbz	r2, 8006556 <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006540:	7b4a      	ldrb	r2, [r1, #13]
 8006542:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 8006546:	b132      	cbz	r2, 8006556 <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006548:	7b8a      	ldrb	r2, [r1, #14]
 800654a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
 800654e:	b112      	cbz	r2, 8006556 <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006550:	7bca      	ldrb	r2, [r1, #15]
 8006552:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006556:	2200      	movs	r2, #0
 8006558:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800655c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800655e:	9301      	str	r3, [sp, #4]
 8006560:	2f06      	cmp	r7, #6
 8006562:	bf28      	it	cs
 8006564:	2706      	movcs	r7, #6
		pxNewTCB->uxMutexesHeld = 0;
 8006566:	f04f 0800 	mov.w	r8, #0
	pxNewTCB->uxPriority = uxPriority;
 800656a:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800656c:	6467      	str	r7, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800656e:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8006570:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006574:	f7ff fb48 	bl	8005c08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006578:	f104 0018 	add.w	r0, r4, #24
 800657c:	f7ff fb44 	bl	8005c08 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006580:	f1c7 0707 	rsb	r7, r7, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006584:	224c      	movs	r2, #76	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006586:	61a7      	str	r7, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 8006588:	f8c4 8098 	str.w	r8, [r4, #152]	; 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800658c:	4641      	mov	r1, r8
 800658e:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006590:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006592:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006594:	f884 809c 	strb.w	r8, [r4, #156]	; 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006598:	f002 f9be 	bl	8008918 <memset>
 800659c:	4f0b      	ldr	r7, [pc, #44]	; (80065cc <xTaskCreateStatic+0x164>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800659e:	9b01      	ldr	r3, [sp, #4]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80065a0:	6527      	str	r7, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065a2:	461a      	mov	r2, r3
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80065a4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80065a8:	37d0      	adds	r7, #208	; 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065aa:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80065ac:	6563      	str	r3, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065ae:	4628      	mov	r0, r5
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80065b0:	65a7      	str	r7, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065b2:	f7ff fba7 	bl	8005d04 <pxPortInitialiseStack>
 80065b6:	6020      	str	r0, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 80065b8:	4620      	mov	r0, r4
 80065ba:	f7ff fceb 	bl	8005f94 <prvAddNewTaskToReadyList>
	}
 80065be:	4620      	mov	r0, r4
 80065c0:	b004      	add	sp, #16
 80065c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80065c6:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 80065ca:	e7c7      	b.n	800655c <xTaskCreateStatic+0xf4>
 80065cc:	20005a58 	.word	0x20005a58

080065d0 <xTaskCreate>:
	{
 80065d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80065d4:	ea4f 0982 	mov.w	r9, r2, lsl #2
	{
 80065d8:	4607      	mov	r7, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80065da:	4648      	mov	r0, r9
	{
 80065dc:	460d      	mov	r5, r1
 80065de:	4698      	mov	r8, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80065e0:	f7ff f9e6 	bl	80059b0 <pvPortMalloc>
			if( pxStack != NULL )
 80065e4:	2800      	cmp	r0, #0
 80065e6:	f000 808c 	beq.w	8006702 <xTaskCreate+0x132>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80065ea:	4682      	mov	sl, r0
 80065ec:	20a0      	movs	r0, #160	; 0xa0
 80065ee:	f7ff f9df 	bl	80059b0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80065f2:	4604      	mov	r4, r0
 80065f4:	2800      	cmp	r0, #0
 80065f6:	f000 8088 	beq.w	800670a <xTaskCreate+0x13a>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80065fa:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 80065fc:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006600:	f880 309d 	strb.w	r3, [r0, #157]	; 0x9d
	if( pcName != NULL )
 8006604:	2d00      	cmp	r5, #0
 8006606:	f000 8086 	beq.w	8006716 <xTaskCreate+0x146>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800660a:	782b      	ldrb	r3, [r5, #0]
 800660c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8006610:	2b00      	cmp	r3, #0
 8006612:	d03b      	beq.n	800668c <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006614:	786b      	ldrb	r3, [r5, #1]
 8006616:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 800661a:	2b00      	cmp	r3, #0
 800661c:	d036      	beq.n	800668c <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800661e:	78ab      	ldrb	r3, [r5, #2]
 8006620:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 8006624:	b393      	cbz	r3, 800668c <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006626:	78eb      	ldrb	r3, [r5, #3]
 8006628:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 800662c:	b373      	cbz	r3, 800668c <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800662e:	792b      	ldrb	r3, [r5, #4]
 8006630:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 8006634:	b353      	cbz	r3, 800668c <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006636:	796b      	ldrb	r3, [r5, #5]
 8006638:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 800663c:	b333      	cbz	r3, 800668c <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800663e:	79ab      	ldrb	r3, [r5, #6]
 8006640:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 8006644:	b313      	cbz	r3, 800668c <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006646:	79eb      	ldrb	r3, [r5, #7]
 8006648:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 800664c:	b1f3      	cbz	r3, 800668c <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800664e:	7a2b      	ldrb	r3, [r5, #8]
 8006650:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 8006654:	b1d3      	cbz	r3, 800668c <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006656:	7a6b      	ldrb	r3, [r5, #9]
 8006658:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 800665c:	b1b3      	cbz	r3, 800668c <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800665e:	7aab      	ldrb	r3, [r5, #10]
 8006660:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 8006664:	b193      	cbz	r3, 800668c <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006666:	7aeb      	ldrb	r3, [r5, #11]
 8006668:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 800666c:	b173      	cbz	r3, 800668c <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800666e:	7b2b      	ldrb	r3, [r5, #12]
 8006670:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 8006674:	b153      	cbz	r3, 800668c <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006676:	7b6b      	ldrb	r3, [r5, #13]
 8006678:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 800667c:	b133      	cbz	r3, 800668c <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800667e:	7bab      	ldrb	r3, [r5, #14]
 8006680:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
 8006684:	b113      	cbz	r3, 800668c <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006686:	7beb      	ldrb	r3, [r5, #15]
 8006688:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800668c:	2300      	movs	r3, #0
 800668e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006692:	9e08      	ldr	r6, [sp, #32]
 8006694:	2e06      	cmp	r6, #6
 8006696:	bf28      	it	cs
 8006698:	2606      	movcs	r6, #6
		pxNewTCB->uxMutexesHeld = 0;
 800669a:	2500      	movs	r5, #0
 800669c:	64a5      	str	r5, [r4, #72]	; 0x48
	pxNewTCB->uxPriority = uxPriority;
 800669e:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80066a0:	6466      	str	r6, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80066a2:	1d20      	adds	r0, r4, #4
 80066a4:	f7ff fab0 	bl	8005c08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80066a8:	f104 0018 	add.w	r0, r4, #24
 80066ac:	f7ff faac 	bl	8005c08 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066b0:	f1c6 0607 	rsb	r6, r6, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80066b4:	224c      	movs	r2, #76	; 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 80066b6:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80066ba:	4629      	mov	r1, r5
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80066bc:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80066c0:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066c2:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80066c4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80066c6:	6264      	str	r4, [r4, #36]	; 0x24
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80066c8:	f002 f926 	bl	8008918 <memset>
 80066cc:	4b13      	ldr	r3, [pc, #76]	; (800671c <xTaskCreate+0x14c>)
 80066ce:	6523      	str	r3, [r4, #80]	; 0x50
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80066d0:	f1a9 0204 	sub.w	r2, r9, #4
 80066d4:	eb0a 0002 	add.w	r0, sl, r2
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80066d8:	f103 0568 	add.w	r5, r3, #104	; 0x68
 80066dc:	33d0      	adds	r3, #208	; 0xd0
 80066de:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80066e0:	4642      	mov	r2, r8
 80066e2:	4639      	mov	r1, r7
 80066e4:	f020 0007 	bic.w	r0, r0, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80066e8:	6565      	str	r5, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80066ea:	f7ff fb0b 	bl	8005d04 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 80066ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80066f0:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80066f2:	b103      	cbz	r3, 80066f6 <xTaskCreate+0x126>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80066f4:	601c      	str	r4, [r3, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 80066f6:	4620      	mov	r0, r4
 80066f8:	f7ff fc4c 	bl	8005f94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80066fc:	2001      	movs	r0, #1
	}
 80066fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006702:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8006706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					vPortFree( pxStack );
 800670a:	4650      	mov	r0, sl
 800670c:	f7ff fa0c 	bl	8005b28 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006710:	f04f 30ff 	mov.w	r0, #4294967295
 8006714:	e7f3      	b.n	80066fe <xTaskCreate+0x12e>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006716:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
 800671a:	e7ba      	b.n	8006692 <xTaskCreate+0xc2>
 800671c:	20005a58 	.word	0x20005a58

08006720 <vTaskDelay>:
	{
 8006720:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006722:	b950      	cbnz	r0, 800673a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8006724:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800672c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	f3bf 8f6f 	isb	sy
	}
 8006738:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800673a:	4c10      	ldr	r4, [pc, #64]	; (800677c <vTaskDelay+0x5c>)
 800673c:	6821      	ldr	r1, [r4, #0]
 800673e:	b141      	cbz	r1, 8006752 <vTaskDelay+0x32>
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	e7fe      	b.n	8006750 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	3301      	adds	r3, #1
 8006756:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006758:	f7ff fca4 	bl	80060a4 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	b943      	cbnz	r3, 8006772 <vTaskDelay+0x52>
 8006760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	e7fe      	b.n	8006770 <vTaskDelay+0x50>
 8006772:	f7ff fdd7 	bl	8006324 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8006776:	2800      	cmp	r0, #0
 8006778:	d0d4      	beq.n	8006724 <vTaskDelay+0x4>
	}
 800677a:	bd10      	pop	{r4, pc}
 800677c:	200059cc 	.word	0x200059cc

08006780 <vTaskStartScheduler>:
{
 8006780:	b570      	push	{r4, r5, r6, lr}
 8006782:	b084      	sub	sp, #16
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006784:	aa02      	add	r2, sp, #8
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006786:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006788:	a901      	add	r1, sp, #4
 800678a:	4668      	mov	r0, sp
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800678c:	e9cd 4400 	strd	r4, r4, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006790:	f7fa fa68 	bl	8000c64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006794:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8006798:	9d00      	ldr	r5, [sp, #0]
		configASSERT( puxStackBuffer != NULL );
 800679a:	b1bb      	cbz	r3, 80067cc <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
 800679c:	b16d      	cbz	r5, 80067ba <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800679e:	21a0      	movs	r1, #160	; 0xa0
 80067a0:	9103      	str	r1, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 80067a2:	9903      	ldr	r1, [sp, #12]
 80067a4:	29a0      	cmp	r1, #160	; 0xa0
 80067a6:	d01a      	beq.n	80067de <vTaskStartScheduler+0x5e>
 80067a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	e7fe      	b.n	80067b8 <vTaskStartScheduler+0x38>
 80067ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80067ca:	e7fe      	b.n	80067ca <vTaskStartScheduler+0x4a>
 80067cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d0:	f383 8811 	msr	BASEPRI, r3
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80067dc:	e7fe      	b.n	80067dc <vTaskStartScheduler+0x5c>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80067de:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80067e2:	3a01      	subs	r2, #1
 80067e4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80067e8:	2102      	movs	r1, #2
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80067ea:	632b      	str	r3, [r5, #48]	; 0x30
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067ec:	4b26      	ldr	r3, [pc, #152]	; (8006888 <vTaskStartScheduler+0x108>)
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80067ee:	f885 109d 	strb.w	r1, [r5, #157]	; 0x9d
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067f2:	1d28      	adds	r0, r5, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067f4:	636b      	str	r3, [r5, #52]	; 0x34
		pxNewTCB->uxMutexesHeld = 0;
 80067f6:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067fa:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067fe:	f885 4043 	strb.w	r4, [r5, #67]	; 0x43
	pxNewTCB->uxPriority = uxPriority;
 8006802:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006804:	f022 0607 	bic.w	r6, r2, #7
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006808:	9b03      	ldr	r3, [sp, #12]
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800680a:	f7ff f9fd 	bl	8005c08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800680e:	f105 0018 	add.w	r0, r5, #24
 8006812:	f7ff f9f9 	bl	8005c08 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006816:	2307      	movs	r3, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006818:	224c      	movs	r2, #76	; 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 800681a:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800681e:	4621      	mov	r1, r4
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006820:	61ab      	str	r3, [r5, #24]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006822:	18a8      	adds	r0, r5, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006824:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006826:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006828:	f885 409c 	strb.w	r4, [r5, #156]	; 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800682c:	f002 f874 	bl	8008918 <memset>
 8006830:	4b16      	ldr	r3, [pc, #88]	; (800688c <vTaskStartScheduler+0x10c>)
 8006832:	652b      	str	r3, [r5, #80]	; 0x50
 8006834:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006838:	33d0      	adds	r3, #208	; 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800683a:	4915      	ldr	r1, [pc, #84]	; (8006890 <vTaskStartScheduler+0x110>)
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800683c:	656a      	str	r2, [r5, #84]	; 0x54
 800683e:	65ab      	str	r3, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006840:	4622      	mov	r2, r4
 8006842:	4630      	mov	r0, r6
 8006844:	f7ff fa5e 	bl	8005d04 <pxPortInitialiseStack>
 8006848:	6028      	str	r0, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 800684a:	4628      	mov	r0, r5
 800684c:	f7ff fba2 	bl	8005f94 <prvAddNewTaskToReadyList>
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8006860:	4a0c      	ldr	r2, [pc, #48]	; (8006894 <vTaskStartScheduler+0x114>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006862:	4b0d      	ldr	r3, [pc, #52]	; (8006898 <vTaskStartScheduler+0x118>)
 8006864:	490d      	ldr	r1, [pc, #52]	; (800689c <vTaskStartScheduler+0x11c>)
 8006866:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8006868:	f04f 30ff 	mov.w	r0, #4294967295
 800686c:	6010      	str	r0, [r2, #0]
		xSchedulerRunning = pdTRUE;
 800686e:	4a0c      	ldr	r2, [pc, #48]	; (80068a0 <vTaskStartScheduler+0x120>)
 8006870:	2001      	movs	r0, #1
 8006872:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006874:	4a0b      	ldr	r2, [pc, #44]	; (80068a4 <vTaskStartScheduler+0x124>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006876:	334c      	adds	r3, #76	; 0x4c
 8006878:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800687a:	6014      	str	r4, [r2, #0]
}
 800687c:	b004      	add	sp, #16
 800687e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
 8006882:	f7ff bae5 	b.w	8005e50 <xPortStartScheduler>
 8006886:	bf00      	nop
 8006888:	454c4449 	.word	0x454c4449
 800688c:	20005a58 	.word	0x20005a58
 8006890:	08006131 	.word	0x08006131
 8006894:	20005a00 	.word	0x20005a00
 8006898:	2000592c 	.word	0x2000592c
 800689c:	200005c0 	.word	0x200005c0
 80068a0:	20005a20 	.word	0x20005a20
 80068a4:	20005a4c 	.word	0x20005a4c

080068a8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80068a8:	4a02      	ldr	r2, [pc, #8]	; (80068b4 <vTaskSuspendAll+0xc>)
 80068aa:	6813      	ldr	r3, [r2, #0]
 80068ac:	3301      	adds	r3, #1
 80068ae:	6013      	str	r3, [r2, #0]
}
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	200059cc 	.word	0x200059cc

080068b8 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80068b8:	4b06      	ldr	r3, [pc, #24]	; (80068d4 <xTaskResumeAll+0x1c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	b943      	cbnz	r3, 80068d0 <xTaskResumeAll+0x18>
 80068be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	e7fe      	b.n	80068ce <xTaskResumeAll+0x16>
 80068d0:	f7ff bd28 	b.w	8006324 <xTaskResumeAll.part.0>
 80068d4:	200059cc 	.word	0x200059cc

080068d8 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068d8:	4b05      	ldr	r3, [pc, #20]	; (80068f0 <xTaskIncrementTick+0x18>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	b90b      	cbnz	r3, 80068e2 <xTaskIncrementTick+0xa>
 80068de:	f7ff bc77 	b.w	80061d0 <xTaskIncrementTick.part.0>
		++xPendedTicks;
 80068e2:	4a04      	ldr	r2, [pc, #16]	; (80068f4 <xTaskIncrementTick+0x1c>)
 80068e4:	6813      	ldr	r3, [r2, #0]
 80068e6:	3301      	adds	r3, #1
}
 80068e8:	2000      	movs	r0, #0
		++xPendedTicks;
 80068ea:	6013      	str	r3, [r2, #0]
}
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	200059cc 	.word	0x200059cc
 80068f4:	20005a08 	.word	0x20005a08

080068f8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068f8:	4b18      	ldr	r3, [pc, #96]	; (800695c <vTaskSwitchContext+0x64>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	b11b      	cbz	r3, 8006906 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80068fe:	4b18      	ldr	r3, [pc, #96]	; (8006960 <vTaskSwitchContext+0x68>)
 8006900:	2201      	movs	r2, #1
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8006906:	4916      	ldr	r1, [pc, #88]	; (8006960 <vTaskSwitchContext+0x68>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006908:	4a16      	ldr	r2, [pc, #88]	; (8006964 <vTaskSwitchContext+0x6c>)
		xYieldPending = pdFALSE;
 800690a:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800690c:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800690e:	fab3 f383 	clz	r3, r3
 8006912:	b2db      	uxtb	r3, r3
 8006914:	f1c3 031f 	rsb	r3, r3, #31
 8006918:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800691c:	4a12      	ldr	r2, [pc, #72]	; (8006968 <vTaskSwitchContext+0x70>)
 800691e:	0099      	lsls	r1, r3, #2
 8006920:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006924:	5850      	ldr	r0, [r2, r1]
 8006926:	b940      	cbnz	r0, 800693a <vTaskSwitchContext+0x42>
	__asm volatile
 8006928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692c:	f383 8811 	msr	BASEPRI, r3
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	e7fe      	b.n	8006938 <vTaskSwitchContext+0x40>
 800693a:	6858      	ldr	r0, [r3, #4]
 800693c:	3108      	adds	r1, #8
 800693e:	6840      	ldr	r0, [r0, #4]
 8006940:	6058      	str	r0, [r3, #4]
 8006942:	440a      	add	r2, r1
 8006944:	4290      	cmp	r0, r2
 8006946:	bf04      	itt	eq
 8006948:	6840      	ldreq	r0, [r0, #4]
 800694a:	6058      	streq	r0, [r3, #4]
 800694c:	4b07      	ldr	r3, [pc, #28]	; (800696c <vTaskSwitchContext+0x74>)
 800694e:	68c2      	ldr	r2, [r0, #12]
 8006950:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a06      	ldr	r2, [pc, #24]	; (8006970 <vTaskSwitchContext+0x78>)
 8006956:	334c      	adds	r3, #76	; 0x4c
 8006958:	6013      	str	r3, [r2, #0]
}
 800695a:	4770      	bx	lr
 800695c:	200059cc 	.word	0x200059cc
 8006960:	20005a50 	.word	0x20005a50
 8006964:	200059d4 	.word	0x200059d4
 8006968:	20005938 	.word	0x20005938
 800696c:	2000592c 	.word	0x2000592c
 8006970:	200005c0 	.word	0x200005c0

08006974 <VBS_GetAvBusVoltage_d>:
  }
  return (temp_avBusVoltage_d);
#else
  return (pHandle->AvBusVoltage_d);
#endif
}
 8006974:	88c0      	ldrh	r0, [r0, #6]
 8006976:	4770      	bx	lr

08006978 <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8006978:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 800697a:	8840      	ldrh	r0, [r0, #2]
 800697c:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 8006980:	0c00      	lsrs	r0, r0, #16
 8006982:	4770      	bx	lr

08006984 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8006984:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8006986:	8803      	ldrh	r3, [r0, #0]
 8006988:	140d      	asrs	r5, r1, #16
{
 800698a:	b084      	sub	sp, #16
 800698c:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 800698e:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 8006992:	fb03 f303 	mul.w	r3, r3, r3
{
 8006996:	9101      	str	r1, [sp, #4]
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8006998:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 800699c:	428b      	cmp	r3, r1
 800699e:	da10      	bge.n	80069c2 <Circle_Limitation+0x3e>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 80069a0:	8846      	ldrh	r6, [r0, #2]
 80069a2:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 80069a6:	4282      	cmp	r2, r0
 80069a8:	dd14      	ble.n	80069d4 <Circle_Limitation+0x50>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 80069aa:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 80069ac:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 80069b0:	bfb8      	it	lt
 80069b2:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 80069b4:	f7fa ff5c 	bl	8001870 <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 80069b8:	2c00      	cmp	r4, #0
        {
          new_q = - new_q;
 80069ba:	bfb8      	it	lt
 80069bc:	4240      	neglt	r0, r0
        }
      }
      Local_Vqd.q = (int16_t)new_q;
      Local_Vqd.d = (int16_t)new_d;
 80069be:	b235      	sxth	r5, r6
      Local_Vqd.q = (int16_t)new_q;
 80069c0:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (Local_Vqd);
 80069c2:	b2a4      	uxth	r4, r4
 80069c4:	2000      	movs	r0, #0
 80069c6:	f364 000f 	bfi	r0, r4, #0, #16
 80069ca:	b2ad      	uxth	r5, r5
 80069cc:	f365 401f 	bfi	r0, r5, #16, #16
}
 80069d0:	b004      	add	sp, #16
 80069d2:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 80069d4:	1a98      	subs	r0, r3, r2
 80069d6:	f7fa ff4b 	bl	8001870 <MCM_Sqrt>
        if (Vqd.q < 0)
 80069da:	2c00      	cmp	r4, #0
 80069dc:	daf0      	bge.n	80069c0 <Circle_Limitation+0x3c>
          new_q = -new_q;
 80069de:	4240      	negs	r0, r0
 80069e0:	e7ee      	b.n	80069c0 <Circle_Limitation+0x3c>
 80069e2:	bf00      	nop

080069e4 <MCP_ReceivedPacket>:
#include "mc_config.h"
#include "mcp_config.h"
#include "mc_api.h"

void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 80069e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Nothing to do, txBuffer and txLength have not been modified */
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 80069e6:	6845      	ldr	r5, [r0, #4]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80069e8:	882b      	ldrh	r3, [r5, #0]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80069ea:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80069ee:	f023 0c07 	bic.w	ip, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80069f2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 80069f6:	b083      	sub	sp, #12
 80069f8:	4604      	mov	r4, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80069fa:	fa1f fc8c 	uxth.w	ip, ip
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80069fe:	d051      	beq.n	8006aa4 <MCP_ReceivedPacket+0xc0>
    {
      userCommand = (command >> 3) & 0x1f;
      command = MCP_USER_CMD;    	
    }

    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 8006a00:	3b01      	subs	r3, #1

    
    MCI_Handle_t *pMCI = &Mci[motorID];
 8006a02:	4f5a      	ldr	r7, [pc, #360]	; (8006b6c <MCP_ReceivedPacket+0x188>)
 8006a04:	f003 0307 	and.w	r3, r3, #7
 8006a08:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    /* Removing MCP Header from RxBuffer*/
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8006a0c:	3502      	adds	r5, #2
    MCI_Handle_t *pMCI = &Mci[motorID];
 8006a0e:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    /* Commands requiering payload response must be aware of space available for the payload*/
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8006a12:	6823      	ldr	r3, [r4, #0]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8006a14:	6045      	str	r5, [r0, #4]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8006a16:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8006a18:	899a      	ldrh	r2, [r3, #12]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8006a1a:	3802      	subs	r0, #2
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8006a1c:	3a01      	subs	r2, #1
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8006a1e:	b280      	uxth	r0, r0
    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0;
 8006a20:	2600      	movs	r6, #0

    switch (command)
 8006a22:	f1bc 0f38 	cmp.w	ip, #56	; 0x38
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8006a26:	b291      	uxth	r1, r2
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8006a28:	81a0      	strh	r0, [r4, #12]
    pHandle->txLength = 0;
 8006a2a:	81e6      	strh	r6, [r4, #14]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8006a2c:	b212      	sxth	r2, r2
    switch (command)
 8006a2e:	d82a      	bhi.n	8006a86 <MCP_ReceivedPacket+0xa2>
 8006a30:	f1bc 0f38 	cmp.w	ip, #56	; 0x38
 8006a34:	d81e      	bhi.n	8006a74 <MCP_ReceivedPacket+0x90>
 8006a36:	e8df f00c 	tbb	[pc, ip]
 8006a3a:	1d5e      	.short	0x1d5e
 8006a3c:	1d1d1d1d 	.word	0x1d1d1d1d
 8006a40:	1d661d1d 	.word	0x1d661d1d
 8006a44:	1d1d1d1d 	.word	0x1d1d1d1d
 8006a48:	1d591d1d 	.word	0x1d591d1d
 8006a4c:	1d1d1d1d 	.word	0x1d1d1d1d
 8006a50:	1d511d1d 	.word	0x1d511d1d
 8006a54:	1d1d1d1d 	.word	0x1d1d1d1d
 8006a58:	1d4b1d1d 	.word	0x1d4b1d1d
 8006a5c:	1d1d1d1d 	.word	0x1d1d1d1d
 8006a60:	1d6b1d1d 	.word	0x1d6b1d1d
 8006a64:	1d1d1d1d 	.word	0x1d1d1d1d
 8006a68:	1d471d1d 	.word	0x1d471d1d
 8006a6c:	1d1d1d1d 	.word	0x1d1d1d1d
 8006a70:	1d1d      	.short	0x1d1d
 8006a72:	76          	.byte	0x76
 8006a73:	00          	.byte	0x00
 8006a74:	2300      	movs	r3, #0
 8006a76:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8006a78:	68a2      	ldr	r2, [r4, #8]
 8006a7a:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 8006a7c:	89e3      	ldrh	r3, [r4, #14]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 8006a82:	b003      	add	sp, #12
 8006a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 8006a86:	f1bc 0f68 	cmp.w	ip, #104	; 0x68
 8006a8a:	d063      	beq.n	8006b54 <MCP_ReceivedPacket+0x170>
 8006a8c:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8006a90:	d069      	beq.n	8006b66 <MCP_ReceivedPacket+0x182>
 8006a92:	f1bc 0f48 	cmp.w	ip, #72	; 0x48
 8006a96:	d1ed      	bne.n	8006a74 <MCP_ReceivedPacket+0x90>
        MCI_Clear_Iqdref(pMCI);
 8006a98:	4638      	mov	r0, r7
 8006a9a:	f7fa fe07 	bl	80016ac <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8006a9e:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8006aa0:	4630      	mov	r0, r6
        break;
 8006aa2:	e7e9      	b.n	8006a78 <MCP_ReceivedPacket+0x94>
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8006aa4:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8006aa6:	6823      	ldr	r3, [r4, #0]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8006aa8:	3802      	subs	r0, #2
      userCommand = (command >> 3) & 0x1f;
 8006aaa:	f3cc 0cc7 	ubfx	ip, ip, #3, #8
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8006aae:	899a      	ldrh	r2, [r3, #12]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8006ab0:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8006ab2:	3502      	adds	r5, #2
    pHandle->txLength = 0;
 8006ab4:	2300      	movs	r3, #0
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8006ab6:	f01c 0f1e 	tst.w	ip, #30
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8006aba:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8006abc:	6065      	str	r5, [r4, #4]
    pHandle->txLength = 0;
 8006abe:	81e3      	strh	r3, [r4, #14]
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8006ac0:	d037      	beq.n	8006b32 <MCP_ReceivedPacket+0x14e>
        MCPResponse = MCP_CMD_OK;
 8006ac2:	2300      	movs	r3, #0
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8006ac4:	200d      	movs	r0, #13
 8006ac6:	e7d7      	b.n	8006a78 <MCP_ReceivedPacket+0x94>
        if (IDLE == MCI_GetSTMState(pMCI))
 8006ac8:	4638      	mov	r0, r7
 8006aca:	f7fa fce5 	bl	8001498 <MCI_GetSTMState>
 8006ace:	b128      	cbz	r0, 8006adc <MCP_ReceivedPacket+0xf8>
          (void)MCI_StopMotor(pMCI);
 8006ad0:	4638      	mov	r0, r7
 8006ad2:	f7fa fcfd 	bl	80014d0 <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8006ad6:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_CMD_OK;
 8006ad8:	2000      	movs	r0, #0
 8006ada:	e7cd      	b.n	8006a78 <MCP_ReceivedPacket+0x94>
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 8006adc:	4638      	mov	r0, r7
 8006ade:	f7fa fce1 	bl	80014a4 <MCI_StartMotor>
 8006ae2:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8006ae6:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 8006ae8:	b2c0      	uxtb	r0, r0
 8006aea:	e7c5      	b.n	8006a78 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_GetRegCommandParser(pHandle, txSyncFreeSpace);
 8006aec:	4620      	mov	r0, r4
 8006aee:	f7fc f989 	bl	8002e04 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8006af2:	89e3      	ldrh	r3, [r4, #14]
        break;
 8006af4:	e7c0      	b.n	8006a78 <MCP_ReceivedPacket+0x94>
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8006af6:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4;
 8006af8:	2104      	movs	r1, #4
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8006afa:	2201      	movs	r2, #1
        pHandle->txLength = 4;
 8006afc:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8006afe:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8006b00:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8006b02:	2000      	movs	r0, #0
      break;
 8006b04:	e7b8      	b.n	8006a78 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_SetRegCommandParser(pHandle, txSyncFreeSpace);
 8006b06:	4620      	mov	r0, r4
 8006b08:	f7fb fd92 	bl	8002630 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8006b0c:	89e3      	ldrh	r3, [r4, #14]
        break;
 8006b0e:	e7b3      	b.n	8006a78 <MCP_ReceivedPacket+0x94>
        if (RUN == MCI_GetSTMState(pMCI))
 8006b10:	4638      	mov	r0, r7
 8006b12:	f7fa fcc1 	bl	8001498 <MCI_GetSTMState>
 8006b16:	2806      	cmp	r0, #6
 8006b18:	d1dd      	bne.n	8006ad6 <MCP_ReceivedPacket+0xf2>
          MCI_StopRamp(pMCI);
 8006b1a:	4638      	mov	r0, r7
 8006b1c:	f7fa fd5e 	bl	80015dc <MCI_StopRamp>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8006b20:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8006b22:	2000      	movs	r0, #0
 8006b24:	e7a8      	b.n	8006a78 <MCP_ReceivedPacket+0x94>
        (void)MCI_FaultAcknowledged(pMCI);
 8006b26:	4638      	mov	r0, r7
 8006b28:	f7fa fcf2 	bl	8001510 <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8006b2c:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8006b2e:	2000      	movs	r0, #0
        break;
 8006b30:	e7a2      	b.n	8006a78 <MCP_ReceivedPacket+0x94>
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8006b32:	3a01      	subs	r2, #1
      userCommand = (command >> 3) & 0x1f;
 8006b34:	f00c 0c1f 	and.w	ip, ip, #31
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8006b38:	b212      	sxth	r2, r2
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8006b3a:	4b0d      	ldr	r3, [pc, #52]	; (8006b70 <MCP_ReceivedPacket+0x18c>)
 8006b3c:	f853 602c 	ldr.w	r6, [r3, ip, lsl #2]
 8006b40:	2e00      	cmp	r6, #0
 8006b42:	d0be      	beq.n	8006ac2 <MCP_ReceivedPacket+0xde>
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8006b44:	68a3      	ldr	r3, [r4, #8]
 8006b46:	9300      	str	r3, [sp, #0]
 8006b48:	4629      	mov	r1, r5
 8006b4a:	f104 030e 	add.w	r3, r4, #14
 8006b4e:	47b0      	blx	r6
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8006b50:	89e3      	ldrh	r3, [r4, #14]
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8006b52:	e791      	b.n	8006a78 <MCP_ReceivedPacket+0x94>
  	    MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8006b54:	68a3      	ldr	r3, [r4, #8]
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	4629      	mov	r1, r5
 8006b5a:	f104 030e 	add.w	r3, r4, #14
 8006b5e:	f7fa fbe9 	bl	8001334 <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8006b62:	89e3      	ldrh	r3, [r4, #14]
        break;
 8006b64:	e788      	b.n	8006a78 <MCP_ReceivedPacket+0x94>
    switch (command)
 8006b66:	46b4      	mov	ip, r6
 8006b68:	e7e7      	b.n	8006b3a <MCP_ReceivedPacket+0x156>
 8006b6a:	bf00      	nop
 8006b6c:	20000a7c 	.word	0x20000a7c
 8006b70:	20001c0c 	.word	0x20001c0c

08006b74 <MCPA_dataLog>:

uint32_t GLOBAL_TIMESTAMP = 0;
static void MCPA_stopDataLog (MCPA_Handle_t *pHandle);

void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 8006b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint8_t i;
    uint16_t *logValue16;
    uint32_t *logValue;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8006b76:	7fc3      	ldrb	r3, [r0, #31]
 8006b78:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8006b7c:	429a      	cmp	r2, r3
{
 8006b7e:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8006b80:	d002      	beq.n	8006b88 <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* nothing to log just waiting next call to MCPA_datalog*/
      pHandle->HFIndex++;
 8006b82:	3301      	adds	r3, #1
 8006b84:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8006b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 8006b88:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 8006b8e:	b1a5      	cbz	r5, 8006bba <MCPA_dataLog+0x46>
 8006b90:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8006b92:	8ba2      	ldrh	r2, [r4, #28]
 8006b94:	42aa      	cmp	r2, r5
 8006b96:	d24e      	bcs.n	8006c36 <MCPA_dataLog+0xc2>
 8006b98:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8006b9c:	2bfe      	cmp	r3, #254	; 0xfe
 8006b9e:	d066      	beq.n	8006c6e <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8006ba0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8006ba4:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex + 2U,
 8006ba6:	8b22      	ldrh	r2, [r4, #24]
 8006ba8:	6820      	ldr	r0, [r4, #0]
 8006baa:	3202      	adds	r2, #2
 8006bac:	2309      	movs	r3, #9
 8006bae:	6845      	ldr	r5, [r0, #4]
 8006bb0:	b292      	uxth	r2, r2
 8006bb2:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	8323      	strh	r3, [r4, #24]
}
 8006bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 8006bba:	4601      	mov	r1, r0
 8006bbc:	2209      	movs	r2, #9
 8006bbe:	f851 0b14 	ldr.w	r0, [r1], #20
 8006bc2:	6803      	ldr	r3, [r0, #0]
 8006bc4:	4798      	blx	r3
 8006bc6:	b390      	cbz	r0, 8006c2e <MCPA_dataLog+0xba>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8006bc8:	4b4b      	ldr	r3, [pc, #300]	; (8006cf8 <MCPA_dataLog+0x184>)
 8006bca:	6961      	ldr	r1, [r4, #20]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 8006bd0:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 8006bd4:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer*/
 8006bd8:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 8006bdc:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 8006bde:	4282      	cmp	r2, r0
          pHandle->bufferIndex = 4U;
 8006be0:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 8006be2:	d101      	bne.n	8006be8 <MCPA_dataLog+0x74>
 8006be4:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8006be6:	e7d4      	b.n	8006b92 <MCPA_dataLog+0x1e>
            pHandle->MFNumBuff = pHandle->MFNum;
 8006be8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
            pHandle->HFNumBuff = pHandle->HFNum;
 8006bec:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
            pHandle->MFRateBuff = pHandle->MFRate;
 8006bf0:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
            pHandle->HFRateBuff = pHandle->HFRate;
 8006bf4:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
            pHandle->HFNumBuff = pHandle->HFNum;
 8006bf8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
            pHandle->MFNumBuff = pHandle->MFNum;
 8006bfc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8006c00:	441a      	add	r2, r3
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8006c02:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MarkBuff = pHandle->Mark;
 8006c04:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8006c08:	0092      	lsls	r2, r2, #2
            pHandle->MFRateBuff = pHandle->MFRate;
 8006c0a:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8006c0e:	83a3      	strh	r3, [r4, #28]
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8006c10:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
            pHandle->HFRateBuff = pHandle->HFRate;
 8006c14:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8006c18:	f001 ff02 	bl	8008a20 <memcpy>
          memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable, pHandle->HFNum+pHandle->MFNum); /* 1 size byte per ID*/
 8006c1c:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8006c20:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8006c24:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8006c28:	441a      	add	r2, r3
 8006c2a:	f001 fef9 	bl	8008a20 <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8006c2e:	8b25      	ldrh	r5, [r4, #24]
 8006c30:	2d00      	cmp	r5, #0
 8006c32:	d1ad      	bne.n	8006b90 <MCPA_dataLog+0x1c>
}
 8006c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8006c36:	f894 6024 	ldrb.w	r6, [r4, #36]	; 0x24
        logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8006c3a:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8006c3c:	b36e      	cbz	r6, 8006c9a <MCPA_dataLog+0x126>
 8006c3e:	68a2      	ldr	r2, [r4, #8]
 8006c40:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 8006c44:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8006c46:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8006c4a:	8800      	ldrh	r0, [r0, #0]
 8006c4c:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8006c50:	8b25      	ldrh	r5, [r4, #24]
 8006c52:	3502      	adds	r5, #2
 8006c54:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8006c56:	4563      	cmp	r3, ip
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8006c58:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8006c5a:	d1f4      	bne.n	8006c46 <MCPA_dataLog+0xd2>
        if (pHandle->MFRateBuff < 254U)
 8006c5c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8006c60:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 8006c62:	2bfd      	cmp	r3, #253	; 0xfd
 8006c64:	4618      	mov	r0, r3
 8006c66:	d91d      	bls.n	8006ca4 <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8006c68:	4295      	cmp	r5, r2
 8006c6a:	d897      	bhi.n	8006b9c <MCPA_dataLog+0x28>
}
 8006c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8006c6e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8006c72:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 8006c76:	4418      	add	r0, r3
 8006c78:	4298      	cmp	r0, r3
 8006c7a:	dd91      	ble.n	8006ba0 <MCPA_dataLog+0x2c>
           *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8006c7c:	68a7      	ldr	r7, [r4, #8]
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8006c7e:	6926      	ldr	r6, [r4, #16]
           *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8006c80:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8006c84:	6812      	ldr	r2, [r2, #0]
 8006c86:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8006c88:	1c5a      	adds	r2, r3, #1
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8006c8a:	5cf3      	ldrb	r3, [r6, r3]
 8006c8c:	442b      	add	r3, r5
 8006c8e:	b29d      	uxth	r5, r3
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8006c90:	b2d3      	uxtb	r3, r2
 8006c92:	4283      	cmp	r3, r0
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8006c94:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8006c96:	dbf3      	blt.n	8006c80 <MCPA_dataLog+0x10c>
 8006c98:	e782      	b.n	8006ba0 <MCPA_dataLog+0x2c>
        if (pHandle->MFRateBuff < 254U)
 8006c9a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 8006c9e:	28fd      	cmp	r0, #253	; 0xfd
 8006ca0:	f63f af71 	bhi.w	8006b86 <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 8006ca4:	f894 3020 	ldrb.w	r3, [r4, #32]
 8006ca8:	4283      	cmp	r3, r0
 8006caa:	d007      	beq.n	8006cbc <MCPA_dataLog+0x148>
            pHandle->MFIndex ++;
 8006cac:	3301      	adds	r3, #1
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8006cae:	8b25      	ldrh	r5, [r4, #24]
            pHandle->MFIndex ++;
 8006cb0:	f884 3020 	strb.w	r3, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8006cb4:	42aa      	cmp	r2, r5
 8006cb6:	f4ff af73 	bcc.w	8006ba0 <MCPA_dataLog+0x2c>
}
 8006cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8006cbc:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
 8006cc0:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 8006cc2:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8006cc4:	42b7      	cmp	r7, r6
            pHandle->MFIndex = 0U;
 8006cc6:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8006cca:	dd12      	ble.n	8006cf2 <MCPA_dataLog+0x17e>
              *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8006ccc:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8006cd0:	f8d4 c010 	ldr.w	ip, [r4, #16]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8006cd4:	8b25      	ldrh	r5, [r4, #24]
              *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8006cd6:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8006cde:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8006ce2:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8006ce4:	442b      	add	r3, r5
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8006ce6:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8006ce8:	b29d      	uxth	r5, r3
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8006cea:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8006cec:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8006cee:	dbf2      	blt.n	8006cd6 <MCPA_dataLog+0x162>
 8006cf0:	e7e0      	b.n	8006cb4 <MCPA_dataLog+0x140>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8006cf2:	8b25      	ldrh	r5, [r4, #24]
 8006cf4:	e7de      	b.n	8006cb4 <MCPA_dataLog+0x140>
 8006cf6:	bf00      	nop
 8006cf8:	20005a54 	.word	0x20005a54

08006cfc <MCPA_flushDataLog>:
{
  uint8_t i;
  uint16_t *logValue16;
  uint32_t *logValue;
  
  if (pHandle->bufferIndex > 0) {  /* if buffer is allocated, we must send it*/
 8006cfc:	8b03      	ldrh	r3, [r0, #24]
 8006cfe:	b19b      	cbz	r3, 8006d28 <MCPA_flushDataLog+0x2c>
{
 8006d00:	b570      	push	{r4, r5, r6, lr}
    if (pHandle->MFRateBuff == 254) /* In case of flush, we must respect the packet format to allow proper decoding */
 8006d02:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8006d06:	2afe      	cmp	r2, #254	; 0xfe
 8006d08:	4604      	mov	r4, r0
 8006d0a:	d00e      	beq.n	8006d2a <MCPA_flushDataLog+0x2e>
      {
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
        {
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8006d0c:	6941      	ldr	r1, [r0, #20]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
        }
      }
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8006d0e:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8006d12:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8006d14:	8b22      	ldrh	r2, [r4, #24]
 8006d16:	6820      	ldr	r0, [r4, #0]
 8006d18:	3202      	adds	r2, #2
 8006d1a:	2309      	movs	r3, #9
 8006d1c:	6845      	ldr	r5, [r0, #4]
 8006d1e:	b292      	uxth	r2, r2
 8006d20:	47a8      	blx	r5
    pHandle->bufferIndex = 0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	8323      	strh	r3, [r4, #24]
  }   
}
 8006d26:	bd70      	pop	{r4, r5, r6, pc}
 8006d28:	4770      	bx	lr
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8006d2a:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8006d2e:	f890 c028 	ldrb.w	ip, [r0, #40]	; 0x28
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8006d32:	6941      	ldr	r1, [r0, #20]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8006d34:	4494      	add	ip, r2
 8006d36:	4562      	cmp	r2, ip
 8006d38:	dae9      	bge.n	8006d0e <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8006d3a:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8006d3c:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8006d3e:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 8006d42:	6800      	ldr	r0, [r0, #0]
 8006d44:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8006d46:	5ca8      	ldrb	r0, [r5, r2]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8006d48:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8006d4a:	4403      	add	r3, r0
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8006d4c:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8006d4e:	b29b      	uxth	r3, r3
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8006d50:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8006d52:	8323      	strh	r3, [r4, #24]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8006d54:	dbf3      	blt.n	8006d3e <MCPA_flushDataLog+0x42>
 8006d56:	e7da      	b.n	8006d0e <MCPA_flushDataLog+0x12>

08006d58 <MCPA_cfgLog>:
  pHandle->HFIndex = 0;
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
}

uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 8006d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
    uint16_t newID, buffSize;
    uint8_t i;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8006d5c:	880f      	ldrh	r7, [r1, #0]
{
 8006d5e:	4604      	mov	r4, r0

    if (buffSize == 0)
 8006d60:	2f00      	cmp	r7, #0
 8006d62:	d044      	beq.n	8006dee <MCPA_cfgLog+0x96>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload )
 8006d64:	6803      	ldr	r3, [r0, #0]
 8006d66:	89db      	ldrh	r3, [r3, #14]
 8006d68:	42bb      	cmp	r3, r7
 8006d6a:	d33d      	bcc.n	8006de8 <MCPA_cfgLog+0x90>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 8006d6c:	788b      	ldrb	r3, [r1, #2]
 8006d6e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 8006d72:	78ce      	ldrb	r6, [r1, #3]
 8006d74:	f880 6023 	strb.w	r6, [r0, #35]	; 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 8006d78:	790b      	ldrb	r3, [r1, #4]
 8006d7a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      pHandle->MFNum =  *((uint8_t *)&pCfgData[5]);
 8006d7e:	794b      	ldrb	r3, [r1, #5]
 8006d80:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
      pCfgData = &pCfgData[6]; /* Start of the HF IDs*/

      if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 8006d84:	441e      	add	r6, r3
 8006d86:	7f83      	ldrb	r3, [r0, #30]
 8006d88:	429e      	cmp	r6, r3
 8006d8a:	dc52      	bgt.n	8006e32 <MCPA_cfgLog+0xda>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs*/
 8006d8c:	3106      	adds	r1, #6
      {
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8006d8e:	2e00      	cmp	r6, #0
 8006d90:	d056      	beq.n	8006e40 <MCPA_cfgLog+0xe8>
 8006d92:	2500      	movs	r5, #0
 8006d94:	4688      	mov	r8, r1
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
 8006d96:	462e      	mov	r6, r5
 8006d98:	e011      	b.n	8006dbe <MCPA_cfgLog+0x66>
      {
         newID = *((uint16_t *) pCfgData); //cstat !MISRAC2012-Rule-11.3
         (void)RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
         /* HF Data are fixed to 2 bytes*/
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 8006d9a:	68e3      	ldr	r3, [r4, #12]
 8006d9c:	5558      	strb	r0, [r3, r5]
        pCfgData++;/* Point to the next UID */
        pCfgData++;
         logSize = logSize+pHandle->dataSizeTable[i];
 8006d9e:	68e2      	ldr	r2, [r4, #12]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8006da0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8006da4:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
         logSize = logSize+pHandle->dataSizeTable[i];
 8006da8:	5d52      	ldrb	r2, [r2, r5]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8006daa:	f105 0c01 	add.w	ip, r5, #1
 8006dae:	fa5f f58c 	uxtb.w	r5, ip
 8006db2:	4403      	add	r3, r0
         logSize = logSize+pHandle->dataSizeTable[i];
 8006db4:	4432      	add	r2, r6
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8006db6:	429d      	cmp	r5, r3
        pCfgData++;
 8006db8:	4641      	mov	r1, r8
         logSize = logSize+pHandle->dataSizeTable[i];
 8006dba:	b296      	uxth	r6, r2
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8006dbc:	da11      	bge.n	8006de2 <MCPA_cfgLog+0x8a>
         newID = *((uint16_t *) pCfgData); //cstat !MISRAC2012-Rule-11.3
 8006dbe:	f838 9b02 	ldrh.w	r9, [r8], #2
         (void)RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
 8006dc2:	6861      	ldr	r1, [r4, #4]
 8006dc4:	4648      	mov	r0, r9
 8006dc6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8006dca:	f7fc fc83 	bl	80036d4 <RI_GetPtrReg>
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 8006dce:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8006dd2:	42ab      	cmp	r3, r5
 8006dd4:	f04f 0002 	mov.w	r0, #2
 8006dd8:	d8df      	bhi.n	8006d9a <MCPA_cfgLog+0x42>
 8006dda:	4648      	mov	r0, r9
 8006ddc:	f7fc fc6e 	bl	80036bc <RI_GetIDSize>
 8006de0:	e7db      	b.n	8006d9a <MCPA_cfgLog+0x42>
      }

     /*smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp*/
     if (buffSize < (logSize + 2U + 4U))
 8006de2:	1db3      	adds	r3, r6, #6
 8006de4:	429f      	cmp	r7, r3
 8006de6:	d21a      	bcs.n	8006e1e <MCPA_cfgLog+0xc6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 8006de8:	2009      	movs	r0, #9
      }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return result;
}
 8006dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8006dee:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0;
 8006df0:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8006df4:	b153      	cbz	r3, 8006e0c <MCPA_cfgLog+0xb4>
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8006df6:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8006df8:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8006dfc:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8006dfe:	8b22      	ldrh	r2, [r4, #24]
 8006e00:	6820      	ldr	r0, [r4, #0]
 8006e02:	3202      	adds	r2, #2
 8006e04:	6845      	ldr	r5, [r0, #4]
 8006e06:	b292      	uxth	r2, r2
 8006e08:	2309      	movs	r3, #9
 8006e0a:	47a8      	blx	r5
  pHandle->bufferIndex = 0;
 8006e0c:	2000      	movs	r0, #0
  pHandle->MarkBuff = 0;
 8006e0e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  pHandle->HFIndex = 0;
 8006e12:	77e0      	strb	r0, [r4, #31]
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
 8006e14:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
  pHandle->bufferIndex = 0;
 8006e18:	8320      	strh	r0, [r4, #24]
}
 8006e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       pHandle->bufferTxTrigger = buffSize-logSize-2U; /* 2 is required to add the last Mark byte and NUL ASYNCID */
 8006e1e:	3f02      	subs	r7, #2
 8006e20:	1bbf      	subs	r7, r7, r6
 8006e22:	8367      	strh	r7, [r4, #26]
       pHandle->Mark = *((uint8_t *) pCfgData);
 8006e24:	780b      	ldrb	r3, [r1, #0]
 8006e26:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
       if (0U == pHandle->Mark)
 8006e2a:	b12b      	cbz	r3, 8006e38 <MCPA_cfgLog+0xe0>
  uint8_t result = MCP_CMD_OK;
 8006e2c:	2000      	movs	r0, #0
}
 8006e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       result = MCP_ERROR_BAD_RAW_FORMAT;
 8006e32:	200a      	movs	r0, #10
}
 8006e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8006e38:	8b23      	ldrh	r3, [r4, #24]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d0e6      	beq.n	8006e0c <MCPA_cfgLog+0xb4>
 8006e3e:	e7da      	b.n	8006df6 <MCPA_cfgLog+0x9e>
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8006e40:	2306      	movs	r3, #6
 8006e42:	e7cf      	b.n	8006de4 <MCPA_cfgLog+0x8c>

08006e44 <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8006e44:	8a03      	ldrh	r3, [r0, #16]
 8006e46:	8b42      	ldrh	r2, [r0, #26]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d306      	bcc.n	8006e5a <NTC_SetFaultState+0x16>
    {
      hFault = MC_OVER_TEMP;
    }
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 8006e4c:	8b82      	ldrh	r2, [r0, #28]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d901      	bls.n	8006e56 <NTC_SetFaultState+0x12>
    {
      hFault = MC_NO_ERROR;
 8006e52:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return hFault;
}
 8006e54:	4770      	bx	lr
      hFault = pHandle->hFaultState;
 8006e56:	8ac0      	ldrh	r0, [r0, #22]
 8006e58:	4770      	bx	lr
      hFault = MC_OVER_TEMP;
 8006e5a:	2008      	movs	r0, #8
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop

08006e60 <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	8203      	strh	r3, [r0, #16]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop

08006e68 <NTC_Init>:
{
 8006e68:	b510      	push	{r4, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 8006e6a:	7803      	ldrb	r3, [r0, #0]
{
 8006e6c:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8006e6e:	b123      	cbz	r3, 8006e7a <NTC_Init+0x12>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8006e70:	8a43      	ldrh	r3, [r0, #18]
 8006e72:	8203      	strh	r3, [r0, #16]
      pHandle->hFaultState = MC_NO_ERROR;
 8006e74:	2200      	movs	r2, #0
 8006e76:	82c2      	strh	r2, [r0, #22]
}
 8006e78:	bd10      	pop	{r4, pc}
      pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8006e7a:	3004      	adds	r0, #4
 8006e7c:	f7fc fcc2 	bl	8003804 <RCM_RegisterRegConv>
 8006e80:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
      NTC_Clear(pHandle);
 8006e84:	4620      	mov	r0, r4
 8006e86:	f7ff ffeb 	bl	8006e60 <NTC_Clear>
}
 8006e8a:	bd10      	pop	{r4, pc}

08006e8c <NTC_CalcAvTemp>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp(NTC_Handle_t *pHandle)
{
 8006e8c:	b510      	push	{r4, lr}
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8006e8e:	7803      	ldrb	r3, [r0, #0]
{
 8006e90:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8006e92:	b113      	cbz	r3, 8006e9a <NTC_CalcAvTemp+0xe>
 8006e94:	2000      	movs	r0, #0
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);

        pHandle->hAvTemp_d = (uint16_t)wtemp;
      }

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8006e96:	82e0      	strh	r0, [r4, #22]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8006e98:	bd10      	pop	{r4, pc}
      hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8006e9a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8006e9e:	f7fc fd8d 	bl	80039bc <RCM_ExecRegularConv>
      if (0xFFFFU == hAux)
 8006ea2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ea6:	4298      	cmp	r0, r3
 8006ea8:	d007      	beq.n	8006eba <NTC_CalcAvTemp+0x2e>
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8006eaa:	8b23      	ldrh	r3, [r4, #24]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 8006eac:	8a22      	ldrh	r2, [r4, #16]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8006eae:	1e59      	subs	r1, r3, #1
        wtemp += hAux;
 8006eb0:	fb01 0002 	mla	r0, r1, r2, r0
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 8006eb4:	fbb0 f0f3 	udiv	r0, r0, r3
        pHandle->hAvTemp_d = (uint16_t)wtemp;
 8006eb8:	8220      	strh	r0, [r4, #16]
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f7ff ffc2 	bl	8006e44 <NTC_SetFaultState>
 8006ec0:	82e0      	strh	r0, [r4, #22]
}
 8006ec2:	bd10      	pop	{r4, pc}

08006ec4 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 8006ec4:	7803      	ldrb	r3, [r0, #0]
 8006ec6:	b95b      	cbnz	r3, 8006ee0 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 8006ec8:	8a02      	ldrh	r2, [r0, #16]
      wTemp -= ((int32_t)pHandle->wV0);
 8006eca:	6a01      	ldr	r1, [r0, #32]
      wTemp *= pHandle->hSensitivity;
 8006ecc:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8006ed0:	8c80      	ldrh	r0, [r0, #36]	; 0x24
      wTemp -= ((int32_t)pHandle->wV0);
 8006ed2:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 8006ed4:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8006ed8:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8006edc:	b200      	sxth	r0, r0
 8006ede:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 8006ee0:	8a80      	ldrh	r0, [r0, #20]
}
 8006ee2:	b200      	sxth	r0, r0
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop

08006ee8 <OL_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hVoltage = pHandle->hDefaultVoltage;
 8006ee8:	8803      	ldrh	r3, [r0, #0]
 8006eea:	8103      	strh	r3, [r0, #8]
    pHandle->pVSS = pVSS;
 8006eec:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_OPEN_LOOP
  }
#endif
}
 8006eee:	4770      	bx	lr

08006ef0 <OL_VqdConditioning>:
  Vqd.q = ((MC_NULL == pHandle) ? 0 : pHandle->hVoltage);
#else
  Vqd.q = (pHandle->hVoltage);
#endif
  return (Vqd);
}
 8006ef0:	8900      	ldrh	r0, [r0, #8]
{
 8006ef2:	b082      	sub	sp, #8
}
 8006ef4:	b002      	add	sp, #8
 8006ef6:	4770      	bx	lr

08006ef8 <OL_UpdateVoltage>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hVoltage = hNewVoltage;
 8006ef8:	8101      	strh	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_OPEN_LOOP
  }
#endif
}
 8006efa:	4770      	bx	lr

08006efc <OL_GetVoltage>:
  hVoltage = ((MC_NULL == pHandle) ? 0 : pHandle->hVoltage);
#else
  hVoltage = pHandle->hVoltage;
#endif
  return (hVoltage);
}
 8006efc:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop

08006f04 <OL_Calc>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (true ==  pHandle->VFMode)
 8006f04:	7883      	ldrb	r3, [r0, #2]
 8006f06:	b173      	cbz	r3, 8006f26 <OL_Calc+0x22>
    {
      /* V/F mode true means enabled */
      if (pHandle->pVSS->_Super.hAvrMecSpeedUnit >= 0)
 8006f08:	68c3      	ldr	r3, [r0, #12]
      {
        pHandle->hVoltage = pHandle->hVFOffset + (pHandle->hVFSlope * pHandle->pVSS->_Super.hAvrMecSpeedUnit);
 8006f0a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
      if (pHandle->pVSS->_Super.hAvrMecSpeedUnit >= 0)
 8006f0e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
        pHandle->hVoltage = pHandle->hVFOffset + (pHandle->hVFSlope * pHandle->pVSS->_Super.hAvrMecSpeedUnit);
 8006f12:	8882      	ldrh	r2, [r0, #4]
      if (pHandle->pVSS->_Super.hAvrMecSpeedUnit >= 0)
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	db03      	blt.n	8006f20 <OL_Calc+0x1c>
        pHandle->hVoltage = pHandle->hVFOffset + (pHandle->hVFSlope * pHandle->pVSS->_Super.hAvrMecSpeedUnit);
 8006f18:	fb01 2303 	mla	r3, r1, r3, r2
 8006f1c:	8103      	strh	r3, [r0, #8]
 8006f1e:	4770      	bx	lr
      }
      else
      {
        pHandle->hVoltage = pHandle->hVFOffset - (pHandle->hVFSlope * pHandle->pVSS->_Super.hAvrMecSpeedUnit);
 8006f20:	fb01 2313 	mls	r3, r1, r3, r2
 8006f24:	8103      	strh	r3, [r0, #8]
      }
    }
#ifdef NULL_PTR_CHECK_OPEN_LOOP
  }
#endif
}
 8006f26:	4770      	bx	lr

08006f28 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 8006f28:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8006f2a:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8006f2c:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8006f2e:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8006f30:	8442      	strh	r2, [r0, #34]	; 0x22
    pHandle->wIntegralTerm = 0;
 8006f32:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8006f34:	6283      	str	r3, [r0, #40]	; 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006f36:	4770      	bx	lr

08006f38 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 8006f38:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006f3a:	4770      	bx	lr

08006f3c <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 8006f3c:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006f3e:	4770      	bx	lr

08006f40 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 8006f40:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop

08006f48 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 8006f48:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop

08006f50 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8006f50:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8006f52:	4770      	bx	lr

08006f54 <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 8006f54:	8b80      	ldrh	r0, [r0, #28]
 8006f56:	4770      	bx	lr

08006f58 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8006f58:	2301      	movs	r3, #1
 8006f5a:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8006f5c:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8006f5e:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop

08006f64 <PID_GetKIDivisor>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
#endif
}
 8006f64:	8b40      	ldrh	r0, [r0, #26]
 8006f66:	4770      	bx	lr

08006f68 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 8006f68:	8bc0      	ldrh	r0, [r0, #30]
 8006f6a:	4770      	bx	lr

08006f6c <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 8006f6c:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006f6e:	4770      	bx	lr

08006f70 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8006f70:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006f72:	4770      	bx	lr

08006f74 <PID_SetKIDivisorPOW2>:
{
 8006f74:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8006f76:	2301      	movs	r3, #1
{
 8006f78:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8006f7a:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8006f7c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006f80:	40a1      	lsls	r1, r4
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8006f82:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 8006f84:	8343      	strh	r3, [r0, #26]
{
 8006f86:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8006f88:	f7ff fff2 	bl	8006f70 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 8006f8c:	4902      	ldr	r1, [pc, #8]	; (8006f98 <PID_SetKIDivisorPOW2+0x24>)
 8006f8e:	4628      	mov	r0, r5
 8006f90:	40a1      	lsls	r1, r4
 8006f92:	f7ff ffeb 	bl	8006f6c <PID_SetLowerIntegralTermLimit>
}
 8006f96:	bd38      	pop	{r3, r4, r5, pc}
 8006f98:	ffff8001 	.word	0xffff8001

08006f9c <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8006f9c:	8441      	strh	r1, [r0, #34]	; 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006f9e:	4770      	bx	lr

08006fa0 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8006fa0:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop

08006fa8 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 8006fa8:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
 8006faa:	4770      	bx	lr

08006fac <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8006fac:	2301      	movs	r3, #1
 8006fae:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8006fb0:	84c1      	strh	r1, [r0, #38]	; 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8006fb2:	8483      	strh	r3, [r0, #36]	; 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop

08006fb8 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006fb8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	b510      	push	{r4, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8006fc0:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8006fc4:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8006fc8:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006fcc:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 8006fd0:	b18c      	cbz	r4, 8006ff6 <PI_Controller+0x3e>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8006fd2:	fb04 f101 	mul.w	r1, r4, r1
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8006fd6:	689c      	ldr	r4, [r3, #8]

      if (wIntegral_sum_temp < 0)
 8006fd8:	eb14 0e01 	adds.w	lr, r4, r1
 8006fdc:	d421      	bmi.n	8007022 <PI_Controller+0x6a>
      {
        if (pHandle->wIntegralTerm < 0)
        {
          if (wIntegral_Term < 0)
          {
            wIntegral_sum_temp = -INT32_MAX;
 8006fde:	420c      	tst	r4, r1
 8006fe0:	4916      	ldr	r1, [pc, #88]	; (800703c <PI_Controller+0x84>)
 8006fe2:	bf48      	it	mi
 8006fe4:	468e      	movmi	lr, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8006fe6:	68d9      	ldr	r1, [r3, #12]
 8006fe8:	4571      	cmp	r1, lr
 8006fea:	db05      	blt.n	8006ff8 <PI_Controller+0x40>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8006fec:	6919      	ldr	r1, [r3, #16]
 8006fee:	4571      	cmp	r1, lr
 8006ff0:	dc02      	bgt.n	8006ff8 <PI_Controller+0x40>
      {
        pHandle->wIntegralTerm = pHandle->wLowerIntegralLimit;
      }
      else
      {
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 8006ff2:	4671      	mov	r1, lr
 8006ff4:	e000      	b.n	8006ff8 <PI_Controller+0x40>
 8006ff6:	4621      	mov	r1, r4
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8006ff8:	8b9c      	ldrh	r4, [r3, #28]
 8006ffa:	4122      	asrs	r2, r4
 8006ffc:	8bdc      	ldrh	r4, [r3, #30]
 8006ffe:	fa41 f404 	asr.w	r4, r1, r4
 8007002:	4422      	add	r2, r4
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8007004:	4290      	cmp	r0, r2
 8007006:	da03      	bge.n	8007010 <PI_Controller+0x58>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8007008:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 800700a:	4411      	add	r1, r2
 800700c:	6099      	str	r1, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 800700e:	bd10      	pop	{r4, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8007010:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 8007012:	bfc5      	ittet	gt
 8007014:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 8007018:	1889      	addgt	r1, r1, r2
    returnValue = (int16_t)wOutput_32;
 800701a:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 800701c:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 800701e:	6099      	str	r1, [r3, #8]
}
 8007020:	bd10      	pop	{r4, pc}
        if (pHandle->wIntegralTerm > 0)
 8007022:	2c00      	cmp	r4, #0
 8007024:	dddf      	ble.n	8006fe6 <PI_Controller+0x2e>
          if (wIntegral_Term > 0)
 8007026:	2900      	cmp	r1, #0
 8007028:	dddd      	ble.n	8006fe6 <PI_Controller+0x2e>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800702a:	68d9      	ldr	r1, [r3, #12]
 800702c:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8007030:	42a1      	cmp	r1, r4
 8007032:	d1e1      	bne.n	8006ff8 <PI_Controller+0x40>
            wIntegral_sum_temp = INT32_MAX;
 8007034:	468e      	mov	lr, r1
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 8007036:	4671      	mov	r1, lr
 8007038:	e7de      	b.n	8006ff8 <PI_Controller+0x40>
 800703a:	bf00      	nop
 800703c:	80000001 	.word	0x80000001

08007040 <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8007040:	6882      	ldr	r2, [r0, #8]
{
 8007042:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8007044:	89d1      	ldrh	r1, [r2, #14]
 8007046:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 800704a:	8993      	ldrh	r3, [r2, #12]
 800704c:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8007050:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 8007054:	fb13 230c 	smlabb	r3, r3, ip, r2
 8007058:	2b00      	cmp	r3, #0

    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 800705a:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 800705e:	bfbc      	itt	lt
 8007060:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8007064:	33ff      	addlt	r3, #255	; 0xff
    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 8007066:	ebc2 4323 	rsb	r3, r2, r3, asr #16
 800706a:	eb02 1223 	add.w	r2, r2, r3, asr #4
 800706e:	8002      	strh	r2, [r0, #0]

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
}
 8007070:	f85d fb04 	ldr.w	pc, [sp], #4

08007074 <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 8007074:	2300      	movs	r3, #0
 8007076:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop

0800707c <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float The average measured motor power expressed in Watts.
  */
__weak float PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 800707c:	b538      	push	{r3, r4, r5, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = (pHandle->hAvrgElMotorPower * VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 800707e:	f9b0 5000 	ldrsh.w	r5, [r0]
{
 8007082:	4604      	mov	r4, r0
  PowerW = (pHandle->hAvrgElMotorPower * VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8007084:	68c0      	ldr	r0, [r0, #12]
 8007086:	f7ff fc77 	bl	8006978 <VBS_GetAvBusVoltage_V>
 800708a:	fb05 f300 	mul.w	r3, r5, r0
 800708e:	ee00 3a10 	vmov	s0, r3
 8007092:	edd4 7a01 	vldr	s15, [r4, #4]
 8007096:	eeb8 0ac0 	vcvt.f32.s32	s0, s0

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 800709a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800709e:	bd38      	pop	{r3, r4, r5, pc}

080070a0 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 80070a0:	4b17      	ldr	r3, [pc, #92]	; (8007100 <startTimers+0x60>)
 80070a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_TIM2);
  if ((uint32_t)0 == isTIM2ClockOn)
 80070a4:	07d2      	lsls	r2, r2, #31
 80070a6:	d415      	bmi.n	80070d4 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 80070a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070aa:	f042 0201 	orr.w	r2, r2, #1
 80070ae:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80070b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80070b2:	b082      	sub	sp, #8
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80070b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80070b8:	f002 0201 	and.w	r2, r2, #1
 80070bc:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80070be:	9a01      	ldr	r2, [sp, #4]
 80070c0:	694a      	ldr	r2, [r1, #20]
 80070c2:	f042 0201 	orr.w	r2, r2, #1
 80070c6:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 80070c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070ca:	f022 0201 	bic.w	r2, r2, #1
 80070ce:	641a      	str	r2, [r3, #64]	; 0x40
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 80070d0:	b002      	add	sp, #8
 80070d2:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 80070d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80070d8:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80070da:	6859      	ldr	r1, [r3, #4]
 80070dc:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80070e0:	f041 0120 	orr.w	r1, r1, #32
 80070e4:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80070e6:	6959      	ldr	r1, [r3, #20]
 80070e8:	f041 0101 	orr.w	r1, r1, #1
 80070ec:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80070ee:	6859      	ldr	r1, [r3, #4]
 80070f0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80070f4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80070f8:	430a      	orrs	r2, r1
 80070fa:	605a      	str	r2, [r3, #4]
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	40023800 	.word	0x40023800

08007104 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8007104:	3201      	adds	r2, #1
{
 8007106:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8007108:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800710a:	f06f 0602 	mvn.w	r6, #2
 800710e:	0155      	lsls	r5, r2, #5
 8007110:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 8007112:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 8007114:	f893 c000 	ldrb.w	ip, [r3]
 8007118:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 800711c:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 8007120:	d80c      	bhi.n	800713c <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8007122:	6904      	ldr	r4, [r0, #16]
 8007124:	07a4      	lsls	r4, r4, #30
 8007126:	d5f5      	bpl.n	8007114 <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 8007128:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 800712c:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800712e:	6106      	str	r6, [r0, #16]
 8007130:	d8f0      	bhi.n	8007114 <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 8007132:	781c      	ldrb	r4, [r3, #0]
 8007134:	2c0f      	cmp	r4, #15
 8007136:	d8ed      	bhi.n	8007114 <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 8007138:	2301      	movs	r3, #1
 800713a:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_POW_COM
  }
#endif
  }
 800713c:	bd70      	pop	{r4, r5, r6, pc}
 800713e:	bf00      	nop

08007140 <R3_1_GetPhaseCurrents>:
  *
  */
__weak void R3_1_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007140:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
{
 8007144:	b570      	push	{r4, r5, r6, lr}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8007146:	e9d3 2400 	ldrd	r2, r4, [r3]
  CLEAR_BIT(TIMx->CCER, Channels);
 800714a:	6a23      	ldr	r3, [r4, #32]
 800714c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007150:	6223      	str	r3, [r4, #32]
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  bSector = ( uint8_t )( pHandle->_Super.Sector );

  hReg1 =  (ADCx->JDR1)*2;
 8007152:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  hReg2 =  (ADCx->JDR2)*2;
 8007154:	6c12      	ldr	r2, [r2, #64]	; 0x40

  switch ( bSector )
 8007156:	f890 c06a 	ldrb.w	ip, [r0, #106]	; 0x6a
  hReg1 =  (ADCx->JDR1)*2;
 800715a:	005b      	lsls	r3, r3, #1
  hReg2 =  (ADCx->JDR2)*2;
 800715c:	0052      	lsls	r2, r2, #1
  hReg1 =  (ADCx->JDR1)*2;
 800715e:	b29b      	uxth	r3, r3
  hReg2 =  (ADCx->JDR2)*2;
 8007160:	b292      	uxth	r2, r2
  switch ( bSector )
 8007162:	f1bc 0f05 	cmp.w	ip, #5
 8007166:	f200 8096 	bhi.w	8007296 <R3_1_GetPhaseCurrents+0x156>
 800716a:	e8df f00c 	tbb	[pc, ip]
 800716e:	2138      	.short	0x2138
 8007170:	38030321 	.word	0x38030321
    case SECTOR_4:
    case SECTOR_5:
    {
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8007174:	6f04      	ldr	r4, [r0, #112]	; 0x70
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 8007176:	4d4c      	ldr	r5, [pc, #304]	; (80072a8 <R3_1_GetPhaseCurrents+0x168>)
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8007178:	1ae3      	subs	r3, r4, r3
      if ( wAux < -INT16_MAX )
 800717a:	42ab      	cmp	r3, r5
 800717c:	da58      	bge.n	8007230 <R3_1_GetPhaseCurrents+0xf0>
      {
        pStator_Currents->a = ( int16_t )wAux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 800717e:	6f43      	ldr	r3, [r0, #116]	; 0x74
        pStator_Currents->a = -INT16_MAX;
 8007180:	800d      	strh	r5, [r1, #0]
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8007182:	eba3 0c02 	sub.w	ip, r3, r2

      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 8007186:	4a48      	ldr	r2, [pc, #288]	; (80072a8 <R3_1_GetPhaseCurrents+0x168>)
 8007188:	4594      	cmp	ip, r2
 800718a:	db41      	blt.n	8007210 <R3_1_GetPhaseCurrents+0xd0>
      {
        pStator_Currents->b = -INT16_MAX;
      }
      else  if ( wAux > INT16_MAX )
 800718c:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
 8007190:	db70      	blt.n	8007274 <R3_1_GetPhaseCurrents+0x134>
      {
        pStator_Currents->b = INT16_MAX;
 8007192:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007196:	469c      	mov	ip, r3
 8007198:	804b      	strh	r3, [r1, #2]
 800719a:	46e6      	mov	lr, ip
    }
    break;
  }
  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800719c:	b2ab      	uxth	r3, r5
 800719e:	4463      	add	r3, ip
 80071a0:	425b      	negs	r3, r3
  pHandle->_Super.Ia = pStator_Currents->a;
 80071a2:	f8a0 5050 	strh.w	r5, [r0, #80]	; 0x50
  pHandle->_Super.Ib = pStator_Currents->b;
 80071a6:	f8a0 e052 	strh.w	lr, [r0, #82]	; 0x52
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80071aa:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
}
 80071ae:	bd70      	pop	{r4, r5, r6, pc}
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 80071b0:	6f04      	ldr	r4, [r0, #112]	; 0x70
 80071b2:	1ae4      	subs	r4, r4, r3
      if ( wAux < -INT16_MAX )
 80071b4:	4b3c      	ldr	r3, [pc, #240]	; (80072a8 <R3_1_GetPhaseCurrents+0x168>)
 80071b6:	429c      	cmp	r4, r3
 80071b8:	db35      	blt.n	8007226 <R3_1_GetPhaseCurrents+0xe6>
      else  if ( wAux > INT16_MAX )
 80071ba:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80071be:	da61      	bge.n	8007284 <R3_1_GetPhaseCurrents+0x144>
        pStator_Currents->a = ( int16_t )wAux;
 80071c0:	b225      	sxth	r5, r4
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80071c2:	b2a3      	uxth	r3, r4
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 80071c4:	6f86      	ldr	r6, [r0, #120]	; 0x78
        pStator_Currents->a = -INT16_MAX;
 80071c6:	800d      	strh	r5, [r1, #0]
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 80071c8:	1b92      	subs	r2, r2, r6
 80071ca:	1b12      	subs	r2, r2, r4
      if ( wAux > INT16_MAX )
 80071cc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80071d0:	db3c      	blt.n	800724c <R3_1_GetPhaseCurrents+0x10c>
        pStator_Currents->b = INT16_MAX;
 80071d2:	f647 7cff 	movw	ip, #32767	; 0x7fff
 80071d6:	f8a1 c002 	strh.w	ip, [r1, #2]
 80071da:	46e6      	mov	lr, ip
 80071dc:	e7df      	b.n	800719e <R3_1_GetPhaseCurrents+0x5e>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 80071de:	6f44      	ldr	r4, [r0, #116]	; 0x74
 80071e0:	1ae4      	subs	r4, r4, r3
      if ( wAux < -INT16_MAX )
 80071e2:	4b31      	ldr	r3, [pc, #196]	; (80072a8 <R3_1_GetPhaseCurrents+0x168>)
 80071e4:	429c      	cmp	r4, r3
 80071e6:	db19      	blt.n	800721c <R3_1_GetPhaseCurrents+0xdc>
      else  if ( wAux > INT16_MAX )
 80071e8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80071ec:	da36      	bge.n	800725c <R3_1_GetPhaseCurrents+0x11c>
        pStator_Currents->b = ( int16_t )wAux;
 80071ee:	fa0f fe84 	sxth.w	lr, r4
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80071f2:	fa1f fc84 	uxth.w	ip, r4
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 80071f6:	6f83      	ldr	r3, [r0, #120]	; 0x78
        pStator_Currents->b = -INT16_MAX;
 80071f8:	f8a1 e002 	strh.w	lr, [r1, #2]
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	1b1b      	subs	r3, r3, r4
      if ( wAux > INT16_MAX )
 8007200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007204:	db1b      	blt.n	800723e <R3_1_GetPhaseCurrents+0xfe>
        pStator_Currents->a = INT16_MAX;
 8007206:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800720a:	800b      	strh	r3, [r1, #0]
 800720c:	461d      	mov	r5, r3
 800720e:	e7c6      	b.n	800719e <R3_1_GetPhaseCurrents+0x5e>
        pStator_Currents->b = -INT16_MAX;
 8007210:	804a      	strh	r2, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8007212:	b2ab      	uxth	r3, r5
 8007214:	f248 0c01 	movw	ip, #32769	; 0x8001
 8007218:	4696      	mov	lr, r2
 800721a:	e7c0      	b.n	800719e <R3_1_GetPhaseCurrents+0x5e>
 800721c:	461c      	mov	r4, r3
 800721e:	f248 0c01 	movw	ip, #32769	; 0x8001
 8007222:	469e      	mov	lr, r3
 8007224:	e7e7      	b.n	80071f6 <R3_1_GetPhaseCurrents+0xb6>
 8007226:	461c      	mov	r4, r3
 8007228:	4625      	mov	r5, r4
 800722a:	f248 0301 	movw	r3, #32769	; 0x8001
 800722e:	e7c9      	b.n	80071c4 <R3_1_GetPhaseCurrents+0x84>
      else  if ( wAux > INT16_MAX )
 8007230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
        pStator_Currents->a = ( int16_t )wAux;
 8007234:	bfb4      	ite	lt
 8007236:	b21d      	sxthlt	r5, r3
 8007238:	f647 75ff 	movwge	r5, #32767	; 0x7fff
 800723c:	e79f      	b.n	800717e <R3_1_GetPhaseCurrents+0x3e>
      else  if ( wAux < -INT16_MAX )
 800723e:	4d1a      	ldr	r5, [pc, #104]	; (80072a8 <R3_1_GetPhaseCurrents+0x168>)
 8007240:	42ab      	cmp	r3, r5
 8007242:	da24      	bge.n	800728e <R3_1_GetPhaseCurrents+0x14e>
        pStator_Currents->a = -INT16_MAX;
 8007244:	800d      	strh	r5, [r1, #0]
 8007246:	f248 0301 	movw	r3, #32769	; 0x8001
 800724a:	e7a8      	b.n	800719e <R3_1_GetPhaseCurrents+0x5e>
      else  if ( wAux < -INT16_MAX )
 800724c:	4c16      	ldr	r4, [pc, #88]	; (80072a8 <R3_1_GetPhaseCurrents+0x168>)
 800724e:	42a2      	cmp	r2, r4
 8007250:	da09      	bge.n	8007266 <R3_1_GetPhaseCurrents+0x126>
        pStator_Currents->b = -INT16_MAX;
 8007252:	804c      	strh	r4, [r1, #2]
 8007254:	f248 0c01 	movw	ip, #32769	; 0x8001
 8007258:	46a6      	mov	lr, r4
 800725a:	e7a0      	b.n	800719e <R3_1_GetPhaseCurrents+0x5e>
 800725c:	f647 7cff 	movw	ip, #32767	; 0x7fff
 8007260:	4664      	mov	r4, ip
 8007262:	46e6      	mov	lr, ip
 8007264:	e7c7      	b.n	80071f6 <R3_1_GetPhaseCurrents+0xb6>
        pStator_Currents->b = ( int16_t )wAux;
 8007266:	fa0f fe82 	sxth.w	lr, r2
 800726a:	f8a1 e002 	strh.w	lr, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800726e:	fa1f fc82 	uxth.w	ip, r2
 8007272:	e794      	b.n	800719e <R3_1_GetPhaseCurrents+0x5e>
        pStator_Currents->b = ( int16_t )wAux;
 8007274:	fa0f fe8c 	sxth.w	lr, ip
 8007278:	f8a1 e002 	strh.w	lr, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800727c:	b2ab      	uxth	r3, r5
 800727e:	fa1f fc8c 	uxth.w	ip, ip
 8007282:	e78c      	b.n	800719e <R3_1_GetPhaseCurrents+0x5e>
 8007284:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007288:	461c      	mov	r4, r3
 800728a:	461d      	mov	r5, r3
 800728c:	e79a      	b.n	80071c4 <R3_1_GetPhaseCurrents+0x84>
        pStator_Currents->a = ( int16_t )wAux;
 800728e:	b21d      	sxth	r5, r3
 8007290:	800d      	strh	r5, [r1, #0]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8007292:	b29b      	uxth	r3, r3
 8007294:	e783      	b.n	800719e <R3_1_GetPhaseCurrents+0x5e>
  pHandle->_Super.Ia = pStator_Currents->a;
 8007296:	f9b1 5000 	ldrsh.w	r5, [r1]
  pHandle->_Super.Ib = pStator_Currents->b;
 800729a:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800729e:	880b      	ldrh	r3, [r1, #0]
 80072a0:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 80072a4:	e77b      	b.n	800719e <R3_1_GetPhaseCurrents+0x5e>
 80072a6:	bf00      	nop
 80072a8:	ffff8001 	.word	0xffff8001

080072ac <R3_1_HFCurrentsCalibrationAB>:
  *         of phase A and B in ab_t format.
  */
__weak void R3_1_HFCurrentsCalibrationAB( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_R3_1_Handle_t * pHandle = (PWMC_R3_1_Handle_t *) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80072ac:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
{
 80072b0:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 80072b2:	e9d3 4200 	ldrd	r4, r2, [r3]
 80072b6:	6a13      	ldr	r3, [r2, #32]
 80072b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072bc:	6213      	str	r3, [r2, #32]
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80072be:	f890 3087 	ldrb.w	r3, [r0, #135]	; 0x87
 80072c2:	2b0f      	cmp	r3, #15
 80072c4:	d80d      	bhi.n	80072e2 <R3_1_HFCurrentsCalibrationAB+0x36>
  {
    pHandle->PhaseAOffset += ADCx->JDR1;
 80072c6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80072c8:	6f03      	ldr	r3, [r0, #112]	; 0x70
    pHandle->PhaseBOffset += ADCx->JDR2;
 80072ca:	6c25      	ldr	r5, [r4, #64]	; 0x40
    pHandle->PhaseAOffset += ADCx->JDR1;
 80072cc:	189c      	adds	r4, r3, r2
    pHandle->PhaseBOffset += ADCx->JDR2;
 80072ce:	6f42      	ldr	r2, [r0, #116]	; 0x74
    pHandle->PolarizationCounter++;
 80072d0:	f890 3087 	ldrb.w	r3, [r0, #135]	; 0x87
    pHandle->PhaseBOffset += ADCx->JDR2;
 80072d4:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 80072d6:	3301      	adds	r3, #1
    pHandle->PhaseBOffset += ADCx->JDR2;
 80072d8:	e9c0 421c 	strd	r4, r2, [r0, #112]	; 0x70
    pHandle->PolarizationCounter++;
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	f880 3087 	strb.w	r3, [r0, #135]	; 0x87
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 80072e2:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 80072e4:	bc30      	pop	{r4, r5}
  pStator_Currents->a = 0;
 80072e6:	600b      	str	r3, [r1, #0]
}
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop

080072ec <R3_1_HFCurrentsCalibrationC>:
  *         of phase A and B in ab_t format.
  */
__weak void R3_1_HFCurrentsCalibrationC(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80072ec:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
{
 80072f0:	b410      	push	{r4}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 80072f2:	e9d3 4200 	ldrd	r4, r2, [r3]
 80072f6:	6a13      	ldr	r3, [r2, #32]
 80072f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072fc:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80072fe:	f890 3087 	ldrb.w	r3, [r0, #135]	; 0x87
 8007302:	2b0f      	cmp	r3, #15
 8007304:	d809      	bhi.n	800731a <R3_1_HFCurrentsCalibrationC+0x2e>
  {
    pHandle->PhaseCOffset += ADCx->JDR2;
 8007306:	6c24      	ldr	r4, [r4, #64]	; 0x40
    pHandle->PolarizationCounter++;
 8007308:	f890 3087 	ldrb.w	r3, [r0, #135]	; 0x87
    pHandle->PhaseCOffset += ADCx->JDR2;
 800730c:	6f82      	ldr	r2, [r0, #120]	; 0x78
    pHandle->PolarizationCounter++;
 800730e:	3301      	adds	r3, #1
    pHandle->PhaseCOffset += ADCx->JDR2;
 8007310:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8007312:	b2db      	uxtb	r3, r3
    pHandle->PhaseCOffset += ADCx->JDR2;
 8007314:	6782      	str	r2, [r0, #120]	; 0x78
    pHandle->PolarizationCounter++;
 8007316:	f880 3087 	strb.w	r3, [r0, #135]	; 0x87
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 800731a:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 800731c:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 8007320:	600b      	str	r3, [r1, #0]
}
 8007322:	4770      	bx	lr

08007324 <R3_1_TurnOnLowSides>:
  *                Max value: PWM_PERIOD_CYCLES/2 (low sides OFF)
  */
__weak void R3_1_TurnOnLowSides(PWMC_Handle_t *pHdl, uint32_t ticks)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8007324:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

  pHandle->_Super.TurnOnLowSidesAction = true;
 8007328:	f04f 0c01 	mov.w	ip, #1
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800732c:	6853      	ldr	r3, [r2, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800732e:	f880 c06b 	strb.w	ip, [r0, #107]	; 0x6b
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007332:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007334:	f06f 0001 	mvn.w	r0, #1
 8007338:	6118      	str	r0, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800733a:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800733c:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800733e:	63d9      	str	r1, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007340:	6919      	ldr	r1, [r3, #16]
 8007342:	07c9      	lsls	r1, r1, #31
 8007344:	d5fc      	bpl.n	8007340 <R3_1_TurnOnLowSides+0x1c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007346:	f06f 0101 	mvn.w	r1, #1
 800734a:	6119      	str	r1, [r3, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800734c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800734e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8007352:	6459      	str	r1, [r3, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);
  
  if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 8007354:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
 8007358:	2b02      	cmp	r3, #2
 800735a:	d000      	beq.n	800735e <R3_1_TurnOnLowSides+0x3a>
 800735c:	4770      	bx	lr
{
 800735e:	b410      	push	{r4}
  {
    /* Enable signals activation */
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8007360:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007364:	e9d2 3404 	ldrd	r3, r4, [r2, #16]
 8007368:	6184      	str	r4, [r0, #24]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800736a:	e9d2 0206 	ldrd	r0, r2, [r2, #24]
  }
  return; 
}
 800736e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007372:	6188      	str	r0, [r1, #24]
 8007374:	619a      	str	r2, [r3, #24]
 8007376:	4770      	bx	lr

08007378 <R3_1_SwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_1_SwitchOnPWM(PWMC_Handle_t *pHdl)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8007378:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 800737c:	f8b0 1084 	ldrh.w	r1, [r0, #132]	; 0x84
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8007380:	6853      	ldr	r3, [r2, #4]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8007382:	f04f 0c00 	mov.w	ip, #0
{  
 8007386:	b430      	push	{r4, r5}
  pHandle->_Super.TurnOnLowSidesAction = false;
 8007388:	f880 c06b 	strb.w	ip, [r0, #107]	; 0x6b
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 800738c:	0848      	lsrs	r0, r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800738e:	6358      	str	r0, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 8007390:	3905      	subs	r1, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007392:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007394:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007396:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 800739a:	6419      	str	r1, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800739c:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800739e:	6919      	ldr	r1, [r3, #16]
 80073a0:	07c9      	lsls	r1, r1, #31
 80073a2:	d5fc      	bpl.n	800739e <R3_1_SwitchOnPWM+0x26>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80073a4:	f06f 0101 	mvn.w	r1, #1
 80073a8:	6119      	str	r1, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80073aa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80073ac:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80073b0:	6459      	str	r1, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80073b2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80073b4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80073b8:	6459      	str	r1, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80073ba:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 80073be:	2902      	cmp	r1, #2
 80073c0:	d008      	beq.n	80073d4 <R3_1_SwitchOnPWM+0x5c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80073c2:	f06f 0201 	mvn.w	r2, #1
 80073c6:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80073c8:	68da      	ldr	r2, [r3, #12]
 80073ca:	f042 0201 	orr.w	r2, r2, #1
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 80073ce:	bc30      	pop	{r4, r5}
 80073d0:	60da      	str	r2, [r3, #12]
 80073d2:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 80073d4:	6a18      	ldr	r0, [r3, #32]
 80073d6:	f240 5155 	movw	r1, #1365	; 0x555
 80073da:	4208      	tst	r0, r1
 80073dc:	d009      	beq.n	80073f2 <R3_1_SwitchOnPWM+0x7a>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80073de:	e9d2 4002 	ldrd	r4, r0, [r2, #8]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80073e2:	e9d2 1504 	ldrd	r1, r5, [r2, #16]
 80073e6:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80073e8:	e9d2 4206 	ldrd	r4, r2, [r2, #24]
 80073ec:	6184      	str	r4, [r0, #24]
 80073ee:	618a      	str	r2, [r1, #24]
}
 80073f0:	e7e7      	b.n	80073c2 <R3_1_SwitchOnPWM+0x4a>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80073f2:	e9d2 4005 	ldrd	r4, r0, [r2, #20]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80073f6:	6895      	ldr	r5, [r2, #8]
 80073f8:	69d1      	ldr	r1, [r2, #28]
 80073fa:	0424      	lsls	r4, r4, #16
 80073fc:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80073fe:	e9d2 5403 	ldrd	r5, r4, [r2, #12]
 8007402:	0400      	lsls	r0, r0, #16
 8007404:	0409      	lsls	r1, r1, #16
 8007406:	61a8      	str	r0, [r5, #24]
 8007408:	61a1      	str	r1, [r4, #24]
}
 800740a:	e7da      	b.n	80073c2 <R3_1_SwitchOnPWM+0x4a>

0800740c <R3_1_SwitchOffPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_1_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800740c:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8007410:	684b      	ldr	r3, [r1, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007412:	68da      	ldr	r2, [r3, #12]
 8007414:	f022 0201 	bic.w	r2, r2, #1
 8007418:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800741a:	6c5a      	ldr	r2, [r3, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 800741c:	f04f 0c00 	mov.w	ip, #0
 8007420:	f880 c06b 	strb.w	ip, [r0, #107]	; 0x6b

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (pHandle->BrakeActionLock == true)
 8007424:	f890 008a 	ldrb.w	r0, [r0, #138]	; 0x8a
 8007428:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800742c:	645a      	str	r2, [r3, #68]	; 0x44
 800742e:	b918      	cbnz	r0, 8007438 <R3_1_SwitchOffPWM+0x2c>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007430:	f891 2044 	ldrb.w	r2, [r1, #68]	; 0x44
 8007434:	2a02      	cmp	r2, #2
 8007436:	d009      	beq.n	800744c <R3_1_SwitchOffPWM+0x40>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007438:	f06f 0201 	mvn.w	r2, #1
 800743c:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800743e:	691a      	ldr	r2, [r3, #16]
 8007440:	07d2      	lsls	r2, r2, #31
 8007442:	d5fc      	bpl.n	800743e <R3_1_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007444:	f06f 0201 	mvn.w	r2, #1
 8007448:	611a      	str	r2, [r3, #16]
 800744a:	4770      	bx	lr
{
 800744c:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800744e:	e9d1 4005 	ldrd	r4, r0, [r1, #20]
    {
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8007452:	688d      	ldr	r5, [r1, #8]
 8007454:	69ca      	ldr	r2, [r1, #28]
 8007456:	0424      	lsls	r4, r4, #16
 8007458:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800745a:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
 800745e:	0412      	lsls	r2, r2, #16
 8007460:	0400      	lsls	r0, r0, #16
 8007462:	61a8      	str	r0, [r5, #24]
 8007464:	61a2      	str	r2, [r4, #24]
 8007466:	f06f 0201 	mvn.w	r2, #1
 800746a:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800746c:	691a      	ldr	r2, [r3, #16]
 800746e:	07d1      	lsls	r1, r2, #31
 8007470:	d5fc      	bpl.n	800746c <R3_1_SwitchOffPWM+0x60>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007472:	f06f 0201 	mvn.w	r2, #1
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
  {}
  LL_TIM_ClearFlag_UPDATE(TIMx);

  return;
}
 8007476:	bc30      	pop	{r4, r5}
 8007478:	611a      	str	r2, [r3, #16]
 800747a:	4770      	bx	lr

0800747c <R3_1_RLGetPhaseCurrents>:
  */
void R3_1_RLGetPhaseCurrents(PWMC_Handle_t *pHdl,ab_t* pStator_Currents)
{

  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800747c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
  
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)((ADCx->JDR2)*2u);
 8007480:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8007482:	b410      	push	{r4}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8007484:	e9d2 4000 	ldrd	r4, r0, [r2]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007488:	6a02      	ldr	r2, [r0, #32]
 800748a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800748e:	6202      	str	r2, [r0, #32]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)((ADCx->JDR2)*2u);
 8007490:	6c20      	ldr	r0, [r4, #64]	; 0x40
  
  /* Check saturation */
  if (wAux > -INT16_MAX)
 8007492:	4a0c      	ldr	r2, [pc, #48]	; (80074c4 <R3_1_RLGetPhaseCurrents+0x48>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)((ADCx->JDR2)*2u);
 8007494:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
  if (wAux > -INT16_MAX)
 8007498:	4293      	cmp	r3, r2
 800749a:	db05      	blt.n	80074a8 <R3_1_RLGetPhaseCurrents+0x2c>
  {
    if (wAux < INT16_MAX)
 800749c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80074a0:	4293      	cmp	r3, r2
 80074a2:	dc0b      	bgt.n	80074bc <R3_1_RLGetPhaseCurrents+0x40>
  else
  {
    wAux = -INT16_MAX;
  }
  /* First value read of Phase B*/
  pStator_Currents->a = ( int16_t )( wAux );
 80074a4:	b21b      	sxth	r3, r3
 80074a6:	e000      	b.n	80074aa <R3_1_RLGetPhaseCurrents+0x2e>
 80074a8:	4b07      	ldr	r3, [pc, #28]	; (80074c8 <R3_1_RLGetPhaseCurrents+0x4c>)
  pStator_Currents->b = ( int16_t )( wAux );

}
 80074aa:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = ( int16_t )( wAux );
 80074ae:	2200      	movs	r2, #0
 80074b0:	f363 020f 	bfi	r2, r3, #0, #16
 80074b4:	f363 421f 	bfi	r2, r3, #16, #16
 80074b8:	600a      	str	r2, [r1, #0]
}
 80074ba:	4770      	bx	lr
 80074bc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80074c0:	e7f3      	b.n	80074aa <R3_1_RLGetPhaseCurrents+0x2e>
 80074c2:	bf00      	nop
 80074c4:	ffff8002 	.word	0xffff8002
 80074c8:	ffff8001 	.word	0xffff8001

080074cc <R3_1_RLTurnOnLowSides>:
  * @param  ticks: Duty cycle of the boot capacitors charge, specific to motor.
  */
void R3_1_RLTurnOnLowSides(PWMC_Handle_t *pHdl, uint32_t ticks)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80074cc:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80074d0:	6853      	ldr	r3, [r2, #4]
{  
 80074d2:	b410      	push	{r4}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80074d4:	f06f 0101 	mvn.w	r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80074d8:	2400      	movs	r4, #0
 80074da:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80074dc:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80074de:	6919      	ldr	r1, [r3, #16]
 80074e0:	07c9      	lsls	r1, r1, #31
 80074e2:	d5fc      	bpl.n	80074de <R3_1_RLTurnOnLowSides+0x12>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80074e4:	f06f 0101 	mvn.w	r1, #1
 80074e8:	6119      	str	r1, [r3, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80074ea:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80074ec:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80074f0:	6459      	str	r1, [r3, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80074f2:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d10a      	bne.n	8007510 <R3_1_RLTurnOnLowSides+0x44>
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80074fa:	6890      	ldr	r0, [r2, #8]
 80074fc:	6954      	ldr	r4, [r2, #20]
 80074fe:	e9d2 1306 	ldrd	r1, r3, [r2, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007502:	6184      	str	r4, [r0, #24]
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8007504:	e9d2 0203 	ldrd	r0, r2, [r2, #12]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007508:	0409      	lsls	r1, r1, #16
 800750a:	041b      	lsls	r3, r3, #16
 800750c:	6181      	str	r1, [r0, #24]
 800750e:	6193      	str	r3, [r2, #24]
  }
  return; 
}
 8007510:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop

08007518 <R3_1_RLSwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
void R3_1_RLSwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8007518:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 800751c:	2200      	movs	r2, #0
{
 800751e:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8007520:	e9d1 4300 	ldrd	r4, r3, [r1]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8007524:	f880 206b 	strb.w	r2, [r0, #107]	; 0x6b
  /* The following while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

  /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/

  while ( ( TIMx->CR1 & DIR_MASK ) == DIR_MASK )
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	06d2      	lsls	r2, r2, #27
 800752c:	d4fc      	bmi.n	8007528 <R3_1_RLSwitchOnPWM+0x10>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & DIR_MASK ) == 0u )
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	06d5      	lsls	r5, r2, #27
 8007532:	d5fc      	bpl.n	800752e <R3_1_RLSwitchOnPWM+0x16>
  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 8007534:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007538:	2001      	movs	r0, #1
 800753a:	3a05      	subs	r2, #5
 800753c:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 800753e:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007540:	f06f 0201 	mvn.w	r2, #1
 8007544:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007546:	691a      	ldr	r2, [r3, #16]
 8007548:	07d2      	lsls	r2, r2, #31
 800754a:	d5fc      	bpl.n	8007546 <R3_1_RLSwitchOnPWM+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800754c:	f06f 0201 	mvn.w	r2, #1
 8007550:	611a      	str	r2, [r3, #16]
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007552:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007554:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007558:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800755a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800755c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007560:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007562:	f891 2044 	ldrb.w	r2, [r1, #68]	; 0x44
 8007566:	2a02      	cmp	r2, #2
 8007568:	d00b      	beq.n	8007582 <R3_1_RLSwitchOnPWM+0x6a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800756a:	f06f 0201 	mvn.w	r2, #1
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800756e:	f06f 0104 	mvn.w	r1, #4
 8007572:	6021      	str	r1, [r4, #0]
 8007574:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007576:	68da      	ldr	r2, [r3, #12]
 8007578:	f042 0201 	orr.w	r2, r2, #1

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 800757c:	bc30      	pop	{r4, r5}
 800757e:	60da      	str	r2, [r3, #12]
 8007580:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8007582:	6a18      	ldr	r0, [r3, #32]
 8007584:	f240 5255 	movw	r2, #1365	; 0x555
 8007588:	4210      	tst	r0, r2
 800758a:	d00a      	beq.n	80075a2 <R3_1_RLSwitchOnPWM+0x8a>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800758c:	688a      	ldr	r2, [r1, #8]
 800758e:	6948      	ldr	r0, [r1, #20]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007590:	6190      	str	r0, [r2, #24]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8007592:	68ca      	ldr	r2, [r1, #12]
 8007594:	6988      	ldr	r0, [r1, #24]
 8007596:	6190      	str	r0, [r2, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007598:	69ca      	ldr	r2, [r1, #28]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800759a:	6909      	ldr	r1, [r1, #16]
 800759c:	0412      	lsls	r2, r2, #16
 800759e:	618a      	str	r2, [r1, #24]
}
 80075a0:	e7e3      	b.n	800756a <R3_1_RLSwitchOnPWM+0x52>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80075a2:	e9d1 0205 	ldrd	r0, r2, [r1, #20]
 80075a6:	688d      	ldr	r5, [r1, #8]
 80075a8:	0400      	lsls	r0, r0, #16
 80075aa:	61a8      	str	r0, [r5, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80075ac:	68c8      	ldr	r0, [r1, #12]
 80075ae:	0412      	lsls	r2, r2, #16
 80075b0:	6182      	str	r2, [r0, #24]
 80075b2:	69ca      	ldr	r2, [r1, #28]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80075b4:	6909      	ldr	r1, [r1, #16]
 80075b6:	0412      	lsls	r2, r2, #16
 80075b8:	618a      	str	r2, [r1, #24]
}
 80075ba:	e7d6      	b.n	800756a <R3_1_RLSwitchOnPWM+0x52>

080075bc <R3_1_Init>:
{
 80075bc:	b430      	push	{r4, r5}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80075be:	f8d0 408c 	ldr.w	r4, [r0, #140]	; 0x8c
  ADC_TypeDef* ADCx  = pHandle->pParams_str->ADCx;
 80075c2:	6823      	ldr	r3, [r4, #0]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80075c4:	6862      	ldr	r2, [r4, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80075c6:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80075c8:	f06f 0502 	mvn.w	r5, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80075cc:	f021 0120 	bic.w	r1, r1, #32
 80075d0:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80075d2:	601d      	str	r5, [r3, #0]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80075d4:	6859      	ldr	r1, [r3, #4]
 80075d6:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80075da:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80075dc:	f06f 0104 	mvn.w	r1, #4
 80075e0:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80075e2:	6811      	ldr	r1, [r2, #0]
 80075e4:	f021 0101 	bic.w	r1, r1, #1
 80075e8:	6011      	str	r1, [r2, #0]
    if ( TIMx == TIM1 )
 80075ea:	491b      	ldr	r1, [pc, #108]	; (8007658 <R3_1_Init+0x9c>)
 80075ec:	428a      	cmp	r2, r1
 80075ee:	d02d      	beq.n	800764c <R3_1_Init+0x90>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80075f0:	f06f 0180 	mvn.w	r1, #128	; 0x80
 80075f4:	6111      	str	r1, [r2, #16]
    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 80075f6:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
 80075fa:	b119      	cbz	r1, 8007604 <R3_1_Init+0x48>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80075fc:	68d1      	ldr	r1, [r2, #12]
 80075fe:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8007602:	60d1      	str	r1, [r2, #12]
  SET_BIT(TIMx->CCER, Channels);
 8007604:	6a11      	ldr	r1, [r2, #32]
 8007606:	f441 61aa 	orr.w	r1, r1, #1360	; 0x550
 800760a:	f041 0105 	orr.w	r1, r1, #5
 800760e:	6211      	str	r1, [r2, #32]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8007610:	689a      	ldr	r2, [r3, #8]
 8007612:	f042 0201 	orr.w	r2, r2, #1
 8007616:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8007618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800761a:	f06f 0404 	mvn.w	r4, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800761e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007622:	62da      	str	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8007624:	601c      	str	r4, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8007626:	685a      	ldr	r2, [r3, #4]
 8007628:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800762c:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 800762e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    pHandle->OverCurrentFlag = false;
 8007630:	2100      	movs	r1, #0
    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8007632:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 8007636:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800763a:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 800763e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007640:	bc30      	pop	{r4, r5}
    pHandle->OverCurrentFlag = false;
 8007642:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    pHandle->_Super.DTTest = 0u;
 8007646:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
}
 800764a:	4770      	bx	lr
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800764c:	4d03      	ldr	r5, [pc, #12]	; (800765c <R3_1_Init+0xa0>)
 800764e:	68e9      	ldr	r1, [r5, #12]
 8007650:	f041 0101 	orr.w	r1, r1, #1
 8007654:	60e9      	str	r1, [r5, #12]
}
 8007656:	e7cb      	b.n	80075f0 <R3_1_Init+0x34>
 8007658:	40010000 	.word	0x40010000
 800765c:	e0042000 	.word	0xe0042000

08007660 <R3_1_SetOffsetCalib>:
{
 8007660:	b410      	push	{r4}
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8007662:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 8007666:	680b      	ldr	r3, [r1, #0]
 8007668:	6703      	str	r3, [r0, #112]	; 0x70
  pHdl->offsetCalibStatus = true;
 800766a:	2301      	movs	r3, #1
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 800766c:	e9c0 421d 	strd	r4, r2, [r0, #116]	; 0x74
  pHdl->offsetCalibStatus = true;
 8007670:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 8007674:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop

0800767c <R3_1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 800767c:	e9d0 231d 	ldrd	r2, r3, [r0, #116]	; 0x74
 8007680:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8007682:	608b      	str	r3, [r1, #8]
 8007684:	e9c1 0200 	strd	r0, r2, [r1]
}
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop

0800768c <R3_1_CurrentReadingCalibration>:
{
 800768c:	b570      	push	{r4, r5, r6, lr}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800768e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
  if (false == pHandle->_Super.offsetCalibStatus)
 8007692:	f890 606e 	ldrb.w	r6, [r0, #110]	; 0x6e
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8007696:	685c      	ldr	r4, [r3, #4]
{
 8007698:	b084      	sub	sp, #16
 800769a:	4605      	mov	r5, r0
  if (false == pHandle->_Super.offsetCalibStatus)
 800769c:	b356      	cbz	r6, 80076f4 <R3_1_CurrentReadingCalibration+0x68>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800769e:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->Half_PWMPeriod);
 80076a0:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80076a4:	f022 0208 	bic.w	r2, r2, #8
 80076a8:	61a2      	str	r2, [r4, #24]
 80076aa:	69a2      	ldr	r2, [r4, #24]
 80076ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076b0:	61a2      	str	r2, [r4, #24]
 80076b2:	69e2      	ldr	r2, [r4, #28]
 80076b4:	f022 0208 	bic.w	r2, r2, #8
 80076b8:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80076ba:	6363      	str	r3, [r4, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80076bc:	63a3      	str	r3, [r4, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80076be:	63e3      	str	r3, [r4, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80076c0:	69a3      	ldr	r3, [r4, #24]
 80076c2:	f043 0308 	orr.w	r3, r3, #8
 80076c6:	61a3      	str	r3, [r4, #24]
 80076c8:	69a3      	ldr	r3, [r4, #24]
 80076ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80076ce:	61a3      	str	r3, [r4, #24]
 80076d0:	69e3      	ldr	r3, [r4, #28]
 80076d2:	f043 0308 	orr.w	r3, r3, #8
 80076d6:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 80076d8:	6a23      	ldr	r3, [r4, #32]
 80076da:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
  pHandle->_Super.Sector = SECTOR_5;
 80076de:	2104      	movs	r1, #4
  pHandle->BrakeActionLock = false;
 80076e0:	2200      	movs	r2, #0
 80076e2:	f043 0305 	orr.w	r3, r3, #5
 80076e6:	6223      	str	r3, [r4, #32]
  pHandle->_Super.Sector = SECTOR_5;
 80076e8:	f885 106a 	strb.w	r1, [r5, #106]	; 0x6a
  pHandle->BrakeActionLock = false;
 80076ec:	f885 208a 	strb.w	r2, [r5, #138]	; 0x8a
}
 80076f0:	b004      	add	sp, #16
 80076f2:	bd70      	pop	{r4, r5, r6, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 80076f4:	6803      	ldr	r3, [r0, #0]
 80076f6:	9302      	str	r3, [sp, #8]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 80076f8:	6943      	ldr	r3, [r0, #20]
 80076fa:	9303      	str	r3, [sp, #12]
    pHandle->PolarizationCounter = 0u;
 80076fc:	f880 6087 	strb.w	r6, [r0, #135]	; 0x87
  CLEAR_BIT(TIMx->CCER, Channels);
 8007700:	6a23      	ldr	r3, [r4, #32]
    pHandle->PhaseAOffset = 0u;
 8007702:	6706      	str	r6, [r0, #112]	; 0x70
 8007704:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 8007708:	f023 0305 	bic.w	r3, r3, #5
    pHandle->PhaseCOffset = 0u;
 800770c:	e9c0 661d 	strd	r6, r6, [r0, #116]	; 0x74
 8007710:	6223      	str	r3, [r4, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationAB;
 8007712:	4b21      	ldr	r3, [pc, #132]	; (8007798 <R3_1_CurrentReadingCalibration+0x10c>)
 8007714:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 8007716:	4b21      	ldr	r3, [pc, #132]	; (800779c <R3_1_CurrentReadingCalibration+0x110>)
 8007718:	6143      	str	r3, [r0, #20]
    pHandle->CalibSector = SECTOR_5;
 800771a:	2304      	movs	r3, #4
 800771c:	f880 3086 	strb.w	r3, [r0, #134]	; 0x86
    pHandle->_Super.Sector = SECTOR_5;
 8007720:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    R3_1_SwitchOnPWM( &pHandle->_Super );
 8007724:	f7ff fe28 	bl	8007378 <R3_1_SwitchOnPWM>
                            pHandle->pParams_str->RepetitionCounter,
 8007728:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
    waitForPolarizationEnd( TIMx,
 800772c:	f105 0144 	add.w	r1, r5, #68	; 0x44
 8007730:	f105 0387 	add.w	r3, r5, #135	; 0x87
 8007734:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 8007738:	4620      	mov	r0, r4
 800773a:	e9cd 1300 	strd	r1, r3, [sp]
 800773e:	f7ff fce1 	bl	8007104 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 8007742:	4628      	mov	r0, r5
 8007744:	f7ff fe62 	bl	800740c <R3_1_SwitchOffPWM>
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 8007748:	4a15      	ldr	r2, [pc, #84]	; (80077a0 <R3_1_CurrentReadingCalibration+0x114>)
 800774a:	602a      	str	r2, [r5, #0]
    R3_1_SwitchOnPWM( &pHandle->_Super );
 800774c:	4628      	mov	r0, r5
    pHandle->PolarizationCounter = 0u;
 800774e:	f885 6087 	strb.w	r6, [r5, #135]	; 0x87
    pHandle->CalibSector = SECTOR_1;
 8007752:	f885 6086 	strb.w	r6, [r5, #134]	; 0x86
    pHandle->_Super.Sector = SECTOR_1;
 8007756:	f885 606a 	strb.w	r6, [r5, #106]	; 0x6a
    R3_1_SwitchOnPWM( &pHandle->_Super );
 800775a:	f7ff fe0d 	bl	8007378 <R3_1_SwitchOnPWM>
                            pHandle->pParams_str->RepetitionCounter,
 800775e:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
    waitForPolarizationEnd( TIMx,
 8007762:	9b01      	ldr	r3, [sp, #4]
 8007764:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 8007768:	9900      	ldr	r1, [sp, #0]
 800776a:	4620      	mov	r0, r4
 800776c:	f7ff fcca 	bl	8007104 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 8007770:	4628      	mov	r0, r5
 8007772:	f7ff fe4b 	bl	800740c <R3_1_SwitchOffPWM>
    pHandle->PhaseBOffset >>= 3;
 8007776:	e9d5 121c 	ldrd	r1, r2, [r5, #112]	; 0x70
    pHandle->PhaseCOffset >>= 3;
 800777a:	6fab      	ldr	r3, [r5, #120]	; 0x78
    pHandle->PhaseAOffset >>= 3;
 800777c:	08c9      	lsrs	r1, r1, #3
    pHandle->PhaseBOffset >>= 3;
 800777e:	08d2      	lsrs	r2, r2, #3
    pHandle->PhaseCOffset >>= 3;
 8007780:	08db      	lsrs	r3, r3, #3
    pHandle->PhaseBOffset >>= 3;
 8007782:	e9c5 121c 	strd	r1, r2, [r5, #112]	; 0x70
    pHandle->PhaseCOffset >>= 3;
 8007786:	67ab      	str	r3, [r5, #120]	; 0x78
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8007788:	9a02      	ldr	r2, [sp, #8]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 800778a:	9b03      	ldr	r3, [sp, #12]
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 800778c:	602a      	str	r2, [r5, #0]
    pHandle->_Super.offsetCalibStatus = true;
 800778e:	2101      	movs	r1, #1
 8007790:	f885 106e 	strb.w	r1, [r5, #110]	; 0x6e
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8007794:	616b      	str	r3, [r5, #20]
 8007796:	e782      	b.n	800769e <R3_1_CurrentReadingCalibration+0x12>
 8007798:	080072ad 	.word	0x080072ad
 800779c:	080077dd 	.word	0x080077dd
 80077a0:	080072ed 	.word	0x080072ed

080077a4 <R3_1_WriteTIMRegisters>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80077a4:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
  LL_TIM_OC_SetCompareCH2 (TIMx,pHandle->_Super.CntPhB);
 80077a8:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80077ac:	685b      	ldr	r3, [r3, #4]
{
 80077ae:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->_Super.CntPhA);
 80077b0:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
  WRITE_REG(TIMx->CCR1, CompareValue);
 80077b2:	635c      	str	r4, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 (TIMx,pHandle->_Super.CntPhC);
 80077b4:	f8b0 4042 	ldrh.w	r4, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR2, CompareValue);
 80077b8:	639a      	str	r2, [r3, #56]	; 0x38
  if ( pHandle->_Super.SWerror == 1u )
 80077ba:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
  WRITE_REG(TIMx->CCR3, CompareValue);
 80077be:	63dc      	str	r4, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80077c0:	6419      	str	r1, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 80077c2:	6a1b      	ldr	r3, [r3, #32]
}
 80077c4:	f85d 4b04 	ldr.w	r4, [sp], #4
  if ( pHandle->_Super.SWerror == 1u )
 80077c8:	2a01      	cmp	r2, #1
    hAux = MC_DURATION;
 80077ca:	bf12      	itee	ne
 80077cc:	f3c3 3200 	ubfxne	r2, r3, #12, #1
    pHandle->_Super.SWerror = 0u;
 80077d0:	2300      	moveq	r3, #0
 80077d2:	f8a0 3044 	strheq.w	r3, [r0, #68]	; 0x44
}
 80077d6:	4610      	mov	r0, r2
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop

080077dc <R3_1_SetADCSampPointCalibration>:
{
 80077dc:	b510      	push	{r4, lr}
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 80077de:	f8b0 1084 	ldrh.w	r1, [r0, #132]	; 0x84
  pHandle->_Super.Sector = pHandle->CalibSector;
 80077e2:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
 80077e6:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80077ea:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 80077ee:	3901      	subs	r1, #1
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80077f0:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 80077f4:	b289      	uxth	r1, r1
 80077f6:	f7ff ffd5 	bl	80077a4 <R3_1_WriteTIMRegisters>
}
 80077fa:	bd10      	pop	{r4, pc}

080077fc <R3_1_SetADCSampPointSectX>:
{
 80077fc:	b510      	push	{r4, lr}
  register uint16_t lowDuty = pHdl->lowDuty;
 80077fe:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 8007802:	f8b0 e084 	ldrh.w	lr, [r0, #132]	; 0x84
 8007806:	f8d0 408c 	ldr.w	r4, [r0, #140]	; 0x8c
  register uint16_t midDuty = pHdl->midDuty;
 800780a:	f8b0 c048 	ldrh.w	ip, [r0, #72]	; 0x48
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 800780e:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8007810:	ebae 0302 	sub.w	r3, lr, r2
 8007814:	b29b      	uxth	r3, r3
 8007816:	428b      	cmp	r3, r1
 8007818:	d908      	bls.n	800782c <R3_1_SetADCSampPointSectX+0x30>
    pHandle->_Super.Sector = SECTOR_5;
 800781a:	2304      	movs	r3, #4
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 800781c:	f10e 31ff 	add.w	r1, lr, #4294967295
    pHandle->_Super.Sector = SECTOR_5;
 8007820:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8007824:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 8007826:	f7ff ffbd 	bl	80077a4 <R3_1_WriteTIMRegisters>
}
 800782a:	bd10      	pop	{r4, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 800782c:	eba2 0c0c 	sub.w	ip, r2, ip
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 8007830:	fa1f fc8c 	uxth.w	ip, ip
 8007834:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
 8007838:	d905      	bls.n	8007846 <R3_1_SetADCSampPointSectX+0x4a>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 800783a:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800783c:	1ad2      	subs	r2, r2, r3
 800783e:	b291      	uxth	r1, r2
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 8007840:	f7ff ffb0 	bl	80077a4 <R3_1_WriteTIMRegisters>
}
 8007844:	bd10      	pop	{r4, pc}
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 8007846:	4411      	add	r1, r2
 8007848:	b289      	uxth	r1, r1
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 800784a:	458e      	cmp	lr, r1
 800784c:	d8eb      	bhi.n	8007826 <R3_1_SetADCSampPointSectX+0x2a>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 800784e:	43c9      	mvns	r1, r1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 8007850:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8007854:	eb01 014e 	add.w	r1, r1, lr, lsl #1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 8007858:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 800785c:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 800785e:	f7ff ffa1 	bl	80077a4 <R3_1_WriteTIMRegisters>
}
 8007862:	bd10      	pop	{r4, pc}

08007864 <R3_1_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007864:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
{
 8007868:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800786a:	e9d1 2400 	ldrd	r2, r4, [r1]
{
 800786e:	4603      	mov	r3, r0
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 8007870:	6890      	ldr	r0, [r2, #8]
 8007872:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8007876:	6090      	str	r0, [r2, #8]
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 8007878:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
 800787c:	3008      	adds	r0, #8
 800787e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8007882:	6391      	str	r1, [r2, #56]	; 0x38
  SET_BIT(TIMx->CCER, Channels);
 8007884:	6a21      	ldr	r1, [r4, #32]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8007886:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800788a:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800788e:	6221      	str	r1, [r4, #32]
 8007890:	6891      	ldr	r1, [r2, #8]
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8007892:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 8007896:	4301      	orrs	r1, r0
 8007898:	6091      	str	r1, [r2, #8]
}
 800789a:	f103 0068 	add.w	r0, r3, #104	; 0x68
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800789e:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
}
 80078a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <R3_1_BRK_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 80078a8:	f890 308a 	ldrb.w	r3, [r0, #138]	; 0x8a
 80078ac:	b92b      	cbnz	r3, 80078ba <R3_1_BRK_IRQHandler+0x12>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80078ae:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80078b2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80078b6:	2a02      	cmp	r2, #2
 80078b8:	d004      	beq.n	80078c4 <R3_1_BRK_IRQHandler+0x1c>
  pHandle->OverCurrentFlag = true;
 80078ba:	2301      	movs	r3, #1
 80078bc:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
}
 80078c0:	3068      	adds	r0, #104	; 0x68
 80078c2:	4770      	bx	lr
{
 80078c4:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80078c6:	e9d3 4105 	ldrd	r4, r1, [r3, #20]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80078ca:	689d      	ldr	r5, [r3, #8]
 80078cc:	69da      	ldr	r2, [r3, #28]
 80078ce:	0424      	lsls	r4, r4, #16
 80078d0:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80078d2:	e9d3 5403 	ldrd	r5, r4, [r3, #12]
 80078d6:	0409      	lsls	r1, r1, #16
 80078d8:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 80078da:	2301      	movs	r3, #1
 80078dc:	61a9      	str	r1, [r5, #24]
}
 80078de:	3068      	adds	r0, #104	; 0x68
 80078e0:	61a2      	str	r2, [r4, #24]
  pHandle->OverCurrentFlag = true;
 80078e2:	f880 3020 	strb.w	r3, [r0, #32]
}
 80078e6:	bc30      	pop	{r4, r5}
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop

080078ec <R3_1_IsOverCurrentOccurred>:
  if (pHandle->OverCurrentFlag == true )
 80078ec:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 80078f0:	b90b      	cbnz	r3, 80078f6 <R3_1_IsOverCurrentOccurred+0xa>
  uint16_t retVal = MC_NO_FAULTS;
 80078f2:	4618      	mov	r0, r3
}
 80078f4:	4770      	bx	lr
    pHandle->OverCurrentFlag = false;
 80078f6:	2300      	movs	r3, #0
 80078f8:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
    retVal |= MC_BREAK_IN;
 80078fc:	2040      	movs	r0, #64	; 0x40
 80078fe:	4770      	bx	lr

08007900 <R3_1_RLDetectionModeEnable>:
  if (pHandle->_Super.RLDetectionMode == false)
 8007900:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
{
 8007904:	b430      	push	{r4, r5}
  if (pHandle->_Super.RLDetectionMode == false)
 8007906:	2900      	cmp	r1, #0
 8007908:	d135      	bne.n	8007976 <R3_1_RLDetectionModeEnable+0x76>
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800790a:	f8d0 508c 	ldr.w	r5, [r0, #140]	; 0x8c
 800790e:	686b      	ldr	r3, [r5, #4]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007910:	699a      	ldr	r2, [r3, #24]
 8007912:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007916:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800791a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800791c:	6a1a      	ldr	r2, [r3, #32]
 800791e:	f042 0201 	orr.w	r2, r2, #1
 8007922:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007924:	6a1a      	ldr	r2, [r3, #32]
 8007926:	f022 0204 	bic.w	r2, r2, #4
 800792a:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800792c:	6359      	str	r1, [r3, #52]	; 0x34
    if ((pHandle->pParams_str->LowSideOutputs)== LS_PWM_TIMER)
 800792e:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
 8007932:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8007934:	f103 0418 	add.w	r4, r3, #24
 8007938:	d02a      	beq.n	8007990 <R3_1_RLDetectionModeEnable+0x90>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 800793a:	2a02      	cmp	r2, #2
 800793c:	d10d      	bne.n	800795a <R3_1_RLDetectionModeEnable+0x5a>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800793e:	699a      	ldr	r2, [r3, #24]
 8007940:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8007944:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007948:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800794a:	6a1a      	ldr	r2, [r3, #32]
 800794c:	f042 0210 	orr.w	r2, r2, #16
 8007950:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007952:	6a1a      	ldr	r2, [r3, #32]
 8007954:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007958:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800795a:	6862      	ldr	r2, [r4, #4]
 800795c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007960:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8007964:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007966:	6a1a      	ldr	r2, [r3, #32]
 8007968:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800796c:	621a      	str	r2, [r3, #32]
 800796e:	6a1a      	ldr	r2, [r3, #32]
 8007970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007974:	621a      	str	r2, [r3, #32]
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8007976:	4b0e      	ldr	r3, [pc, #56]	; (80079b0 <R3_1_RLDetectionModeEnable+0xb0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 8007978:	490e      	ldr	r1, [pc, #56]	; (80079b4 <R3_1_RLDetectionModeEnable+0xb4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800797a:	4a0f      	ldr	r2, [pc, #60]	; (80079b8 <R3_1_RLDetectionModeEnable+0xb8>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 800797c:	4c0f      	ldr	r4, [pc, #60]	; (80079bc <R3_1_RLDetectionModeEnable+0xbc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 800797e:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 8007980:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8007982:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8007984:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8007988:	bc30      	pop	{r4, r5}
  pHandle->_Super.RLDetectionMode = true;
 800798a:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
}
 800798e:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007990:	699a      	ldr	r2, [r3, #24]
 8007992:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8007996:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800799a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 800799c:	6a1a      	ldr	r2, [r3, #32]
 800799e:	f022 0210 	bic.w	r2, r2, #16
 80079a2:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 80079a4:	6a1a      	ldr	r2, [r3, #32]
 80079a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079aa:	621a      	str	r2, [r3, #32]
}
 80079ac:	e7d5      	b.n	800795a <R3_1_RLDetectionModeEnable+0x5a>
 80079ae:	bf00      	nop
 80079b0:	080074cd 	.word	0x080074cd
 80079b4:	08007519 	.word	0x08007519
 80079b8:	0800740d 	.word	0x0800740d
 80079bc:	0800747d 	.word	0x0800747d

080079c0 <R3_1_RLDetectionModeDisable>:
  if (pHandle->_Super.RLDetectionMode == true)
 80079c0:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d049      	beq.n	8007a5c <R3_1_RLDetectionModeDisable+0x9c>
{
 80079c8:	b410      	push	{r4}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80079ca:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 80079ce:	684b      	ldr	r3, [r1, #4]
    while ((TIMx->CR1 & DIR_MASK) == 0u)
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	06d4      	lsls	r4, r2, #27
 80079d4:	d5fc      	bpl.n	80079d0 <R3_1_RLDetectionModeDisable+0x10>
    while ((TIMx->CR1 & DIR_MASK) == DIR_MASK)
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	06d2      	lsls	r2, r2, #27
 80079da:	d4fc      	bmi.n	80079d6 <R3_1_RLDetectionModeDisable+0x16>
    TIMx->RCR = pHandle->pParams_str->RepetitionCounter;
 80079dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079e0:	631a      	str	r2, [r3, #48]	; 0x30
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80079e2:	699a      	ldr	r2, [r3, #24]
 80079e4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80079e8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80079ec:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80079ee:	6a1a      	ldr	r2, [r3, #32]
 80079f0:	f042 0201 	orr.w	r2, r2, #1
 80079f4:	621a      	str	r2, [r3, #32]
    if ((pHandle->pParams_str-> LowSideOutputs)== LS_PWM_TIMER)
 80079f6:	f891 2044 	ldrb.w	r2, [r1, #68]	; 0x44
 80079fa:	2a01      	cmp	r2, #1
 80079fc:	d02f      	beq.n	8007a5e <R3_1_RLDetectionModeDisable+0x9e>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 80079fe:	2a02      	cmp	r2, #2
 8007a00:	d053      	beq.n	8007aaa <R3_1_RLDetectionModeDisable+0xea>
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 8007a02:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
 8007a06:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007a08:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007a0a:	699c      	ldr	r4, [r3, #24]
 8007a0c:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8007a10:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 8007a14:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007a16:	6a1c      	ldr	r4, [r3, #32]
 8007a18:	f044 0410 	orr.w	r4, r4, #16
 8007a1c:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007a1e:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007a20:	69dc      	ldr	r4, [r3, #28]
 8007a22:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8007a26:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8007a2a:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8007a2c:	6a1c      	ldr	r4, [r3, #32]
 8007a2e:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8007a32:	621c      	str	r4, [r3, #32]
    LL_ADC_INJ_SetSequencerDiscont(pHandle->pParams_str->ADCx,
 8007a34:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007a36:	63da      	str	r2, [r3, #60]	; 0x3c
  MODIFY_REG(ADCx->CR1, ADC_CR1_JDISCEN, SeqDiscont);
 8007a38:	684b      	ldr	r3, [r1, #4]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8007a3a:	4a2f      	ldr	r2, [pc, #188]	; (8007af8 <R3_1_RLDetectionModeDisable+0x138>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 8007a3c:	4c2f      	ldr	r4, [pc, #188]	; (8007afc <R3_1_RLDetectionModeDisable+0x13c>)
 8007a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a42:	604b      	str	r3, [r1, #4]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 8007a44:	492e      	ldr	r1, [pc, #184]	; (8007b00 <R3_1_RLDetectionModeDisable+0x140>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8007a46:	6002      	str	r2, [r0, #0]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8007a48:	4a2e      	ldr	r2, [pc, #184]	; (8007b04 <R3_1_RLDetectionModeDisable+0x144>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 8007a4a:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 8007a4c:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8007a4e:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8007a52:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 8007a56:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
}
 8007a5a:	4770      	bx	lr
 8007a5c:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8007a5e:	6a1c      	ldr	r4, [r3, #32]
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 8007a60:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
 8007a64:	f044 0404 	orr.w	r4, r4, #4
 8007a68:	0852      	lsrs	r2, r2, #1
 8007a6a:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007a6c:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007a6e:	699c      	ldr	r4, [r3, #24]
 8007a70:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8007a74:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 8007a78:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007a7a:	6a1c      	ldr	r4, [r3, #32]
 8007a7c:	f044 0410 	orr.w	r4, r4, #16
 8007a80:	621c      	str	r4, [r3, #32]
 8007a82:	6a1c      	ldr	r4, [r3, #32]
 8007a84:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8007a88:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007a8a:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007a8c:	69dc      	ldr	r4, [r3, #28]
 8007a8e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8007a92:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8007a96:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8007a98:	6a1c      	ldr	r4, [r3, #32]
 8007a9a:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8007a9e:	621c      	str	r4, [r3, #32]
 8007aa0:	6a1c      	ldr	r4, [r3, #32]
 8007aa2:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8007aa6:	621c      	str	r4, [r3, #32]
}
 8007aa8:	e7c4      	b.n	8007a34 <R3_1_RLDetectionModeDisable+0x74>
  CLEAR_BIT(TIMx->CCER, Channels);
 8007aaa:	6a1c      	ldr	r4, [r3, #32]
 8007aac:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
 8007ab0:	f024 0404 	bic.w	r4, r4, #4
 8007ab4:	0852      	lsrs	r2, r2, #1
 8007ab6:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007ab8:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007aba:	699c      	ldr	r4, [r3, #24]
 8007abc:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8007ac0:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 8007ac4:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007ac6:	6a1c      	ldr	r4, [r3, #32]
 8007ac8:	f044 0410 	orr.w	r4, r4, #16
 8007acc:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007ace:	6a1c      	ldr	r4, [r3, #32]
 8007ad0:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 8007ad4:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007ad6:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007ad8:	69dc      	ldr	r4, [r3, #28]
 8007ada:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8007ade:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8007ae2:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8007ae4:	6a1c      	ldr	r4, [r3, #32]
 8007ae6:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8007aea:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007aec:	6a1c      	ldr	r4, [r3, #32]
 8007aee:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8007af2:	621c      	str	r4, [r3, #32]
}
 8007af4:	e79e      	b.n	8007a34 <R3_1_RLDetectionModeDisable+0x74>
 8007af6:	bf00      	nop
 8007af8:	08007141 	.word	0x08007141
 8007afc:	08007325 	.word	0x08007325
 8007b00:	08007379 	.word	0x08007379
 8007b04:	0800740d 	.word	0x0800740d

08007b08 <R3_1_RLDetectionModeSetDuty>:
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8007b08:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007b0c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8007b10:	fb03 f101 	mul.w	r1, r3, r1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007b14:	6852      	ldr	r2, [r2, #4]
  if (pHandle->_Super.SWerror == 1u)
 8007b16:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8007b1a:	0c09      	lsrs	r1, r1, #16
  pHandle->_Super.Sector = SECTOR_4;
 8007b1c:	f04f 0c03 	mov.w	ip, #3
 8007b20:	f880 c06a 	strb.w	ip, [r0, #106]	; 0x6a
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8007b24:	87c1      	strh	r1, [r0, #62]	; 0x3e
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007b26:	6351      	str	r1, [r2, #52]	; 0x34
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8007b28:	6a12      	ldr	r2, [r2, #32]
  if (pHandle->_Super.SWerror == 1u)
 8007b2a:	2b01      	cmp	r3, #1
    hAux = MC_DURATION;
 8007b2c:	bf12      	itee	ne
 8007b2e:	f3c2 3300 	ubfxne	r3, r2, #12, #1
    pHandle->_Super.SWerror = 0u;
 8007b32:	2200      	moveq	r2, #0
 8007b34:	f8a0 2044 	strheq.w	r2, [r0, #68]	; 0x44
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	4770      	bx	lr

08007b3c <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8007b3c:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 8007b40:	8c02      	ldrh	r2, [r0, #32]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8007b42:	8b03      	ldrh	r3, [r0, #24]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8007b44:	4494      	add	ip, r2
 8007b46:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
{
 8007b4a:	b430      	push	{r4, r5}
 8007b4c:	2500      	movs	r5, #0
 8007b4e:	f36c 050f 	bfi	r5, ip, #0, #16
 8007b52:	f36c 451f 	bfi	r5, ip, #16, #16
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8007b56:	b14b      	cbz	r3, 8007b6c <RVBS_Clear+0x30>
    {
      pHandle->aBuffer[index] = aux;
 8007b58:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	b29a      	uxth	r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8007b5e:	3301      	adds	r3, #1
      pHandle->aBuffer[index] = aux;
 8007b60:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8007b64:	8b01      	ldrh	r1, [r0, #24]
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	4291      	cmp	r1, r2
 8007b6a:	d8f7      	bhi.n	8007b5c <RVBS_Clear+0x20>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 8007b6c:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 8007b6e:	6045      	str	r5, [r0, #4]
    pHandle->index = 0U;
 8007b70:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
}
 8007b74:	bc30      	pop	{r4, r5}
 8007b76:	4770      	bx	lr

08007b78 <RVBS_Init>:
{
 8007b78:	b510      	push	{r4, lr}
 8007b7a:	4604      	mov	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8007b7c:	300c      	adds	r0, #12
 8007b7e:	f7fb fe41 	bl	8003804 <RCM_RegisterRegConv>
 8007b82:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    RVBS_Clear(pHandle);
 8007b86:	4620      	mov	r0, r4
 8007b88:	f7ff ffd8 	bl	8007b3c <RVBS_Clear>
}
 8007b8c:	bd10      	pop	{r4, pc}
 8007b8e:	bf00      	nop

08007b90 <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8007b90:	8b42      	ldrh	r2, [r0, #26]
 8007b92:	8b81      	ldrh	r1, [r0, #28]
 8007b94:	428a      	cmp	r2, r1
 8007b96:	d00e      	beq.n	8007bb6 <RVBS_CheckFaultState+0x26>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8007b98:	f8b0 c006 	ldrh.w	ip, [r0, #6]
 8007b9c:	8c03      	ldrh	r3, [r0, #32]
 8007b9e:	4563      	cmp	r3, ip
 8007ba0:	d807      	bhi.n	8007bb2 <RVBS_CheckFaultState+0x22>
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 8007ba2:	7f83      	ldrb	r3, [r0, #30]
 8007ba4:	b98b      	cbnz	r3, 8007bca <RVBS_CheckFaultState+0x3a>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8007ba6:	4561      	cmp	r1, ip
 8007ba8:	d913      	bls.n	8007bd2 <RVBS_CheckFaultState+0x42>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 8007baa:	2201      	movs	r2, #1
 8007bac:	7782      	strb	r2, [r0, #30]
          fault = MC_NO_ERROR;
 8007bae:	4618      	mov	r0, r3
 8007bb0:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 8007bb2:	2004      	movs	r0, #4
 8007bb4:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8007bb6:	88c3      	ldrh	r3, [r0, #6]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d30a      	bcc.n	8007bd2 <RVBS_CheckFaultState+0x42>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8007bbc:	8c00      	ldrh	r0, [r0, #32]
 8007bbe:	4298      	cmp	r0, r3
 8007bc0:	bf94      	ite	ls
 8007bc2:	2000      	movls	r0, #0
 8007bc4:	2001      	movhi	r0, #1
 8007bc6:	0080      	lsls	r0, r0, #2
 8007bc8:	4770      	bx	lr
          fault = MC_OVER_VOLT;
        }
      }
      else
      {
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8007bca:	4562      	cmp	r2, ip
 8007bcc:	d303      	bcc.n	8007bd6 <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 8007bce:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 8007bd0:	4770      	bx	lr
        fault = MC_OVER_VOLT;
 8007bd2:	2002      	movs	r0, #2
 8007bd4:	4770      	bx	lr
          pHandle->OverVoltageHysteresisUpDir = false;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	7783      	strb	r3, [r0, #30]
          fault = MC_OVER_VOLT;
 8007bda:	2002      	movs	r0, #2
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop

08007be0 <RVBS_CalcAvVbus>:
{
 8007be0:	b538      	push	{r3, r4, r5, lr}
 8007be2:	4604      	mov	r4, r0
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8007be4:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8007be8:	f7fb fee8 	bl	80039bc <RCM_ExecRegularConv>
    if (0xFFFFU == hAux)
 8007bec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007bf0:	4298      	cmp	r0, r3
 8007bf2:	d024      	beq.n	8007c3e <RVBS_CalcAvVbus+0x5e>
      pHandle->aBuffer[pHandle->index] = hAux;
 8007bf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bf6:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
 8007bfa:	f823 0015 	strh.w	r0, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8007bfe:	f8b4 e018 	ldrh.w	lr, [r4, #24]
 8007c02:	f01e 02ff 	ands.w	r2, lr, #255	; 0xff
 8007c06:	d00d      	beq.n	8007c24 <RVBS_CalcAvVbus+0x44>
 8007c08:	3a01      	subs	r2, #1
 8007c0a:	b2d2      	uxtb	r2, r2
 8007c0c:	eb03 0c42 	add.w	ip, r3, r2, lsl #1
 8007c10:	3b02      	subs	r3, #2
      wtemp = 0u;
 8007c12:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 8007c14:	f833 1f02 	ldrh.w	r1, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8007c18:	459c      	cmp	ip, r3
        wtemp += pHandle->aBuffer[i];
 8007c1a:	440a      	add	r2, r1
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8007c1c:	d1fa      	bne.n	8007c14 <RVBS_CalcAvVbus+0x34>
      wtemp /= pHandle->LowPassFilterBW;
 8007c1e:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8007c22:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8007c24:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007c28:	4575      	cmp	r5, lr
        pHandle->index++;
 8007c2a:	bf34      	ite	cc
 8007c2c:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 8007c2e:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8007c30:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 8007c32:	80a0      	strh	r0, [r4, #4]
        pHandle->index++;
 8007c34:	bf34      	ite	cc
 8007c36:	f884 5029 	strbcc.w	r5, [r4, #41]	; 0x29
        pHandle->index = 0U;
 8007c3a:	f884 3029 	strbcs.w	r3, [r4, #41]	; 0x29
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f7ff ffa6 	bl	8007b90 <RVBS_CheckFaultState>
 8007c44:	8120      	strh	r0, [r4, #8]
}
 8007c46:	bd38      	pop	{r3, r4, r5, pc}

08007c48 <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 8007c48:	2300      	movs	r3, #0
    pHandle->TargetFinal = 0;
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 8007c4a:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 8007c4c:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 8007c50:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 8007c54:	6142      	str	r2, [r0, #20]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
}
 8007c56:	4770      	bx	lr

08007c58 <REMNG_Calc>:
  else
  {
#endif
    int32_t current_ref;

    current_ref = pHandle->Ext;
 8007c58:	e9d0 3102 	ldrd	r3, r1, [r0, #8]

    /* Update the variable and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 8007c5c:	2901      	cmp	r1, #1
 8007c5e:	d90c      	bls.n	8007c7a <REMNG_Calc+0x22>
{
 8007c60:	b410      	push	{r4}
    {
      /* Increment/decrement the reference value. */
      current_ref += pHandle->IncDecAmount;
 8007c62:	e9d0 4204 	ldrd	r4, r2, [r0, #16]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep --;
 8007c66:	3901      	subs	r1, #1
      current_ref += pHandle->IncDecAmount;
 8007c68:	4423      	add	r3, r4
      pHandle->RampRemainingStep --;
 8007c6a:	60c1      	str	r1, [r0, #12]
    else
    {
      /* Do nothing. */
    }

    pHandle->Ext = current_ref;
 8007c6c:	6083      	str	r3, [r0, #8]
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8007c6e:	fb93 f2f2 	sdiv	r2, r3, r2
#ifdef NULL_RMP_EXT_MNG
  }
#endif
  return (ret_val);
}
 8007c72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c76:	4610      	mov	r0, r2
 8007c78:	4770      	bx	lr
    else if (1U == pHandle->RampRemainingStep)
 8007c7a:	d005      	beq.n	8007c88 <REMNG_Calc+0x30>
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8007c7c:	6942      	ldr	r2, [r0, #20]
    pHandle->Ext = current_ref;
 8007c7e:	6083      	str	r3, [r0, #8]
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8007c80:	fb93 f2f2 	sdiv	r2, r3, r2
}
 8007c84:	4610      	mov	r0, r2
 8007c86:	4770      	bx	lr
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8007c88:	6842      	ldr	r2, [r0, #4]
 8007c8a:	6943      	ldr	r3, [r0, #20]
      pHandle->RampRemainingStep = 0U;
 8007c8c:	2100      	movs	r1, #0
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8007c8e:	fb02 f303 	mul.w	r3, r2, r3
      pHandle->RampRemainingStep = 0U;
 8007c92:	60c1      	str	r1, [r0, #12]
    pHandle->Ext = current_ref;
 8007c94:	6083      	str	r3, [r0, #8]
}
 8007c96:	4610      	mov	r0, r2
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop

08007c9c <REMNG_RampCompleted>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 8007c9c:	68c0      	ldr	r0, [r0, #12]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
  return (retVal);

}
 8007c9e:	fab0 f080 	clz	r0, r0
 8007ca2:	0940      	lsrs	r0, r0, #5
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop

08007ca8 <getScalingFactor>:
  int32_t aux;
  uint8_t i;

  if (Target < 0)
  {
    aux = -Target;
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	bfb8      	it	lt
 8007cac:	4240      	neglt	r0, r0
{
 8007cae:	2301      	movs	r3, #1
  {
    TargetAbs = (uint32_t)Target;
  }
  for (i = 1U; i < 32U; i++)
  {
    uint32_t limit = (((uint32_t)1) << (31U - i));
 8007cb0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007cb4:	e002      	b.n	8007cbc <getScalingFactor+0x14>
  for (i = 1U; i < 32U; i++)
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	2b20      	cmp	r3, #32
 8007cba:	d007      	beq.n	8007ccc <getScalingFactor+0x24>
    uint32_t limit = (((uint32_t)1) << (31U - i));
 8007cbc:	fa21 f203 	lsr.w	r2, r1, r3
    if (TargetAbs >= limit)
 8007cc0:	4290      	cmp	r0, r2
 8007cc2:	d3f8      	bcc.n	8007cb6 <getScalingFactor+0xe>
    else
    {
      /* Nothing to do */
    }
  }
  return (((uint32_t)1) << (i - 1U));
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	2001      	movs	r0, #1
 8007cc8:	4098      	lsls	r0, r3
}
 8007cca:	4770      	bx	lr
 8007ccc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop

08007cd4 <REMNG_ExecRamp>:
{
 8007cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd8:	4604      	mov	r4, r0
 8007cda:	460e      	mov	r6, r1
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8007cdc:	6880      	ldr	r0, [r0, #8]
 8007cde:	6963      	ldr	r3, [r4, #20]
    if (0U == Durationms)
 8007ce0:	4615      	mov	r5, r2
 8007ce2:	b962      	cbnz	r2, 8007cfe <REMNG_ExecRamp+0x2a>
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 8007ce4:	4608      	mov	r0, r1
 8007ce6:	f7ff ffdf 	bl	8007ca8 <getScalingFactor>
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8007cea:	fb00 f606 	mul.w	r6, r0, r6
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 8007cee:	6160      	str	r0, [r4, #20]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8007cf0:	4628      	mov	r0, r5
      pHandle->IncDecAmount = 0;
 8007cf2:	e9c4 5003 	strd	r5, r0, [r4, #12]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8007cf6:	60a6      	str	r6, [r4, #8]
}
 8007cf8:	2001      	movs	r0, #1
 8007cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8007cfe:	fb90 f8f3 	sdiv	r8, r0, r3
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 8007d02:	eba1 0708 	sub.w	r7, r1, r8
 8007d06:	4638      	mov	r0, r7
 8007d08:	f7ff ffce 	bl	8007ca8 <getScalingFactor>
 8007d0c:	4682      	mov	sl, r0
      uint32_t wScalingFactor2 = getScalingFactor(current_ref);
 8007d0e:	4640      	mov	r0, r8
 8007d10:	f7ff ffca 	bl	8007ca8 <getScalingFactor>
 8007d14:	4681      	mov	r9, r0
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 8007d16:	4630      	mov	r0, r6
 8007d18:	f7ff ffc6 	bl	8007ca8 <getScalingFactor>
      if (wScalingFactor <  wScalingFactor2)
 8007d1c:	45ca      	cmp	sl, r9
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 8007d1e:	4603      	mov	r3, r0
        if (wScalingFactor < wScalingFactor3)
 8007d20:	bf2c      	ite	cs
 8007d22:	4648      	movcs	r0, r9
 8007d24:	4650      	movcc	r0, sl
        if (wScalingFactor2 < wScalingFactor3)
 8007d26:	4298      	cmp	r0, r3
 8007d28:	bf28      	it	cs
 8007d2a:	4618      	movcs	r0, r3
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 8007d2c:	fb08 f300 	mul.w	r3, r8, r0
 8007d30:	60a3      	str	r3, [r4, #8]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 8007d32:	6823      	ldr	r3, [r4, #0]
      aux /= 1000U;
 8007d34:	4a08      	ldr	r2, [pc, #32]	; (8007d58 <REMNG_ExecRamp+0x84>)
      pHandle->ScalingFactor = wScalingFactorMin;
 8007d36:	6160      	str	r0, [r4, #20]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 8007d38:	fb05 f303 	mul.w	r3, r5, r3
      aux /= 1000U;
 8007d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d40:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 8007d42:	1c5d      	adds	r5, r3, #1
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 8007d44:	fb07 f000 	mul.w	r0, r7, r0
      pHandle->TargetFinal = TargetFinal;
 8007d48:	6066      	str	r6, [r4, #4]
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 8007d4a:	fb90 f0f5 	sdiv	r0, r0, r5
      pHandle->IncDecAmount = 0;
 8007d4e:	e9c4 5003 	strd	r5, r0, [r4, #12]
}
 8007d52:	2001      	movs	r0, #1
 8007d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d58:	10624dd3 	.word	0x10624dd3

08007d5c <RUC_Init>:
__weak void RUC_Init(	RevUpCtrl_Handle_t *pHandle,
						SpeednTorqCtrl_Handle_t *pSTC,
						VirtualSpeedSensor_Handle_t *pVSS,
						STO_Handle_t *pSNSL,
						PWMC_Handle_t *pPWM)
{
 8007d5c:	b500      	push	{lr}
  {
#endif
    RevUpCtrl_PhaseParams_t *pRUCPhaseParams = &pHandle->ParamsData[0];
    uint8_t bPhase = 0U;

    pHandle->pSTC = pSTC;
 8007d5e:	6681      	str	r1, [r0, #104]	; 0x68
    pHandle->EnteredZone1 = false;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits*/
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8007d60:	6941      	ldr	r1, [r0, #20]
    pHandle->pSNSL = pSNSL;
 8007d62:	e9c0 231b 	strd	r2, r3, [r0, #108]	; 0x6c
    pHandle->OTFSCLowside = false;
 8007d66:	f04f 0c00 	mov.w	ip, #0
    pHandle->pPWM = pPWM;
 8007d6a:	9b01      	ldr	r3, [sp, #4]
    pHandle->OTFSCLowside = false;
 8007d6c:	f8a0 c054 	strh.w	ip, [r0, #84]	; 0x54
    pHandle->pPWM = pPWM;
 8007d70:	6743      	str	r3, [r0, #116]	; 0x74
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8007d72:	b309      	cbz	r1, 8007db8 <RUC_Init+0x5c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8007d74:	688b      	ldr	r3, [r1, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8007d76:	b323      	cbz	r3, 8007dc2 <RUC_Init+0x66>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8007d78:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8007d7a:	b32b      	cbz	r3, 8007dc8 <RUC_Init+0x6c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8007d7c:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8007d7e:	b333      	cbz	r3, 8007dce <RUC_Init+0x72>
 8007d80:	689b      	ldr	r3, [r3, #8]
      bPhase++;
 8007d82:	f04f 0c05 	mov.w	ip, #5
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8007d86:	b1cb      	cbz	r3, 8007dbc <RUC_Init+0x60>
 8007d88:	2204      	movs	r2, #4
 8007d8a:	f04f 0c05 	mov.w	ip, #5
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;

      pHandle->bPhaseNbr = bPhase;

      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8007d8e:	8803      	ldrh	r3, [r0, #0]
 8007d90:	4910      	ldr	r1, [pc, #64]	; (8007dd4 <RUC_Init+0x78>)
 8007d92:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8007d96:	fb0e f303 	mul.w	r3, lr, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8007d9a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8007d9e:	fba1 1303 	umull	r1, r3, r1, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8007da2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007da6:	2100      	movs	r1, #0
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8007da8:	099b      	lsrs	r3, r3, #6
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8007daa:	6151      	str	r1, [r2, #20]
      pHandle->bPhaseNbr = bPhase;
 8007dac:	f880 c048 	strb.w	ip, [r0, #72]	; 0x48
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8007db0:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
}
 8007db4:	f85d fb04 	ldr.w	pc, [sp], #4
      bPhase++;
 8007db8:	f04f 0c01 	mov.w	ip, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8007dbc:	f10c 32ff 	add.w	r2, ip, #4294967295
 8007dc0:	e7e5      	b.n	8007d8e <RUC_Init+0x32>
      bPhase++;
 8007dc2:	f04f 0c02 	mov.w	ip, #2
 8007dc6:	e7f9      	b.n	8007dbc <RUC_Init+0x60>
 8007dc8:	f04f 0c03 	mov.w	ip, #3
 8007dcc:	e7f6      	b.n	8007dbc <RUC_Init+0x60>
 8007dce:	f04f 0c04 	mov.w	ip, #4
 8007dd2:	e7f3      	b.n	8007dbc <RUC_Init+0x60>
 8007dd4:	10624dd3 	.word	0x10624dd3

08007dd8 <RUC_Clear>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  hMotorDirection: Rotor rotation direction.
  *         This parameter must be -1 or +1.
  */
__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
 8007dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 8007ddc:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 8007dde:	f8d0 8068 	ldr.w	r8, [r0, #104]	; 0x68
    RevUpCtrl_PhaseParams_t *pPhaseParams = pHandle->ParamsData;

    pHandle->hDirection = hMotorDirection;
 8007de2:	80c1      	strh	r1, [r0, #6]
    pHandle->EnteredZone1 = false;

    /*Initializes the rev up stages counter.*/
    pHandle->bStageCnt = 0U;
 8007de4:	2600      	movs	r6, #0
{
 8007de6:	4604      	mov	r4, r0
    pHandle->bStageCnt = 0U;
 8007de8:	f880 6058 	strb.w	r6, [r0, #88]	; 0x58
    pHandle->bOTFRelCounter = 0U;
 8007dec:	f880 6053 	strb.w	r6, [r0, #83]	; 0x53
    pHandle->OTFSCLowside = false;
 8007df0:	f8a0 6054 	strh.w	r6, [r0, #84]	; 0x54

    /* Calls the clear method of VSS.*/
    VSS_Clear(pVSS);
 8007df4:	4638      	mov	r0, r7

    /* Sets the STC in torque mode.*/
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);

    /* Sets the mechanical starting angle of VSS.*/
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 8007df6:	b28d      	uxth	r5, r1
    VSS_Clear(pVSS);
 8007df8:	f000 fc76 	bl	80086e8 <VSS_Clear>
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 8007dfc:	2104      	movs	r1, #4
 8007dfe:	4640      	mov	r0, r8
 8007e00:	f000 f8fe 	bl	8008000 <STC_SetControlMode>
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 8007e04:	8861      	ldrh	r1, [r4, #2]
 8007e06:	fb11 f105 	smulbb	r1, r1, r5
 8007e0a:	b209      	sxth	r1, r1
 8007e0c:	4638      	mov	r0, r7
 8007e0e:	f000 fd21 	bl	8008854 <VSS_SetMecAngle>

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, 0, 0U);
 8007e12:	4632      	mov	r2, r6
 8007e14:	4631      	mov	r1, r6
 8007e16:	4640      	mov	r0, r8
 8007e18:	f000 f8f6 	bl	8008008 <STC_ExecRamp>

    /* Gives the first command to STC and VSS.*/
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalTorque * hMotorDirection, (uint32_t)(pPhaseParams->hDurationms));
 8007e1c:	8a21      	ldrh	r1, [r4, #16]
 8007e1e:	89a2      	ldrh	r2, [r4, #12]
 8007e20:	fb11 f105 	smulbb	r1, r1, r5
 8007e24:	b209      	sxth	r1, r1
 8007e26:	4640      	mov	r0, r8
 8007e28:	f000 f8ee 	bl	8008008 <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms);
 8007e2c:	89e1      	ldrh	r1, [r4, #14]
 8007e2e:	89a2      	ldrh	r2, [r4, #12]
 8007e30:	fb11 f105 	smulbb	r1, r1, r5
 8007e34:	b209      	sxth	r1, r1
 8007e36:	4638      	mov	r0, r7
 8007e38:	f000 fd14 	bl	8008864 <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks.*/
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 8007e3c:	89a3      	ldrh	r3, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 8007e3e:	8821      	ldrh	r1, [r4, #0]
                                              / 1000U );
 8007e40:	4a06      	ldr	r2, [pc, #24]	; (8007e5c <RUC_Clear+0x84>)

    /*Set the next phases parameter pointer.*/
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5

    /*Timeout counter for PLL reset during OTF.*/
    pHandle->bResetPLLCnt = 0U;
 8007e42:	f884 6057 	strb.w	r6, [r4, #87]	; 0x57
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 8007e46:	fb01 f303 	mul.w	r3, r1, r3
                                              / 1000U );
 8007e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e4e:	099b      	lsrs	r3, r3, #6
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8007e50:	6962      	ldr	r2, [r4, #20]
 8007e52:	60a2      	str	r2, [r4, #8]
    pHandle->hPhaseRemainingTicks++;
 8007e54:	3301      	adds	r3, #1
 8007e56:	80a3      	strh	r3, [r4, #4]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
}
 8007e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e5c:	10624dd3 	.word	0x10624dd3

08007e60 <RUC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hPhaseRemainingTicks > 0U)
 8007e60:	8883      	ldrh	r3, [r0, #4]
{
 8007e62:	b510      	push	{r4, lr}
 8007e64:	4604      	mov	r4, r0
    if (pHandle->hPhaseRemainingTicks > 0U)
 8007e66:	bb43      	cbnz	r3, 8007eba <RUC_Exec+0x5a>

    } /* hPhaseRemainingTicks > 0 */

    if (0U == pHandle->hPhaseRemainingTicks)
    {
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 8007e68:	68a0      	ldr	r0, [r4, #8]
 8007e6a:	b328      	cbz	r0, 8007eb8 <RUC_Exec+0x58>
      {
        /* If it becomes zero the current phase has been completed.*/
        /* Gives the next command to STC and VSS.*/
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 8007e6c:	8881      	ldrh	r1, [r0, #4]
 8007e6e:	88e3      	ldrh	r3, [r4, #6]
 8007e70:	8802      	ldrh	r2, [r0, #0]
 8007e72:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8007e74:	fb11 f103 	smulbb	r1, r1, r3
 8007e78:	b209      	sxth	r1, r1
 8007e7a:	f000 f8c5 	bl	8008008 <STC_ExecRamp>
                           (uint32_t)(pHandle->pCurrentPhaseParams->hDurationms));

        VSS_SetMecAcceleration(pHandle->pVSS,
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8007e7e:	68a3      	ldr	r3, [r4, #8]
 8007e80:	88e0      	ldrh	r0, [r4, #6]
 8007e82:	8859      	ldrh	r1, [r3, #2]
        VSS_SetMecAcceleration(pHandle->pVSS,
 8007e84:	881a      	ldrh	r2, [r3, #0]
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8007e86:	fb11 f100 	smulbb	r1, r1, r0
        VSS_SetMecAcceleration(pHandle->pVSS,
 8007e8a:	b209      	sxth	r1, r1
 8007e8c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007e8e:	f000 fce9 	bl	8008864 <VSS_SetMecAcceleration>
                               pHandle->pCurrentPhaseParams->hDurationms);

        /* Compute hPhaseRemainingTicks.*/
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8007e92:	68a1      	ldr	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8007e94:	8820      	ldrh	r0, [r4, #0]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8007e96:	880b      	ldrh	r3, [r1, #0]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8007e98:	4a0b      	ldr	r2, [pc, #44]	; (8007ec8 <RUC_Exec+0x68>)
        pHandle->hPhaseRemainingTicks++;

        /*Set the next phases parameter pointer.*/
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8007e9a:	6889      	ldr	r1, [r1, #8]
 8007e9c:	60a1      	str	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8007e9e:	fb00 f303 	mul.w	r3, r0, r3
 8007ea2:	fba2 2303 	umull	r2, r3, r2, r3

        /*Increases the rev up stages counter.*/
        pHandle->bStageCnt++;
 8007ea6:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8007eaa:	099b      	lsrs	r3, r3, #6
        pHandle->hPhaseRemainingTicks++;
 8007eac:	3301      	adds	r3, #1
        pHandle->bStageCnt++;
 8007eae:	3201      	adds	r2, #1
        pHandle->hPhaseRemainingTicks++;
 8007eb0:	80a3      	strh	r3, [r4, #4]
        pHandle->bStageCnt++;
 8007eb2:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
  bool retVal = true;
 8007eb6:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retVal);
}
 8007eb8:	bd10      	pop	{r4, pc}
      pHandle->hPhaseRemainingTicks--;
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	8083      	strh	r3, [r0, #4]
    if (0U == pHandle->hPhaseRemainingTicks)
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d0d1      	beq.n	8007e68 <RUC_Exec+0x8>
  bool retVal = true;
 8007ec4:	2001      	movs	r0, #1
}
 8007ec6:	bd10      	pop	{r4, pc}
 8007ec8:	10624dd3 	.word	0x10624dd3

08007ecc <RUC_FirstAccelerationStageReached>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 8007ecc:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8007ed0:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retVal);
}
 8007ed4:	4282      	cmp	r2, r0
 8007ed6:	bf34      	ite	cc
 8007ed8:	2000      	movcc	r0, #0
 8007eda:	2001      	movcs	r0, #1
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop

08007ee0 <RUC_SetPhase>:
  }
  else
  {
#endif
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8007ee0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007ee4:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8007ee8:	f8d2 c002 	ldr.w	ip, [r2, #2]
 8007eec:	f8c3 c00e 	str.w	ip, [r3, #14]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	8813      	ldrh	r3, [r2, #0]
 8007ef4:	8183      	strh	r3, [r0, #12]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retValue);
}
 8007ef6:	2001      	movs	r0, #1
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop

08007efc <RUC_GetNumberOfPhases>:
#ifdef NULL_PTR_REV_UP_CTL
  return ((MC_NULL == pHandle) ? 0U : (uint8_t)pHandle->bPhaseNbr);
#else
  return ((uint8_t)pHandle->bPhaseNbr);
#endif
}
 8007efc:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop

08007f04 <RUC_GetPhase>:
  }
  else
  {
#endif
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 8007f04:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007f08:	0089      	lsls	r1, r1, #2
 8007f0a:	f101 0308 	add.w	r3, r1, #8
 8007f0e:	4403      	add	r3, r0
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8007f10:	4408      	add	r0, r1
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 8007f12:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8007f16:	f8c2 3002 	str.w	r3, [r2, #2]
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8007f1a:	8983      	ldrh	r3, [r0, #12]
 8007f1c:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retValue);
}
 8007f1e:	2001      	movs	r0, #1
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop

08007f24 <SPD_GetElAngle>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
#endif
}
 8007f24:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop

08007f2c <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 8007f2c:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop

08007f34 <SPD_GetInstElSpeedDpp>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
#endif
}
 8007f34:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop

08007f3c <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8007f3c:	f9b1 3000 	ldrsh.w	r3, [r1]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
    {
      SpeedError = true;
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8007f40:	f8b0 c016 	ldrh.w	ip, [r0, #22]
{
 8007f44:	b410      	push	{r4}
    if (*pMecSpeedUnit < 0)
 8007f46:	2b00      	cmp	r3, #0
      hAux = -(*pMecSpeedUnit);
 8007f48:	bfb8      	it	lt
 8007f4a:	425b      	neglt	r3, r3
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
 8007f4c:	b29b      	uxth	r3, r3
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8007f4e:	459c      	cmp	ip, r3
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8007f50:	78c1      	ldrb	r1, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8007f52:	7802      	ldrb	r2, [r0, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8007f54:	8a84      	ldrh	r4, [r0, #20]
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8007f56:	d819      	bhi.n	8007f8c <SPD_IsMecSpeedReliable+0x50>
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8007f58:	429c      	cmp	r4, r3
 8007f5a:	bf2c      	ite	cs
 8007f5c:	2400      	movcs	r4, #0
 8007f5e:	2401      	movcc	r4, #1
    {
      SpeedError = true;
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8007f60:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8007f64:	f8b0 c018 	ldrh.w	ip, [r0, #24]
    if (pHandle->hMecAccelUnitP < 0)
 8007f68:	2b00      	cmp	r3, #0
      hAux = -(pHandle->hMecAccelUnitP);
 8007f6a:	bfb8      	it	lt
 8007f6c:	425b      	neglt	r3, r3
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
 8007f6e:	b29b      	uxth	r3, r3
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8007f70:	459c      	cmp	ip, r3
 8007f72:	d300      	bcc.n	8007f76 <SPD_IsMecSpeedReliable+0x3a>
    {
      SpeedError = true;
    }

    if (true == SpeedError)
 8007f74:	b164      	cbz	r4, 8007f90 <SPD_IsMecSpeedReliable+0x54>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8007f76:	4291      	cmp	r1, r2
 8007f78:	d901      	bls.n	8007f7e <SPD_IsMecSpeedReliable+0x42>
      {
        bSpeedErrorNumber++;
 8007f7a:	3201      	adds	r2, #1
 8007f7c:	b2d2      	uxtb	r2, r2
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
    {
      SpeedSensorReliability = false;
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8007f7e:	7002      	strb	r2, [r0, #0]
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 8007f80:	1a50      	subs	r0, r2, r1
 8007f82:	bf18      	it	ne
 8007f84:	2001      	movne	r0, #1
 8007f86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f8a:	4770      	bx	lr
      SpeedError = true;
 8007f8c:	2401      	movs	r4, #1
 8007f8e:	e7e7      	b.n	8007f60 <SPD_IsMecSpeedReliable+0x24>
        bSpeedErrorNumber = 0u;
 8007f90:	4291      	cmp	r1, r2
 8007f92:	bf88      	it	hi
 8007f94:	2200      	movhi	r2, #0
 8007f96:	e7f2      	b.n	8007f7e <SPD_IsMecSpeedReliable+0x42>

08007f98 <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 8007f98:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8007f9c:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
    wAux *= INT16_MAX;
 8007fa0:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8007fa4:	fb93 f0f2 	sdiv	r0, r3, r2
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 8007fa8:	b200      	sxth	r0, r0
 8007faa:	4770      	bx	lr

08007fac <STC_Init>:
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8007fac:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	; 0x2c
    pHandle->PISpeed = pPI;
 8007fb0:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8007fb2:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
    pHandle->SPD = SPD_Handle;
 8007fb6:	6142      	str	r2, [r0, #20]
{
 8007fb8:	b410      	push	{r4}
    pHandle->Mode = pHandle->ModeDefault;
 8007fba:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
 8007fbe:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 8007fc0:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8007fc2:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8007fc6:	0409      	lsls	r1, r1, #16
 8007fc8:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->TargetFinal = 0;
 8007fcc:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8007fce:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->RampRemainingStep = 0U;
 8007fd2:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8007fd4:	6183      	str	r3, [r0, #24]
}
 8007fd6:	4770      	bx	lr

08007fd8 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 8007fd8:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8007fda:	4770      	bx	lr

08007fdc <STC_GetSpeedSensor>:
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
#endif
}
 8007fdc:	6940      	ldr	r0, [r0, #20]
 8007fde:	4770      	bx	lr

08007fe0 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 8007fe0:	7803      	ldrb	r3, [r0, #0]
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d000      	beq.n	8007fe8 <STC_Clear+0x8>
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8007fe6:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8007fe8:	6900      	ldr	r0, [r0, #16]
 8007fea:	2100      	movs	r1, #0
 8007fec:	f7fe bfb0 	b.w	8006f50 <PID_SetIntegralTerm>

08007ff0 <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 8007ff0:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop

08007ff8 <STC_GetTorqueRef>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 8007ff8:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop

08008000 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8008000:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 8008002:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8008004:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8008006:	4770      	bx	lr

08008008 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 8008008:	b570      	push	{r4, r5, r6, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application. */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800800a:	7803      	ldrb	r3, [r0, #0]
 800800c:	2b04      	cmp	r3, #4
{
 800800e:	4604      	mov	r4, r0
 8008010:	460d      	mov	r5, r1
 8008012:	4616      	mov	r6, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8008014:	d01e      	beq.n	8008054 <STC_ExecRamp+0x4c>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8008016:	8bc3      	ldrh	r3, [r0, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8008018:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 800801c:	4299      	cmp	r1, r3
 800801e:	dd01      	ble.n	8008024 <STC_ExecRamp+0x1c>
        allowedRange = false;
 8008020:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 8008022:	bd70      	pop	{r4, r5, r6, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8008024:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8008028:	428b      	cmp	r3, r1
 800802a:	dcf9      	bgt.n	8008020 <STC_ExecRamp+0x18>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 800802c:	8c23      	ldrh	r3, [r4, #32]
 800802e:	4299      	cmp	r1, r3
 8008030:	da03      	bge.n	800803a <STC_ExecRamp+0x32>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8008032:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8008036:	428b      	cmp	r3, r1
 8008038:	dbf2      	blt.n	8008020 <STC_ExecRamp+0x18>
      if (0U == hDurationms)
 800803a:	b9ae      	cbnz	r6, 8008068 <STC_ExecRamp+0x60>
        if (MCM_SPEED_MODE == pHandle->Mode)
 800803c:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800803e:	042d      	lsls	r5, r5, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 8008040:	2b03      	cmp	r3, #3
        pHandle->RampRemainingStep = 0U;
 8008042:	f04f 0300 	mov.w	r3, #0
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8008046:	bf0c      	ite	eq
 8008048:	6065      	streq	r5, [r4, #4]
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 800804a:	60a5      	strne	r5, [r4, #8]
        pHandle->RampRemainingStep = 0U;
 800804c:	60e3      	str	r3, [r4, #12]
        pHandle->IncDecAmount = 0;
 800804e:	61a3      	str	r3, [r4, #24]
 8008050:	2001      	movs	r0, #1
}
 8008052:	bd70      	pop	{r4, r5, r6, pc}
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8008054:	f7ff ffd0 	bl	8007ff8 <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8008058:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800805a:	429d      	cmp	r5, r3
 800805c:	dce0      	bgt.n	8008020 <STC_ExecRamp+0x18>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 800805e:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8008062:	42ab      	cmp	r3, r5
 8008064:	dcdc      	bgt.n	8008020 <STC_ExecRamp+0x18>
 8008066:	e7e8      	b.n	800803a <STC_ExecRamp+0x32>
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8008068:	8ba3      	ldrh	r3, [r4, #28]
        wAux /= 1000U;
 800806a:	4a08      	ldr	r2, [pc, #32]	; (800808c <STC_ExecRamp+0x84>)
        pHandle->TargetFinal = hTargetFinal;
 800806c:	8065      	strh	r5, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800806e:	fb06 f303 	mul.w	r3, r6, r3
        wAux /= 1000U;
 8008072:	fba2 2303 	umull	r2, r3, r2, r3
 8008076:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 8008078:	3301      	adds	r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 800807a:	1a28      	subs	r0, r5, r0
 800807c:	0400      	lsls	r0, r0, #16
        pHandle->RampRemainingStep++;
 800807e:	60e3      	str	r3, [r4, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8008080:	fb90 f0f3 	sdiv	r0, r0, r3
        pHandle->IncDecAmount = wAux1;
 8008084:	61a0      	str	r0, [r4, #24]
 8008086:	2001      	movs	r0, #1
}
 8008088:	bd70      	pop	{r4, r5, r6, pc}
 800808a:	bf00      	nop
 800808c:	10624dd3 	.word	0x10624dd3

08008090 <STC_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 8008090:	2300      	movs	r3, #0
 8008092:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8008094:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8008096:	4770      	bx	lr

08008098 <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 8008098:	b538      	push	{r3, r4, r5, lr}
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
    {
      wCurrentReference = pHandle->TorqueRef;
 800809a:	e9d0 5101 	ldrd	r5, r1, [r0, #4]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800809e:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 80080a0:	68c3      	ldr	r3, [r0, #12]
      wCurrentReference = pHandle->TorqueRef;
 80080a2:	2a04      	cmp	r2, #4
 80080a4:	bf08      	it	eq
 80080a6:	460d      	moveq	r5, r1
    if (pHandle->RampRemainingStep > 1U)
 80080a8:	2b01      	cmp	r3, #1
{
 80080aa:	4604      	mov	r4, r0
    if (pHandle->RampRemainingStep > 1U)
 80080ac:	d908      	bls.n	80080c0 <STC_CalcTorqueReference+0x28>
    {
      /* Increment/decrement the reference value. */
      wCurrentReference += pHandle->IncDecAmount;
 80080ae:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 80080b0:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 80080b2:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 80080b4:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing. */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 80080b6:	2a03      	cmp	r2, #3
 80080b8:	d00b      	beq.n	80080d2 <STC_CalcTorqueReference+0x3a>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 80080ba:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 80080bc:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 80080be:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 80080c0:	d1f9      	bne.n	80080b6 <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80080c2:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 80080c6:	2300      	movs	r3, #0
    if (MCM_SPEED_MODE == pHandle->Mode)
 80080c8:	2a03      	cmp	r2, #3
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80080ca:	ea4f 4505 	mov.w	r5, r5, lsl #16
      pHandle->RampRemainingStep = 0U;
 80080ce:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 80080d0:	d1f3      	bne.n	80080ba <STC_CalcTorqueReference+0x22>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 80080d2:	6960      	ldr	r0, [r4, #20]
 80080d4:	f7ff ff2a 	bl	8007f2c <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 80080d8:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 80080dc:	b209      	sxth	r1, r1
 80080de:	6920      	ldr	r0, [r4, #16]
 80080e0:	f7fe ff6a 	bl	8006fb8 <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 80080e4:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 80080e6:	0405      	lsls	r5, r0, #16
 80080e8:	60a5      	str	r5, [r4, #8]
}
 80080ea:	bd38      	pop	{r3, r4, r5, pc}

080080ec <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 80080ec:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop

080080f4 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 80080f4:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 80080f8:	2200      	movs	r2, #0
 80080fa:	b299      	uxth	r1, r3
 80080fc:	f361 020f 	bfi	r2, r1, #0, #16
 8008100:	0c1b      	lsrs	r3, r3, #16
 8008102:	f363 421f 	bfi	r2, r3, #16, #16
{
 8008106:	b082      	sub	sp, #8
}
 8008108:	4610      	mov	r0, r2
 800810a:	b002      	add	sp, #8
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop

08008110 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 8008110:	b510      	push	{r4, lr}
 8008112:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8008114:	6940      	ldr	r0, [r0, #20]
 8008116:	f7ff ff09 	bl	8007f2c <SPD_GetAvrgMecSpeedUnit>
 800811a:	0400      	lsls	r0, r0, #16
 800811c:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 800811e:	bd10      	pop	{r4, pc}

08008120 <STO_PLL_CalcElAngle>:
  * @param  pHandle: Handler of the current instance of the STO component.
  * @param  pInput: Pointer to the observer inputs structure.
  * @retval int16_t Rotor electrical angle (s16Degrees).
  */
__weak int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 8008120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t retValue;

  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 8008124:	4604      	mov	r4, r0
{
 8008126:	b089      	sub	sp, #36	; 0x24
  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 8008128:	2800      	cmp	r0, #0
 800812a:	f000 80cf 	beq.w	80082cc <STO_PLL_CalcElAngle+0x1ac>
 800812e:	2900      	cmp	r1, #0
 8008130:	f000 80cf 	beq.w	80082d2 <STO_PLL_CalcElAngle+0x1b2>
    int16_t hIbeta_err;
    int16_t hRotor_Speed;
    int16_t hValfa;
    int16_t hVbeta;

    if (pHandle->wBemf_alfa_est > (((int32_t)pHandle->hF2) * INT16_MAX))
 8008134:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 8008138:	6e87      	ldr	r7, [r0, #104]	; 0x68
 800813a:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800813e:	429f      	cmp	r7, r3
 8008140:	f340 80d1 	ble.w	80082e6 <STO_PLL_CalcElAngle+0x1c6>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * ((int32_t)pHandle->hF2);
 8008144:	6683      	str	r3, [r0, #104]	; 0x68
 8008146:	461f      	mov	r7, r3
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8008148:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800814c:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800814e:	fa47 f205 	asr.w	r2, r7, r5
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8008152:	42b3      	cmp	r3, r6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8008154:	9201      	str	r2, [sp, #4]
 8008156:	fa0f fe82 	sxth.w	lr, r2
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800815a:	f2c0 80c1 	blt.w	80082e0 <STO_PLL_CalcElAngle+0x1c0>
    {
      pHandle->wBemf_beta_est = INT16_MAX * ((int32_t)pHandle->hF2);
    }
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 800815e:	425b      	negs	r3, r3
 8008160:	429e      	cmp	r6, r3
 8008162:	f340 80bd 	ble.w	80082e0 <STO_PLL_CalcElAngle+0x1c0>
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
#else
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8008166:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 800816a:	f8d4 9060 	ldr.w	r9, [r4, #96]	; 0x60
 800816e:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8008172:	fa46 f505 	asr.w	r5, r6, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8008176:	4599      	cmp	r9, r3
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8008178:	fa0f fc85 	sxth.w	ip, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800817c:	f340 80b9 	ble.w	80082f2 <STO_PLL_CalcElAngle+0x1d2>
    {
      pHandle->Ialfa_est = INT16_MAX * ((int32_t)pHandle->hF1);
 8008180:	6623      	str	r3, [r4, #96]	; 0x60
 8008182:	4699      	mov	r9, r3
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8008184:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64
 8008188:	4543      	cmp	r3, r8
 800818a:	f2c0 80a6 	blt.w	80082da <STO_PLL_CalcElAngle+0x1ba>
    {
      pHandle->Ibeta_est = INT16_MAX * ((int32_t)pHandle->hF1);
    }
    else if (pHandle->Ibeta_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 800818e:	425b      	negs	r3, r3
 8008190:	4598      	cmp	r8, r3
 8008192:	f340 80a2 	ble.w	80082da <STO_PLL_CalcElAngle+0x1ba>
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
#else
    hIbeta_err = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8008196:	88c8      	ldrh	r0, [r1, #6]

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8008198:	f8b1 a008 	ldrh.w	sl, [r1, #8]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800819c:	888b      	ldrh	r3, [r1, #4]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800819e:	f8ad 0014 	strh.w	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
#else
    hValfa = (int16_t)(wAux / 65536);
#endif

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 80081a2:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80081a6:	f8ad 3010 	strh.w	r3, [sp, #16]
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 80081aa:	f9b1 3000 	ldrsh.w	r3, [r1]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 80081ae:	f8b4 211c 	ldrh.w	r2, [r4, #284]	; 0x11c
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 80081b2:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80081b6:	9904      	ldr	r1, [sp, #16]
    wAux = wAux * pHandle->hC6;
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
    wBemf_beta_est_Next -= wAux;

    /*Calls the PLL blockset*/
    pHandle->hBemf_alfa_est = hAux_Alfa;
 80081b8:	f8a4 e070 	strh.w	lr, [r4, #112]	; 0x70
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 80081bc:	fb0a f000 	mul.w	r0, sl, r0
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 80081c0:	fb0a f303 	mul.w	r3, sl, r3
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80081c4:	1400      	asrs	r0, r0, #16
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80081c6:	141b      	asrs	r3, r3, #16
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80081c8:	9003      	str	r0, [sp, #12]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80081ca:	9805      	ldr	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80081cc:	9302      	str	r3, [sp, #8]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 80081ce:	fa49 f302 	asr.w	r3, r9, r2
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 80081d2:	fa48 f202 	asr.w	r2, r8, r2
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80081d6:	eba2 0a00 	sub.w	sl, r2, r0
    wAux = ((int32_t)pHandle->hC1) * hAux;
 80081da:	fb12 f20b 	smulbb	r2, r2, fp
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 80081de:	eba8 0202 	sub.w	r2, r8, r2
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80081e2:	1a59      	subs	r1, r3, r1
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 80081e4:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	; 0x22
    wIalfa_est_Next += wAux;
 80081e8:	9802      	ldr	r0, [sp, #8]
    pHandle->hBemf_beta_est = hAux_Beta;
 80081ea:	f8a4 c072 	strh.w	ip, [r4, #114]	; 0x72
    wAux = ((int32_t)pHandle->hC1) * hAux;
 80081ee:	fb13 f30b 	smulbb	r3, r3, fp
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 80081f2:	eba9 0303 	sub.w	r3, r9, r3
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80081f6:	b209      	sxth	r1, r1
    wAux = ((int32_t)pHandle->hC5) * hValfa;
 80081f8:	f9b4 9028 	ldrsh.w	r9, [r4, #40]	; 0x28
    wIalfa_est_Next += wAux;
 80081fc:	fb08 3301 	mla	r3, r8, r1, r3
    wIalfa_est_Next += wAux;
 8008200:	fb09 3300 	mla	r3, r9, r0, r3
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8008204:	fa0f fa8a 	sxth.w	sl, sl
    wIbeta_est_Next += wAux;
 8008208:	9803      	ldr	r0, [sp, #12]
    wIbeta_est_Next += wAux;
 800820a:	fb08 280a 	mla	r8, r8, sl, r2
    wIbeta_est_Next += wAux;
 800820e:	fb09 8800 	mla	r8, r9, r0, r8
    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
 8008212:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8008216:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    wAux = wAux * pHandle->hC6;
 8008218:	f9b4 902a 	ldrsh.w	r9, [r4, #42]	; 0x2a
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 800821c:	fb01 7100 	mla	r1, r1, r0, r7
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 8008220:	fb00 600a 	mla	r0, r0, sl, r6
    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 8008224:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	; 0x24
    wIalfa_est_Next -= wAux;
 8008228:	fb06 371e 	mls	r7, r6, lr, r3
    wIbeta_est_Next -= wAux;
 800822c:	fb06 861c 	mls	r6, r6, ip, r8
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8008230:	fa4e fe02 	asr.w	lr, lr, r2
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8008234:	fa4c fc02 	asr.w	ip, ip, r2
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 8008238:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
    wAux = wAux * pHandle->hC6;
 800823c:	fb0e f309 	mul.w	r3, lr, r9
    wBemf_beta_est_Next -= wAux;
 8008240:	fb03 0812 	mls	r8, r3, r2, r0

    if (0 == pHandle->hForcedDirection)
 8008244:	f994 3124 	ldrsb.w	r3, [r4, #292]	; 0x124
    wAux = wAux * pHandle->hC6;
 8008248:	fb0c fc09 	mul.w	ip, ip, r9
    wBemf_alfa_est_Next += wAux;
 800824c:	fb0c 1902 	mla	r9, ip, r2, r1
    if (0 == pHandle->hForcedDirection)
 8008250:	2b00      	cmp	r3, #0
 8008252:	d154      	bne.n	80082fe <STO_PLL_CalcElAngle+0x1de>
    {
      /* we are in auxiliary mode, then rely on the speed detected */
      if(pHandle->_Super.hElSpeedDpp >= 0)
 8008254:	2a00      	cmp	r2, #0
 8008256:	f64f 7aff 	movw	sl, #65535	; 0xffff
 800825a:	bfa8      	it	ge
 800825c:	f04f 0a01 	movge.w	sl, #1
  Trig_Components Local_Components;
  int16_t hAux1;
  int16_t hAux2;
  int16_t hOutput;

  Local_Components = MCM_Trig_Functions(pHandle->_Super.hElAngle);
 8008260:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8008264:	f7f9 fa56 	bl	8001714 <MCM_Trig_Functions>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8008268:	9b01      	ldr	r3, [sp, #4]
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 800826a:	fb15 f50a 	smulbb	r5, r5, sl
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800826e:	fb13 f30a 	smulbb	r3, r3, sl
    hRotor_Speed = STO_ExecutePLL(pHandle, hAux_Alfa, -hAux_Beta);
 8008272:	426d      	negs	r5, r5

  /* Alfa & Beta BEMF multiplied by Cos & Sin*/
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 8008274:	fb10 f505 	smulbb	r5, r0, r5
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 8008278:	fb10 f023 	smultb	r0, r0, r3
#else
  hAux2 = (int16_t)(wAlfa_Sin_tmp / 32768);
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 800827c:	f340 31cf 	sbfx	r1, r0, #15, #16
 8008280:	f345 35cf 	sbfx	r5, r5, #15, #16
 8008284:	1a69      	subs	r1, r5, r1
 8008286:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800828a:	f7fe fe95 	bl	8006fb8 <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 800828e:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8008292:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
    pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 8008296:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 8008298:	3301      	adds	r3, #1
 800829a:	b2db      	uxtb	r3, r3
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 800829c:	429a      	cmp	r2, r3
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800829e:	bf12      	itee	ne
 80082a0:	461a      	movne	r2, r3
 80082a2:	2200      	moveq	r2, #0
    bBuffer_index = 0U;
 80082a4:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 80082a6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80082aa:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 80082ae:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 80082b2:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
  pHandle->Speed_Buffer_Index = bBuffer_index;
 80082b6:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    pHandle->_Super.hElAngle += hRotor_Speed;
 80082ba:	88a3      	ldrh	r3, [r4, #4]
    pHandle->Ialfa_est = wIalfa_est_Next;
 80082bc:	6627      	str	r7, [r4, #96]	; 0x60
    pHandle->_Super.hElAngle += hRotor_Speed;
 80082be:	4418      	add	r0, r3
    pHandle->Ibeta_est = wIbeta_est_Next;
 80082c0:	e9c4 6919 	strd	r6, r9, [r4, #100]	; 0x64
    pHandle->_Super.hElAngle += hRotor_Speed;
 80082c4:	b200      	sxth	r0, r0
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 80082c6:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
    pHandle->_Super.hElAngle += hRotor_Speed;
 80082ca:	80a0      	strh	r0, [r4, #4]
}
 80082cc:	b009      	add	sp, #36	; 0x24
 80082ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    retValue = 0;
 80082d2:	4608      	mov	r0, r1
}
 80082d4:	b009      	add	sp, #36	; 0x24
 80082d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pHandle->Ibeta_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 80082da:	6663      	str	r3, [r4, #100]	; 0x64
 80082dc:	4698      	mov	r8, r3
 80082de:	e75a      	b.n	8008196 <STO_PLL_CalcElAngle+0x76>
      pHandle->wBemf_beta_est = (-INT16_MAX * ((int32_t)pHandle->hF2));
 80082e0:	66e3      	str	r3, [r4, #108]	; 0x6c
 80082e2:	461e      	mov	r6, r3
 80082e4:	e73f      	b.n	8008166 <STO_PLL_CalcElAngle+0x46>
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 80082e6:	425a      	negs	r2, r3
 80082e8:	4297      	cmp	r7, r2
      pHandle->wBemf_alfa_est = -INT16_MAX * ((int32_t)pHandle->hF2);
 80082ea:	bfdc      	itt	le
 80082ec:	6682      	strle	r2, [r0, #104]	; 0x68
 80082ee:	4617      	movle	r7, r2
 80082f0:	e72a      	b.n	8008148 <STO_PLL_CalcElAngle+0x28>
    else if (pHandle->Ialfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 80082f2:	425a      	negs	r2, r3
 80082f4:	4591      	cmp	r9, r2
      pHandle->Ialfa_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 80082f6:	bfdc      	itt	le
 80082f8:	6622      	strle	r2, [r4, #96]	; 0x60
 80082fa:	4691      	movle	r9, r2
 80082fc:	e742      	b.n	8008184 <STO_PLL_CalcElAngle+0x64>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 80082fe:	fa1f fa83 	uxth.w	sl, r3
 8008302:	e7ad      	b.n	8008260 <STO_PLL_CalcElAngle+0x140>

08008304 <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 8008304:	b570      	push	{r4, r5, r6, lr}
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 8008306:	f890 510e 	ldrb.w	r5, [r0, #270]	; 0x10e
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800830a:	2d00      	cmp	r5, #0
 800830c:	f000 809c 	beq.w	8008448 <STO_PLL_CalcAvrgMecSpeedUnit+0x144>
 8008310:	1e6b      	subs	r3, r5, #1
 8008312:	b2db      	uxtb	r3, r3
 8008314:	f100 0472 	add.w	r4, r0, #114	; 0x72
 8008318:	f100 0c74 	add.w	ip, r0, #116	; 0x74
 800831c:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
    int32_t wAvrSpeed_dpp = (int32_t)0;
 8008320:	2200      	movs	r2, #0
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8008322:	4623      	mov	r3, r4
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 8008324:	f933 ef02 	ldrsh.w	lr, [r3, #2]!
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8008328:	459c      	cmp	ip, r3
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 800832a:	4472      	add	r2, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800832c:	d1fa      	bne.n	8008324 <STO_PLL_CalcAvrgMecSpeedUnit+0x20>
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 800832e:	fb92 fef5 	sdiv	lr, r2, r5
 8008332:	2200      	movs	r2, #0
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 8008334:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
 8008338:	eba3 030e 	sub.w	r3, r3, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800833c:	45a4      	cmp	ip, r4
      wAvrQuadraticError += wError;
 800833e:	fb03 2203 	mla	r2, r3, r3, r2
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8008342:	d1f7      	bne.n	8008334 <STO_PLL_CalcAvrgMecSpeedUnit+0x30>
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 8008344:	fbb2 f2f5 	udiv	r2, r2, r5
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 8008348:	fb0e f30e 	mul.w	r3, lr, lr
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * pHandle->VariancePercentage;      
 800834c:	17de      	asrs	r6, r3, #31
 800834e:	f8b0 c110 	ldrh.w	ip, [r0, #272]	; 0x110
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8008352:	8b45      	ldrh	r5, [r0, #26]
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * pHandle->VariancePercentage;      
 8008354:	fbac 4303 	umull	r4, r3, ip, r3
 8008358:	fb0c 3306 	mla	r3, ip, r6, r3
    wAvrSquareSpeed = lAvrSquareSpeed / (int16_t)128;
 800835c:	09e4      	lsrs	r4, r4, #7
 800835e:	ea44 6443 	orr.w	r4, r4, r3, lsl #25
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 8008362:	7883      	ldrb	r3, [r0, #2]
    if (true == pHandle->EnableDualCheck) /*do algorithm if it's enabled*/
 8008364:	f890 6104 	ldrb.w	r6, [r0, #260]	; 0x104
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8008368:	fb0e f505 	mul.w	r5, lr, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800836c:	4294      	cmp	r4, r2
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 800836e:	fb05 f303 	mul.w	r3, r5, r3
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8008372:	bfd8      	it	le
 8008374:	f04f 0c00 	movle.w	ip, #0
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 8008378:	69c5      	ldr	r5, [r0, #28]
 800837a:	fb93 f3f5 	sdiv	r3, r3, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800837e:	bfc8      	it	gt
 8008380:	f04f 0c01 	movgt.w	ip, #1
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 8008384:	7845      	ldrb	r5, [r0, #1]
 8008386:	fb93 f3f5 	sdiv	r3, r3, r5
    *pMecSpeedUnit = (int16_t)wAux;
 800838a:	b21d      	sxth	r5, r3
 800838c:	800d      	strh	r5, [r1, #0]
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 800838e:	8185      	strh	r5, [r0, #12]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8008390:	f880 c0f5 	strb.w	ip, [r0, #245]	; 0xf5
    if (true == pHandle->EnableDualCheck) /*do algorithm if it's enabled*/
 8008394:	b9ae      	cbnz	r6, 80083c2 <STO_PLL_CalcAvrgMecSpeedUnit+0xbe>
    if (false == pHandle->IsAlgorithmConverged)
 8008396:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
 800839a:	b353      	cbz	r3, 80083f2 <STO_PLL_CalcAvrgMecSpeedUnit+0xee>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 800839c:	4294      	cmp	r4, r2
 800839e:	dc25      	bgt.n	80083ec <STO_PLL_CalcAvrgMecSpeedUnit+0xe8>
        pHandle->ReliabilityCounter++;
 80083a0:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 80083a4:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
        pHandle->ReliabilityCounter++;
 80083a8:	3301      	adds	r3, #1
 80083aa:	b2db      	uxtb	r3, r3
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 80083ac:	429a      	cmp	r2, r3
        pHandle->ReliabilityCounter++;
 80083ae:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 80083b2:	d81e      	bhi.n	80083f2 <STO_PLL_CalcAvrgMecSpeedUnit+0xee>
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80083b4:	78c2      	ldrb	r2, [r0, #3]
 80083b6:	7002      	strb	r2, [r0, #0]
          pHandle->ReliabilityCounter = 0U;
 80083b8:	2300      	movs	r3, #0
 80083ba:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
}
 80083be:	4618      	mov	r0, r3
 80083c0:	bd70      	pop	{r4, r5, r6, pc}
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 80083c2:	2b00      	cmp	r3, #0
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 80083c4:	f8b0 511a 	ldrh.w	r5, [r0, #282]	; 0x11a
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 80083c8:	bfb8      	it	lt
 80083ca:	425b      	neglt	r3, r3
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 80083cc:	429d      	cmp	r5, r3
 80083ce:	dc14      	bgt.n	80083fa <STO_PLL_CalcAvrgMecSpeedUnit+0xf6>
    bool bIs_Bemf_Consistent = false;
 80083d0:	2500      	movs	r5, #0
    int32_t wEstBemfSq = 0;
 80083d2:	462b      	mov	r3, r5
    int32_t wObsBemfSq = 0;
 80083d4:	462e      	mov	r6, r5
      pHandle->Est_Bemf_Level = wEstBemfSq;
 80083d6:	e9c0 633f 	strd	r6, r3, [r0, #252]	; 0xfc
    if (false == pHandle->IsAlgorithmConverged)
 80083da:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 80083de:	f880 50f9 	strb.w	r5, [r0, #249]	; 0xf9
    if (false == pHandle->IsAlgorithmConverged)
 80083e2:	b133      	cbz	r3, 80083f2 <STO_PLL_CalcAvrgMecSpeedUnit+0xee>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 80083e4:	4294      	cmp	r4, r2
 80083e6:	dddb      	ble.n	80083a0 <STO_PLL_CalcAvrgMecSpeedUnit+0x9c>
 80083e8:	2d00      	cmp	r5, #0
 80083ea:	d0d9      	beq.n	80083a0 <STO_PLL_CalcAvrgMecSpeedUnit+0x9c>
        pHandle->ReliabilityCounter = 0U;
 80083ec:	2300      	movs	r3, #0
 80083ee:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
}
 80083f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 80083f6:	f7ff bda1 	b.w	8007f3c <SPD_IsMecSpeedReliable>
        wObsBemf = (int32_t)pHandle->hBemf_alfa_est;
 80083fa:	f9b0 5070 	ldrsh.w	r5, [r0, #112]	; 0x70
        wObsBemf = (int32_t)pHandle->hBemf_beta_est;
 80083fe:	f9b0 6072 	ldrsh.w	r6, [r0, #114]	; 0x72
        wObsBemfSq = wObsBemf * wObsBemf;
 8008402:	fb05 fc05 	mul.w	ip, r5, r5
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 8008406:	f890 5119 	ldrb.w	r5, [r0, #281]	; 0x119
        wObsBemfSq += wObsBemf * wObsBemf;
 800840a:	fb06 c606 	mla	r6, r6, r6, ip
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 800840e:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8008412:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 8008416:	fb93 f3fc 	sdiv	r3, r3, ip
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 800841a:	fb03 f505 	mul.w	r5, r3, r5
 800841e:	2d00      	cmp	r5, #0
 8008420:	bfb8      	it	lt
 8008422:	353f      	addlt	r5, #63	; 0x3f
 8008424:	11ad      	asrs	r5, r5, #6
        wEstBemfSq *= wEstBemf;
 8008426:	fb05 f303 	mul.w	r3, r5, r3
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 800842a:	2b00      	cmp	r3, #0
 800842c:	461d      	mov	r5, r3
 800842e:	f890 c118 	ldrb.w	ip, [r0, #280]	; 0x118
 8008432:	bfb8      	it	lt
 8008434:	f103 053f 	addlt.w	r5, r3, #63	; 0x3f
 8008438:	11ad      	asrs	r5, r5, #6
 800843a:	fb0c 3515 	mls	r5, ip, r5, r3
        if (wObsBemfSq > wEstBemfSqLo)
 800843e:	42ae      	cmp	r6, r5
 8008440:	bfd4      	ite	le
 8008442:	2500      	movle	r5, #0
 8008444:	2501      	movgt	r5, #1
 8008446:	e7c6      	b.n	80083d6 <STO_PLL_CalcAvrgMecSpeedUnit+0xd2>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8008448:	462a      	mov	r2, r5
 800844a:	462b      	mov	r3, r5
 800844c:	462e      	mov	r6, r5
    int32_t wAvrSpeed_dpp = (int32_t)0;
 800844e:	46ae      	mov	lr, r5
 8008450:	e77d      	b.n	800834e <STO_PLL_CalcAvrgMecSpeedUnit+0x4a>
 8008452:	bf00      	nop

08008454 <STO_PLL_CalcAvrgElSpeedDpp>:
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 8008454:	f890 110e 	ldrb.w	r1, [r0, #270]	; 0x10e
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8008458:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 800845c:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8008460:	1acb      	subs	r3, r1, r3
 8008462:	b29b      	uxth	r3, r3
{
 8008464:	b510      	push	{r4, lr}
    int32_t wSum = pHandle->DppBufferSum;
 8008466:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    if (0 == hBufferSizeDiff)
 800846a:	b973      	cbnz	r3, 800848a <STO_PLL_CalcAvrgElSpeedDpp+0x36>
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800846c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8008470:	f9b0 110c 	ldrsh.w	r1, [r0, #268]	; 0x10c
 8008474:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
 8008478:	4423      	add	r3, r4
 800847a:	1a5b      	subs	r3, r3, r1
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800847c:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
    pHandle->DppBufferSum = wSum;
 8008480:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8008484:	4113      	asrs	r3, r2
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 8008486:	81c3      	strh	r3, [r0, #14]
}
 8008488:	bd10      	pop	{r4, pc}
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 800848a:	4413      	add	r3, r2
 800848c:	fa0f fc83 	sxth.w	ip, r3
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 8008490:	4561      	cmp	r1, ip
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 8008492:	b29b      	uxth	r3, r3
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 8008494:	dc05      	bgt.n	80084a2 <STO_PLL_CalcAvrgElSpeedDpp+0x4e>
 8008496:	fa1f fe81 	uxth.w	lr, r1
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 800849a:	eba3 030e 	sub.w	r3, r3, lr
 800849e:	fa0f fc83 	sxth.w	ip, r3
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 80084a2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80084a6:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
 80084aa:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
 80084ae:	f9bc 2074 	ldrsh.w	r2, [ip, #116]	; 0x74
 80084b2:	4423      	add	r3, r4
 80084b4:	1a9b      	subs	r3, r3, r2
 80084b6:	e7e1      	b.n	800847c <STO_PLL_CalcAvrgElSpeedDpp+0x28>

080084b8 <STO_PLL_Clear>:
{
 80084b8:	b510      	push	{r4, lr}
  *
  */
static void STO_InitSpeedBuffer(STO_PLL_Handle_t * pHandle)
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 80084ba:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
    pHandle->Ialfa_est = (int32_t)0;
 80084be:	2100      	movs	r1, #0
    pHandle->Ibeta_est = (int32_t)0;
 80084c0:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
    pHandle->wBemf_beta_est = (int32_t)0;
 80084c4:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
    pHandle->Est_Bemf_Level = (int32_t)0;
 80084c8:	e9c0 113f 	strd	r1, r1, [r0, #252]	; 0xfc
{
 80084cc:	4604      	mov	r4, r0
    pHandle->_Super.hElAngle = (int16_t)0;
 80084ce:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 80084d0:	81c1      	strh	r1, [r0, #14]
    pHandle->ConsistencyCounter = 0u;
 80084d2:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    pHandle->IsAlgorithmConverged = false;
 80084d6:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    pHandle->DppBufferSum = (int32_t)0;
 80084da:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    pHandle->ForceConvergency = false;
 80084de:	f8a0 1122 	strh.w	r1, [r0, #290]	; 0x122

  /*init speed buffer*/
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 80084e2:	b11a      	cbz	r2, 80084ec <STO_PLL_Clear+0x34>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 80084e4:	0052      	lsls	r2, r2, #1
 80084e6:	3074      	adds	r0, #116	; 0x74
 80084e8:	f000 fa16 	bl	8008918 <memset>
  }
  pHandle->Speed_Buffer_Index = 0U;
 80084ec:	2100      	movs	r1, #0
 80084ee:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 80084f2:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 80084f6:	f104 0034 	add.w	r0, r4, #52	; 0x34
}
 80084fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 80084fe:	f7fe bd27 	b.w	8006f50 <PID_SetIntegralTerm>
 8008502:	bf00      	nop

08008504 <STO_PLL_Init>:
{
 8008504:	b510      	push	{r4, lr}
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8008506:	f890 1116 	ldrb.w	r1, [r0, #278]	; 0x116
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 800850a:	4b19      	ldr	r3, [pc, #100]	; (8008570 <STO_PLL_Init+0x6c>)
 800850c:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	; 0x2e
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8008510:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    pHandle->EnableDualCheck = true;
 8008514:	2201      	movs	r2, #1
    pHandle->F3POW2 = 0U;
 8008516:	2100      	movs	r1, #0
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 8008518:	fb93 f3fe 	sdiv	r3, r3, lr
 800851c:	b21b      	sxth	r3, r3
{
 800851e:	4604      	mov	r4, r0
    pHandle->EnableDualCheck = true;
 8008520:	f880 2104 	strb.w	r2, [r0, #260]	; 0x104
    pHandle->F3POW2 = 0U;
 8008524:	8641      	strh	r1, [r0, #50]	; 0x32
    while (htempk != 0)
 8008526:	b30b      	cbz	r3, 800856c <STO_PLL_Init+0x68>
    wAux = ((int32_t)1);
 8008528:	4611      	mov	r1, r2
      htempk /= ((int16_t)2);
 800852a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    while (htempk != 0)
 800852e:	f102 0c01 	add.w	ip, r2, #1
 8008532:	105b      	asrs	r3, r3, #1
 8008534:	4610      	mov	r0, r2
      wAux *= ((int32_t)2);
 8008536:	ea4f 0141 	mov.w	r1, r1, lsl #1
    while (htempk != 0)
 800853a:	fa1f f28c 	uxth.w	r2, ip
 800853e:	d1f4      	bne.n	800852a <STO_PLL_Init+0x26>
    pHandle->hF3 = (int16_t)wAux;
 8008540:	b20a      	sxth	r2, r1
 8008542:	8660      	strh	r0, [r4, #50]	; 0x32
    wAux = ((int32_t)(pHandle->hF2)) * pHandle->hF3;
 8008544:	fb0e f102 	mul.w	r1, lr, r2
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8008548:	480a      	ldr	r0, [pc, #40]	; (8008574 <STO_PLL_Init+0x70>)
    pHandle->hF3 = (int16_t)wAux;
 800854a:	8622      	strh	r2, [r4, #48]	; 0x30
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 800854c:	17cb      	asrs	r3, r1, #31
 800854e:	fb80 0101 	smull	r0, r1, r0, r1
 8008552:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 8008556:	8563      	strh	r3, [r4, #42]	; 0x2a
    STO_PLL_Clear(pHandle);
 8008558:	4620      	mov	r0, r4
 800855a:	f7ff ffad 	bl	80084b8 <STO_PLL_Clear>
    PID_HandleInit(&pHandle->PIRegulator);
 800855e:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8008562:	f7fe fce1 	bl	8006f28 <PID_HandleInit>
    pHandle->_Super.hMecAccelUnitP = 0;
 8008566:	2300      	movs	r3, #0
 8008568:	8263      	strh	r3, [r4, #18]
}
 800856a:	bd10      	pop	{r4, pc}
 800856c:	4671      	mov	r1, lr
 800856e:	e7eb      	b.n	8008548 <STO_PLL_Init+0x44>
 8008570:	000fea5e 	.word	0x000fea5e
 8008574:	06488dc5 	.word	0x06488dc5

08008578 <STO_PLL_IsObserverConverged>:
    int16_t hUpperThreshold;
    int16_t hLowerThreshold;
    int32_t wAux;
    int32_t wtemp;

    if (true == pHandle->ForceConvergency2)
 8008578:	f890 2123 	ldrb.w	r2, [r0, #291]	; 0x123
{
 800857c:	4603      	mov	r3, r0
    if (true == pHandle->ForceConvergency2)
 800857e:	b112      	cbz	r2, 8008586 <STO_PLL_IsObserverConverged+0xe>
    {
      *phForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8008580:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 8008584:	800a      	strh	r2, [r1, #0]
    }

    if (true == pHandle->ForceConvergency)
 8008586:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
 800858a:	b128      	cbz	r0, 8008598 <STO_PLL_IsObserverConverged+0x20>
    {
      bAux = true;
      pHandle->IsAlgorithmConverged = true;
 800858c:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800858e:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 8008590:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8008594:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
}
 8008596:	4770      	bx	lr
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8008598:	f9b1 2000 	ldrsh.w	r2, [r1]
      hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800859c:	f9b3 c00c 	ldrsh.w	ip, [r3, #12]
{
 80085a0:	b530      	push	{r4, r5, lr}
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 80085a2:	fb0c fe02 	mul.w	lr, ip, r2
      if (wtemp > 0)
 80085a6:	f1be 0f00 	cmp.w	lr, #0
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 80085aa:	4614      	mov	r4, r2
      if (wtemp > 0)
 80085ac:	dd38      	ble.n	8008620 <STO_PLL_IsObserverConverged+0xa8>
        if (hEstimatedSpeedUnit < 0)
 80085ae:	f1bc 0f00 	cmp.w	ip, #0
          hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 80085b2:	bfbc      	itt	lt
 80085b4:	f1cc 0c00 	rsblt	ip, ip, #0
 80085b8:	fa0f fc8c 	sxthlt.w	ip, ip
        if (*phForcedMecSpeedUnit < 0)
 80085bc:	2a00      	cmp	r2, #0
 80085be:	db34      	blt.n	800862a <STO_PLL_IsObserverConverged+0xb2>
        if (true == pHandle->IsSpeedReliable)
 80085c0:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 80085c4:	f893 e112 	ldrb.w	lr, [r3, #274]	; 0x112
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 80085c8:	f893 2113 	ldrb.w	r2, [r3, #275]	; 0x113
        if (true == pHandle->IsSpeedReliable)
 80085cc:	b349      	cbz	r1, 8008622 <STO_PLL_IsObserverConverged+0xaa>
          if ((uint16_t)hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed)
 80085ce:	f8b3 5114 	ldrh.w	r5, [r3, #276]	; 0x114
 80085d2:	fa1f f18c 	uxth.w	r1, ip
 80085d6:	428d      	cmp	r5, r1
 80085d8:	d223      	bcs.n	8008622 <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 80085da:	fb04 f202 	mul.w	r2, r4, r2
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 80085de:	2a00      	cmp	r2, #0
 80085e0:	bfb8      	it	lt
 80085e2:	320f      	addlt	r2, #15
            if (hEstimatedSpeedUnit >= hLowerThreshold)
 80085e4:	f342 120f 	sbfx	r2, r2, #4, #16
 80085e8:	4594      	cmp	ip, r2
 80085ea:	db1a      	blt.n	8008622 <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 80085ec:	fb04 fe0e 	mul.w	lr, r4, lr
        hUpperThreshold = (int16_t)(wAux / ((int32_t)16));
 80085f0:	f1be 0f00 	cmp.w	lr, #0
 80085f4:	bfb8      	it	lt
 80085f6:	f10e 0e0f 	addlt.w	lr, lr, #15
              if (hEstimatedSpeedUnit <= hUpperThreshold)
 80085fa:	f34e 1e0f 	sbfx	lr, lr, #4, #16
 80085fe:	45f4      	cmp	ip, lr
 8008600:	dc0f      	bgt.n	8008622 <STO_PLL_IsObserverConverged+0xaa>
                pHandle->ConsistencyCounter++;
 8008602:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8008606:	f893 1116 	ldrb.w	r1, [r3, #278]	; 0x116
                pHandle->ConsistencyCounter++;
 800860a:	3201      	adds	r2, #1
 800860c:	b2d2      	uxtb	r2, r2
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800860e:	4291      	cmp	r1, r2
                pHandle->ConsistencyCounter++;
 8008610:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8008614:	d804      	bhi.n	8008620 <STO_PLL_IsObserverConverged+0xa8>
      pHandle->IsAlgorithmConverged = true;
 8008616:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8008618:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 800861a:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800861e:	701a      	strb	r2, [r3, #0]
}
 8008620:	bd30      	pop	{r4, r5, pc}
                pHandle->ConsistencyCounter = 0U;
 8008622:	2200      	movs	r2, #0
 8008624:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
}
 8008628:	bd30      	pop	{r4, r5, pc}
          *phForcedMecSpeedUnit = -*phForcedMecSpeedUnit;
 800862a:	4252      	negs	r2, r2
 800862c:	b212      	sxth	r2, r2
 800862e:	800a      	strh	r2, [r1, #0]
        if (true == pHandle->IsSpeedReliable)
 8008630:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8008634:	f893 e112 	ldrb.w	lr, [r3, #274]	; 0x112
 8008638:	4614      	mov	r4, r2
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800863a:	f893 2113 	ldrb.w	r2, [r3, #275]	; 0x113
        if (true == pHandle->IsSpeedReliable)
 800863e:	2900      	cmp	r1, #0
 8008640:	d0ef      	beq.n	8008622 <STO_PLL_IsObserverConverged+0xaa>
 8008642:	e7c4      	b.n	80085ce <STO_PLL_IsObserverConverged+0x56>

08008644 <STO_PLL_GetEstimatedBemf>:
    vaux.alpha = pHandle->hBemf_alfa_est;
    vaux.beta = pHandle->hBemf_beta_est;
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (vaux);
 8008644:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8008646:	2200      	movs	r2, #0
 8008648:	b299      	uxth	r1, r3
 800864a:	f361 020f 	bfi	r2, r1, #0, #16
 800864e:	0c1b      	lsrs	r3, r3, #16
 8008650:	f363 421f 	bfi	r2, r3, #16, #16
{
 8008654:	b082      	sub	sp, #8
}
 8008656:	4610      	mov	r0, r2
 8008658:	b002      	add	sp, #8
 800865a:	4770      	bx	lr

0800865c <STO_PLL_GetEstimatedCurrent>:
  iaux.alpha = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  iaux.beta = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800865c:	e9d0 2318 	ldrd	r2, r3, [r0, #96]	; 0x60
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8008660:	f8b0 c11c 	ldrh.w	ip, [r0, #284]	; 0x11c
 8008664:	fa42 f20c 	asr.w	r2, r2, ip
  iaux.beta = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (iaux);
 8008668:	fa43 f30c 	asr.w	r3, r3, ip
 800866c:	b292      	uxth	r2, r2
 800866e:	2100      	movs	r1, #0
 8008670:	f362 010f 	bfi	r1, r2, #0, #16
 8008674:	b29b      	uxth	r3, r3
 8008676:	f363 411f 	bfi	r1, r3, #16, #16
{
 800867a:	b082      	sub	sp, #8
}
 800867c:	4608      	mov	r0, r1
 800867e:	b002      	add	sp, #8
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop

08008684 <STO_PLL_GetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 8008684:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8008688:	800b      	strh	r3, [r1, #0]
    *phC4 = pHandle->hC4;
 800868a:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 800868e:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop

08008694 <STO_PLL_SetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 8008694:	8441      	strh	r1, [r0, #34]	; 0x22
    pHandle->hC4 = hhC2;
 8008696:	84c2      	strh	r2, [r0, #38]	; 0x26
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop

0800869c <STO_OTF_ResetPLL>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    PID_SetIntegralTerm(&pHdl->PIRegulator, (int32_t)0);
 800869c:	6800      	ldr	r0, [r0, #0]
 800869e:	2100      	movs	r1, #0
 80086a0:	3034      	adds	r0, #52	; 0x34
 80086a2:	f7fe bc55 	b.w	8006f50 <PID_SetIntegralTerm>
 80086a6:	bf00      	nop

080086a8 <STO_ResetPLL>:
    /* Nothing to do */
  }
  else
  {
#endif
    PID_SetIntegralTerm(&pHandle->PIRegulator, (int32_t)0);
 80086a8:	2100      	movs	r1, #0
 80086aa:	3034      	adds	r0, #52	; 0x34
 80086ac:	f7fe bc50 	b.w	8006f50 <PID_SetIntegralTerm>

080086b0 <STO_PLL_GetEstimatedBemfLevel>:
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Est_Bemf_Level);
#else
  return (pHandle->Est_Bemf_Level);
#endif
}
 80086b0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop

080086b8 <STO_PLL_GetObservedBemfLevel>:
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
#endif
}
 80086b8:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop

080086c0 <STO_PLL_IsVarianceTight>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    tempStatus = pHdl->IsSpeedReliable;
 80086c0:	6803      	ldr	r3, [r0, #0]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (tempStatus);
}
 80086c2:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
 80086c6:	4770      	bx	lr

080086c8 <STO_PLL_ForceConvergency1>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency = true;
 80086c8:	6803      	ldr	r3, [r0, #0]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop

080086d4 <STO_PLL_ForceConvergency2>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency2 = true;
 80086d4:	6803      	ldr	r3, [r0, #0]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop

080086e0 <STO_SetDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hForcedDirection = direction;
 80086e0:	f880 1124 	strb.w	r1, [r0, #292]	; 0x124
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop

080086e8 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 80086e8:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 80086ea:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 80086ec:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 80086ee:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 80086f2:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 80086f4:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 80086f6:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 80086f8:	8503      	strh	r3, [r0, #40]	; 0x28
    pHandle->bTransitionStarted = false;
 80086fa:	8583      	strh	r3, [r0, #44]	; 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 80086fc:	85c2      	strh	r2, [r0, #46]	; 0x2e
    pHandle->hElAngleAccu = 0;
 80086fe:	6303      	str	r3, [r0, #48]	; 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop

08008704 <VSS_Init>:
{
 8008704:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 8008706:	f7ff ffef 	bl	80086e8 <VSS_Clear>
}
 800870a:	bd08      	pop	{r3, pc}

0800870c <VSS_CalcElAngle>:
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 800870c:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
{
 8008710:	4603      	mov	r3, r0
    if (true == pHandle->bCopyObserver)
 8008712:	b11a      	cbz	r2, 800871c <VSS_CalcElAngle+0x10>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 8008714:	f9b1 0000 	ldrsh.w	r0, [r1]
      {
        hRetAngle = pHandle->hElAngleAccu;
      }
    }

    pHandle->_Super.hElAngle = hRetAngle;
 8008718:	8098      	strh	r0, [r3, #4]
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 800871a:	4770      	bx	lr
{
 800871c:	b530      	push	{r4, r5, lr}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800871e:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8008722:	8e00      	ldrh	r0, [r0, #48]	; 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8008724:	88dd      	ldrh	r5, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 8008726:	f893 402c 	ldrb.w	r4, [r3, #44]	; 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800872a:	785a      	ldrb	r2, [r3, #1]
 800872c:	fb9c f2f2 	sdiv	r2, ip, r2
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8008730:	4460      	add	r0, ip
 8008732:	fa1f fe80 	uxth.w	lr, r0
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8008736:	442a      	add	r2, r5
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8008738:	b200      	sxth	r0, r0
 800873a:	8618      	strh	r0, [r3, #48]	; 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800873c:	80da      	strh	r2, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 800873e:	b1fc      	cbz	r4, 8008780 <VSS_CalcElAngle+0x74>
        if (0 == pHandle->hTransitionRemainingSteps)
 8008740:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
 8008744:	b1f2      	cbz	r2, 8008784 <VSS_CalcElAngle+0x78>
          pHandle->hTransitionRemainingSteps--;
 8008746:	3a01      	subs	r2, #1
 8008748:	b212      	sxth	r2, r2
 800874a:	85da      	strh	r2, [r3, #46]	; 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 800874c:	f1bc 0f00 	cmp.w	ip, #0
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 8008750:	8809      	ldrh	r1, [r1, #0]
          if (pHandle->_Super.hElSpeedDpp >= 0)
 8008752:	db26      	blt.n	80087a2 <VSS_CalcElAngle+0x96>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 8008754:	eba1 0e0e 	sub.w	lr, r1, lr
 8008758:	fa0f fe8e 	sxth.w	lr, lr
 800875c:	2501      	movs	r5, #1
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800875e:	f9b3 4036 	ldrsh.w	r4, [r3, #54]	; 0x36
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 8008762:	fb0e f202 	mul.w	r2, lr, r2
          if (hAngleDiff >= 0)
 8008766:	f1be 0f00 	cmp.w	lr, #0
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800876a:	fb92 f2f4 	sdiv	r2, r2, r4
          hAngleCorr *= hSignCorr;
 800876e:	fb12 f205 	smulbb	r2, r2, r5
 8008772:	b292      	uxth	r2, r2
          if (hAngleDiff >= 0)
 8008774:	db0e      	blt.n	8008794 <VSS_CalcElAngle+0x88>
            pHandle->bTransitionLocked = true;
 8008776:	2001      	movs	r0, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8008778:	1a8a      	subs	r2, r1, r2
            pHandle->bTransitionLocked = true;
 800877a:	f883 0032 	strb.w	r0, [r3, #50]	; 0x32
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 800877e:	b210      	sxth	r0, r2
    pHandle->_Super.hElAngle = hRetAngle;
 8008780:	8098      	strh	r0, [r3, #4]
}
 8008782:	bd30      	pop	{r4, r5, pc}
          hRetAngle = *(int16_t *)pInputVars_str;
 8008784:	f9b1 0000 	ldrsh.w	r0, [r1]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 8008788:	701a      	strb	r2, [r3, #0]
          pHandle->bTransitionEnded = true;
 800878a:	2401      	movs	r4, #1
 800878c:	f883 402d 	strb.w	r4, [r3, #45]	; 0x2d
    pHandle->_Super.hElAngle = hRetAngle;
 8008790:	8098      	strh	r0, [r3, #4]
}
 8008792:	bd30      	pop	{r4, r5, pc}
            if (false == pHandle->bTransitionLocked)
 8008794:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
 8008798:	2c00      	cmp	r4, #0
 800879a:	d0f1      	beq.n	8008780 <VSS_CalcElAngle+0x74>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 800879c:	440a      	add	r2, r1
 800879e:	b210      	sxth	r0, r2
 80087a0:	e7ee      	b.n	8008780 <VSS_CalcElAngle+0x74>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 80087a2:	ebae 0e01 	sub.w	lr, lr, r1
 80087a6:	fa0f fe8e 	sxth.w	lr, lr
 80087aa:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80087ae:	e7d6      	b.n	800875e <VSS_CalcElAngle+0x52>

080087b0 <VSS_CalcAvrgMecSpeedUnit>:
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 80087b0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d923      	bls.n	80087fe <VSS_CalcAvrgMecSpeedUnit+0x4e>
{
 80087b6:	b410      	push	{r4}
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 80087b8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80087ba:	6a04      	ldr	r4, [r0, #32]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 / 65536);
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 80087bc:	8b43      	ldrh	r3, [r0, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 80087be:	4422      	add	r2, r4
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 80087c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 80087c4:	69c4      	ldr	r4, [r0, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 80087c6:	6242      	str	r2, [r0, #36]	; 0x24
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 80087c8:	fb0c f303 	mul.w	r3, ip, r3
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 80087cc:	7842      	ldrb	r2, [r0, #1]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 80087ce:	f8a0 c00e 	strh.w	ip, [r0, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 80087d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 80087d6:	fb04 f202 	mul.w	r2, r4, r2
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 80087da:	005b      	lsls	r3, r3, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 80087dc:	fb93 f3f2 	sdiv	r3, r3, r2
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 80087e0:	b21b      	sxth	r3, r3
 80087e2:	800b      	strh	r3, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 80087e4:	8d02      	ldrh	r2, [r0, #40]	; 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80087e6:	8183      	strh	r3, [r0, #12]
      pHandle->hRemainingStep--;
 80087e8:	1e53      	subs	r3, r2, #1
 80087ea:	8503      	strh	r3, [r0, #40]	; 0x28
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 80087ec:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80087f0:	b983      	cbnz	r3, 8008814 <VSS_CalcAvrgMecSpeedUnit+0x64>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80087f2:	78c2      	ldrb	r2, [r0, #3]
 80087f4:	7002      	strb	r2, [r0, #0]
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 80087f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087fa:	4618      	mov	r0, r3
 80087fc:	4770      	bx	lr
    else if (1U == pHandle->hRemainingStep)
 80087fe:	d00d      	beq.n	800881c <VSS_CalcAvrgMecSpeedUnit+0x6c>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8008800:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8008804:	800b      	strh	r3, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 8008806:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800880a:	bb03      	cbnz	r3, 800884e <VSS_CalcAvrgMecSpeedUnit+0x9e>
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800880c:	78c2      	ldrb	r2, [r0, #3]
 800880e:	7002      	strb	r2, [r0, #0]
}
 8008810:	4618      	mov	r0, r3
 8008812:	4770      	bx	lr
 8008814:	f85d 4b04 	ldr.w	r4, [sp], #4
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 8008818:	f7ff bb90 	b.w	8007f3c <SPD_IsMecSpeedReliable>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 800881c:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	; 0x2a
 8008820:	f8a1 c000 	strh.w	ip, [r1]
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8008824:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8008826:	69c2      	ldr	r2, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8008828:	f8a0 c00c 	strh.w	ip, [r0, #12]
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800882c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008830:	005b      	lsls	r3, r3, #1
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8008832:	fb02 f20c 	mul.w	r2, r2, ip
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8008836:	fb92 f2f3 	sdiv	r2, r2, r3
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800883a:	7843      	ldrb	r3, [r0, #1]
 800883c:	fb13 f302 	smulbb	r3, r3, r2
 8008840:	81c3      	strh	r3, [r0, #14]
    if (false == pHandle->bTransitionEnded)
 8008842:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
      pHandle->hRemainingStep = 0U;
 8008846:	2200      	movs	r2, #0
 8008848:	8502      	strh	r2, [r0, #40]	; 0x28
    if (false == pHandle->bTransitionEnded)
 800884a:	2b00      	cmp	r3, #0
 800884c:	d0de      	beq.n	800880c <VSS_CalcAvrgMecSpeedUnit+0x5c>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800884e:	f7ff bb75 	b.w	8007f3c <SPD_IsMecSpeedReliable>
 8008852:	bf00      	nop

08008854 <VSS_SetMecAngle>:
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8008854:	7843      	ldrb	r3, [r0, #1]
    pHandle->hElAngleAccu = hMecAngle;
 8008856:	8601      	strh	r1, [r0, #48]	; 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8008858:	fb91 f3f3 	sdiv	r3, r1, r3
    pHandle->_Super.hElAngle = hMecAngle;
 800885c:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800885e:	80c3      	strh	r3, [r0, #6]
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop

08008864 <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 8008864:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8008868:	b99b      	cbnz	r3, 8008892 <VSS_SetMecAcceleration+0x2e>
{
 800886a:	b510      	push	{r4, lr}
    {
      if (0U == hDurationms)
 800886c:	b992      	cbnz	r2, 8008894 <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800886e:	8b43      	ldrh	r3, [r0, #26]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8008870:	69c4      	ldr	r4, [r0, #28]
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8008872:	8181      	strh	r1, [r0, #12]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8008874:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8008878:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800887c:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 800887e:	fb9c f3f3 	sdiv	r3, ip, r3

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8008882:	f890 c001 	ldrb.w	ip, [r0, #1]

        pHandle->hRemainingStep = 0U;
 8008886:	8502      	strh	r2, [r0, #40]	; 0x28
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8008888:	fb1c f303 	smulbb	r3, ip, r3
 800888c:	81c3      	strh	r3, [r0, #14]

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800888e:	8541      	strh	r1, [r0, #42]	; 0x2a
      }
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 8008890:	bd10      	pop	{r4, pc}
 8008892:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 8008894:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8008896:	4c16      	ldr	r4, [pc, #88]	; (80088f0 <VSS_SetMecAcceleration+0x8c>)
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8008898:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800889c:	fb02 f303 	mul.w	r3, r2, r3
 80088a0:	fba4 4303 	umull	r4, r3, r4, r3
 80088a4:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 80088a8:	3301      	adds	r3, #1
 80088aa:	b29b      	uxth	r3, r3
        pHandle->hRemainingStep = hNbrStep;
 80088ac:	8503      	strh	r3, [r0, #40]	; 0x28
        if (0U == hNbrStep)
 80088ae:	b923      	cbnz	r3, 80088ba <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80088b0:	ea4f 430c 	mov.w	r3, ip, lsl #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80088b4:	8541      	strh	r1, [r0, #42]	; 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80088b6:	6243      	str	r3, [r0, #36]	; 0x24
}
 80088b8:	bd10      	pop	{r4, pc}
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80088ba:	8b42      	ldrh	r2, [r0, #26]
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 80088bc:	7844      	ldrb	r4, [r0, #1]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80088be:	8541      	strh	r1, [r0, #42]	; 0x2a
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80088c0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80088c4:	ea4f 0e42 	mov.w	lr, r2, lsl #1
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 80088c8:	69c2      	ldr	r2, [r0, #28]
 80088ca:	fb01 f202 	mul.w	r2, r1, r2
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80088ce:	fb92 f2fe 	sdiv	r2, r2, lr
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 80088d2:	fb9c fef4 	sdiv	lr, ip, r4
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 80088d6:	eba2 020e 	sub.w	r2, r2, lr
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 80088da:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 80088dc:	fb92 f3f3 	sdiv	r3, r2, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 80088e0:	fb04 f303 	mul.w	r3, r4, r3
 80088e4:	6203      	str	r3, [r0, #32]
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80088e6:	ea4f 430c 	mov.w	r3, ip, lsl #16
 80088ea:	6243      	str	r3, [r0, #36]	; 0x24
 80088ec:	e7e4      	b.n	80088b8 <VSS_SetMecAcceleration+0x54>
 80088ee:	bf00      	nop
 80088f0:	10624dd3 	.word	0x10624dd3

080088f4 <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 80088f4:	b151      	cbz	r1, 800890c <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionStarted = true;

      if (0 == pHandle->hTransitionSteps)
 80088f6:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	; 0x36
      pHandle->bTransitionStarted = true;
 80088fa:	2201      	movs	r2, #1
 80088fc:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
      if (0 == pHandle->hTransitionSteps)
 8008900:	b923      	cbnz	r3, 800890c <VSS_SetStartTransition+0x18>
      {
        pHandle->bTransitionEnded = true;
 8008902:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0U;
 8008906:	7003      	strb	r3, [r0, #0]
        bAux = false;
 8008908:	4618      	mov	r0, r3
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 800890a:	4770      	bx	lr
  bool bAux = true;
 800890c:	2001      	movs	r0, #1
 800890e:	4770      	bx	lr

08008910 <VSS_TransitionEnded>:
#ifdef NULL_PTR_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
#endif
}
 8008910:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <memset>:
 8008918:	4402      	add	r2, r0
 800891a:	4603      	mov	r3, r0
 800891c:	4293      	cmp	r3, r2
 800891e:	d100      	bne.n	8008922 <memset+0xa>
 8008920:	4770      	bx	lr
 8008922:	f803 1b01 	strb.w	r1, [r3], #1
 8008926:	e7f9      	b.n	800891c <memset+0x4>

08008928 <_reclaim_reent>:
 8008928:	4b29      	ldr	r3, [pc, #164]	; (80089d0 <_reclaim_reent+0xa8>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4283      	cmp	r3, r0
 800892e:	b570      	push	{r4, r5, r6, lr}
 8008930:	4604      	mov	r4, r0
 8008932:	d04b      	beq.n	80089cc <_reclaim_reent+0xa4>
 8008934:	69c3      	ldr	r3, [r0, #28]
 8008936:	b143      	cbz	r3, 800894a <_reclaim_reent+0x22>
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d144      	bne.n	80089c8 <_reclaim_reent+0xa0>
 800893e:	69e3      	ldr	r3, [r4, #28]
 8008940:	6819      	ldr	r1, [r3, #0]
 8008942:	b111      	cbz	r1, 800894a <_reclaim_reent+0x22>
 8008944:	4620      	mov	r0, r4
 8008946:	f000 f879 	bl	8008a3c <_free_r>
 800894a:	6961      	ldr	r1, [r4, #20]
 800894c:	b111      	cbz	r1, 8008954 <_reclaim_reent+0x2c>
 800894e:	4620      	mov	r0, r4
 8008950:	f000 f874 	bl	8008a3c <_free_r>
 8008954:	69e1      	ldr	r1, [r4, #28]
 8008956:	b111      	cbz	r1, 800895e <_reclaim_reent+0x36>
 8008958:	4620      	mov	r0, r4
 800895a:	f000 f86f 	bl	8008a3c <_free_r>
 800895e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008960:	b111      	cbz	r1, 8008968 <_reclaim_reent+0x40>
 8008962:	4620      	mov	r0, r4
 8008964:	f000 f86a 	bl	8008a3c <_free_r>
 8008968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800896a:	b111      	cbz	r1, 8008972 <_reclaim_reent+0x4a>
 800896c:	4620      	mov	r0, r4
 800896e:	f000 f865 	bl	8008a3c <_free_r>
 8008972:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008974:	b111      	cbz	r1, 800897c <_reclaim_reent+0x54>
 8008976:	4620      	mov	r0, r4
 8008978:	f000 f860 	bl	8008a3c <_free_r>
 800897c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800897e:	b111      	cbz	r1, 8008986 <_reclaim_reent+0x5e>
 8008980:	4620      	mov	r0, r4
 8008982:	f000 f85b 	bl	8008a3c <_free_r>
 8008986:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008988:	b111      	cbz	r1, 8008990 <_reclaim_reent+0x68>
 800898a:	4620      	mov	r0, r4
 800898c:	f000 f856 	bl	8008a3c <_free_r>
 8008990:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008992:	b111      	cbz	r1, 800899a <_reclaim_reent+0x72>
 8008994:	4620      	mov	r0, r4
 8008996:	f000 f851 	bl	8008a3c <_free_r>
 800899a:	6a23      	ldr	r3, [r4, #32]
 800899c:	b1b3      	cbz	r3, 80089cc <_reclaim_reent+0xa4>
 800899e:	4620      	mov	r0, r4
 80089a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80089a4:	4718      	bx	r3
 80089a6:	5949      	ldr	r1, [r1, r5]
 80089a8:	b941      	cbnz	r1, 80089bc <_reclaim_reent+0x94>
 80089aa:	3504      	adds	r5, #4
 80089ac:	69e3      	ldr	r3, [r4, #28]
 80089ae:	2d80      	cmp	r5, #128	; 0x80
 80089b0:	68d9      	ldr	r1, [r3, #12]
 80089b2:	d1f8      	bne.n	80089a6 <_reclaim_reent+0x7e>
 80089b4:	4620      	mov	r0, r4
 80089b6:	f000 f841 	bl	8008a3c <_free_r>
 80089ba:	e7c0      	b.n	800893e <_reclaim_reent+0x16>
 80089bc:	680e      	ldr	r6, [r1, #0]
 80089be:	4620      	mov	r0, r4
 80089c0:	f000 f83c 	bl	8008a3c <_free_r>
 80089c4:	4631      	mov	r1, r6
 80089c6:	e7ef      	b.n	80089a8 <_reclaim_reent+0x80>
 80089c8:	2500      	movs	r5, #0
 80089ca:	e7ef      	b.n	80089ac <_reclaim_reent+0x84>
 80089cc:	bd70      	pop	{r4, r5, r6, pc}
 80089ce:	bf00      	nop
 80089d0:	200005c0 	.word	0x200005c0

080089d4 <__libc_init_array>:
 80089d4:	b570      	push	{r4, r5, r6, lr}
 80089d6:	4d0d      	ldr	r5, [pc, #52]	; (8008a0c <__libc_init_array+0x38>)
 80089d8:	4c0d      	ldr	r4, [pc, #52]	; (8008a10 <__libc_init_array+0x3c>)
 80089da:	1b64      	subs	r4, r4, r5
 80089dc:	10a4      	asrs	r4, r4, #2
 80089de:	2600      	movs	r6, #0
 80089e0:	42a6      	cmp	r6, r4
 80089e2:	d109      	bne.n	80089f8 <__libc_init_array+0x24>
 80089e4:	4d0b      	ldr	r5, [pc, #44]	; (8008a14 <__libc_init_array+0x40>)
 80089e6:	4c0c      	ldr	r4, [pc, #48]	; (8008a18 <__libc_init_array+0x44>)
 80089e8:	f000 f880 	bl	8008aec <_init>
 80089ec:	1b64      	subs	r4, r4, r5
 80089ee:	10a4      	asrs	r4, r4, #2
 80089f0:	2600      	movs	r6, #0
 80089f2:	42a6      	cmp	r6, r4
 80089f4:	d105      	bne.n	8008a02 <__libc_init_array+0x2e>
 80089f6:	bd70      	pop	{r4, r5, r6, pc}
 80089f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80089fc:	4798      	blx	r3
 80089fe:	3601      	adds	r6, #1
 8008a00:	e7ee      	b.n	80089e0 <__libc_init_array+0xc>
 8008a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a06:	4798      	blx	r3
 8008a08:	3601      	adds	r6, #1
 8008a0a:	e7f2      	b.n	80089f2 <__libc_init_array+0x1e>
 8008a0c:	08008fe0 	.word	0x08008fe0
 8008a10:	08008fe0 	.word	0x08008fe0
 8008a14:	08008fe0 	.word	0x08008fe0
 8008a18:	08008fe4 	.word	0x08008fe4

08008a1c <__retarget_lock_acquire_recursive>:
 8008a1c:	4770      	bx	lr

08008a1e <__retarget_lock_release_recursive>:
 8008a1e:	4770      	bx	lr

08008a20 <memcpy>:
 8008a20:	440a      	add	r2, r1
 8008a22:	4291      	cmp	r1, r2
 8008a24:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a28:	d100      	bne.n	8008a2c <memcpy+0xc>
 8008a2a:	4770      	bx	lr
 8008a2c:	b510      	push	{r4, lr}
 8008a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a36:	4291      	cmp	r1, r2
 8008a38:	d1f9      	bne.n	8008a2e <memcpy+0xe>
 8008a3a:	bd10      	pop	{r4, pc}

08008a3c <_free_r>:
 8008a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a3e:	2900      	cmp	r1, #0
 8008a40:	d044      	beq.n	8008acc <_free_r+0x90>
 8008a42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a46:	9001      	str	r0, [sp, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f1a1 0404 	sub.w	r4, r1, #4
 8008a4e:	bfb8      	it	lt
 8008a50:	18e4      	addlt	r4, r4, r3
 8008a52:	f000 f83f 	bl	8008ad4 <__malloc_lock>
 8008a56:	4a1e      	ldr	r2, [pc, #120]	; (8008ad0 <_free_r+0x94>)
 8008a58:	9801      	ldr	r0, [sp, #4]
 8008a5a:	6813      	ldr	r3, [r2, #0]
 8008a5c:	b933      	cbnz	r3, 8008a6c <_free_r+0x30>
 8008a5e:	6063      	str	r3, [r4, #4]
 8008a60:	6014      	str	r4, [r2, #0]
 8008a62:	b003      	add	sp, #12
 8008a64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a68:	f000 b83a 	b.w	8008ae0 <__malloc_unlock>
 8008a6c:	42a3      	cmp	r3, r4
 8008a6e:	d908      	bls.n	8008a82 <_free_r+0x46>
 8008a70:	6825      	ldr	r5, [r4, #0]
 8008a72:	1961      	adds	r1, r4, r5
 8008a74:	428b      	cmp	r3, r1
 8008a76:	bf01      	itttt	eq
 8008a78:	6819      	ldreq	r1, [r3, #0]
 8008a7a:	685b      	ldreq	r3, [r3, #4]
 8008a7c:	1949      	addeq	r1, r1, r5
 8008a7e:	6021      	streq	r1, [r4, #0]
 8008a80:	e7ed      	b.n	8008a5e <_free_r+0x22>
 8008a82:	461a      	mov	r2, r3
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	b10b      	cbz	r3, 8008a8c <_free_r+0x50>
 8008a88:	42a3      	cmp	r3, r4
 8008a8a:	d9fa      	bls.n	8008a82 <_free_r+0x46>
 8008a8c:	6811      	ldr	r1, [r2, #0]
 8008a8e:	1855      	adds	r5, r2, r1
 8008a90:	42a5      	cmp	r5, r4
 8008a92:	d10b      	bne.n	8008aac <_free_r+0x70>
 8008a94:	6824      	ldr	r4, [r4, #0]
 8008a96:	4421      	add	r1, r4
 8008a98:	1854      	adds	r4, r2, r1
 8008a9a:	42a3      	cmp	r3, r4
 8008a9c:	6011      	str	r1, [r2, #0]
 8008a9e:	d1e0      	bne.n	8008a62 <_free_r+0x26>
 8008aa0:	681c      	ldr	r4, [r3, #0]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	6053      	str	r3, [r2, #4]
 8008aa6:	440c      	add	r4, r1
 8008aa8:	6014      	str	r4, [r2, #0]
 8008aaa:	e7da      	b.n	8008a62 <_free_r+0x26>
 8008aac:	d902      	bls.n	8008ab4 <_free_r+0x78>
 8008aae:	230c      	movs	r3, #12
 8008ab0:	6003      	str	r3, [r0, #0]
 8008ab2:	e7d6      	b.n	8008a62 <_free_r+0x26>
 8008ab4:	6825      	ldr	r5, [r4, #0]
 8008ab6:	1961      	adds	r1, r4, r5
 8008ab8:	428b      	cmp	r3, r1
 8008aba:	bf04      	itt	eq
 8008abc:	6819      	ldreq	r1, [r3, #0]
 8008abe:	685b      	ldreq	r3, [r3, #4]
 8008ac0:	6063      	str	r3, [r4, #4]
 8008ac2:	bf04      	itt	eq
 8008ac4:	1949      	addeq	r1, r1, r5
 8008ac6:	6021      	streq	r1, [r4, #0]
 8008ac8:	6054      	str	r4, [r2, #4]
 8008aca:	e7ca      	b.n	8008a62 <_free_r+0x26>
 8008acc:	b003      	add	sp, #12
 8008ace:	bd30      	pop	{r4, r5, pc}
 8008ad0:	20005b94 	.word	0x20005b94

08008ad4 <__malloc_lock>:
 8008ad4:	4801      	ldr	r0, [pc, #4]	; (8008adc <__malloc_lock+0x8>)
 8008ad6:	f7ff bfa1 	b.w	8008a1c <__retarget_lock_acquire_recursive>
 8008ada:	bf00      	nop
 8008adc:	20005b90 	.word	0x20005b90

08008ae0 <__malloc_unlock>:
 8008ae0:	4801      	ldr	r0, [pc, #4]	; (8008ae8 <__malloc_unlock+0x8>)
 8008ae2:	f7ff bf9c 	b.w	8008a1e <__retarget_lock_release_recursive>
 8008ae6:	bf00      	nop
 8008ae8:	20005b90 	.word	0x20005b90

08008aec <_init>:
 8008aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aee:	bf00      	nop
 8008af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008af2:	bc08      	pop	{r3}
 8008af4:	469e      	mov	lr, r3
 8008af6:	4770      	bx	lr

08008af8 <_fini>:
 8008af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008afa:	bf00      	nop
 8008afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008afe:	bc08      	pop	{r3}
 8008b00:	469e      	mov	lr, r3
 8008b02:	4770      	bx	lr
