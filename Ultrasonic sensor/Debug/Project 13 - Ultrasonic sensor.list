
Project 13 - Ultrasonic sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ef0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004fb0  08004fb0  00014fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050a4  080050a4  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080050a4  080050a4  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050a4  080050a4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050a4  080050a4  000150a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050a8  080050a8  000150a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080050ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000060  0800510c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  0800510c  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000114a8  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021b9  00000000  00000000  00031573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f60  00000000  00000000  00033730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c3b  00000000  00000000  00034690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000149a5  00000000  00000000  000352cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013695  00000000  00000000  00049c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082d80  00000000  00000000  0005d305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003df4  00000000  00000000  000e0088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000e3e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004f98 	.word	0x08004f98

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08004f98 	.word	0x08004f98

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_ddiv>:
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	4657      	mov	r7, sl
 8000248:	464e      	mov	r6, r9
 800024a:	4645      	mov	r5, r8
 800024c:	46de      	mov	lr, fp
 800024e:	b5e0      	push	{r5, r6, r7, lr}
 8000250:	030c      	lsls	r4, r1, #12
 8000252:	001f      	movs	r7, r3
 8000254:	004b      	lsls	r3, r1, #1
 8000256:	4681      	mov	r9, r0
 8000258:	4692      	mov	sl, r2
 800025a:	0005      	movs	r5, r0
 800025c:	b085      	sub	sp, #20
 800025e:	0b24      	lsrs	r4, r4, #12
 8000260:	0d5b      	lsrs	r3, r3, #21
 8000262:	0fce      	lsrs	r6, r1, #31
 8000264:	2b00      	cmp	r3, #0
 8000266:	d100      	bne.n	800026a <__aeabi_ddiv+0x26>
 8000268:	e152      	b.n	8000510 <__aeabi_ddiv+0x2cc>
 800026a:	4ad2      	ldr	r2, [pc, #840]	; (80005b4 <__aeabi_ddiv+0x370>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d100      	bne.n	8000272 <__aeabi_ddiv+0x2e>
 8000270:	e16e      	b.n	8000550 <__aeabi_ddiv+0x30c>
 8000272:	0f42      	lsrs	r2, r0, #29
 8000274:	00e4      	lsls	r4, r4, #3
 8000276:	4314      	orrs	r4, r2
 8000278:	2280      	movs	r2, #128	; 0x80
 800027a:	0412      	lsls	r2, r2, #16
 800027c:	4322      	orrs	r2, r4
 800027e:	4690      	mov	r8, r2
 8000280:	4acd      	ldr	r2, [pc, #820]	; (80005b8 <__aeabi_ddiv+0x374>)
 8000282:	00c5      	lsls	r5, r0, #3
 8000284:	4693      	mov	fp, r2
 8000286:	449b      	add	fp, r3
 8000288:	2300      	movs	r3, #0
 800028a:	4699      	mov	r9, r3
 800028c:	9300      	str	r3, [sp, #0]
 800028e:	033c      	lsls	r4, r7, #12
 8000290:	007b      	lsls	r3, r7, #1
 8000292:	4650      	mov	r0, sl
 8000294:	0b24      	lsrs	r4, r4, #12
 8000296:	0d5b      	lsrs	r3, r3, #21
 8000298:	0fff      	lsrs	r7, r7, #31
 800029a:	2b00      	cmp	r3, #0
 800029c:	d100      	bne.n	80002a0 <__aeabi_ddiv+0x5c>
 800029e:	e11a      	b.n	80004d6 <__aeabi_ddiv+0x292>
 80002a0:	4ac4      	ldr	r2, [pc, #784]	; (80005b4 <__aeabi_ddiv+0x370>)
 80002a2:	4293      	cmp	r3, r2
 80002a4:	d100      	bne.n	80002a8 <__aeabi_ddiv+0x64>
 80002a6:	e15e      	b.n	8000566 <__aeabi_ddiv+0x322>
 80002a8:	0f42      	lsrs	r2, r0, #29
 80002aa:	00e4      	lsls	r4, r4, #3
 80002ac:	4322      	orrs	r2, r4
 80002ae:	2480      	movs	r4, #128	; 0x80
 80002b0:	0424      	lsls	r4, r4, #16
 80002b2:	4314      	orrs	r4, r2
 80002b4:	4ac0      	ldr	r2, [pc, #768]	; (80005b8 <__aeabi_ddiv+0x374>)
 80002b6:	00c1      	lsls	r1, r0, #3
 80002b8:	4694      	mov	ip, r2
 80002ba:	465a      	mov	r2, fp
 80002bc:	4463      	add	r3, ip
 80002be:	1ad3      	subs	r3, r2, r3
 80002c0:	469b      	mov	fp, r3
 80002c2:	2000      	movs	r0, #0
 80002c4:	0033      	movs	r3, r6
 80002c6:	407b      	eors	r3, r7
 80002c8:	469a      	mov	sl, r3
 80002ca:	464b      	mov	r3, r9
 80002cc:	2b0f      	cmp	r3, #15
 80002ce:	d827      	bhi.n	8000320 <__aeabi_ddiv+0xdc>
 80002d0:	4aba      	ldr	r2, [pc, #744]	; (80005bc <__aeabi_ddiv+0x378>)
 80002d2:	009b      	lsls	r3, r3, #2
 80002d4:	58d3      	ldr	r3, [r2, r3]
 80002d6:	469f      	mov	pc, r3
 80002d8:	46b2      	mov	sl, r6
 80002da:	9b00      	ldr	r3, [sp, #0]
 80002dc:	2b02      	cmp	r3, #2
 80002de:	d016      	beq.n	800030e <__aeabi_ddiv+0xca>
 80002e0:	2b03      	cmp	r3, #3
 80002e2:	d100      	bne.n	80002e6 <__aeabi_ddiv+0xa2>
 80002e4:	e287      	b.n	80007f6 <__aeabi_ddiv+0x5b2>
 80002e6:	2b01      	cmp	r3, #1
 80002e8:	d000      	beq.n	80002ec <__aeabi_ddiv+0xa8>
 80002ea:	e0d5      	b.n	8000498 <__aeabi_ddiv+0x254>
 80002ec:	2300      	movs	r3, #0
 80002ee:	2200      	movs	r2, #0
 80002f0:	2500      	movs	r5, #0
 80002f2:	051b      	lsls	r3, r3, #20
 80002f4:	4313      	orrs	r3, r2
 80002f6:	4652      	mov	r2, sl
 80002f8:	07d2      	lsls	r2, r2, #31
 80002fa:	4313      	orrs	r3, r2
 80002fc:	0028      	movs	r0, r5
 80002fe:	0019      	movs	r1, r3
 8000300:	b005      	add	sp, #20
 8000302:	bcf0      	pop	{r4, r5, r6, r7}
 8000304:	46bb      	mov	fp, r7
 8000306:	46b2      	mov	sl, r6
 8000308:	46a9      	mov	r9, r5
 800030a:	46a0      	mov	r8, r4
 800030c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800030e:	2200      	movs	r2, #0
 8000310:	2500      	movs	r5, #0
 8000312:	4ba8      	ldr	r3, [pc, #672]	; (80005b4 <__aeabi_ddiv+0x370>)
 8000314:	e7ed      	b.n	80002f2 <__aeabi_ddiv+0xae>
 8000316:	46ba      	mov	sl, r7
 8000318:	46a0      	mov	r8, r4
 800031a:	000d      	movs	r5, r1
 800031c:	9000      	str	r0, [sp, #0]
 800031e:	e7dc      	b.n	80002da <__aeabi_ddiv+0x96>
 8000320:	4544      	cmp	r4, r8
 8000322:	d200      	bcs.n	8000326 <__aeabi_ddiv+0xe2>
 8000324:	e1c4      	b.n	80006b0 <__aeabi_ddiv+0x46c>
 8000326:	d100      	bne.n	800032a <__aeabi_ddiv+0xe6>
 8000328:	e1bf      	b.n	80006aa <__aeabi_ddiv+0x466>
 800032a:	2301      	movs	r3, #1
 800032c:	425b      	negs	r3, r3
 800032e:	469c      	mov	ip, r3
 8000330:	002e      	movs	r6, r5
 8000332:	4640      	mov	r0, r8
 8000334:	2500      	movs	r5, #0
 8000336:	44e3      	add	fp, ip
 8000338:	0223      	lsls	r3, r4, #8
 800033a:	0e0c      	lsrs	r4, r1, #24
 800033c:	431c      	orrs	r4, r3
 800033e:	0c1b      	lsrs	r3, r3, #16
 8000340:	4699      	mov	r9, r3
 8000342:	0423      	lsls	r3, r4, #16
 8000344:	020a      	lsls	r2, r1, #8
 8000346:	0c1f      	lsrs	r7, r3, #16
 8000348:	4649      	mov	r1, r9
 800034a:	9200      	str	r2, [sp, #0]
 800034c:	9701      	str	r7, [sp, #4]
 800034e:	f7ff ff73 	bl	8000238 <__aeabi_uidivmod>
 8000352:	0002      	movs	r2, r0
 8000354:	437a      	muls	r2, r7
 8000356:	040b      	lsls	r3, r1, #16
 8000358:	0c31      	lsrs	r1, r6, #16
 800035a:	4680      	mov	r8, r0
 800035c:	4319      	orrs	r1, r3
 800035e:	428a      	cmp	r2, r1
 8000360:	d907      	bls.n	8000372 <__aeabi_ddiv+0x12e>
 8000362:	2301      	movs	r3, #1
 8000364:	425b      	negs	r3, r3
 8000366:	469c      	mov	ip, r3
 8000368:	1909      	adds	r1, r1, r4
 800036a:	44e0      	add	r8, ip
 800036c:	428c      	cmp	r4, r1
 800036e:	d800      	bhi.n	8000372 <__aeabi_ddiv+0x12e>
 8000370:	e201      	b.n	8000776 <__aeabi_ddiv+0x532>
 8000372:	1a88      	subs	r0, r1, r2
 8000374:	4649      	mov	r1, r9
 8000376:	f7ff ff5f 	bl	8000238 <__aeabi_uidivmod>
 800037a:	9a01      	ldr	r2, [sp, #4]
 800037c:	0436      	lsls	r6, r6, #16
 800037e:	4342      	muls	r2, r0
 8000380:	0409      	lsls	r1, r1, #16
 8000382:	0c36      	lsrs	r6, r6, #16
 8000384:	0003      	movs	r3, r0
 8000386:	430e      	orrs	r6, r1
 8000388:	42b2      	cmp	r2, r6
 800038a:	d904      	bls.n	8000396 <__aeabi_ddiv+0x152>
 800038c:	1936      	adds	r6, r6, r4
 800038e:	3b01      	subs	r3, #1
 8000390:	42b4      	cmp	r4, r6
 8000392:	d800      	bhi.n	8000396 <__aeabi_ddiv+0x152>
 8000394:	e1e9      	b.n	800076a <__aeabi_ddiv+0x526>
 8000396:	1ab0      	subs	r0, r6, r2
 8000398:	4642      	mov	r2, r8
 800039a:	9e00      	ldr	r6, [sp, #0]
 800039c:	0412      	lsls	r2, r2, #16
 800039e:	431a      	orrs	r2, r3
 80003a0:	0c33      	lsrs	r3, r6, #16
 80003a2:	001f      	movs	r7, r3
 80003a4:	0c11      	lsrs	r1, r2, #16
 80003a6:	4690      	mov	r8, r2
 80003a8:	9302      	str	r3, [sp, #8]
 80003aa:	0413      	lsls	r3, r2, #16
 80003ac:	0432      	lsls	r2, r6, #16
 80003ae:	0c16      	lsrs	r6, r2, #16
 80003b0:	0032      	movs	r2, r6
 80003b2:	0c1b      	lsrs	r3, r3, #16
 80003b4:	435a      	muls	r2, r3
 80003b6:	9603      	str	r6, [sp, #12]
 80003b8:	437b      	muls	r3, r7
 80003ba:	434e      	muls	r6, r1
 80003bc:	4379      	muls	r1, r7
 80003be:	0c17      	lsrs	r7, r2, #16
 80003c0:	46bc      	mov	ip, r7
 80003c2:	199b      	adds	r3, r3, r6
 80003c4:	4463      	add	r3, ip
 80003c6:	429e      	cmp	r6, r3
 80003c8:	d903      	bls.n	80003d2 <__aeabi_ddiv+0x18e>
 80003ca:	2680      	movs	r6, #128	; 0x80
 80003cc:	0276      	lsls	r6, r6, #9
 80003ce:	46b4      	mov	ip, r6
 80003d0:	4461      	add	r1, ip
 80003d2:	0c1e      	lsrs	r6, r3, #16
 80003d4:	1871      	adds	r1, r6, r1
 80003d6:	0416      	lsls	r6, r2, #16
 80003d8:	041b      	lsls	r3, r3, #16
 80003da:	0c36      	lsrs	r6, r6, #16
 80003dc:	199e      	adds	r6, r3, r6
 80003de:	4288      	cmp	r0, r1
 80003e0:	d302      	bcc.n	80003e8 <__aeabi_ddiv+0x1a4>
 80003e2:	d112      	bne.n	800040a <__aeabi_ddiv+0x1c6>
 80003e4:	42b5      	cmp	r5, r6
 80003e6:	d210      	bcs.n	800040a <__aeabi_ddiv+0x1c6>
 80003e8:	4643      	mov	r3, r8
 80003ea:	1e5a      	subs	r2, r3, #1
 80003ec:	9b00      	ldr	r3, [sp, #0]
 80003ee:	469c      	mov	ip, r3
 80003f0:	4465      	add	r5, ip
 80003f2:	001f      	movs	r7, r3
 80003f4:	429d      	cmp	r5, r3
 80003f6:	419b      	sbcs	r3, r3
 80003f8:	425b      	negs	r3, r3
 80003fa:	191b      	adds	r3, r3, r4
 80003fc:	18c0      	adds	r0, r0, r3
 80003fe:	4284      	cmp	r4, r0
 8000400:	d200      	bcs.n	8000404 <__aeabi_ddiv+0x1c0>
 8000402:	e19e      	b.n	8000742 <__aeabi_ddiv+0x4fe>
 8000404:	d100      	bne.n	8000408 <__aeabi_ddiv+0x1c4>
 8000406:	e199      	b.n	800073c <__aeabi_ddiv+0x4f8>
 8000408:	4690      	mov	r8, r2
 800040a:	1bae      	subs	r6, r5, r6
 800040c:	42b5      	cmp	r5, r6
 800040e:	41ad      	sbcs	r5, r5
 8000410:	1a40      	subs	r0, r0, r1
 8000412:	426d      	negs	r5, r5
 8000414:	1b40      	subs	r0, r0, r5
 8000416:	4284      	cmp	r4, r0
 8000418:	d100      	bne.n	800041c <__aeabi_ddiv+0x1d8>
 800041a:	e1d2      	b.n	80007c2 <__aeabi_ddiv+0x57e>
 800041c:	4649      	mov	r1, r9
 800041e:	f7ff ff0b 	bl	8000238 <__aeabi_uidivmod>
 8000422:	9a01      	ldr	r2, [sp, #4]
 8000424:	040b      	lsls	r3, r1, #16
 8000426:	4342      	muls	r2, r0
 8000428:	0c31      	lsrs	r1, r6, #16
 800042a:	0005      	movs	r5, r0
 800042c:	4319      	orrs	r1, r3
 800042e:	428a      	cmp	r2, r1
 8000430:	d900      	bls.n	8000434 <__aeabi_ddiv+0x1f0>
 8000432:	e16c      	b.n	800070e <__aeabi_ddiv+0x4ca>
 8000434:	1a88      	subs	r0, r1, r2
 8000436:	4649      	mov	r1, r9
 8000438:	f7ff fefe 	bl	8000238 <__aeabi_uidivmod>
 800043c:	9a01      	ldr	r2, [sp, #4]
 800043e:	0436      	lsls	r6, r6, #16
 8000440:	4342      	muls	r2, r0
 8000442:	0409      	lsls	r1, r1, #16
 8000444:	0c36      	lsrs	r6, r6, #16
 8000446:	0003      	movs	r3, r0
 8000448:	430e      	orrs	r6, r1
 800044a:	42b2      	cmp	r2, r6
 800044c:	d900      	bls.n	8000450 <__aeabi_ddiv+0x20c>
 800044e:	e153      	b.n	80006f8 <__aeabi_ddiv+0x4b4>
 8000450:	9803      	ldr	r0, [sp, #12]
 8000452:	1ab6      	subs	r6, r6, r2
 8000454:	0002      	movs	r2, r0
 8000456:	042d      	lsls	r5, r5, #16
 8000458:	431d      	orrs	r5, r3
 800045a:	9f02      	ldr	r7, [sp, #8]
 800045c:	042b      	lsls	r3, r5, #16
 800045e:	0c1b      	lsrs	r3, r3, #16
 8000460:	435a      	muls	r2, r3
 8000462:	437b      	muls	r3, r7
 8000464:	469c      	mov	ip, r3
 8000466:	0c29      	lsrs	r1, r5, #16
 8000468:	4348      	muls	r0, r1
 800046a:	0c13      	lsrs	r3, r2, #16
 800046c:	4484      	add	ip, r0
 800046e:	4463      	add	r3, ip
 8000470:	4379      	muls	r1, r7
 8000472:	4298      	cmp	r0, r3
 8000474:	d903      	bls.n	800047e <__aeabi_ddiv+0x23a>
 8000476:	2080      	movs	r0, #128	; 0x80
 8000478:	0240      	lsls	r0, r0, #9
 800047a:	4684      	mov	ip, r0
 800047c:	4461      	add	r1, ip
 800047e:	0c18      	lsrs	r0, r3, #16
 8000480:	0412      	lsls	r2, r2, #16
 8000482:	041b      	lsls	r3, r3, #16
 8000484:	0c12      	lsrs	r2, r2, #16
 8000486:	1840      	adds	r0, r0, r1
 8000488:	189b      	adds	r3, r3, r2
 800048a:	4286      	cmp	r6, r0
 800048c:	d200      	bcs.n	8000490 <__aeabi_ddiv+0x24c>
 800048e:	e100      	b.n	8000692 <__aeabi_ddiv+0x44e>
 8000490:	d100      	bne.n	8000494 <__aeabi_ddiv+0x250>
 8000492:	e0fb      	b.n	800068c <__aeabi_ddiv+0x448>
 8000494:	2301      	movs	r3, #1
 8000496:	431d      	orrs	r5, r3
 8000498:	4b49      	ldr	r3, [pc, #292]	; (80005c0 <__aeabi_ddiv+0x37c>)
 800049a:	445b      	add	r3, fp
 800049c:	2b00      	cmp	r3, #0
 800049e:	dc00      	bgt.n	80004a2 <__aeabi_ddiv+0x25e>
 80004a0:	e0aa      	b.n	80005f8 <__aeabi_ddiv+0x3b4>
 80004a2:	076a      	lsls	r2, r5, #29
 80004a4:	d000      	beq.n	80004a8 <__aeabi_ddiv+0x264>
 80004a6:	e13d      	b.n	8000724 <__aeabi_ddiv+0x4e0>
 80004a8:	08e9      	lsrs	r1, r5, #3
 80004aa:	4642      	mov	r2, r8
 80004ac:	01d2      	lsls	r2, r2, #7
 80004ae:	d506      	bpl.n	80004be <__aeabi_ddiv+0x27a>
 80004b0:	4642      	mov	r2, r8
 80004b2:	4b44      	ldr	r3, [pc, #272]	; (80005c4 <__aeabi_ddiv+0x380>)
 80004b4:	401a      	ands	r2, r3
 80004b6:	2380      	movs	r3, #128	; 0x80
 80004b8:	4690      	mov	r8, r2
 80004ba:	00db      	lsls	r3, r3, #3
 80004bc:	445b      	add	r3, fp
 80004be:	4a42      	ldr	r2, [pc, #264]	; (80005c8 <__aeabi_ddiv+0x384>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	dd00      	ble.n	80004c6 <__aeabi_ddiv+0x282>
 80004c4:	e723      	b.n	800030e <__aeabi_ddiv+0xca>
 80004c6:	4642      	mov	r2, r8
 80004c8:	055b      	lsls	r3, r3, #21
 80004ca:	0755      	lsls	r5, r2, #29
 80004cc:	0252      	lsls	r2, r2, #9
 80004ce:	430d      	orrs	r5, r1
 80004d0:	0b12      	lsrs	r2, r2, #12
 80004d2:	0d5b      	lsrs	r3, r3, #21
 80004d4:	e70d      	b.n	80002f2 <__aeabi_ddiv+0xae>
 80004d6:	4651      	mov	r1, sl
 80004d8:	4321      	orrs	r1, r4
 80004da:	d100      	bne.n	80004de <__aeabi_ddiv+0x29a>
 80004dc:	e07c      	b.n	80005d8 <__aeabi_ddiv+0x394>
 80004de:	2c00      	cmp	r4, #0
 80004e0:	d100      	bne.n	80004e4 <__aeabi_ddiv+0x2a0>
 80004e2:	e0fb      	b.n	80006dc <__aeabi_ddiv+0x498>
 80004e4:	0020      	movs	r0, r4
 80004e6:	f000 fcb9 	bl	8000e5c <__clzsi2>
 80004ea:	0002      	movs	r2, r0
 80004ec:	3a0b      	subs	r2, #11
 80004ee:	231d      	movs	r3, #29
 80004f0:	1a9b      	subs	r3, r3, r2
 80004f2:	4652      	mov	r2, sl
 80004f4:	0001      	movs	r1, r0
 80004f6:	40da      	lsrs	r2, r3
 80004f8:	4653      	mov	r3, sl
 80004fa:	3908      	subs	r1, #8
 80004fc:	408b      	lsls	r3, r1
 80004fe:	408c      	lsls	r4, r1
 8000500:	0019      	movs	r1, r3
 8000502:	4314      	orrs	r4, r2
 8000504:	4b31      	ldr	r3, [pc, #196]	; (80005cc <__aeabi_ddiv+0x388>)
 8000506:	4458      	add	r0, fp
 8000508:	469b      	mov	fp, r3
 800050a:	4483      	add	fp, r0
 800050c:	2000      	movs	r0, #0
 800050e:	e6d9      	b.n	80002c4 <__aeabi_ddiv+0x80>
 8000510:	0003      	movs	r3, r0
 8000512:	4323      	orrs	r3, r4
 8000514:	4698      	mov	r8, r3
 8000516:	d044      	beq.n	80005a2 <__aeabi_ddiv+0x35e>
 8000518:	2c00      	cmp	r4, #0
 800051a:	d100      	bne.n	800051e <__aeabi_ddiv+0x2da>
 800051c:	e0cf      	b.n	80006be <__aeabi_ddiv+0x47a>
 800051e:	0020      	movs	r0, r4
 8000520:	f000 fc9c 	bl	8000e5c <__clzsi2>
 8000524:	0001      	movs	r1, r0
 8000526:	0002      	movs	r2, r0
 8000528:	390b      	subs	r1, #11
 800052a:	231d      	movs	r3, #29
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	4649      	mov	r1, r9
 8000530:	0010      	movs	r0, r2
 8000532:	40d9      	lsrs	r1, r3
 8000534:	3808      	subs	r0, #8
 8000536:	4084      	lsls	r4, r0
 8000538:	000b      	movs	r3, r1
 800053a:	464d      	mov	r5, r9
 800053c:	4323      	orrs	r3, r4
 800053e:	4698      	mov	r8, r3
 8000540:	4085      	lsls	r5, r0
 8000542:	4b23      	ldr	r3, [pc, #140]	; (80005d0 <__aeabi_ddiv+0x38c>)
 8000544:	1a9b      	subs	r3, r3, r2
 8000546:	469b      	mov	fp, r3
 8000548:	2300      	movs	r3, #0
 800054a:	4699      	mov	r9, r3
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	e69e      	b.n	800028e <__aeabi_ddiv+0x4a>
 8000550:	0002      	movs	r2, r0
 8000552:	4322      	orrs	r2, r4
 8000554:	4690      	mov	r8, r2
 8000556:	d11d      	bne.n	8000594 <__aeabi_ddiv+0x350>
 8000558:	2208      	movs	r2, #8
 800055a:	469b      	mov	fp, r3
 800055c:	2302      	movs	r3, #2
 800055e:	2500      	movs	r5, #0
 8000560:	4691      	mov	r9, r2
 8000562:	9300      	str	r3, [sp, #0]
 8000564:	e693      	b.n	800028e <__aeabi_ddiv+0x4a>
 8000566:	4651      	mov	r1, sl
 8000568:	4321      	orrs	r1, r4
 800056a:	d109      	bne.n	8000580 <__aeabi_ddiv+0x33c>
 800056c:	2302      	movs	r3, #2
 800056e:	464a      	mov	r2, r9
 8000570:	431a      	orrs	r2, r3
 8000572:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <__aeabi_ddiv+0x390>)
 8000574:	4691      	mov	r9, r2
 8000576:	469c      	mov	ip, r3
 8000578:	2400      	movs	r4, #0
 800057a:	2002      	movs	r0, #2
 800057c:	44e3      	add	fp, ip
 800057e:	e6a1      	b.n	80002c4 <__aeabi_ddiv+0x80>
 8000580:	2303      	movs	r3, #3
 8000582:	464a      	mov	r2, r9
 8000584:	431a      	orrs	r2, r3
 8000586:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <__aeabi_ddiv+0x390>)
 8000588:	4691      	mov	r9, r2
 800058a:	469c      	mov	ip, r3
 800058c:	4651      	mov	r1, sl
 800058e:	2003      	movs	r0, #3
 8000590:	44e3      	add	fp, ip
 8000592:	e697      	b.n	80002c4 <__aeabi_ddiv+0x80>
 8000594:	220c      	movs	r2, #12
 8000596:	469b      	mov	fp, r3
 8000598:	2303      	movs	r3, #3
 800059a:	46a0      	mov	r8, r4
 800059c:	4691      	mov	r9, r2
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	e675      	b.n	800028e <__aeabi_ddiv+0x4a>
 80005a2:	2304      	movs	r3, #4
 80005a4:	4699      	mov	r9, r3
 80005a6:	2300      	movs	r3, #0
 80005a8:	469b      	mov	fp, r3
 80005aa:	3301      	adds	r3, #1
 80005ac:	2500      	movs	r5, #0
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	e66d      	b.n	800028e <__aeabi_ddiv+0x4a>
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	000007ff 	.word	0x000007ff
 80005b8:	fffffc01 	.word	0xfffffc01
 80005bc:	08004fb8 	.word	0x08004fb8
 80005c0:	000003ff 	.word	0x000003ff
 80005c4:	feffffff 	.word	0xfeffffff
 80005c8:	000007fe 	.word	0x000007fe
 80005cc:	000003f3 	.word	0x000003f3
 80005d0:	fffffc0d 	.word	0xfffffc0d
 80005d4:	fffff801 	.word	0xfffff801
 80005d8:	464a      	mov	r2, r9
 80005da:	2301      	movs	r3, #1
 80005dc:	431a      	orrs	r2, r3
 80005de:	4691      	mov	r9, r2
 80005e0:	2400      	movs	r4, #0
 80005e2:	2001      	movs	r0, #1
 80005e4:	e66e      	b.n	80002c4 <__aeabi_ddiv+0x80>
 80005e6:	2300      	movs	r3, #0
 80005e8:	2280      	movs	r2, #128	; 0x80
 80005ea:	469a      	mov	sl, r3
 80005ec:	2500      	movs	r5, #0
 80005ee:	4b88      	ldr	r3, [pc, #544]	; (8000810 <__aeabi_ddiv+0x5cc>)
 80005f0:	0312      	lsls	r2, r2, #12
 80005f2:	e67e      	b.n	80002f2 <__aeabi_ddiv+0xae>
 80005f4:	2501      	movs	r5, #1
 80005f6:	426d      	negs	r5, r5
 80005f8:	2201      	movs	r2, #1
 80005fa:	1ad2      	subs	r2, r2, r3
 80005fc:	2a38      	cmp	r2, #56	; 0x38
 80005fe:	dd00      	ble.n	8000602 <__aeabi_ddiv+0x3be>
 8000600:	e674      	b.n	80002ec <__aeabi_ddiv+0xa8>
 8000602:	2a1f      	cmp	r2, #31
 8000604:	dc00      	bgt.n	8000608 <__aeabi_ddiv+0x3c4>
 8000606:	e0bd      	b.n	8000784 <__aeabi_ddiv+0x540>
 8000608:	211f      	movs	r1, #31
 800060a:	4249      	negs	r1, r1
 800060c:	1acb      	subs	r3, r1, r3
 800060e:	4641      	mov	r1, r8
 8000610:	40d9      	lsrs	r1, r3
 8000612:	000b      	movs	r3, r1
 8000614:	2a20      	cmp	r2, #32
 8000616:	d004      	beq.n	8000622 <__aeabi_ddiv+0x3de>
 8000618:	4641      	mov	r1, r8
 800061a:	4a7e      	ldr	r2, [pc, #504]	; (8000814 <__aeabi_ddiv+0x5d0>)
 800061c:	445a      	add	r2, fp
 800061e:	4091      	lsls	r1, r2
 8000620:	430d      	orrs	r5, r1
 8000622:	0029      	movs	r1, r5
 8000624:	1e4a      	subs	r2, r1, #1
 8000626:	4191      	sbcs	r1, r2
 8000628:	4319      	orrs	r1, r3
 800062a:	2307      	movs	r3, #7
 800062c:	001d      	movs	r5, r3
 800062e:	2200      	movs	r2, #0
 8000630:	400d      	ands	r5, r1
 8000632:	420b      	tst	r3, r1
 8000634:	d100      	bne.n	8000638 <__aeabi_ddiv+0x3f4>
 8000636:	e0d0      	b.n	80007da <__aeabi_ddiv+0x596>
 8000638:	220f      	movs	r2, #15
 800063a:	2300      	movs	r3, #0
 800063c:	400a      	ands	r2, r1
 800063e:	2a04      	cmp	r2, #4
 8000640:	d100      	bne.n	8000644 <__aeabi_ddiv+0x400>
 8000642:	e0c7      	b.n	80007d4 <__aeabi_ddiv+0x590>
 8000644:	1d0a      	adds	r2, r1, #4
 8000646:	428a      	cmp	r2, r1
 8000648:	4189      	sbcs	r1, r1
 800064a:	4249      	negs	r1, r1
 800064c:	185b      	adds	r3, r3, r1
 800064e:	0011      	movs	r1, r2
 8000650:	021a      	lsls	r2, r3, #8
 8000652:	d400      	bmi.n	8000656 <__aeabi_ddiv+0x412>
 8000654:	e0be      	b.n	80007d4 <__aeabi_ddiv+0x590>
 8000656:	2301      	movs	r3, #1
 8000658:	2200      	movs	r2, #0
 800065a:	2500      	movs	r5, #0
 800065c:	e649      	b.n	80002f2 <__aeabi_ddiv+0xae>
 800065e:	2280      	movs	r2, #128	; 0x80
 8000660:	4643      	mov	r3, r8
 8000662:	0312      	lsls	r2, r2, #12
 8000664:	4213      	tst	r3, r2
 8000666:	d008      	beq.n	800067a <__aeabi_ddiv+0x436>
 8000668:	4214      	tst	r4, r2
 800066a:	d106      	bne.n	800067a <__aeabi_ddiv+0x436>
 800066c:	4322      	orrs	r2, r4
 800066e:	0312      	lsls	r2, r2, #12
 8000670:	46ba      	mov	sl, r7
 8000672:	000d      	movs	r5, r1
 8000674:	4b66      	ldr	r3, [pc, #408]	; (8000810 <__aeabi_ddiv+0x5cc>)
 8000676:	0b12      	lsrs	r2, r2, #12
 8000678:	e63b      	b.n	80002f2 <__aeabi_ddiv+0xae>
 800067a:	2280      	movs	r2, #128	; 0x80
 800067c:	4643      	mov	r3, r8
 800067e:	0312      	lsls	r2, r2, #12
 8000680:	431a      	orrs	r2, r3
 8000682:	0312      	lsls	r2, r2, #12
 8000684:	46b2      	mov	sl, r6
 8000686:	4b62      	ldr	r3, [pc, #392]	; (8000810 <__aeabi_ddiv+0x5cc>)
 8000688:	0b12      	lsrs	r2, r2, #12
 800068a:	e632      	b.n	80002f2 <__aeabi_ddiv+0xae>
 800068c:	2b00      	cmp	r3, #0
 800068e:	d100      	bne.n	8000692 <__aeabi_ddiv+0x44e>
 8000690:	e702      	b.n	8000498 <__aeabi_ddiv+0x254>
 8000692:	19a6      	adds	r6, r4, r6
 8000694:	1e6a      	subs	r2, r5, #1
 8000696:	42a6      	cmp	r6, r4
 8000698:	d200      	bcs.n	800069c <__aeabi_ddiv+0x458>
 800069a:	e089      	b.n	80007b0 <__aeabi_ddiv+0x56c>
 800069c:	4286      	cmp	r6, r0
 800069e:	d200      	bcs.n	80006a2 <__aeabi_ddiv+0x45e>
 80006a0:	e09f      	b.n	80007e2 <__aeabi_ddiv+0x59e>
 80006a2:	d100      	bne.n	80006a6 <__aeabi_ddiv+0x462>
 80006a4:	e0af      	b.n	8000806 <__aeabi_ddiv+0x5c2>
 80006a6:	0015      	movs	r5, r2
 80006a8:	e6f4      	b.n	8000494 <__aeabi_ddiv+0x250>
 80006aa:	42a9      	cmp	r1, r5
 80006ac:	d900      	bls.n	80006b0 <__aeabi_ddiv+0x46c>
 80006ae:	e63c      	b.n	800032a <__aeabi_ddiv+0xe6>
 80006b0:	4643      	mov	r3, r8
 80006b2:	07de      	lsls	r6, r3, #31
 80006b4:	0858      	lsrs	r0, r3, #1
 80006b6:	086b      	lsrs	r3, r5, #1
 80006b8:	431e      	orrs	r6, r3
 80006ba:	07ed      	lsls	r5, r5, #31
 80006bc:	e63c      	b.n	8000338 <__aeabi_ddiv+0xf4>
 80006be:	f000 fbcd 	bl	8000e5c <__clzsi2>
 80006c2:	0001      	movs	r1, r0
 80006c4:	0002      	movs	r2, r0
 80006c6:	3115      	adds	r1, #21
 80006c8:	3220      	adds	r2, #32
 80006ca:	291c      	cmp	r1, #28
 80006cc:	dc00      	bgt.n	80006d0 <__aeabi_ddiv+0x48c>
 80006ce:	e72c      	b.n	800052a <__aeabi_ddiv+0x2e6>
 80006d0:	464b      	mov	r3, r9
 80006d2:	3808      	subs	r0, #8
 80006d4:	4083      	lsls	r3, r0
 80006d6:	2500      	movs	r5, #0
 80006d8:	4698      	mov	r8, r3
 80006da:	e732      	b.n	8000542 <__aeabi_ddiv+0x2fe>
 80006dc:	f000 fbbe 	bl	8000e5c <__clzsi2>
 80006e0:	0003      	movs	r3, r0
 80006e2:	001a      	movs	r2, r3
 80006e4:	3215      	adds	r2, #21
 80006e6:	3020      	adds	r0, #32
 80006e8:	2a1c      	cmp	r2, #28
 80006ea:	dc00      	bgt.n	80006ee <__aeabi_ddiv+0x4aa>
 80006ec:	e6ff      	b.n	80004ee <__aeabi_ddiv+0x2aa>
 80006ee:	4654      	mov	r4, sl
 80006f0:	3b08      	subs	r3, #8
 80006f2:	2100      	movs	r1, #0
 80006f4:	409c      	lsls	r4, r3
 80006f6:	e705      	b.n	8000504 <__aeabi_ddiv+0x2c0>
 80006f8:	1936      	adds	r6, r6, r4
 80006fa:	3b01      	subs	r3, #1
 80006fc:	42b4      	cmp	r4, r6
 80006fe:	d900      	bls.n	8000702 <__aeabi_ddiv+0x4be>
 8000700:	e6a6      	b.n	8000450 <__aeabi_ddiv+0x20c>
 8000702:	42b2      	cmp	r2, r6
 8000704:	d800      	bhi.n	8000708 <__aeabi_ddiv+0x4c4>
 8000706:	e6a3      	b.n	8000450 <__aeabi_ddiv+0x20c>
 8000708:	1e83      	subs	r3, r0, #2
 800070a:	1936      	adds	r6, r6, r4
 800070c:	e6a0      	b.n	8000450 <__aeabi_ddiv+0x20c>
 800070e:	1909      	adds	r1, r1, r4
 8000710:	3d01      	subs	r5, #1
 8000712:	428c      	cmp	r4, r1
 8000714:	d900      	bls.n	8000718 <__aeabi_ddiv+0x4d4>
 8000716:	e68d      	b.n	8000434 <__aeabi_ddiv+0x1f0>
 8000718:	428a      	cmp	r2, r1
 800071a:	d800      	bhi.n	800071e <__aeabi_ddiv+0x4da>
 800071c:	e68a      	b.n	8000434 <__aeabi_ddiv+0x1f0>
 800071e:	1e85      	subs	r5, r0, #2
 8000720:	1909      	adds	r1, r1, r4
 8000722:	e687      	b.n	8000434 <__aeabi_ddiv+0x1f0>
 8000724:	220f      	movs	r2, #15
 8000726:	402a      	ands	r2, r5
 8000728:	2a04      	cmp	r2, #4
 800072a:	d100      	bne.n	800072e <__aeabi_ddiv+0x4ea>
 800072c:	e6bc      	b.n	80004a8 <__aeabi_ddiv+0x264>
 800072e:	1d29      	adds	r1, r5, #4
 8000730:	42a9      	cmp	r1, r5
 8000732:	41ad      	sbcs	r5, r5
 8000734:	426d      	negs	r5, r5
 8000736:	08c9      	lsrs	r1, r1, #3
 8000738:	44a8      	add	r8, r5
 800073a:	e6b6      	b.n	80004aa <__aeabi_ddiv+0x266>
 800073c:	42af      	cmp	r7, r5
 800073e:	d900      	bls.n	8000742 <__aeabi_ddiv+0x4fe>
 8000740:	e662      	b.n	8000408 <__aeabi_ddiv+0x1c4>
 8000742:	4281      	cmp	r1, r0
 8000744:	d804      	bhi.n	8000750 <__aeabi_ddiv+0x50c>
 8000746:	d000      	beq.n	800074a <__aeabi_ddiv+0x506>
 8000748:	e65e      	b.n	8000408 <__aeabi_ddiv+0x1c4>
 800074a:	42ae      	cmp	r6, r5
 800074c:	d800      	bhi.n	8000750 <__aeabi_ddiv+0x50c>
 800074e:	e65b      	b.n	8000408 <__aeabi_ddiv+0x1c4>
 8000750:	2302      	movs	r3, #2
 8000752:	425b      	negs	r3, r3
 8000754:	469c      	mov	ip, r3
 8000756:	9b00      	ldr	r3, [sp, #0]
 8000758:	44e0      	add	r8, ip
 800075a:	469c      	mov	ip, r3
 800075c:	4465      	add	r5, ip
 800075e:	429d      	cmp	r5, r3
 8000760:	419b      	sbcs	r3, r3
 8000762:	425b      	negs	r3, r3
 8000764:	191b      	adds	r3, r3, r4
 8000766:	18c0      	adds	r0, r0, r3
 8000768:	e64f      	b.n	800040a <__aeabi_ddiv+0x1c6>
 800076a:	42b2      	cmp	r2, r6
 800076c:	d800      	bhi.n	8000770 <__aeabi_ddiv+0x52c>
 800076e:	e612      	b.n	8000396 <__aeabi_ddiv+0x152>
 8000770:	1e83      	subs	r3, r0, #2
 8000772:	1936      	adds	r6, r6, r4
 8000774:	e60f      	b.n	8000396 <__aeabi_ddiv+0x152>
 8000776:	428a      	cmp	r2, r1
 8000778:	d800      	bhi.n	800077c <__aeabi_ddiv+0x538>
 800077a:	e5fa      	b.n	8000372 <__aeabi_ddiv+0x12e>
 800077c:	1e83      	subs	r3, r0, #2
 800077e:	4698      	mov	r8, r3
 8000780:	1909      	adds	r1, r1, r4
 8000782:	e5f6      	b.n	8000372 <__aeabi_ddiv+0x12e>
 8000784:	4b24      	ldr	r3, [pc, #144]	; (8000818 <__aeabi_ddiv+0x5d4>)
 8000786:	0028      	movs	r0, r5
 8000788:	445b      	add	r3, fp
 800078a:	4641      	mov	r1, r8
 800078c:	409d      	lsls	r5, r3
 800078e:	4099      	lsls	r1, r3
 8000790:	40d0      	lsrs	r0, r2
 8000792:	1e6b      	subs	r3, r5, #1
 8000794:	419d      	sbcs	r5, r3
 8000796:	4643      	mov	r3, r8
 8000798:	4301      	orrs	r1, r0
 800079a:	4329      	orrs	r1, r5
 800079c:	40d3      	lsrs	r3, r2
 800079e:	074a      	lsls	r2, r1, #29
 80007a0:	d100      	bne.n	80007a4 <__aeabi_ddiv+0x560>
 80007a2:	e755      	b.n	8000650 <__aeabi_ddiv+0x40c>
 80007a4:	220f      	movs	r2, #15
 80007a6:	400a      	ands	r2, r1
 80007a8:	2a04      	cmp	r2, #4
 80007aa:	d000      	beq.n	80007ae <__aeabi_ddiv+0x56a>
 80007ac:	e74a      	b.n	8000644 <__aeabi_ddiv+0x400>
 80007ae:	e74f      	b.n	8000650 <__aeabi_ddiv+0x40c>
 80007b0:	0015      	movs	r5, r2
 80007b2:	4286      	cmp	r6, r0
 80007b4:	d000      	beq.n	80007b8 <__aeabi_ddiv+0x574>
 80007b6:	e66d      	b.n	8000494 <__aeabi_ddiv+0x250>
 80007b8:	9a00      	ldr	r2, [sp, #0]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d000      	beq.n	80007c0 <__aeabi_ddiv+0x57c>
 80007be:	e669      	b.n	8000494 <__aeabi_ddiv+0x250>
 80007c0:	e66a      	b.n	8000498 <__aeabi_ddiv+0x254>
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <__aeabi_ddiv+0x5d8>)
 80007c4:	445b      	add	r3, fp
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	dc00      	bgt.n	80007cc <__aeabi_ddiv+0x588>
 80007ca:	e713      	b.n	80005f4 <__aeabi_ddiv+0x3b0>
 80007cc:	2501      	movs	r5, #1
 80007ce:	2100      	movs	r1, #0
 80007d0:	44a8      	add	r8, r5
 80007d2:	e66a      	b.n	80004aa <__aeabi_ddiv+0x266>
 80007d4:	075d      	lsls	r5, r3, #29
 80007d6:	025b      	lsls	r3, r3, #9
 80007d8:	0b1a      	lsrs	r2, r3, #12
 80007da:	08c9      	lsrs	r1, r1, #3
 80007dc:	2300      	movs	r3, #0
 80007de:	430d      	orrs	r5, r1
 80007e0:	e587      	b.n	80002f2 <__aeabi_ddiv+0xae>
 80007e2:	9900      	ldr	r1, [sp, #0]
 80007e4:	3d02      	subs	r5, #2
 80007e6:	004a      	lsls	r2, r1, #1
 80007e8:	428a      	cmp	r2, r1
 80007ea:	41bf      	sbcs	r7, r7
 80007ec:	427f      	negs	r7, r7
 80007ee:	193f      	adds	r7, r7, r4
 80007f0:	19f6      	adds	r6, r6, r7
 80007f2:	9200      	str	r2, [sp, #0]
 80007f4:	e7dd      	b.n	80007b2 <__aeabi_ddiv+0x56e>
 80007f6:	2280      	movs	r2, #128	; 0x80
 80007f8:	4643      	mov	r3, r8
 80007fa:	0312      	lsls	r2, r2, #12
 80007fc:	431a      	orrs	r2, r3
 80007fe:	0312      	lsls	r2, r2, #12
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <__aeabi_ddiv+0x5cc>)
 8000802:	0b12      	lsrs	r2, r2, #12
 8000804:	e575      	b.n	80002f2 <__aeabi_ddiv+0xae>
 8000806:	9900      	ldr	r1, [sp, #0]
 8000808:	4299      	cmp	r1, r3
 800080a:	d3ea      	bcc.n	80007e2 <__aeabi_ddiv+0x59e>
 800080c:	0015      	movs	r5, r2
 800080e:	e7d3      	b.n	80007b8 <__aeabi_ddiv+0x574>
 8000810:	000007ff 	.word	0x000007ff
 8000814:	0000043e 	.word	0x0000043e
 8000818:	0000041e 	.word	0x0000041e
 800081c:	000003ff 	.word	0x000003ff

08000820 <__aeabi_dmul>:
 8000820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000822:	4645      	mov	r5, r8
 8000824:	46de      	mov	lr, fp
 8000826:	4657      	mov	r7, sl
 8000828:	464e      	mov	r6, r9
 800082a:	b5e0      	push	{r5, r6, r7, lr}
 800082c:	001f      	movs	r7, r3
 800082e:	030b      	lsls	r3, r1, #12
 8000830:	0b1b      	lsrs	r3, r3, #12
 8000832:	469b      	mov	fp, r3
 8000834:	004d      	lsls	r5, r1, #1
 8000836:	0fcb      	lsrs	r3, r1, #31
 8000838:	0004      	movs	r4, r0
 800083a:	4691      	mov	r9, r2
 800083c:	4698      	mov	r8, r3
 800083e:	b087      	sub	sp, #28
 8000840:	0d6d      	lsrs	r5, r5, #21
 8000842:	d100      	bne.n	8000846 <__aeabi_dmul+0x26>
 8000844:	e1cd      	b.n	8000be2 <__aeabi_dmul+0x3c2>
 8000846:	4bce      	ldr	r3, [pc, #824]	; (8000b80 <__aeabi_dmul+0x360>)
 8000848:	429d      	cmp	r5, r3
 800084a:	d100      	bne.n	800084e <__aeabi_dmul+0x2e>
 800084c:	e1e9      	b.n	8000c22 <__aeabi_dmul+0x402>
 800084e:	465a      	mov	r2, fp
 8000850:	0f43      	lsrs	r3, r0, #29
 8000852:	00d2      	lsls	r2, r2, #3
 8000854:	4313      	orrs	r3, r2
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	0412      	lsls	r2, r2, #16
 800085a:	431a      	orrs	r2, r3
 800085c:	00c3      	lsls	r3, r0, #3
 800085e:	469a      	mov	sl, r3
 8000860:	4bc8      	ldr	r3, [pc, #800]	; (8000b84 <__aeabi_dmul+0x364>)
 8000862:	4693      	mov	fp, r2
 8000864:	469c      	mov	ip, r3
 8000866:	2300      	movs	r3, #0
 8000868:	2600      	movs	r6, #0
 800086a:	4465      	add	r5, ip
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	033c      	lsls	r4, r7, #12
 8000870:	007b      	lsls	r3, r7, #1
 8000872:	4648      	mov	r0, r9
 8000874:	0b24      	lsrs	r4, r4, #12
 8000876:	0d5b      	lsrs	r3, r3, #21
 8000878:	0fff      	lsrs	r7, r7, #31
 800087a:	2b00      	cmp	r3, #0
 800087c:	d100      	bne.n	8000880 <__aeabi_dmul+0x60>
 800087e:	e189      	b.n	8000b94 <__aeabi_dmul+0x374>
 8000880:	4abf      	ldr	r2, [pc, #764]	; (8000b80 <__aeabi_dmul+0x360>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d019      	beq.n	80008ba <__aeabi_dmul+0x9a>
 8000886:	0f42      	lsrs	r2, r0, #29
 8000888:	00e4      	lsls	r4, r4, #3
 800088a:	4322      	orrs	r2, r4
 800088c:	2480      	movs	r4, #128	; 0x80
 800088e:	0424      	lsls	r4, r4, #16
 8000890:	4314      	orrs	r4, r2
 8000892:	4abc      	ldr	r2, [pc, #752]	; (8000b84 <__aeabi_dmul+0x364>)
 8000894:	2100      	movs	r1, #0
 8000896:	4694      	mov	ip, r2
 8000898:	4642      	mov	r2, r8
 800089a:	4463      	add	r3, ip
 800089c:	195b      	adds	r3, r3, r5
 800089e:	9301      	str	r3, [sp, #4]
 80008a0:	9b01      	ldr	r3, [sp, #4]
 80008a2:	407a      	eors	r2, r7
 80008a4:	3301      	adds	r3, #1
 80008a6:	00c0      	lsls	r0, r0, #3
 80008a8:	b2d2      	uxtb	r2, r2
 80008aa:	9302      	str	r3, [sp, #8]
 80008ac:	2e0a      	cmp	r6, #10
 80008ae:	dd1c      	ble.n	80008ea <__aeabi_dmul+0xca>
 80008b0:	003a      	movs	r2, r7
 80008b2:	2e0b      	cmp	r6, #11
 80008b4:	d05e      	beq.n	8000974 <__aeabi_dmul+0x154>
 80008b6:	4647      	mov	r7, r8
 80008b8:	e056      	b.n	8000968 <__aeabi_dmul+0x148>
 80008ba:	4649      	mov	r1, r9
 80008bc:	4bb0      	ldr	r3, [pc, #704]	; (8000b80 <__aeabi_dmul+0x360>)
 80008be:	4321      	orrs	r1, r4
 80008c0:	18eb      	adds	r3, r5, r3
 80008c2:	9301      	str	r3, [sp, #4]
 80008c4:	2900      	cmp	r1, #0
 80008c6:	d12a      	bne.n	800091e <__aeabi_dmul+0xfe>
 80008c8:	2080      	movs	r0, #128	; 0x80
 80008ca:	2202      	movs	r2, #2
 80008cc:	0100      	lsls	r0, r0, #4
 80008ce:	002b      	movs	r3, r5
 80008d0:	4684      	mov	ip, r0
 80008d2:	4316      	orrs	r6, r2
 80008d4:	4642      	mov	r2, r8
 80008d6:	4463      	add	r3, ip
 80008d8:	407a      	eors	r2, r7
 80008da:	b2d2      	uxtb	r2, r2
 80008dc:	9302      	str	r3, [sp, #8]
 80008de:	2e0a      	cmp	r6, #10
 80008e0:	dd00      	ble.n	80008e4 <__aeabi_dmul+0xc4>
 80008e2:	e231      	b.n	8000d48 <__aeabi_dmul+0x528>
 80008e4:	2000      	movs	r0, #0
 80008e6:	2400      	movs	r4, #0
 80008e8:	2102      	movs	r1, #2
 80008ea:	2e02      	cmp	r6, #2
 80008ec:	dc26      	bgt.n	800093c <__aeabi_dmul+0x11c>
 80008ee:	3e01      	subs	r6, #1
 80008f0:	2e01      	cmp	r6, #1
 80008f2:	d852      	bhi.n	800099a <__aeabi_dmul+0x17a>
 80008f4:	2902      	cmp	r1, #2
 80008f6:	d04c      	beq.n	8000992 <__aeabi_dmul+0x172>
 80008f8:	2901      	cmp	r1, #1
 80008fa:	d000      	beq.n	80008fe <__aeabi_dmul+0xde>
 80008fc:	e118      	b.n	8000b30 <__aeabi_dmul+0x310>
 80008fe:	2300      	movs	r3, #0
 8000900:	2400      	movs	r4, #0
 8000902:	2500      	movs	r5, #0
 8000904:	051b      	lsls	r3, r3, #20
 8000906:	4323      	orrs	r3, r4
 8000908:	07d2      	lsls	r2, r2, #31
 800090a:	4313      	orrs	r3, r2
 800090c:	0028      	movs	r0, r5
 800090e:	0019      	movs	r1, r3
 8000910:	b007      	add	sp, #28
 8000912:	bcf0      	pop	{r4, r5, r6, r7}
 8000914:	46bb      	mov	fp, r7
 8000916:	46b2      	mov	sl, r6
 8000918:	46a9      	mov	r9, r5
 800091a:	46a0      	mov	r8, r4
 800091c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800091e:	2180      	movs	r1, #128	; 0x80
 8000920:	2203      	movs	r2, #3
 8000922:	0109      	lsls	r1, r1, #4
 8000924:	002b      	movs	r3, r5
 8000926:	468c      	mov	ip, r1
 8000928:	4316      	orrs	r6, r2
 800092a:	4642      	mov	r2, r8
 800092c:	4463      	add	r3, ip
 800092e:	407a      	eors	r2, r7
 8000930:	b2d2      	uxtb	r2, r2
 8000932:	9302      	str	r3, [sp, #8]
 8000934:	2e0a      	cmp	r6, #10
 8000936:	dd00      	ble.n	800093a <__aeabi_dmul+0x11a>
 8000938:	e228      	b.n	8000d8c <__aeabi_dmul+0x56c>
 800093a:	2103      	movs	r1, #3
 800093c:	2501      	movs	r5, #1
 800093e:	40b5      	lsls	r5, r6
 8000940:	46ac      	mov	ip, r5
 8000942:	26a6      	movs	r6, #166	; 0xa6
 8000944:	4663      	mov	r3, ip
 8000946:	00f6      	lsls	r6, r6, #3
 8000948:	4035      	ands	r5, r6
 800094a:	4233      	tst	r3, r6
 800094c:	d10b      	bne.n	8000966 <__aeabi_dmul+0x146>
 800094e:	2690      	movs	r6, #144	; 0x90
 8000950:	00b6      	lsls	r6, r6, #2
 8000952:	4233      	tst	r3, r6
 8000954:	d118      	bne.n	8000988 <__aeabi_dmul+0x168>
 8000956:	3eb9      	subs	r6, #185	; 0xb9
 8000958:	3eff      	subs	r6, #255	; 0xff
 800095a:	421e      	tst	r6, r3
 800095c:	d01d      	beq.n	800099a <__aeabi_dmul+0x17a>
 800095e:	46a3      	mov	fp, r4
 8000960:	4682      	mov	sl, r0
 8000962:	9100      	str	r1, [sp, #0]
 8000964:	e000      	b.n	8000968 <__aeabi_dmul+0x148>
 8000966:	0017      	movs	r7, r2
 8000968:	9900      	ldr	r1, [sp, #0]
 800096a:	003a      	movs	r2, r7
 800096c:	2902      	cmp	r1, #2
 800096e:	d010      	beq.n	8000992 <__aeabi_dmul+0x172>
 8000970:	465c      	mov	r4, fp
 8000972:	4650      	mov	r0, sl
 8000974:	2903      	cmp	r1, #3
 8000976:	d1bf      	bne.n	80008f8 <__aeabi_dmul+0xd8>
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	031b      	lsls	r3, r3, #12
 800097c:	431c      	orrs	r4, r3
 800097e:	0324      	lsls	r4, r4, #12
 8000980:	0005      	movs	r5, r0
 8000982:	4b7f      	ldr	r3, [pc, #508]	; (8000b80 <__aeabi_dmul+0x360>)
 8000984:	0b24      	lsrs	r4, r4, #12
 8000986:	e7bd      	b.n	8000904 <__aeabi_dmul+0xe4>
 8000988:	2480      	movs	r4, #128	; 0x80
 800098a:	2200      	movs	r2, #0
 800098c:	4b7c      	ldr	r3, [pc, #496]	; (8000b80 <__aeabi_dmul+0x360>)
 800098e:	0324      	lsls	r4, r4, #12
 8000990:	e7b8      	b.n	8000904 <__aeabi_dmul+0xe4>
 8000992:	2400      	movs	r4, #0
 8000994:	2500      	movs	r5, #0
 8000996:	4b7a      	ldr	r3, [pc, #488]	; (8000b80 <__aeabi_dmul+0x360>)
 8000998:	e7b4      	b.n	8000904 <__aeabi_dmul+0xe4>
 800099a:	4653      	mov	r3, sl
 800099c:	041e      	lsls	r6, r3, #16
 800099e:	0c36      	lsrs	r6, r6, #16
 80009a0:	0c1f      	lsrs	r7, r3, #16
 80009a2:	0033      	movs	r3, r6
 80009a4:	0c01      	lsrs	r1, r0, #16
 80009a6:	0400      	lsls	r0, r0, #16
 80009a8:	0c00      	lsrs	r0, r0, #16
 80009aa:	4343      	muls	r3, r0
 80009ac:	4698      	mov	r8, r3
 80009ae:	0003      	movs	r3, r0
 80009b0:	437b      	muls	r3, r7
 80009b2:	4699      	mov	r9, r3
 80009b4:	0033      	movs	r3, r6
 80009b6:	434b      	muls	r3, r1
 80009b8:	469c      	mov	ip, r3
 80009ba:	4643      	mov	r3, r8
 80009bc:	000d      	movs	r5, r1
 80009be:	0c1b      	lsrs	r3, r3, #16
 80009c0:	469a      	mov	sl, r3
 80009c2:	437d      	muls	r5, r7
 80009c4:	44cc      	add	ip, r9
 80009c6:	44d4      	add	ip, sl
 80009c8:	9500      	str	r5, [sp, #0]
 80009ca:	45e1      	cmp	r9, ip
 80009cc:	d904      	bls.n	80009d8 <__aeabi_dmul+0x1b8>
 80009ce:	2380      	movs	r3, #128	; 0x80
 80009d0:	025b      	lsls	r3, r3, #9
 80009d2:	4699      	mov	r9, r3
 80009d4:	444d      	add	r5, r9
 80009d6:	9500      	str	r5, [sp, #0]
 80009d8:	4663      	mov	r3, ip
 80009da:	0c1b      	lsrs	r3, r3, #16
 80009dc:	001d      	movs	r5, r3
 80009de:	4663      	mov	r3, ip
 80009e0:	041b      	lsls	r3, r3, #16
 80009e2:	469c      	mov	ip, r3
 80009e4:	4643      	mov	r3, r8
 80009e6:	041b      	lsls	r3, r3, #16
 80009e8:	0c1b      	lsrs	r3, r3, #16
 80009ea:	4698      	mov	r8, r3
 80009ec:	4663      	mov	r3, ip
 80009ee:	4443      	add	r3, r8
 80009f0:	9303      	str	r3, [sp, #12]
 80009f2:	0c23      	lsrs	r3, r4, #16
 80009f4:	4698      	mov	r8, r3
 80009f6:	0033      	movs	r3, r6
 80009f8:	0424      	lsls	r4, r4, #16
 80009fa:	0c24      	lsrs	r4, r4, #16
 80009fc:	4363      	muls	r3, r4
 80009fe:	469c      	mov	ip, r3
 8000a00:	0023      	movs	r3, r4
 8000a02:	437b      	muls	r3, r7
 8000a04:	4699      	mov	r9, r3
 8000a06:	4643      	mov	r3, r8
 8000a08:	435e      	muls	r6, r3
 8000a0a:	435f      	muls	r7, r3
 8000a0c:	444e      	add	r6, r9
 8000a0e:	4663      	mov	r3, ip
 8000a10:	46b2      	mov	sl, r6
 8000a12:	0c1e      	lsrs	r6, r3, #16
 8000a14:	4456      	add	r6, sl
 8000a16:	45b1      	cmp	r9, r6
 8000a18:	d903      	bls.n	8000a22 <__aeabi_dmul+0x202>
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	025b      	lsls	r3, r3, #9
 8000a1e:	4699      	mov	r9, r3
 8000a20:	444f      	add	r7, r9
 8000a22:	0c33      	lsrs	r3, r6, #16
 8000a24:	4699      	mov	r9, r3
 8000a26:	003b      	movs	r3, r7
 8000a28:	444b      	add	r3, r9
 8000a2a:	9305      	str	r3, [sp, #20]
 8000a2c:	4663      	mov	r3, ip
 8000a2e:	46ac      	mov	ip, r5
 8000a30:	041f      	lsls	r7, r3, #16
 8000a32:	0c3f      	lsrs	r7, r7, #16
 8000a34:	0436      	lsls	r6, r6, #16
 8000a36:	19f6      	adds	r6, r6, r7
 8000a38:	44b4      	add	ip, r6
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	9304      	str	r3, [sp, #16]
 8000a3e:	465b      	mov	r3, fp
 8000a40:	0c1b      	lsrs	r3, r3, #16
 8000a42:	469c      	mov	ip, r3
 8000a44:	465b      	mov	r3, fp
 8000a46:	041f      	lsls	r7, r3, #16
 8000a48:	0c3f      	lsrs	r7, r7, #16
 8000a4a:	003b      	movs	r3, r7
 8000a4c:	4343      	muls	r3, r0
 8000a4e:	4699      	mov	r9, r3
 8000a50:	4663      	mov	r3, ip
 8000a52:	4343      	muls	r3, r0
 8000a54:	469a      	mov	sl, r3
 8000a56:	464b      	mov	r3, r9
 8000a58:	4660      	mov	r0, ip
 8000a5a:	0c1b      	lsrs	r3, r3, #16
 8000a5c:	469b      	mov	fp, r3
 8000a5e:	4348      	muls	r0, r1
 8000a60:	4379      	muls	r1, r7
 8000a62:	4451      	add	r1, sl
 8000a64:	4459      	add	r1, fp
 8000a66:	458a      	cmp	sl, r1
 8000a68:	d903      	bls.n	8000a72 <__aeabi_dmul+0x252>
 8000a6a:	2380      	movs	r3, #128	; 0x80
 8000a6c:	025b      	lsls	r3, r3, #9
 8000a6e:	469a      	mov	sl, r3
 8000a70:	4450      	add	r0, sl
 8000a72:	0c0b      	lsrs	r3, r1, #16
 8000a74:	469a      	mov	sl, r3
 8000a76:	464b      	mov	r3, r9
 8000a78:	041b      	lsls	r3, r3, #16
 8000a7a:	0c1b      	lsrs	r3, r3, #16
 8000a7c:	4699      	mov	r9, r3
 8000a7e:	003b      	movs	r3, r7
 8000a80:	4363      	muls	r3, r4
 8000a82:	0409      	lsls	r1, r1, #16
 8000a84:	4645      	mov	r5, r8
 8000a86:	4449      	add	r1, r9
 8000a88:	4699      	mov	r9, r3
 8000a8a:	4663      	mov	r3, ip
 8000a8c:	435c      	muls	r4, r3
 8000a8e:	436b      	muls	r3, r5
 8000a90:	469c      	mov	ip, r3
 8000a92:	464b      	mov	r3, r9
 8000a94:	0c1b      	lsrs	r3, r3, #16
 8000a96:	4698      	mov	r8, r3
 8000a98:	436f      	muls	r7, r5
 8000a9a:	193f      	adds	r7, r7, r4
 8000a9c:	4447      	add	r7, r8
 8000a9e:	4450      	add	r0, sl
 8000aa0:	42bc      	cmp	r4, r7
 8000aa2:	d903      	bls.n	8000aac <__aeabi_dmul+0x28c>
 8000aa4:	2380      	movs	r3, #128	; 0x80
 8000aa6:	025b      	lsls	r3, r3, #9
 8000aa8:	4698      	mov	r8, r3
 8000aaa:	44c4      	add	ip, r8
 8000aac:	9b04      	ldr	r3, [sp, #16]
 8000aae:	9d00      	ldr	r5, [sp, #0]
 8000ab0:	4698      	mov	r8, r3
 8000ab2:	4445      	add	r5, r8
 8000ab4:	42b5      	cmp	r5, r6
 8000ab6:	41b6      	sbcs	r6, r6
 8000ab8:	4273      	negs	r3, r6
 8000aba:	4698      	mov	r8, r3
 8000abc:	464b      	mov	r3, r9
 8000abe:	041e      	lsls	r6, r3, #16
 8000ac0:	9b05      	ldr	r3, [sp, #20]
 8000ac2:	043c      	lsls	r4, r7, #16
 8000ac4:	4699      	mov	r9, r3
 8000ac6:	0c36      	lsrs	r6, r6, #16
 8000ac8:	19a4      	adds	r4, r4, r6
 8000aca:	444c      	add	r4, r9
 8000acc:	46a1      	mov	r9, r4
 8000ace:	4683      	mov	fp, r0
 8000ad0:	186e      	adds	r6, r5, r1
 8000ad2:	44c1      	add	r9, r8
 8000ad4:	428e      	cmp	r6, r1
 8000ad6:	4189      	sbcs	r1, r1
 8000ad8:	44cb      	add	fp, r9
 8000ada:	465d      	mov	r5, fp
 8000adc:	4249      	negs	r1, r1
 8000ade:	186d      	adds	r5, r5, r1
 8000ae0:	429c      	cmp	r4, r3
 8000ae2:	41a4      	sbcs	r4, r4
 8000ae4:	45c1      	cmp	r9, r8
 8000ae6:	419b      	sbcs	r3, r3
 8000ae8:	4583      	cmp	fp, r0
 8000aea:	4180      	sbcs	r0, r0
 8000aec:	428d      	cmp	r5, r1
 8000aee:	4189      	sbcs	r1, r1
 8000af0:	425b      	negs	r3, r3
 8000af2:	4264      	negs	r4, r4
 8000af4:	431c      	orrs	r4, r3
 8000af6:	4240      	negs	r0, r0
 8000af8:	9b03      	ldr	r3, [sp, #12]
 8000afa:	4249      	negs	r1, r1
 8000afc:	4301      	orrs	r1, r0
 8000afe:	0270      	lsls	r0, r6, #9
 8000b00:	0c3f      	lsrs	r7, r7, #16
 8000b02:	4318      	orrs	r0, r3
 8000b04:	19e4      	adds	r4, r4, r7
 8000b06:	1e47      	subs	r7, r0, #1
 8000b08:	41b8      	sbcs	r0, r7
 8000b0a:	1864      	adds	r4, r4, r1
 8000b0c:	4464      	add	r4, ip
 8000b0e:	0df6      	lsrs	r6, r6, #23
 8000b10:	0261      	lsls	r1, r4, #9
 8000b12:	4330      	orrs	r0, r6
 8000b14:	0dec      	lsrs	r4, r5, #23
 8000b16:	026e      	lsls	r6, r5, #9
 8000b18:	430c      	orrs	r4, r1
 8000b1a:	4330      	orrs	r0, r6
 8000b1c:	01c9      	lsls	r1, r1, #7
 8000b1e:	d400      	bmi.n	8000b22 <__aeabi_dmul+0x302>
 8000b20:	e0f1      	b.n	8000d06 <__aeabi_dmul+0x4e6>
 8000b22:	2101      	movs	r1, #1
 8000b24:	0843      	lsrs	r3, r0, #1
 8000b26:	4001      	ands	r1, r0
 8000b28:	430b      	orrs	r3, r1
 8000b2a:	07e0      	lsls	r0, r4, #31
 8000b2c:	4318      	orrs	r0, r3
 8000b2e:	0864      	lsrs	r4, r4, #1
 8000b30:	4915      	ldr	r1, [pc, #84]	; (8000b88 <__aeabi_dmul+0x368>)
 8000b32:	9b02      	ldr	r3, [sp, #8]
 8000b34:	468c      	mov	ip, r1
 8000b36:	4463      	add	r3, ip
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	dc00      	bgt.n	8000b3e <__aeabi_dmul+0x31e>
 8000b3c:	e097      	b.n	8000c6e <__aeabi_dmul+0x44e>
 8000b3e:	0741      	lsls	r1, r0, #29
 8000b40:	d009      	beq.n	8000b56 <__aeabi_dmul+0x336>
 8000b42:	210f      	movs	r1, #15
 8000b44:	4001      	ands	r1, r0
 8000b46:	2904      	cmp	r1, #4
 8000b48:	d005      	beq.n	8000b56 <__aeabi_dmul+0x336>
 8000b4a:	1d01      	adds	r1, r0, #4
 8000b4c:	4281      	cmp	r1, r0
 8000b4e:	4180      	sbcs	r0, r0
 8000b50:	4240      	negs	r0, r0
 8000b52:	1824      	adds	r4, r4, r0
 8000b54:	0008      	movs	r0, r1
 8000b56:	01e1      	lsls	r1, r4, #7
 8000b58:	d506      	bpl.n	8000b68 <__aeabi_dmul+0x348>
 8000b5a:	2180      	movs	r1, #128	; 0x80
 8000b5c:	00c9      	lsls	r1, r1, #3
 8000b5e:	468c      	mov	ip, r1
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <__aeabi_dmul+0x36c>)
 8000b62:	401c      	ands	r4, r3
 8000b64:	9b02      	ldr	r3, [sp, #8]
 8000b66:	4463      	add	r3, ip
 8000b68:	4909      	ldr	r1, [pc, #36]	; (8000b90 <__aeabi_dmul+0x370>)
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	dd00      	ble.n	8000b70 <__aeabi_dmul+0x350>
 8000b6e:	e710      	b.n	8000992 <__aeabi_dmul+0x172>
 8000b70:	0761      	lsls	r1, r4, #29
 8000b72:	08c5      	lsrs	r5, r0, #3
 8000b74:	0264      	lsls	r4, r4, #9
 8000b76:	055b      	lsls	r3, r3, #21
 8000b78:	430d      	orrs	r5, r1
 8000b7a:	0b24      	lsrs	r4, r4, #12
 8000b7c:	0d5b      	lsrs	r3, r3, #21
 8000b7e:	e6c1      	b.n	8000904 <__aeabi_dmul+0xe4>
 8000b80:	000007ff 	.word	0x000007ff
 8000b84:	fffffc01 	.word	0xfffffc01
 8000b88:	000003ff 	.word	0x000003ff
 8000b8c:	feffffff 	.word	0xfeffffff
 8000b90:	000007fe 	.word	0x000007fe
 8000b94:	464b      	mov	r3, r9
 8000b96:	4323      	orrs	r3, r4
 8000b98:	d059      	beq.n	8000c4e <__aeabi_dmul+0x42e>
 8000b9a:	2c00      	cmp	r4, #0
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_dmul+0x380>
 8000b9e:	e0a3      	b.n	8000ce8 <__aeabi_dmul+0x4c8>
 8000ba0:	0020      	movs	r0, r4
 8000ba2:	f000 f95b 	bl	8000e5c <__clzsi2>
 8000ba6:	0001      	movs	r1, r0
 8000ba8:	0003      	movs	r3, r0
 8000baa:	390b      	subs	r1, #11
 8000bac:	221d      	movs	r2, #29
 8000bae:	1a52      	subs	r2, r2, r1
 8000bb0:	4649      	mov	r1, r9
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	40d1      	lsrs	r1, r2
 8000bb6:	464a      	mov	r2, r9
 8000bb8:	3808      	subs	r0, #8
 8000bba:	4082      	lsls	r2, r0
 8000bbc:	4084      	lsls	r4, r0
 8000bbe:	0010      	movs	r0, r2
 8000bc0:	430c      	orrs	r4, r1
 8000bc2:	4a74      	ldr	r2, [pc, #464]	; (8000d94 <__aeabi_dmul+0x574>)
 8000bc4:	1aeb      	subs	r3, r5, r3
 8000bc6:	4694      	mov	ip, r2
 8000bc8:	4642      	mov	r2, r8
 8000bca:	4463      	add	r3, ip
 8000bcc:	9301      	str	r3, [sp, #4]
 8000bce:	9b01      	ldr	r3, [sp, #4]
 8000bd0:	407a      	eors	r2, r7
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	9302      	str	r3, [sp, #8]
 8000bda:	2e0a      	cmp	r6, #10
 8000bdc:	dd00      	ble.n	8000be0 <__aeabi_dmul+0x3c0>
 8000bde:	e667      	b.n	80008b0 <__aeabi_dmul+0x90>
 8000be0:	e683      	b.n	80008ea <__aeabi_dmul+0xca>
 8000be2:	465b      	mov	r3, fp
 8000be4:	4303      	orrs	r3, r0
 8000be6:	469a      	mov	sl, r3
 8000be8:	d02a      	beq.n	8000c40 <__aeabi_dmul+0x420>
 8000bea:	465b      	mov	r3, fp
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d06d      	beq.n	8000ccc <__aeabi_dmul+0x4ac>
 8000bf0:	4658      	mov	r0, fp
 8000bf2:	f000 f933 	bl	8000e5c <__clzsi2>
 8000bf6:	0001      	movs	r1, r0
 8000bf8:	0003      	movs	r3, r0
 8000bfa:	390b      	subs	r1, #11
 8000bfc:	221d      	movs	r2, #29
 8000bfe:	1a52      	subs	r2, r2, r1
 8000c00:	0021      	movs	r1, r4
 8000c02:	0018      	movs	r0, r3
 8000c04:	465d      	mov	r5, fp
 8000c06:	40d1      	lsrs	r1, r2
 8000c08:	3808      	subs	r0, #8
 8000c0a:	4085      	lsls	r5, r0
 8000c0c:	000a      	movs	r2, r1
 8000c0e:	4084      	lsls	r4, r0
 8000c10:	432a      	orrs	r2, r5
 8000c12:	4693      	mov	fp, r2
 8000c14:	46a2      	mov	sl, r4
 8000c16:	4d5f      	ldr	r5, [pc, #380]	; (8000d94 <__aeabi_dmul+0x574>)
 8000c18:	2600      	movs	r6, #0
 8000c1a:	1aed      	subs	r5, r5, r3
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	e625      	b.n	800086e <__aeabi_dmul+0x4e>
 8000c22:	465b      	mov	r3, fp
 8000c24:	4303      	orrs	r3, r0
 8000c26:	469a      	mov	sl, r3
 8000c28:	d105      	bne.n	8000c36 <__aeabi_dmul+0x416>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	469b      	mov	fp, r3
 8000c2e:	3302      	adds	r3, #2
 8000c30:	2608      	movs	r6, #8
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	e61b      	b.n	800086e <__aeabi_dmul+0x4e>
 8000c36:	2303      	movs	r3, #3
 8000c38:	4682      	mov	sl, r0
 8000c3a:	260c      	movs	r6, #12
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	e616      	b.n	800086e <__aeabi_dmul+0x4e>
 8000c40:	2300      	movs	r3, #0
 8000c42:	469b      	mov	fp, r3
 8000c44:	3301      	adds	r3, #1
 8000c46:	2604      	movs	r6, #4
 8000c48:	2500      	movs	r5, #0
 8000c4a:	9300      	str	r3, [sp, #0]
 8000c4c:	e60f      	b.n	800086e <__aeabi_dmul+0x4e>
 8000c4e:	4642      	mov	r2, r8
 8000c50:	3301      	adds	r3, #1
 8000c52:	9501      	str	r5, [sp, #4]
 8000c54:	431e      	orrs	r6, r3
 8000c56:	9b01      	ldr	r3, [sp, #4]
 8000c58:	407a      	eors	r2, r7
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	2400      	movs	r4, #0
 8000c5e:	2000      	movs	r0, #0
 8000c60:	2101      	movs	r1, #1
 8000c62:	b2d2      	uxtb	r2, r2
 8000c64:	9302      	str	r3, [sp, #8]
 8000c66:	2e0a      	cmp	r6, #10
 8000c68:	dd00      	ble.n	8000c6c <__aeabi_dmul+0x44c>
 8000c6a:	e621      	b.n	80008b0 <__aeabi_dmul+0x90>
 8000c6c:	e63d      	b.n	80008ea <__aeabi_dmul+0xca>
 8000c6e:	2101      	movs	r1, #1
 8000c70:	1ac9      	subs	r1, r1, r3
 8000c72:	2938      	cmp	r1, #56	; 0x38
 8000c74:	dd00      	ble.n	8000c78 <__aeabi_dmul+0x458>
 8000c76:	e642      	b.n	80008fe <__aeabi_dmul+0xde>
 8000c78:	291f      	cmp	r1, #31
 8000c7a:	dd47      	ble.n	8000d0c <__aeabi_dmul+0x4ec>
 8000c7c:	261f      	movs	r6, #31
 8000c7e:	0025      	movs	r5, r4
 8000c80:	4276      	negs	r6, r6
 8000c82:	1af3      	subs	r3, r6, r3
 8000c84:	40dd      	lsrs	r5, r3
 8000c86:	002b      	movs	r3, r5
 8000c88:	2920      	cmp	r1, #32
 8000c8a:	d005      	beq.n	8000c98 <__aeabi_dmul+0x478>
 8000c8c:	4942      	ldr	r1, [pc, #264]	; (8000d98 <__aeabi_dmul+0x578>)
 8000c8e:	9d02      	ldr	r5, [sp, #8]
 8000c90:	468c      	mov	ip, r1
 8000c92:	4465      	add	r5, ip
 8000c94:	40ac      	lsls	r4, r5
 8000c96:	4320      	orrs	r0, r4
 8000c98:	1e41      	subs	r1, r0, #1
 8000c9a:	4188      	sbcs	r0, r1
 8000c9c:	4318      	orrs	r0, r3
 8000c9e:	2307      	movs	r3, #7
 8000ca0:	001d      	movs	r5, r3
 8000ca2:	2400      	movs	r4, #0
 8000ca4:	4005      	ands	r5, r0
 8000ca6:	4203      	tst	r3, r0
 8000ca8:	d04a      	beq.n	8000d40 <__aeabi_dmul+0x520>
 8000caa:	230f      	movs	r3, #15
 8000cac:	2400      	movs	r4, #0
 8000cae:	4003      	ands	r3, r0
 8000cb0:	2b04      	cmp	r3, #4
 8000cb2:	d042      	beq.n	8000d3a <__aeabi_dmul+0x51a>
 8000cb4:	1d03      	adds	r3, r0, #4
 8000cb6:	4283      	cmp	r3, r0
 8000cb8:	4180      	sbcs	r0, r0
 8000cba:	4240      	negs	r0, r0
 8000cbc:	1824      	adds	r4, r4, r0
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	0223      	lsls	r3, r4, #8
 8000cc2:	d53a      	bpl.n	8000d3a <__aeabi_dmul+0x51a>
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	2400      	movs	r4, #0
 8000cc8:	2500      	movs	r5, #0
 8000cca:	e61b      	b.n	8000904 <__aeabi_dmul+0xe4>
 8000ccc:	f000 f8c6 	bl	8000e5c <__clzsi2>
 8000cd0:	0001      	movs	r1, r0
 8000cd2:	0003      	movs	r3, r0
 8000cd4:	3115      	adds	r1, #21
 8000cd6:	3320      	adds	r3, #32
 8000cd8:	291c      	cmp	r1, #28
 8000cda:	dd8f      	ble.n	8000bfc <__aeabi_dmul+0x3dc>
 8000cdc:	3808      	subs	r0, #8
 8000cde:	2200      	movs	r2, #0
 8000ce0:	4084      	lsls	r4, r0
 8000ce2:	4692      	mov	sl, r2
 8000ce4:	46a3      	mov	fp, r4
 8000ce6:	e796      	b.n	8000c16 <__aeabi_dmul+0x3f6>
 8000ce8:	f000 f8b8 	bl	8000e5c <__clzsi2>
 8000cec:	0001      	movs	r1, r0
 8000cee:	0003      	movs	r3, r0
 8000cf0:	3115      	adds	r1, #21
 8000cf2:	3320      	adds	r3, #32
 8000cf4:	291c      	cmp	r1, #28
 8000cf6:	dc00      	bgt.n	8000cfa <__aeabi_dmul+0x4da>
 8000cf8:	e758      	b.n	8000bac <__aeabi_dmul+0x38c>
 8000cfa:	0002      	movs	r2, r0
 8000cfc:	464c      	mov	r4, r9
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	2000      	movs	r0, #0
 8000d02:	4094      	lsls	r4, r2
 8000d04:	e75d      	b.n	8000bc2 <__aeabi_dmul+0x3a2>
 8000d06:	9b01      	ldr	r3, [sp, #4]
 8000d08:	9302      	str	r3, [sp, #8]
 8000d0a:	e711      	b.n	8000b30 <__aeabi_dmul+0x310>
 8000d0c:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <__aeabi_dmul+0x57c>)
 8000d0e:	0026      	movs	r6, r4
 8000d10:	469c      	mov	ip, r3
 8000d12:	0003      	movs	r3, r0
 8000d14:	9d02      	ldr	r5, [sp, #8]
 8000d16:	40cb      	lsrs	r3, r1
 8000d18:	4465      	add	r5, ip
 8000d1a:	40ae      	lsls	r6, r5
 8000d1c:	431e      	orrs	r6, r3
 8000d1e:	0003      	movs	r3, r0
 8000d20:	40ab      	lsls	r3, r5
 8000d22:	1e58      	subs	r0, r3, #1
 8000d24:	4183      	sbcs	r3, r0
 8000d26:	0030      	movs	r0, r6
 8000d28:	4318      	orrs	r0, r3
 8000d2a:	40cc      	lsrs	r4, r1
 8000d2c:	0743      	lsls	r3, r0, #29
 8000d2e:	d0c7      	beq.n	8000cc0 <__aeabi_dmul+0x4a0>
 8000d30:	230f      	movs	r3, #15
 8000d32:	4003      	ands	r3, r0
 8000d34:	2b04      	cmp	r3, #4
 8000d36:	d1bd      	bne.n	8000cb4 <__aeabi_dmul+0x494>
 8000d38:	e7c2      	b.n	8000cc0 <__aeabi_dmul+0x4a0>
 8000d3a:	0765      	lsls	r5, r4, #29
 8000d3c:	0264      	lsls	r4, r4, #9
 8000d3e:	0b24      	lsrs	r4, r4, #12
 8000d40:	08c0      	lsrs	r0, r0, #3
 8000d42:	2300      	movs	r3, #0
 8000d44:	4305      	orrs	r5, r0
 8000d46:	e5dd      	b.n	8000904 <__aeabi_dmul+0xe4>
 8000d48:	2500      	movs	r5, #0
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	2e0f      	cmp	r6, #15
 8000d4e:	d10c      	bne.n	8000d6a <__aeabi_dmul+0x54a>
 8000d50:	2480      	movs	r4, #128	; 0x80
 8000d52:	465b      	mov	r3, fp
 8000d54:	0324      	lsls	r4, r4, #12
 8000d56:	4223      	tst	r3, r4
 8000d58:	d00e      	beq.n	8000d78 <__aeabi_dmul+0x558>
 8000d5a:	4221      	tst	r1, r4
 8000d5c:	d10c      	bne.n	8000d78 <__aeabi_dmul+0x558>
 8000d5e:	430c      	orrs	r4, r1
 8000d60:	0324      	lsls	r4, r4, #12
 8000d62:	003a      	movs	r2, r7
 8000d64:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <__aeabi_dmul+0x580>)
 8000d66:	0b24      	lsrs	r4, r4, #12
 8000d68:	e5cc      	b.n	8000904 <__aeabi_dmul+0xe4>
 8000d6a:	2e0b      	cmp	r6, #11
 8000d6c:	d000      	beq.n	8000d70 <__aeabi_dmul+0x550>
 8000d6e:	e5a2      	b.n	80008b6 <__aeabi_dmul+0x96>
 8000d70:	468b      	mov	fp, r1
 8000d72:	46aa      	mov	sl, r5
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	e5f7      	b.n	8000968 <__aeabi_dmul+0x148>
 8000d78:	2480      	movs	r4, #128	; 0x80
 8000d7a:	465b      	mov	r3, fp
 8000d7c:	0324      	lsls	r4, r4, #12
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	0324      	lsls	r4, r4, #12
 8000d82:	4642      	mov	r2, r8
 8000d84:	4655      	mov	r5, sl
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <__aeabi_dmul+0x580>)
 8000d88:	0b24      	lsrs	r4, r4, #12
 8000d8a:	e5bb      	b.n	8000904 <__aeabi_dmul+0xe4>
 8000d8c:	464d      	mov	r5, r9
 8000d8e:	0021      	movs	r1, r4
 8000d90:	2303      	movs	r3, #3
 8000d92:	e7db      	b.n	8000d4c <__aeabi_dmul+0x52c>
 8000d94:	fffffc0d 	.word	0xfffffc0d
 8000d98:	0000043e 	.word	0x0000043e
 8000d9c:	0000041e 	.word	0x0000041e
 8000da0:	000007ff 	.word	0x000007ff

08000da4 <__aeabi_d2iz>:
 8000da4:	000a      	movs	r2, r1
 8000da6:	b530      	push	{r4, r5, lr}
 8000da8:	4c13      	ldr	r4, [pc, #76]	; (8000df8 <__aeabi_d2iz+0x54>)
 8000daa:	0053      	lsls	r3, r2, #1
 8000dac:	0309      	lsls	r1, r1, #12
 8000dae:	0005      	movs	r5, r0
 8000db0:	0b09      	lsrs	r1, r1, #12
 8000db2:	2000      	movs	r0, #0
 8000db4:	0d5b      	lsrs	r3, r3, #21
 8000db6:	0fd2      	lsrs	r2, r2, #31
 8000db8:	42a3      	cmp	r3, r4
 8000dba:	dd04      	ble.n	8000dc6 <__aeabi_d2iz+0x22>
 8000dbc:	480f      	ldr	r0, [pc, #60]	; (8000dfc <__aeabi_d2iz+0x58>)
 8000dbe:	4283      	cmp	r3, r0
 8000dc0:	dd02      	ble.n	8000dc8 <__aeabi_d2iz+0x24>
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <__aeabi_d2iz+0x5c>)
 8000dc4:	18d0      	adds	r0, r2, r3
 8000dc6:	bd30      	pop	{r4, r5, pc}
 8000dc8:	2080      	movs	r0, #128	; 0x80
 8000dca:	0340      	lsls	r0, r0, #13
 8000dcc:	4301      	orrs	r1, r0
 8000dce:	480d      	ldr	r0, [pc, #52]	; (8000e04 <__aeabi_d2iz+0x60>)
 8000dd0:	1ac0      	subs	r0, r0, r3
 8000dd2:	281f      	cmp	r0, #31
 8000dd4:	dd08      	ble.n	8000de8 <__aeabi_d2iz+0x44>
 8000dd6:	480c      	ldr	r0, [pc, #48]	; (8000e08 <__aeabi_d2iz+0x64>)
 8000dd8:	1ac3      	subs	r3, r0, r3
 8000dda:	40d9      	lsrs	r1, r3
 8000ddc:	000b      	movs	r3, r1
 8000dde:	4258      	negs	r0, r3
 8000de0:	2a00      	cmp	r2, #0
 8000de2:	d1f0      	bne.n	8000dc6 <__aeabi_d2iz+0x22>
 8000de4:	0018      	movs	r0, r3
 8000de6:	e7ee      	b.n	8000dc6 <__aeabi_d2iz+0x22>
 8000de8:	4c08      	ldr	r4, [pc, #32]	; (8000e0c <__aeabi_d2iz+0x68>)
 8000dea:	40c5      	lsrs	r5, r0
 8000dec:	46a4      	mov	ip, r4
 8000dee:	4463      	add	r3, ip
 8000df0:	4099      	lsls	r1, r3
 8000df2:	000b      	movs	r3, r1
 8000df4:	432b      	orrs	r3, r5
 8000df6:	e7f2      	b.n	8000dde <__aeabi_d2iz+0x3a>
 8000df8:	000003fe 	.word	0x000003fe
 8000dfc:	0000041d 	.word	0x0000041d
 8000e00:	7fffffff 	.word	0x7fffffff
 8000e04:	00000433 	.word	0x00000433
 8000e08:	00000413 	.word	0x00000413
 8000e0c:	fffffbed 	.word	0xfffffbed

08000e10 <__aeabi_ui2d>:
 8000e10:	b510      	push	{r4, lr}
 8000e12:	1e04      	subs	r4, r0, #0
 8000e14:	d010      	beq.n	8000e38 <__aeabi_ui2d+0x28>
 8000e16:	f000 f821 	bl	8000e5c <__clzsi2>
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <__aeabi_ui2d+0x48>)
 8000e1c:	1a1b      	subs	r3, r3, r0
 8000e1e:	280a      	cmp	r0, #10
 8000e20:	dc11      	bgt.n	8000e46 <__aeabi_ui2d+0x36>
 8000e22:	220b      	movs	r2, #11
 8000e24:	0021      	movs	r1, r4
 8000e26:	1a12      	subs	r2, r2, r0
 8000e28:	40d1      	lsrs	r1, r2
 8000e2a:	3015      	adds	r0, #21
 8000e2c:	030a      	lsls	r2, r1, #12
 8000e2e:	055b      	lsls	r3, r3, #21
 8000e30:	4084      	lsls	r4, r0
 8000e32:	0b12      	lsrs	r2, r2, #12
 8000e34:	0d5b      	lsrs	r3, r3, #21
 8000e36:	e001      	b.n	8000e3c <__aeabi_ui2d+0x2c>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	051b      	lsls	r3, r3, #20
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	0020      	movs	r0, r4
 8000e42:	0019      	movs	r1, r3
 8000e44:	bd10      	pop	{r4, pc}
 8000e46:	0022      	movs	r2, r4
 8000e48:	380b      	subs	r0, #11
 8000e4a:	4082      	lsls	r2, r0
 8000e4c:	055b      	lsls	r3, r3, #21
 8000e4e:	0312      	lsls	r2, r2, #12
 8000e50:	2400      	movs	r4, #0
 8000e52:	0b12      	lsrs	r2, r2, #12
 8000e54:	0d5b      	lsrs	r3, r3, #21
 8000e56:	e7f1      	b.n	8000e3c <__aeabi_ui2d+0x2c>
 8000e58:	0000041e 	.word	0x0000041e

08000e5c <__clzsi2>:
 8000e5c:	211c      	movs	r1, #28
 8000e5e:	2301      	movs	r3, #1
 8000e60:	041b      	lsls	r3, r3, #16
 8000e62:	4298      	cmp	r0, r3
 8000e64:	d301      	bcc.n	8000e6a <__clzsi2+0xe>
 8000e66:	0c00      	lsrs	r0, r0, #16
 8000e68:	3910      	subs	r1, #16
 8000e6a:	0a1b      	lsrs	r3, r3, #8
 8000e6c:	4298      	cmp	r0, r3
 8000e6e:	d301      	bcc.n	8000e74 <__clzsi2+0x18>
 8000e70:	0a00      	lsrs	r0, r0, #8
 8000e72:	3908      	subs	r1, #8
 8000e74:	091b      	lsrs	r3, r3, #4
 8000e76:	4298      	cmp	r0, r3
 8000e78:	d301      	bcc.n	8000e7e <__clzsi2+0x22>
 8000e7a:	0900      	lsrs	r0, r0, #4
 8000e7c:	3904      	subs	r1, #4
 8000e7e:	a202      	add	r2, pc, #8	; (adr r2, 8000e88 <__clzsi2+0x2c>)
 8000e80:	5c10      	ldrb	r0, [r2, r0]
 8000e82:	1840      	adds	r0, r0, r1
 8000e84:	4770      	bx	lr
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	02020304 	.word	0x02020304
 8000e8c:	01010101 	.word	0x01010101
	...

08000e98 <delay_us>:

#define MINIMUM_DISTANCE 15

// Let's write the callback function
void delay_us (uint16_t us)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	0002      	movs	r2, r0
 8000ea0:	1dbb      	adds	r3, r7, #6
 8000ea2:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <delay_us+0x30>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <delay_us+0x30>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eb4:	1dbb      	adds	r3, r7, #6
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d3f8      	bcc.n	8000eae <delay_us+0x16>
}
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b002      	add	sp, #8
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	2000011c 	.word	0x2000011c

08000ecc <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000ed0:	23a0      	movs	r3, #160	; 0xa0
 8000ed2:	05db      	lsls	r3, r3, #23
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2102      	movs	r1, #2
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f001 f8c8 	bl	800206e <HAL_GPIO_WritePin>
	delay_us(10);
 8000ede:	200a      	movs	r0, #10
 8000ee0:	f7ff ffda 	bl	8000e98 <delay_us>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000ee4:	23a0      	movs	r3, #160	; 0xa0
 8000ee6:	05db      	lsls	r3, r3, #23
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2102      	movs	r1, #2
 8000eec:	0018      	movs	r0, r3
 8000eee:	f001 f8be 	bl	800206e <HAL_GPIO_WritePin>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HCSR04_Read+0x48>)
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f001 ff8e 	bl	8002e18 <HAL_TIM_IC_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <HCSR04_Read+0x48>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2200      	movs	r2, #0
 8000f02:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Base_Start(&htim3);
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <HCSR04_Read+0x4c>)
 8000f06:	0018      	movs	r0, r3
 8000f08:	f001 fee0 	bl	8002ccc <HAL_TIM_Base_Start>
}
 8000f0c:	46c0      	nop			; (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	200000d0 	.word	0x200000d0
 8000f18:	2000011c 	.word	0x2000011c

08000f1c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b087      	sub	sp, #28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7f1b      	ldrb	r3, [r3, #28]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d000      	beq.n	8000f2e <HAL_TIM_IC_CaptureCallback+0x12>
 8000f2c:	e0a4      	b.n	8001078 <HAL_TIM_IC_CaptureCallback+0x15c>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000f2e:	4b54      	ldr	r3, [pc, #336]	; (8001080 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d113      	bne.n	8000f5e <HAL_TIM_IC_CaptureCallback+0x42>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2100      	movs	r1, #0
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f002 fbcc 	bl	80036d8 <HAL_TIM_ReadCapturedValue>
 8000f40:	0002      	movs	r2, r0
 8000f42:	4b50      	ldr	r3, [pc, #320]	; (8001084 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000f44:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000f46:	4b4e      	ldr	r3, [pc, #312]	; (8001080 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			htim1.Instance->CCER |= TIM_CCER_CC1P;
 8000f4c:	4b4e      	ldr	r3, [pc, #312]	; (8001088 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6a1a      	ldr	r2, [r3, #32]
 8000f52:	4b4d      	ldr	r3, [pc, #308]	; (8001088 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2102      	movs	r1, #2
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	621a      	str	r2, [r3, #32]
			char str[10];
			sprintf(str, "%d\r\n", Distance);
			HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 10);
		}
	}
}
 8000f5c:	e08c      	b.n	8001078 <HAL_TIM_IC_CaptureCallback+0x15c>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000f5e:	4b48      	ldr	r3, [pc, #288]	; (8001080 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d000      	beq.n	8000f68 <HAL_TIM_IC_CaptureCallback+0x4c>
 8000f66:	e087      	b.n	8001078 <HAL_TIM_IC_CaptureCallback+0x15c>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f002 fbb3 	bl	80036d8 <HAL_TIM_ReadCapturedValue>
 8000f72:	0002      	movs	r2, r0
 8000f74:	4b45      	ldr	r3, [pc, #276]	; (800108c <HAL_TIM_IC_CaptureCallback+0x170>)
 8000f76:	601a      	str	r2, [r3, #0]
			if (IC_Val2 > IC_Val1)
 8000f78:	4b44      	ldr	r3, [pc, #272]	; (800108c <HAL_TIM_IC_CaptureCallback+0x170>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b41      	ldr	r3, [pc, #260]	; (8001084 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d907      	bls.n	8000f94 <HAL_TIM_IC_CaptureCallback+0x78>
				Difference = IC_Val2-IC_Val1;
 8000f84:	4b41      	ldr	r3, [pc, #260]	; (800108c <HAL_TIM_IC_CaptureCallback+0x170>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b3e      	ldr	r3, [pc, #248]	; (8001084 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	1ad2      	subs	r2, r2, r3
 8000f8e:	4b40      	ldr	r3, [pc, #256]	; (8001090 <HAL_TIM_IC_CaptureCallback+0x174>)
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	e00e      	b.n	8000fb2 <HAL_TIM_IC_CaptureCallback+0x96>
			else if (IC_Val1 > IC_Val2)
 8000f94:	4b3b      	ldr	r3, [pc, #236]	; (8001084 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b3c      	ldr	r3, [pc, #240]	; (800108c <HAL_TIM_IC_CaptureCallback+0x170>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d908      	bls.n	8000fb2 <HAL_TIM_IC_CaptureCallback+0x96>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000fa0:	4b3a      	ldr	r3, [pc, #232]	; (800108c <HAL_TIM_IC_CaptureCallback+0x170>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b37      	ldr	r3, [pc, #220]	; (8001084 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	4a3a      	ldr	r2, [pc, #232]	; (8001094 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000fac:	189a      	adds	r2, r3, r2
 8000fae:	4b38      	ldr	r3, [pc, #224]	; (8001090 <HAL_TIM_IC_CaptureCallback+0x174>)
 8000fb0:	601a      	str	r2, [r3, #0]
			Distance = Difference * .034/2;
 8000fb2:	4b37      	ldr	r3, [pc, #220]	; (8001090 <HAL_TIM_IC_CaptureCallback+0x174>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f7ff ff2a 	bl	8000e10 <__aeabi_ui2d>
 8000fbc:	4a36      	ldr	r2, [pc, #216]	; (8001098 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8000fbe:	4b37      	ldr	r3, [pc, #220]	; (800109c <HAL_TIM_IC_CaptureCallback+0x180>)
 8000fc0:	f7ff fc2e 	bl	8000820 <__aeabi_dmul>
 8000fc4:	0002      	movs	r2, r0
 8000fc6:	000b      	movs	r3, r1
 8000fc8:	0010      	movs	r0, r2
 8000fca:	0019      	movs	r1, r3
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	05db      	lsls	r3, r3, #23
 8000fd2:	f7ff f937 	bl	8000244 <__aeabi_ddiv>
 8000fd6:	0002      	movs	r2, r0
 8000fd8:	000b      	movs	r3, r1
 8000fda:	0010      	movs	r0, r2
 8000fdc:	0019      	movs	r1, r3
 8000fde:	f7ff fee1 	bl	8000da4 <__aeabi_d2iz>
 8000fe2:	0003      	movs	r3, r0
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	4b2e      	ldr	r3, [pc, #184]	; (80010a0 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000fe8:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000fea:	4b25      	ldr	r3, [pc, #148]	; (8001080 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
			htim1.Instance->CCER &= ~TIM_CCER_CC1P;
 8000ff0:	4b25      	ldr	r3, [pc, #148]	; (8001088 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6a1a      	ldr	r2, [r3, #32]
 8000ff6:	4b24      	ldr	r3, [pc, #144]	; (8001088 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2102      	movs	r1, #2
 8000ffc:	438a      	bics	r2, r1
 8000ffe:	621a      	str	r2, [r3, #32]
			HAL_TIM_IC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001000:	4b21      	ldr	r3, [pc, #132]	; (8001088 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001002:	2100      	movs	r1, #0
 8001004:	0018      	movs	r0, r3
 8001006:	f002 f831 	bl	800306c <HAL_TIM_IC_Stop_IT>
			if (__HAL_TIM_GET_COUNTER(htim) > 12000){
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001010:	4a24      	ldr	r2, [pc, #144]	; (80010a4 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d903      	bls.n	800101e <HAL_TIM_IC_CaptureCallback+0x102>
				Distance = -1;
 8001016:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001018:	2201      	movs	r2, #1
 800101a:	4252      	negs	r2, r2
 800101c:	801a      	strh	r2, [r3, #0]
			if (Distance > 400){
 800101e:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001020:	2200      	movs	r2, #0
 8001022:	5e9a      	ldrsh	r2, [r3, r2]
 8001024:	23c8      	movs	r3, #200	; 0xc8
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	429a      	cmp	r2, r3
 800102a:	dd03      	ble.n	8001034 <HAL_TIM_IC_CaptureCallback+0x118>
				Distance = -1;
 800102c:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <HAL_TIM_IC_CaptureCallback+0x184>)
 800102e:	2201      	movs	r2, #1
 8001030:	4252      	negs	r2, r2
 8001032:	801a      	strh	r2, [r3, #0]
			if (Distance != -1){
 8001034:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001036:	2200      	movs	r2, #0
 8001038:	5e9b      	ldrsh	r3, [r3, r2]
 800103a:	3301      	adds	r3, #1
 800103c:	d007      	beq.n	800104e <HAL_TIM_IC_CaptureCallback+0x132>
				if (Distance <= MINIMUM_DISTANCE){
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001040:	2200      	movs	r2, #0
 8001042:	5e9b      	ldrsh	r3, [r3, r2]
 8001044:	2b0f      	cmp	r3, #15
 8001046:	dc02      	bgt.n	800104e <HAL_TIM_IC_CaptureCallback+0x132>
					LedEnabled = 0;
 8001048:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <HAL_TIM_IC_CaptureCallback+0x18c>)
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
			sprintf(str, "%d\r\n", Distance);
 800104e:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001050:	2200      	movs	r2, #0
 8001052:	5e9b      	ldrsh	r3, [r3, r2]
 8001054:	001a      	movs	r2, r3
 8001056:	4915      	ldr	r1, [pc, #84]	; (80010ac <HAL_TIM_IC_CaptureCallback+0x190>)
 8001058:	240c      	movs	r4, #12
 800105a:	193b      	adds	r3, r7, r4
 800105c:	0018      	movs	r0, r3
 800105e:	f003 faf5 	bl	800464c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 10);
 8001062:	193b      	adds	r3, r7, r4
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff f84f 	bl	8000108 <strlen>
 800106a:	0003      	movs	r3, r0
 800106c:	b29a      	uxth	r2, r3
 800106e:	1939      	adds	r1, r7, r4
 8001070:	480f      	ldr	r0, [pc, #60]	; (80010b0 <HAL_TIM_IC_CaptureCallback+0x194>)
 8001072:	230a      	movs	r3, #10
 8001074:	f002 fe9a 	bl	8003dac <HAL_UART_Transmit>
}
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	b007      	add	sp, #28
 800107e:	bd90      	pop	{r4, r7, pc}
 8001080:	20000208 	.word	0x20000208
 8001084:	200001fc 	.word	0x200001fc
 8001088:	200000d0 	.word	0x200000d0
 800108c:	20000200 	.word	0x20000200
 8001090:	20000204 	.word	0x20000204
 8001094:	0000ffff 	.word	0x0000ffff
 8001098:	b020c49c 	.word	0xb020c49c
 800109c:	3fa16872 	.word	0x3fa16872
 80010a0:	2000020a 	.word	0x2000020a
 80010a4:	00002ee0 	.word	0x00002ee0
 80010a8:	20000000 	.word	0x20000000
 80010ac:	08004fb0 	.word	0x08004fb0
 80010b0:	20000168 	.word	0x20000168

080010b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b8:	f000 fccb 	bl	8001a52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010bc:	f000 f890 	bl	80011e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c0:	f000 fa1e 	bl	8001500 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010c4:	f000 f8d0 	bl	8001268 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80010c8:	f000 f9e6 	bl	8001498 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80010cc:	f000 f90c 	bl	80012e8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80010d0:	f000 f98c 	bl	80013ec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80010d4:	4b3d      	ldr	r3, [pc, #244]	; (80011cc <main+0x118>)
 80010d6:	0018      	movs	r0, r3
 80010d8:	f001 fdf8 	bl	8002ccc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 80010dc:	4b3c      	ldr	r3, [pc, #240]	; (80011d0 <main+0x11c>)
 80010de:	0018      	movs	r0, r3
 80010e0:	f001 fdf4 	bl	8002ccc <HAL_TIM_Base_Start>

  HAL_Delay(100);
 80010e4:	2064      	movs	r0, #100	; 0x64
 80010e6:	f000 fd31 	bl	8001b4c <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//Enable
	HCSR04_Read();
 80010ea:	f7ff feef 	bl	8000ecc <HCSR04_Read>
	HAL_Delay(60);
 80010ee:	203c      	movs	r0, #60	; 0x3c
 80010f0:	f000 fd2c 	bl	8001b4c <HAL_Delay>

	if (HAL_GPIO_ReadPin(ReEnable_GPIO_Port, ReEnable_Pin) == GPIO_PIN_SET && (Distance > MINIMUM_DISTANCE || Distance == -1)){
 80010f4:	23a0      	movs	r3, #160	; 0xa0
 80010f6:	05db      	lsls	r3, r3, #23
 80010f8:	2140      	movs	r1, #64	; 0x40
 80010fa:	0018      	movs	r0, r3
 80010fc:	f000 ff9a 	bl	8002034 <HAL_GPIO_ReadPin>
 8001100:	0003      	movs	r3, r0
 8001102:	2b01      	cmp	r3, #1
 8001104:	d10c      	bne.n	8001120 <main+0x6c>
 8001106:	4b33      	ldr	r3, [pc, #204]	; (80011d4 <main+0x120>)
 8001108:	2200      	movs	r2, #0
 800110a:	5e9b      	ldrsh	r3, [r3, r2]
 800110c:	2b0f      	cmp	r3, #15
 800110e:	dc04      	bgt.n	800111a <main+0x66>
 8001110:	4b30      	ldr	r3, [pc, #192]	; (80011d4 <main+0x120>)
 8001112:	2200      	movs	r2, #0
 8001114:	5e9b      	ldrsh	r3, [r3, r2]
 8001116:	3301      	adds	r3, #1
 8001118:	d102      	bne.n	8001120 <main+0x6c>
		LedEnabled = 1;
 800111a:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <main+0x124>)
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, LedEnabled);
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <main+0x124>)
 8001122:	781a      	ldrb	r2, [r3, #0]
 8001124:	23a0      	movs	r3, #160	; 0xa0
 8001126:	05db      	lsls	r3, r3, #23
 8001128:	2120      	movs	r1, #32
 800112a:	0018      	movs	r0, r3
 800112c:	f000 ff9f 	bl	800206e <HAL_GPIO_WritePin>

	//Rows

	if (Distance != -1) {
 8001130:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <main+0x120>)
 8001132:	2200      	movs	r2, #0
 8001134:	5e9b      	ldrsh	r3, [r3, r2]
 8001136:	3301      	adds	r3, #1
 8001138:	d0d7      	beq.n	80010ea <main+0x36>
		HAL_GPIO_WritePin(LedRow1_GPIO_Port, LedRow1_Pin, 0);
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	00d9      	lsls	r1, r3, #3
 800113e:	23a0      	movs	r3, #160	; 0xa0
 8001140:	05db      	lsls	r3, r3, #23
 8001142:	2200      	movs	r2, #0
 8001144:	0018      	movs	r0, r3
 8001146:	f000 ff92 	bl	800206e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LedRow2_GPIO_Port, LedRow2_Pin, 0);
 800114a:	4b24      	ldr	r3, [pc, #144]	; (80011dc <main+0x128>)
 800114c:	2200      	movs	r2, #0
 800114e:	2108      	movs	r1, #8
 8001150:	0018      	movs	r0, r3
 8001152:	f000 ff8c 	bl	800206e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LedRow3_GPIO_Port, LedRow3_Pin, 0);
 8001156:	2380      	movs	r3, #128	; 0x80
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	4820      	ldr	r0, [pc, #128]	; (80011dc <main+0x128>)
 800115c:	2200      	movs	r2, #0
 800115e:	0019      	movs	r1, r3
 8001160:	f000 ff85 	bl	800206e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LedRow4_GPIO_Port, LedRow4_Pin, 0);
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <main+0x128>)
 8001166:	2200      	movs	r2, #0
 8001168:	2110      	movs	r1, #16
 800116a:	0018      	movs	r0, r3
 800116c:	f000 ff7f 	bl	800206e <HAL_GPIO_WritePin>

		if (Distance < MINIMUM_DISTANCE){
 8001170:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <main+0x120>)
 8001172:	2200      	movs	r2, #0
 8001174:	5e9b      	ldrsh	r3, [r3, r2]
 8001176:	2b0e      	cmp	r3, #14
 8001178:	dc08      	bgt.n	800118c <main+0xd8>
			HAL_GPIO_WritePin(LedRow1_GPIO_Port, LedRow1_Pin, 1);
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	00d9      	lsls	r1, r3, #3
 800117e:	23a0      	movs	r3, #160	; 0xa0
 8001180:	05db      	lsls	r3, r3, #23
 8001182:	2201      	movs	r2, #1
 8001184:	0018      	movs	r0, r3
 8001186:	f000 ff72 	bl	800206e <HAL_GPIO_WritePin>
 800118a:	e7ae      	b.n	80010ea <main+0x36>
		}
		else if (Distance < MINIMUM_DISTANCE * 2){
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <main+0x120>)
 800118e:	2200      	movs	r2, #0
 8001190:	5e9b      	ldrsh	r3, [r3, r2]
 8001192:	2b1d      	cmp	r3, #29
 8001194:	dc06      	bgt.n	80011a4 <main+0xf0>
			HAL_GPIO_WritePin(LedRow2_GPIO_Port, LedRow2_Pin, 1);
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <main+0x128>)
 8001198:	2201      	movs	r2, #1
 800119a:	2108      	movs	r1, #8
 800119c:	0018      	movs	r0, r3
 800119e:	f000 ff66 	bl	800206e <HAL_GPIO_WritePin>
 80011a2:	e7a2      	b.n	80010ea <main+0x36>
		}
		else if (Distance < MINIMUM_DISTANCE * 3){
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <main+0x120>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	5e9b      	ldrsh	r3, [r3, r2]
 80011aa:	2b2c      	cmp	r3, #44	; 0x2c
 80011ac:	dc07      	bgt.n	80011be <main+0x10a>
			HAL_GPIO_WritePin(LedRow3_GPIO_Port, LedRow3_Pin, 1);
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	480a      	ldr	r0, [pc, #40]	; (80011dc <main+0x128>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	0019      	movs	r1, r3
 80011b8:	f000 ff59 	bl	800206e <HAL_GPIO_WritePin>
 80011bc:	e795      	b.n	80010ea <main+0x36>
		}
		else {
			HAL_GPIO_WritePin(LedRow4_GPIO_Port, LedRow4_Pin, 1);
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <main+0x128>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	2110      	movs	r1, #16
 80011c4:	0018      	movs	r0, r3
 80011c6:	f000 ff52 	bl	800206e <HAL_GPIO_WritePin>
 80011ca:	e78e      	b.n	80010ea <main+0x36>
 80011cc:	200000d0 	.word	0x200000d0
 80011d0:	2000011c 	.word	0x2000011c
 80011d4:	2000020a 	.word	0x2000020a
 80011d8:	20000000 	.word	0x20000000
 80011dc:	50000400 	.word	0x50000400

080011e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b08d      	sub	sp, #52	; 0x34
 80011e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e6:	2414      	movs	r4, #20
 80011e8:	193b      	adds	r3, r7, r4
 80011ea:	0018      	movs	r0, r3
 80011ec:	231c      	movs	r3, #28
 80011ee:	001a      	movs	r2, r3
 80011f0:	2100      	movs	r1, #0
 80011f2:	f003 fa4b 	bl	800468c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f6:	003b      	movs	r3, r7
 80011f8:	0018      	movs	r0, r3
 80011fa:	2314      	movs	r3, #20
 80011fc:	001a      	movs	r2, r3
 80011fe:	2100      	movs	r1, #0
 8001200:	f003 fa44 	bl	800468c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001204:	193b      	adds	r3, r7, r4
 8001206:	2202      	movs	r2, #2
 8001208:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800120a:	193b      	adds	r3, r7, r4
 800120c:	2280      	movs	r2, #128	; 0x80
 800120e:	0052      	lsls	r2, r2, #1
 8001210:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001212:	193b      	adds	r3, r7, r4
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001218:	193b      	adds	r3, r7, r4
 800121a:	2240      	movs	r2, #64	; 0x40
 800121c:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121e:	193b      	adds	r3, r7, r4
 8001220:	0018      	movs	r0, r3
 8001222:	f001 f8bd 	bl	80023a0 <HAL_RCC_OscConfig>
 8001226:	1e03      	subs	r3, r0, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800122a:	f000 fa29 	bl	8001680 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122e:	003b      	movs	r3, r7
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001234:	003b      	movs	r3, r7
 8001236:	2200      	movs	r2, #0
 8001238:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800123a:	003b      	movs	r3, r7
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001240:	003b      	movs	r3, r7
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001246:	003b      	movs	r3, r7
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800124c:	003b      	movs	r3, r7
 800124e:	2101      	movs	r1, #1
 8001250:	0018      	movs	r0, r3
 8001252:	f001 fa89 	bl	8002768 <HAL_RCC_ClockConfig>
 8001256:	1e03      	subs	r3, r0, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800125a:	f000 fa11 	bl	8001680 <Error_Handler>
  }
}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	46bd      	mov	sp, r7
 8001262:	b00d      	add	sp, #52	; 0x34
 8001264:	bd90      	pop	{r4, r7, pc}
	...

08001268 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <MX_I2C1_Init+0x74>)
 800126e:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <MX_I2C1_Init+0x78>)
 8001270:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_I2C1_Init+0x74>)
 8001274:	4a1b      	ldr	r2, [pc, #108]	; (80012e4 <MX_I2C1_Init+0x7c>)
 8001276:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001278:	4b18      	ldr	r3, [pc, #96]	; (80012dc <MX_I2C1_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <MX_I2C1_Init+0x74>)
 8001280:	2201      	movs	r2, #1
 8001282:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <MX_I2C1_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800128a:	4b14      	ldr	r3, [pc, #80]	; (80012dc <MX_I2C1_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_I2C1_Init+0x74>)
 8001292:	2200      	movs	r2, #0
 8001294:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_I2C1_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_I2C1_Init+0x74>)
 800129e:	2200      	movs	r2, #0
 80012a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_I2C1_Init+0x74>)
 80012a4:	0018      	movs	r0, r3
 80012a6:	f000 ff3d 	bl	8002124 <HAL_I2C_Init>
 80012aa:	1e03      	subs	r3, r0, #0
 80012ac:	d001      	beq.n	80012b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012ae:	f000 f9e7 	bl	8001680 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <MX_I2C1_Init+0x74>)
 80012b4:	2100      	movs	r1, #0
 80012b6:	0018      	movs	r0, r3
 80012b8:	f000 ffda 	bl	8002270 <HAL_I2CEx_ConfigAnalogFilter>
 80012bc:	1e03      	subs	r3, r0, #0
 80012be:	d001      	beq.n	80012c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012c0:	f000 f9de 	bl	8001680 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <MX_I2C1_Init+0x74>)
 80012c6:	2100      	movs	r1, #0
 80012c8:	0018      	movs	r0, r3
 80012ca:	f001 f81d 	bl	8002308 <HAL_I2CEx_ConfigDigitalFilter>
 80012ce:	1e03      	subs	r3, r0, #0
 80012d0:	d001      	beq.n	80012d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012d2:	f000 f9d5 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	2000007c 	.word	0x2000007c
 80012e0:	40005400 	.word	0x40005400
 80012e4:	20303e5d 	.word	0x20303e5d

080012e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08c      	sub	sp, #48	; 0x30
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ee:	2320      	movs	r3, #32
 80012f0:	18fb      	adds	r3, r7, r3
 80012f2:	0018      	movs	r0, r3
 80012f4:	2310      	movs	r3, #16
 80012f6:	001a      	movs	r2, r3
 80012f8:	2100      	movs	r1, #0
 80012fa:	f003 f9c7 	bl	800468c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fe:	2314      	movs	r3, #20
 8001300:	18fb      	adds	r3, r7, r3
 8001302:	0018      	movs	r0, r3
 8001304:	230c      	movs	r3, #12
 8001306:	001a      	movs	r2, r3
 8001308:	2100      	movs	r1, #0
 800130a:	f003 f9bf 	bl	800468c <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	0018      	movs	r0, r3
 8001312:	2310      	movs	r3, #16
 8001314:	001a      	movs	r2, r3
 8001316:	2100      	movs	r1, #0
 8001318:	f003 f9b8 	bl	800468c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800131c:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <MX_TIM1_Init+0xf8>)
 800131e:	4a31      	ldr	r2, [pc, #196]	; (80013e4 <MX_TIM1_Init+0xfc>)
 8001320:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8001322:	4b2f      	ldr	r3, [pc, #188]	; (80013e0 <MX_TIM1_Init+0xf8>)
 8001324:	222f      	movs	r2, #47	; 0x2f
 8001326:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001328:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <MX_TIM1_Init+0xf8>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800132e:	4b2c      	ldr	r3, [pc, #176]	; (80013e0 <MX_TIM1_Init+0xf8>)
 8001330:	4a2d      	ldr	r2, [pc, #180]	; (80013e8 <MX_TIM1_Init+0x100>)
 8001332:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001334:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <MX_TIM1_Init+0xf8>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800133a:	4b29      	ldr	r3, [pc, #164]	; (80013e0 <MX_TIM1_Init+0xf8>)
 800133c:	2200      	movs	r2, #0
 800133e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001340:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <MX_TIM1_Init+0xf8>)
 8001342:	2200      	movs	r2, #0
 8001344:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001346:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <MX_TIM1_Init+0xf8>)
 8001348:	0018      	movs	r0, r3
 800134a:	f001 fc67 	bl	8002c1c <HAL_TIM_Base_Init>
 800134e:	1e03      	subs	r3, r0, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001352:	f000 f995 	bl	8001680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001356:	2120      	movs	r1, #32
 8001358:	187b      	adds	r3, r7, r1
 800135a:	2280      	movs	r2, #128	; 0x80
 800135c:	0152      	lsls	r2, r2, #5
 800135e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001360:	187a      	adds	r2, r7, r1
 8001362:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <MX_TIM1_Init+0xf8>)
 8001364:	0011      	movs	r1, r2
 8001366:	0018      	movs	r0, r3
 8001368:	f002 f8e0 	bl	800352c <HAL_TIM_ConfigClockSource>
 800136c:	1e03      	subs	r3, r0, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001370:	f000 f986 	bl	8001680 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <MX_TIM1_Init+0xf8>)
 8001376:	0018      	movs	r0, r3
 8001378:	f001 fcee 	bl	8002d58 <HAL_TIM_IC_Init>
 800137c:	1e03      	subs	r3, r0, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001380:	f000 f97e 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001384:	2114      	movs	r1, #20
 8001386:	187b      	adds	r3, r7, r1
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800138c:	187b      	adds	r3, r7, r1
 800138e:	2200      	movs	r2, #0
 8001390:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001392:	187b      	adds	r3, r7, r1
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001398:	187a      	adds	r2, r7, r1
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_TIM1_Init+0xf8>)
 800139c:	0011      	movs	r1, r2
 800139e:	0018      	movs	r0, r3
 80013a0:	f002 fc34 	bl	8003c0c <HAL_TIMEx_MasterConfigSynchronization>
 80013a4:	1e03      	subs	r3, r0, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80013a8:	f000 f96a 	bl	8001680 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2201      	movs	r2, #1
 80013b6:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	2200      	movs	r2, #0
 80013c2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013c4:	1d39      	adds	r1, r7, #4
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_TIM1_Init+0xf8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	0018      	movs	r0, r3
 80013cc:	f002 f80a 	bl	80033e4 <HAL_TIM_IC_ConfigChannel>
 80013d0:	1e03      	subs	r3, r0, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80013d4:	f000 f954 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013d8:	46c0      	nop			; (mov r8, r8)
 80013da:	46bd      	mov	sp, r7
 80013dc:	b00c      	add	sp, #48	; 0x30
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200000d0 	.word	0x200000d0
 80013e4:	40012c00 	.word	0x40012c00
 80013e8:	0000ffff 	.word	0x0000ffff

080013ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f2:	2310      	movs	r3, #16
 80013f4:	18fb      	adds	r3, r7, r3
 80013f6:	0018      	movs	r0, r3
 80013f8:	2310      	movs	r3, #16
 80013fa:	001a      	movs	r2, r3
 80013fc:	2100      	movs	r1, #0
 80013fe:	f003 f945 	bl	800468c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	0018      	movs	r0, r3
 8001406:	230c      	movs	r3, #12
 8001408:	001a      	movs	r2, r3
 800140a:	2100      	movs	r1, #0
 800140c:	f003 f93e 	bl	800468c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001410:	4b1e      	ldr	r3, [pc, #120]	; (800148c <MX_TIM3_Init+0xa0>)
 8001412:	4a1f      	ldr	r2, [pc, #124]	; (8001490 <MX_TIM3_Init+0xa4>)
 8001414:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8001416:	4b1d      	ldr	r3, [pc, #116]	; (800148c <MX_TIM3_Init+0xa0>)
 8001418:	222f      	movs	r2, #47	; 0x2f
 800141a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141c:	4b1b      	ldr	r3, [pc, #108]	; (800148c <MX_TIM3_Init+0xa0>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 12000;
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <MX_TIM3_Init+0xa0>)
 8001424:	4a1b      	ldr	r2, [pc, #108]	; (8001494 <MX_TIM3_Init+0xa8>)
 8001426:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001428:	4b18      	ldr	r3, [pc, #96]	; (800148c <MX_TIM3_Init+0xa0>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800142e:	4b17      	ldr	r3, [pc, #92]	; (800148c <MX_TIM3_Init+0xa0>)
 8001430:	2280      	movs	r2, #128	; 0x80
 8001432:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001434:	4b15      	ldr	r3, [pc, #84]	; (800148c <MX_TIM3_Init+0xa0>)
 8001436:	0018      	movs	r0, r3
 8001438:	f001 fbf0 	bl	8002c1c <HAL_TIM_Base_Init>
 800143c:	1e03      	subs	r3, r0, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001440:	f000 f91e 	bl	8001680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001444:	2110      	movs	r1, #16
 8001446:	187b      	adds	r3, r7, r1
 8001448:	2280      	movs	r2, #128	; 0x80
 800144a:	0152      	lsls	r2, r2, #5
 800144c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800144e:	187a      	adds	r2, r7, r1
 8001450:	4b0e      	ldr	r3, [pc, #56]	; (800148c <MX_TIM3_Init+0xa0>)
 8001452:	0011      	movs	r1, r2
 8001454:	0018      	movs	r0, r3
 8001456:	f002 f869 	bl	800352c <HAL_TIM_ConfigClockSource>
 800145a:	1e03      	subs	r3, r0, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800145e:	f000 f90f 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800146e:	1d3a      	adds	r2, r7, #4
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <MX_TIM3_Init+0xa0>)
 8001472:	0011      	movs	r1, r2
 8001474:	0018      	movs	r0, r3
 8001476:	f002 fbc9 	bl	8003c0c <HAL_TIMEx_MasterConfigSynchronization>
 800147a:	1e03      	subs	r3, r0, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800147e:	f000 f8ff 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	46bd      	mov	sp, r7
 8001486:	b008      	add	sp, #32
 8001488:	bd80      	pop	{r7, pc}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	2000011c 	.word	0x2000011c
 8001490:	40000400 	.word	0x40000400
 8001494:	00002ee0 	.word	0x00002ee0

08001498 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <MX_USART2_UART_Init+0x60>)
 800149e:	4a17      	ldr	r2, [pc, #92]	; (80014fc <MX_USART2_UART_Init+0x64>)
 80014a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <MX_USART2_UART_Init+0x60>)
 80014a4:	22e1      	movs	r2, #225	; 0xe1
 80014a6:	0252      	lsls	r2, r2, #9
 80014a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014aa:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <MX_USART2_UART_Init+0x60>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_USART2_UART_Init+0x60>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <MX_USART2_UART_Init+0x60>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014bc:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <MX_USART2_UART_Init+0x60>)
 80014be:	220c      	movs	r2, #12
 80014c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <MX_USART2_UART_Init+0x60>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <MX_USART2_UART_Init+0x60>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <MX_USART2_UART_Init+0x60>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <MX_USART2_UART_Init+0x60>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014da:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <MX_USART2_UART_Init+0x60>)
 80014dc:	2200      	movs	r2, #0
 80014de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <MX_USART2_UART_Init+0x60>)
 80014e2:	0018      	movs	r0, r3
 80014e4:	f002 fc0c 	bl	8003d00 <HAL_UART_Init>
 80014e8:	1e03      	subs	r3, r0, #0
 80014ea:	d001      	beq.n	80014f0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80014ec:	f000 f8c8 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014f0:	46c0      	nop			; (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	20000168 	.word	0x20000168
 80014fc:	40004400 	.word	0x40004400

08001500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b08b      	sub	sp, #44	; 0x2c
 8001504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001506:	2414      	movs	r4, #20
 8001508:	193b      	adds	r3, r7, r4
 800150a:	0018      	movs	r0, r3
 800150c:	2314      	movs	r3, #20
 800150e:	001a      	movs	r2, r3
 8001510:	2100      	movs	r1, #0
 8001512:	f003 f8bb 	bl	800468c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001516:	4b55      	ldr	r3, [pc, #340]	; (800166c <MX_GPIO_Init+0x16c>)
 8001518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800151a:	4b54      	ldr	r3, [pc, #336]	; (800166c <MX_GPIO_Init+0x16c>)
 800151c:	2104      	movs	r1, #4
 800151e:	430a      	orrs	r2, r1
 8001520:	635a      	str	r2, [r3, #52]	; 0x34
 8001522:	4b52      	ldr	r3, [pc, #328]	; (800166c <MX_GPIO_Init+0x16c>)
 8001524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001526:	2204      	movs	r2, #4
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800152e:	4b4f      	ldr	r3, [pc, #316]	; (800166c <MX_GPIO_Init+0x16c>)
 8001530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001532:	4b4e      	ldr	r3, [pc, #312]	; (800166c <MX_GPIO_Init+0x16c>)
 8001534:	2120      	movs	r1, #32
 8001536:	430a      	orrs	r2, r1
 8001538:	635a      	str	r2, [r3, #52]	; 0x34
 800153a:	4b4c      	ldr	r3, [pc, #304]	; (800166c <MX_GPIO_Init+0x16c>)
 800153c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800153e:	2220      	movs	r2, #32
 8001540:	4013      	ands	r3, r2
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	4b49      	ldr	r3, [pc, #292]	; (800166c <MX_GPIO_Init+0x16c>)
 8001548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800154a:	4b48      	ldr	r3, [pc, #288]	; (800166c <MX_GPIO_Init+0x16c>)
 800154c:	2101      	movs	r1, #1
 800154e:	430a      	orrs	r2, r1
 8001550:	635a      	str	r2, [r3, #52]	; 0x34
 8001552:	4b46      	ldr	r3, [pc, #280]	; (800166c <MX_GPIO_Init+0x16c>)
 8001554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001556:	2201      	movs	r2, #1
 8001558:	4013      	ands	r3, r2
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	4b43      	ldr	r3, [pc, #268]	; (800166c <MX_GPIO_Init+0x16c>)
 8001560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001562:	4b42      	ldr	r3, [pc, #264]	; (800166c <MX_GPIO_Init+0x16c>)
 8001564:	2102      	movs	r1, #2
 8001566:	430a      	orrs	r2, r1
 8001568:	635a      	str	r2, [r3, #52]	; 0x34
 800156a:	4b40      	ldr	r3, [pc, #256]	; (800166c <MX_GPIO_Init+0x16c>)
 800156c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156e:	2202      	movs	r2, #2
 8001570:	4013      	ands	r3, r2
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG_Pin|LedRow1_Pin, GPIO_PIN_RESET);
 8001576:	493e      	ldr	r1, [pc, #248]	; (8001670 <MX_GPIO_Init+0x170>)
 8001578:	23a0      	movs	r3, #160	; 0xa0
 800157a:	05db      	lsls	r3, r3, #23
 800157c:	2200      	movs	r2, #0
 800157e:	0018      	movs	r0, r3
 8001580:	f000 fd75 	bl	800206e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 8001584:	23a0      	movs	r3, #160	; 0xa0
 8001586:	05db      	lsls	r3, r3, #23
 8001588:	2201      	movs	r2, #1
 800158a:	2120      	movs	r1, #32
 800158c:	0018      	movs	r0, r3
 800158e:	f000 fd6e 	bl	800206e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LedRow3_Pin|LedRow2_Pin|LedRow4_Pin, GPIO_PIN_RESET);
 8001592:	2383      	movs	r3, #131	; 0x83
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4837      	ldr	r0, [pc, #220]	; (8001674 <MX_GPIO_Init+0x174>)
 8001598:	2200      	movs	r2, #0
 800159a:	0019      	movs	r1, r3
 800159c:	f000 fd67 	bl	800206e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 80015a0:	193b      	adds	r3, r7, r4
 80015a2:	2280      	movs	r2, #128	; 0x80
 80015a4:	0192      	lsls	r2, r2, #6
 80015a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015a8:	193b      	adds	r3, r7, r4
 80015aa:	4a33      	ldr	r2, [pc, #204]	; (8001678 <MX_GPIO_Init+0x178>)
 80015ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	193b      	adds	r3, r7, r4
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80015b4:	193b      	adds	r3, r7, r4
 80015b6:	4a31      	ldr	r2, [pc, #196]	; (800167c <MX_GPIO_Init+0x17c>)
 80015b8:	0019      	movs	r1, r3
 80015ba:	0010      	movs	r0, r2
 80015bc:	f000 fbc8 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin LedRow1_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|LedRow1_Pin;
 80015c0:	193b      	adds	r3, r7, r4
 80015c2:	4a2b      	ldr	r2, [pc, #172]	; (8001670 <MX_GPIO_Init+0x170>)
 80015c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	193b      	adds	r3, r7, r4
 80015c8:	2201      	movs	r2, #1
 80015ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	193b      	adds	r3, r7, r4
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	193b      	adds	r3, r7, r4
 80015d4:	2200      	movs	r2, #0
 80015d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	193a      	adds	r2, r7, r4
 80015da:	23a0      	movs	r3, #160	; 0xa0
 80015dc:	05db      	lsls	r3, r3, #23
 80015de:	0011      	movs	r1, r2
 80015e0:	0018      	movs	r0, r3
 80015e2:	f000 fbb5 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 80015e6:	193b      	adds	r3, r7, r4
 80015e8:	2220      	movs	r2, #32
 80015ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ec:	193b      	adds	r3, r7, r4
 80015ee:	2201      	movs	r2, #1
 80015f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	193b      	adds	r3, r7, r4
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f8:	193b      	adds	r3, r7, r4
 80015fa:	2203      	movs	r2, #3
 80015fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80015fe:	193a      	adds	r2, r7, r4
 8001600:	23a0      	movs	r3, #160	; 0xa0
 8001602:	05db      	lsls	r3, r3, #23
 8001604:	0011      	movs	r1, r2
 8001606:	0018      	movs	r0, r3
 8001608:	f000 fba2 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : ReEnable_Pin */
  GPIO_InitStruct.Pin = ReEnable_Pin;
 800160c:	193b      	adds	r3, r7, r4
 800160e:	2240      	movs	r2, #64	; 0x40
 8001610:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001612:	193b      	adds	r3, r7, r4
 8001614:	2200      	movs	r2, #0
 8001616:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	193b      	adds	r3, r7, r4
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ReEnable_GPIO_Port, &GPIO_InitStruct);
 800161e:	193a      	adds	r2, r7, r4
 8001620:	23a0      	movs	r3, #160	; 0xa0
 8001622:	05db      	lsls	r3, r3, #23
 8001624:	0011      	movs	r1, r2
 8001626:	0018      	movs	r0, r3
 8001628:	f000 fb92 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LedRow3_Pin LedRow2_Pin LedRow4_Pin */
  GPIO_InitStruct.Pin = LedRow3_Pin|LedRow2_Pin|LedRow4_Pin;
 800162c:	0021      	movs	r1, r4
 800162e:	187b      	adds	r3, r7, r1
 8001630:	2283      	movs	r2, #131	; 0x83
 8001632:	00d2      	lsls	r2, r2, #3
 8001634:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001636:	187b      	adds	r3, r7, r1
 8001638:	2201      	movs	r2, #1
 800163a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	187b      	adds	r3, r7, r1
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	187b      	adds	r3, r7, r1
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001648:	187b      	adds	r3, r7, r1
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <MX_GPIO_Init+0x174>)
 800164c:	0019      	movs	r1, r3
 800164e:	0010      	movs	r0, r2
 8001650:	f000 fb7e 	bl	8001d50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001654:	2200      	movs	r2, #0
 8001656:	2100      	movs	r1, #0
 8001658:	2007      	movs	r0, #7
 800165a:	f000 fb47 	bl	8001cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800165e:	2007      	movs	r0, #7
 8001660:	f000 fb59 	bl	8001d16 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b00b      	add	sp, #44	; 0x2c
 800166a:	bd90      	pop	{r4, r7, pc}
 800166c:	40021000 	.word	0x40021000
 8001670:	00000402 	.word	0x00000402
 8001674:	50000400 	.word	0x50000400
 8001678:	10110000 	.word	0x10110000
 800167c:	50000800 	.word	0x50000800

08001680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001684:	b672      	cpsid	i
}
 8001686:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001688:	e7fe      	b.n	8001688 <Error_Handler+0x8>
	...

0800168c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001692:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_MspInit+0x44>)
 8001694:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <HAL_MspInit+0x44>)
 8001698:	2101      	movs	r1, #1
 800169a:	430a      	orrs	r2, r1
 800169c:	641a      	str	r2, [r3, #64]	; 0x40
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <HAL_MspInit+0x44>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	2201      	movs	r2, #1
 80016a4:	4013      	ands	r3, r2
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_MspInit+0x44>)
 80016ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <HAL_MspInit+0x44>)
 80016b0:	2180      	movs	r1, #128	; 0x80
 80016b2:	0549      	lsls	r1, r1, #21
 80016b4:	430a      	orrs	r2, r1
 80016b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_MspInit+0x44>)
 80016ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	055b      	lsls	r3, r3, #21
 80016c0:	4013      	ands	r3, r2
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b002      	add	sp, #8
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	40021000 	.word	0x40021000

080016d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b091      	sub	sp, #68	; 0x44
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	232c      	movs	r3, #44	; 0x2c
 80016de:	18fb      	adds	r3, r7, r3
 80016e0:	0018      	movs	r0, r3
 80016e2:	2314      	movs	r3, #20
 80016e4:	001a      	movs	r2, r3
 80016e6:	2100      	movs	r1, #0
 80016e8:	f002 ffd0 	bl	800468c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016ec:	2410      	movs	r4, #16
 80016ee:	193b      	adds	r3, r7, r4
 80016f0:	0018      	movs	r0, r3
 80016f2:	231c      	movs	r3, #28
 80016f4:	001a      	movs	r2, r3
 80016f6:	2100      	movs	r1, #0
 80016f8:	f002 ffc8 	bl	800468c <memset>
  if(hi2c->Instance==I2C1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a22      	ldr	r2, [pc, #136]	; (800178c <HAL_I2C_MspInit+0xb8>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d13e      	bne.n	8001784 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001706:	193b      	adds	r3, r7, r4
 8001708:	2240      	movs	r2, #64	; 0x40
 800170a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800170c:	193b      	adds	r3, r7, r4
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001712:	193b      	adds	r3, r7, r4
 8001714:	0018      	movs	r0, r3
 8001716:	f001 f993 	bl	8002a40 <HAL_RCCEx_PeriphCLKConfig>
 800171a:	1e03      	subs	r3, r0, #0
 800171c:	d001      	beq.n	8001722 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800171e:	f7ff ffaf 	bl	8001680 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <HAL_I2C_MspInit+0xbc>)
 8001724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <HAL_I2C_MspInit+0xbc>)
 8001728:	2102      	movs	r1, #2
 800172a:	430a      	orrs	r2, r1
 800172c:	635a      	str	r2, [r3, #52]	; 0x34
 800172e:	4b18      	ldr	r3, [pc, #96]	; (8001790 <HAL_I2C_MspInit+0xbc>)
 8001730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001732:	2202      	movs	r2, #2
 8001734:	4013      	ands	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800173a:	212c      	movs	r1, #44	; 0x2c
 800173c:	187b      	adds	r3, r7, r1
 800173e:	22c0      	movs	r2, #192	; 0xc0
 8001740:	0092      	lsls	r2, r2, #2
 8001742:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001744:	187b      	adds	r3, r7, r1
 8001746:	2212      	movs	r2, #18
 8001748:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	187b      	adds	r3, r7, r1
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	187b      	adds	r3, r7, r1
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001756:	187b      	adds	r3, r7, r1
 8001758:	2206      	movs	r2, #6
 800175a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175c:	187b      	adds	r3, r7, r1
 800175e:	4a0d      	ldr	r2, [pc, #52]	; (8001794 <HAL_I2C_MspInit+0xc0>)
 8001760:	0019      	movs	r1, r3
 8001762:	0010      	movs	r0, r2
 8001764:	f000 faf4 	bl	8001d50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_I2C_MspInit+0xbc>)
 800176a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_I2C_MspInit+0xbc>)
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	0389      	lsls	r1, r1, #14
 8001772:	430a      	orrs	r2, r1
 8001774:	63da      	str	r2, [r3, #60]	; 0x3c
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_I2C_MspInit+0xbc>)
 8001778:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	039b      	lsls	r3, r3, #14
 800177e:	4013      	ands	r3, r2
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001784:	46c0      	nop			; (mov r8, r8)
 8001786:	46bd      	mov	sp, r7
 8001788:	b011      	add	sp, #68	; 0x44
 800178a:	bd90      	pop	{r4, r7, pc}
 800178c:	40005400 	.word	0x40005400
 8001790:	40021000 	.word	0x40021000
 8001794:	50000400 	.word	0x50000400

08001798 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b08b      	sub	sp, #44	; 0x2c
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	2414      	movs	r4, #20
 80017a2:	193b      	adds	r3, r7, r4
 80017a4:	0018      	movs	r0, r3
 80017a6:	2314      	movs	r3, #20
 80017a8:	001a      	movs	r2, r3
 80017aa:	2100      	movs	r1, #0
 80017ac:	f002 ff6e 	bl	800468c <memset>
  if(htim_base->Instance==TIM1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a2c      	ldr	r2, [pc, #176]	; (8001868 <HAL_TIM_Base_MspInit+0xd0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d141      	bne.n	800183e <HAL_TIM_Base_MspInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017ba:	4b2c      	ldr	r3, [pc, #176]	; (800186c <HAL_TIM_Base_MspInit+0xd4>)
 80017bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017be:	4b2b      	ldr	r3, [pc, #172]	; (800186c <HAL_TIM_Base_MspInit+0xd4>)
 80017c0:	2180      	movs	r1, #128	; 0x80
 80017c2:	0109      	lsls	r1, r1, #4
 80017c4:	430a      	orrs	r2, r1
 80017c6:	641a      	str	r2, [r3, #64]	; 0x40
 80017c8:	4b28      	ldr	r3, [pc, #160]	; (800186c <HAL_TIM_Base_MspInit+0xd4>)
 80017ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	4013      	ands	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	4b25      	ldr	r3, [pc, #148]	; (800186c <HAL_TIM_Base_MspInit+0xd4>)
 80017d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017da:	4b24      	ldr	r3, [pc, #144]	; (800186c <HAL_TIM_Base_MspInit+0xd4>)
 80017dc:	2101      	movs	r1, #1
 80017de:	430a      	orrs	r2, r1
 80017e0:	635a      	str	r2, [r3, #52]	; 0x34
 80017e2:	4b22      	ldr	r3, [pc, #136]	; (800186c <HAL_TIM_Base_MspInit+0xd4>)
 80017e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e6:	2201      	movs	r2, #1
 80017e8:	4013      	ands	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 80017ee:	0021      	movs	r1, r4
 80017f0:	187b      	adds	r3, r7, r1
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	187b      	adds	r3, r7, r1
 80017f8:	2202      	movs	r2, #2
 80017fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	187b      	adds	r3, r7, r1
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	187b      	adds	r3, r7, r1
 8001804:	2200      	movs	r2, #0
 8001806:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 8001808:	187b      	adds	r3, r7, r1
 800180a:	2205      	movs	r2, #5
 800180c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 800180e:	187a      	adds	r2, r7, r1
 8001810:	23a0      	movs	r3, #160	; 0xa0
 8001812:	05db      	lsls	r3, r3, #23
 8001814:	0011      	movs	r1, r2
 8001816:	0018      	movs	r0, r3
 8001818:	f000 fa9a 	bl	8001d50 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800181c:	2200      	movs	r2, #0
 800181e:	2100      	movs	r1, #0
 8001820:	200d      	movs	r0, #13
 8001822:	f000 fa63 	bl	8001cec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001826:	200d      	movs	r0, #13
 8001828:	f000 fa75 	bl	8001d16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800182c:	2200      	movs	r2, #0
 800182e:	2100      	movs	r1, #0
 8001830:	200e      	movs	r0, #14
 8001832:	f000 fa5b 	bl	8001cec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001836:	200e      	movs	r0, #14
 8001838:	f000 fa6d 	bl	8001d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800183c:	e010      	b.n	8001860 <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM3)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a0b      	ldr	r2, [pc, #44]	; (8001870 <HAL_TIM_Base_MspInit+0xd8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d10b      	bne.n	8001860 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <HAL_TIM_Base_MspInit+0xd4>)
 800184a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800184c:	4b07      	ldr	r3, [pc, #28]	; (800186c <HAL_TIM_Base_MspInit+0xd4>)
 800184e:	2102      	movs	r1, #2
 8001850:	430a      	orrs	r2, r1
 8001852:	63da      	str	r2, [r3, #60]	; 0x3c
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <HAL_TIM_Base_MspInit+0xd4>)
 8001856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001858:	2202      	movs	r2, #2
 800185a:	4013      	ands	r3, r2
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	68bb      	ldr	r3, [r7, #8]
}
 8001860:	46c0      	nop			; (mov r8, r8)
 8001862:	46bd      	mov	sp, r7
 8001864:	b00b      	add	sp, #44	; 0x2c
 8001866:	bd90      	pop	{r4, r7, pc}
 8001868:	40012c00 	.word	0x40012c00
 800186c:	40021000 	.word	0x40021000
 8001870:	40000400 	.word	0x40000400

08001874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001874:	b590      	push	{r4, r7, lr}
 8001876:	b08b      	sub	sp, #44	; 0x2c
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	2414      	movs	r4, #20
 800187e:	193b      	adds	r3, r7, r4
 8001880:	0018      	movs	r0, r3
 8001882:	2314      	movs	r3, #20
 8001884:	001a      	movs	r2, r3
 8001886:	2100      	movs	r1, #0
 8001888:	f002 ff00 	bl	800468c <memset>
  if(huart->Instance==USART2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a1b      	ldr	r2, [pc, #108]	; (8001900 <HAL_UART_MspInit+0x8c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d130      	bne.n	80018f8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001896:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <HAL_UART_MspInit+0x90>)
 8001898:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800189a:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <HAL_UART_MspInit+0x90>)
 800189c:	2180      	movs	r1, #128	; 0x80
 800189e:	0289      	lsls	r1, r1, #10
 80018a0:	430a      	orrs	r2, r1
 80018a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80018a4:	4b17      	ldr	r3, [pc, #92]	; (8001904 <HAL_UART_MspInit+0x90>)
 80018a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	029b      	lsls	r3, r3, #10
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	4b14      	ldr	r3, [pc, #80]	; (8001904 <HAL_UART_MspInit+0x90>)
 80018b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018b6:	4b13      	ldr	r3, [pc, #76]	; (8001904 <HAL_UART_MspInit+0x90>)
 80018b8:	2101      	movs	r1, #1
 80018ba:	430a      	orrs	r2, r1
 80018bc:	635a      	str	r2, [r3, #52]	; 0x34
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <HAL_UART_MspInit+0x90>)
 80018c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c2:	2201      	movs	r2, #1
 80018c4:	4013      	ands	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018ca:	0021      	movs	r1, r4
 80018cc:	187b      	adds	r3, r7, r1
 80018ce:	220c      	movs	r2, #12
 80018d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	187b      	adds	r3, r7, r1
 80018d4:	2202      	movs	r2, #2
 80018d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	187b      	adds	r3, r7, r1
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	187b      	adds	r3, r7, r1
 80018e0:	2200      	movs	r2, #0
 80018e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80018e4:	187b      	adds	r3, r7, r1
 80018e6:	2201      	movs	r2, #1
 80018e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ea:	187a      	adds	r2, r7, r1
 80018ec:	23a0      	movs	r3, #160	; 0xa0
 80018ee:	05db      	lsls	r3, r3, #23
 80018f0:	0011      	movs	r1, r2
 80018f2:	0018      	movs	r0, r3
 80018f4:	f000 fa2c 	bl	8001d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018f8:	46c0      	nop			; (mov r8, r8)
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b00b      	add	sp, #44	; 0x2c
 80018fe:	bd90      	pop	{r4, r7, pc}
 8001900:	40004400 	.word	0x40004400
 8001904:	40021000 	.word	0x40021000

08001908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800190c:	e7fe      	b.n	800190c <NMI_Handler+0x4>

0800190e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001912:	e7fe      	b.n	8001912 <HardFault_Handler+0x4>

08001914 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001918:	46c0      	nop			; (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800192c:	f000 f8f2 	bl	8001b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001930:	46c0      	nop			; (mov r8, r8)
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 800193a:	2380      	movs	r3, #128	; 0x80
 800193c:	019b      	lsls	r3, r3, #6
 800193e:	0018      	movs	r0, r3
 8001940:	f000 fbb2 	bl	80020a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001944:	46c0      	nop			; (mov r8, r8)
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001950:	4b03      	ldr	r3, [pc, #12]	; (8001960 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001952:	0018      	movs	r0, r3
 8001954:	f001 fc44 	bl	80031e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001958:	46c0      	nop			; (mov r8, r8)
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	200000d0 	.word	0x200000d0

08001964 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <TIM1_CC_IRQHandler+0x14>)
 800196a:	0018      	movs	r0, r3
 800196c:	f001 fc38 	bl	80031e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001970:	46c0      	nop			; (mov r8, r8)
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	200000d0 	.word	0x200000d0

0800197c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001984:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <_sbrk+0x5c>)
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <_sbrk+0x60>)
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <_sbrk+0x64>)
 800199a:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <_sbrk+0x68>)
 800199c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <_sbrk+0x64>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	18d3      	adds	r3, r2, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d207      	bcs.n	80019bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019ac:	f002 fe76 	bl	800469c <__errno>
 80019b0:	0003      	movs	r3, r0
 80019b2:	220c      	movs	r2, #12
 80019b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b6:	2301      	movs	r3, #1
 80019b8:	425b      	negs	r3, r3
 80019ba:	e009      	b.n	80019d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	18d2      	adds	r2, r2, r3
 80019ca:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <_sbrk+0x64>)
 80019cc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80019ce:	68fb      	ldr	r3, [r7, #12]
}
 80019d0:	0018      	movs	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b006      	add	sp, #24
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20003000 	.word	0x20003000
 80019dc:	00000400 	.word	0x00000400
 80019e0:	2000020c 	.word	0x2000020c
 80019e4:	20000360 	.word	0x20000360

080019e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <SystemInit+0x14>)
 80019ee:	2280      	movs	r2, #128	; 0x80
 80019f0:	0512      	lsls	r2, r2, #20
 80019f2:	609a      	str	r2, [r3, #8]
#endif
}
 80019f4:	46c0      	nop			; (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a00:	480d      	ldr	r0, [pc, #52]	; (8001a38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a02:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a04:	f7ff fff0 	bl	80019e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001a08:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001a0a:	e003      	b.n	8001a14 <LoopCopyDataInit>

08001a0c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001a0e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001a10:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001a12:	3104      	adds	r1, #4

08001a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a14:	480a      	ldr	r0, [pc, #40]	; (8001a40 <LoopForever+0xa>)
  ldr r3, =_edata
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <LoopForever+0xe>)
  adds r2, r0, r1
 8001a18:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a1a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a1c:	d3f6      	bcc.n	8001a0c <CopyDataInit>
  ldr r2, =_sbss
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <LoopForever+0x12>)
  b LoopFillZerobss
 8001a20:	e002      	b.n	8001a28 <LoopFillZerobss>

08001a22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  str  r3, [r2]
 8001a24:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a26:	3204      	adds	r2, #4

08001a28 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <LoopForever+0x16>)
  cmp r2, r3
 8001a2a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a2c:	d3f9      	bcc.n	8001a22 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001a2e:	f002 fe3b 	bl	80046a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a32:	f7ff fb3f 	bl	80010b4 <main>

08001a36 <LoopForever>:

LoopForever:
    b LoopForever
 8001a36:	e7fe      	b.n	8001a36 <LoopForever>
  ldr   r0, =_estack
 8001a38:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8001a3c:	080050ac 	.word	0x080050ac
  ldr r0, =_sdata
 8001a40:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a44:	20000060 	.word	0x20000060
  ldr r2, =_sbss
 8001a48:	20000060 	.word	0x20000060
  ldr r3, = _ebss
 8001a4c:	2000035c 	.word	0x2000035c

08001a50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a50:	e7fe      	b.n	8001a50 <ADC1_IRQHandler>

08001a52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a58:	1dfb      	adds	r3, r7, #7
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a5e:	2003      	movs	r0, #3
 8001a60:	f000 f80e 	bl	8001a80 <HAL_InitTick>
 8001a64:	1e03      	subs	r3, r0, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001a68:	1dfb      	adds	r3, r7, #7
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	701a      	strb	r2, [r3, #0]
 8001a6e:	e001      	b.n	8001a74 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a70:	f7ff fe0c 	bl	800168c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a74:	1dfb      	adds	r3, r7, #7
 8001a76:	781b      	ldrb	r3, [r3, #0]
}
 8001a78:	0018      	movs	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b002      	add	sp, #8
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a88:	230f      	movs	r3, #15
 8001a8a:	18fb      	adds	r3, r7, r3
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001a90:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <HAL_InitTick+0x88>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d02b      	beq.n	8001af0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001a98:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <HAL_InitTick+0x8c>)
 8001a9a:	681c      	ldr	r4, [r3, #0]
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <HAL_InitTick+0x88>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	23fa      	movs	r3, #250	; 0xfa
 8001aa4:	0098      	lsls	r0, r3, #2
 8001aa6:	f7fe fb41 	bl	800012c <__udivsi3>
 8001aaa:	0003      	movs	r3, r0
 8001aac:	0019      	movs	r1, r3
 8001aae:	0020      	movs	r0, r4
 8001ab0:	f7fe fb3c 	bl	800012c <__udivsi3>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f000 f93d 	bl	8001d36 <HAL_SYSTICK_Config>
 8001abc:	1e03      	subs	r3, r0, #0
 8001abe:	d112      	bne.n	8001ae6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d80a      	bhi.n	8001adc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	2301      	movs	r3, #1
 8001aca:	425b      	negs	r3, r3
 8001acc:	2200      	movs	r2, #0
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f000 f90c 	bl	8001cec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ad4:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <HAL_InitTick+0x90>)
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	e00d      	b.n	8001af8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001adc:	230f      	movs	r3, #15
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]
 8001ae4:	e008      	b.n	8001af8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ae6:	230f      	movs	r3, #15
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	2201      	movs	r2, #1
 8001aec:	701a      	strb	r2, [r3, #0]
 8001aee:	e003      	b.n	8001af8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001af0:	230f      	movs	r3, #15
 8001af2:	18fb      	adds	r3, r7, r3
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001af8:	230f      	movs	r3, #15
 8001afa:	18fb      	adds	r3, r7, r3
 8001afc:	781b      	ldrb	r3, [r3, #0]
}
 8001afe:	0018      	movs	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b005      	add	sp, #20
 8001b04:	bd90      	pop	{r4, r7, pc}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	2000000c 	.word	0x2000000c
 8001b0c:	20000004 	.word	0x20000004
 8001b10:	20000008 	.word	0x20000008

08001b14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_IncTick+0x1c>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	001a      	movs	r2, r3
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HAL_IncTick+0x20>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	18d2      	adds	r2, r2, r3
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <HAL_IncTick+0x20>)
 8001b26:	601a      	str	r2, [r3, #0]
}
 8001b28:	46c0      	nop			; (mov r8, r8)
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	2000000c 	.word	0x2000000c
 8001b34:	20000210 	.word	0x20000210

08001b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b3c:	4b02      	ldr	r3, [pc, #8]	; (8001b48 <HAL_GetTick+0x10>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	20000210 	.word	0x20000210

08001b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b54:	f7ff fff0 	bl	8001b38 <HAL_GetTick>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	3301      	adds	r3, #1
 8001b64:	d005      	beq.n	8001b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <HAL_Delay+0x44>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	001a      	movs	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	189b      	adds	r3, r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	f7ff ffe0 	bl	8001b38 <HAL_GetTick>
 8001b78:	0002      	movs	r2, r0
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d8f7      	bhi.n	8001b74 <HAL_Delay+0x28>
  {
  }
}
 8001b84:	46c0      	nop			; (mov r8, r8)
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	b004      	add	sp, #16
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	2000000c 	.word	0x2000000c

08001b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	1dfb      	adds	r3, r7, #7
 8001b9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ba0:	1dfb      	adds	r3, r7, #7
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b7f      	cmp	r3, #127	; 0x7f
 8001ba6:	d809      	bhi.n	8001bbc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba8:	1dfb      	adds	r3, r7, #7
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	001a      	movs	r2, r3
 8001bae:	231f      	movs	r3, #31
 8001bb0:	401a      	ands	r2, r3
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <__NVIC_EnableIRQ+0x30>)
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	4091      	lsls	r1, r2
 8001bb8:	000a      	movs	r2, r1
 8001bba:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001bbc:	46c0      	nop			; (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b002      	add	sp, #8
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	e000e100 	.word	0xe000e100

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	0002      	movs	r2, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	1dfb      	adds	r3, r7, #7
 8001bd4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bd6:	1dfb      	adds	r3, r7, #7
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b7f      	cmp	r3, #127	; 0x7f
 8001bdc:	d828      	bhi.n	8001c30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bde:	4a2f      	ldr	r2, [pc, #188]	; (8001c9c <__NVIC_SetPriority+0xd4>)
 8001be0:	1dfb      	adds	r3, r7, #7
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	b25b      	sxtb	r3, r3
 8001be6:	089b      	lsrs	r3, r3, #2
 8001be8:	33c0      	adds	r3, #192	; 0xc0
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	589b      	ldr	r3, [r3, r2]
 8001bee:	1dfa      	adds	r2, r7, #7
 8001bf0:	7812      	ldrb	r2, [r2, #0]
 8001bf2:	0011      	movs	r1, r2
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	400a      	ands	r2, r1
 8001bf8:	00d2      	lsls	r2, r2, #3
 8001bfa:	21ff      	movs	r1, #255	; 0xff
 8001bfc:	4091      	lsls	r1, r2
 8001bfe:	000a      	movs	r2, r1
 8001c00:	43d2      	mvns	r2, r2
 8001c02:	401a      	ands	r2, r3
 8001c04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	019b      	lsls	r3, r3, #6
 8001c0a:	22ff      	movs	r2, #255	; 0xff
 8001c0c:	401a      	ands	r2, r3
 8001c0e:	1dfb      	adds	r3, r7, #7
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	0018      	movs	r0, r3
 8001c14:	2303      	movs	r3, #3
 8001c16:	4003      	ands	r3, r0
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c1c:	481f      	ldr	r0, [pc, #124]	; (8001c9c <__NVIC_SetPriority+0xd4>)
 8001c1e:	1dfb      	adds	r3, r7, #7
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	b25b      	sxtb	r3, r3
 8001c24:	089b      	lsrs	r3, r3, #2
 8001c26:	430a      	orrs	r2, r1
 8001c28:	33c0      	adds	r3, #192	; 0xc0
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c2e:	e031      	b.n	8001c94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c30:	4a1b      	ldr	r2, [pc, #108]	; (8001ca0 <__NVIC_SetPriority+0xd8>)
 8001c32:	1dfb      	adds	r3, r7, #7
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	0019      	movs	r1, r3
 8001c38:	230f      	movs	r3, #15
 8001c3a:	400b      	ands	r3, r1
 8001c3c:	3b08      	subs	r3, #8
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	3306      	adds	r3, #6
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	18d3      	adds	r3, r2, r3
 8001c46:	3304      	adds	r3, #4
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	1dfa      	adds	r2, r7, #7
 8001c4c:	7812      	ldrb	r2, [r2, #0]
 8001c4e:	0011      	movs	r1, r2
 8001c50:	2203      	movs	r2, #3
 8001c52:	400a      	ands	r2, r1
 8001c54:	00d2      	lsls	r2, r2, #3
 8001c56:	21ff      	movs	r1, #255	; 0xff
 8001c58:	4091      	lsls	r1, r2
 8001c5a:	000a      	movs	r2, r1
 8001c5c:	43d2      	mvns	r2, r2
 8001c5e:	401a      	ands	r2, r3
 8001c60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	019b      	lsls	r3, r3, #6
 8001c66:	22ff      	movs	r2, #255	; 0xff
 8001c68:	401a      	ands	r2, r3
 8001c6a:	1dfb      	adds	r3, r7, #7
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	0018      	movs	r0, r3
 8001c70:	2303      	movs	r3, #3
 8001c72:	4003      	ands	r3, r0
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c78:	4809      	ldr	r0, [pc, #36]	; (8001ca0 <__NVIC_SetPriority+0xd8>)
 8001c7a:	1dfb      	adds	r3, r7, #7
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	001c      	movs	r4, r3
 8001c80:	230f      	movs	r3, #15
 8001c82:	4023      	ands	r3, r4
 8001c84:	3b08      	subs	r3, #8
 8001c86:	089b      	lsrs	r3, r3, #2
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	3306      	adds	r3, #6
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	18c3      	adds	r3, r0, r3
 8001c90:	3304      	adds	r3, #4
 8001c92:	601a      	str	r2, [r3, #0]
}
 8001c94:	46c0      	nop			; (mov r8, r8)
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b003      	add	sp, #12
 8001c9a:	bd90      	pop	{r4, r7, pc}
 8001c9c:	e000e100 	.word	0xe000e100
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	1e5a      	subs	r2, r3, #1
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	045b      	lsls	r3, r3, #17
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d301      	bcc.n	8001cbc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e010      	b.n	8001cde <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <SysTick_Config+0x44>)
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	3a01      	subs	r2, #1
 8001cc2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	425b      	negs	r3, r3
 8001cc8:	2103      	movs	r1, #3
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f7ff ff7c 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <SysTick_Config+0x44>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cd6:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <SysTick_Config+0x44>)
 8001cd8:	2207      	movs	r2, #7
 8001cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	0018      	movs	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	b002      	add	sp, #8
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	e000e010 	.word	0xe000e010

08001cec <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	210f      	movs	r1, #15
 8001cf8:	187b      	adds	r3, r7, r1
 8001cfa:	1c02      	adds	r2, r0, #0
 8001cfc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	187b      	adds	r3, r7, r1
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	b25b      	sxtb	r3, r3
 8001d06:	0011      	movs	r1, r2
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f7ff ff5d 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b004      	add	sp, #16
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	0002      	movs	r2, r0
 8001d1e:	1dfb      	adds	r3, r7, #7
 8001d20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d22:	1dfb      	adds	r3, r7, #7
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	b25b      	sxtb	r3, r3
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f7ff ff33 	bl	8001b94 <__NVIC_EnableIRQ>
}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	46bd      	mov	sp, r7
 8001d32:	b002      	add	sp, #8
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	0018      	movs	r0, r3
 8001d42:	f7ff ffaf 	bl	8001ca4 <SysTick_Config>
 8001d46:	0003      	movs	r3, r0
}
 8001d48:	0018      	movs	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b002      	add	sp, #8
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001d5e:	e153      	b.n	8002008 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2101      	movs	r1, #1
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4091      	lsls	r1, r2
 8001d6a:	000a      	movs	r2, r1
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d100      	bne.n	8001d78 <HAL_GPIO_Init+0x28>
 8001d76:	e144      	b.n	8002002 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x38>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b12      	cmp	r3, #18
 8001d86:	d125      	bne.n	8001dd4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	08da      	lsrs	r2, r3, #3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3208      	adds	r2, #8
 8001d90:	0092      	lsls	r2, r2, #2
 8001d92:	58d3      	ldr	r3, [r2, r3]
 8001d94:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	2207      	movs	r2, #7
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	220f      	movs	r2, #15
 8001da0:	409a      	lsls	r2, r3
 8001da2:	0013      	movs	r3, r2
 8001da4:	43da      	mvns	r2, r3
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	4013      	ands	r3, r2
 8001daa:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	220f      	movs	r2, #15
 8001db2:	401a      	ands	r2, r3
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	2107      	movs	r1, #7
 8001db8:	400b      	ands	r3, r1
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	0013      	movs	r3, r2
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	08da      	lsrs	r2, r3, #3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3208      	adds	r2, #8
 8001dce:	0092      	lsls	r2, r2, #2
 8001dd0:	6979      	ldr	r1, [r7, #20]
 8001dd2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	2203      	movs	r2, #3
 8001de0:	409a      	lsls	r2, r3
 8001de2:	0013      	movs	r3, r2
 8001de4:	43da      	mvns	r2, r3
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	4013      	ands	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2203      	movs	r2, #3
 8001df2:	401a      	ands	r2, r3
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	0013      	movs	r3, r2
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d00b      	beq.n	8001e28 <HAL_GPIO_Init+0xd8>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d007      	beq.n	8001e28 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e1c:	2b11      	cmp	r3, #17
 8001e1e:	d003      	beq.n	8001e28 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b12      	cmp	r3, #18
 8001e26:	d130      	bne.n	8001e8a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	2203      	movs	r2, #3
 8001e34:	409a      	lsls	r2, r3
 8001e36:	0013      	movs	r3, r2
 8001e38:	43da      	mvns	r2, r3
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	68da      	ldr	r2, [r3, #12]
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	0013      	movs	r3, r2
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e5e:	2201      	movs	r2, #1
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	409a      	lsls	r2, r3
 8001e64:	0013      	movs	r3, r2
 8001e66:	43da      	mvns	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	091b      	lsrs	r3, r3, #4
 8001e74:	2201      	movs	r2, #1
 8001e76:	401a      	ands	r2, r3
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	0013      	movs	r3, r2
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d017      	beq.n	8001ec2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	0013      	movs	r3, r2
 8001ea2:	43da      	mvns	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	0013      	movs	r3, r2
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	055b      	lsls	r3, r3, #21
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d100      	bne.n	8001ed0 <HAL_GPIO_Init+0x180>
 8001ece:	e098      	b.n	8002002 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001ed0:	4a53      	ldr	r2, [pc, #332]	; (8002020 <HAL_GPIO_Init+0x2d0>)
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	089b      	lsrs	r3, r3, #2
 8001ed6:	3318      	adds	r3, #24
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	589b      	ldr	r3, [r3, r2]
 8001edc:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	220f      	movs	r2, #15
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	0013      	movs	r3, r2
 8001eec:	43da      	mvns	r2, r3
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	23a0      	movs	r3, #160	; 0xa0
 8001ef8:	05db      	lsls	r3, r3, #23
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d019      	beq.n	8001f32 <HAL_GPIO_Init+0x1e2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a48      	ldr	r2, [pc, #288]	; (8002024 <HAL_GPIO_Init+0x2d4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_GPIO_Init+0x1de>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a47      	ldr	r2, [pc, #284]	; (8002028 <HAL_GPIO_Init+0x2d8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00d      	beq.n	8001f2a <HAL_GPIO_Init+0x1da>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a46      	ldr	r2, [pc, #280]	; (800202c <HAL_GPIO_Init+0x2dc>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <HAL_GPIO_Init+0x1d6>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a45      	ldr	r2, [pc, #276]	; (8002030 <HAL_GPIO_Init+0x2e0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d101      	bne.n	8001f22 <HAL_GPIO_Init+0x1d2>
 8001f1e:	2305      	movs	r3, #5
 8001f20:	e008      	b.n	8001f34 <HAL_GPIO_Init+0x1e4>
 8001f22:	2306      	movs	r3, #6
 8001f24:	e006      	b.n	8001f34 <HAL_GPIO_Init+0x1e4>
 8001f26:	2303      	movs	r3, #3
 8001f28:	e004      	b.n	8001f34 <HAL_GPIO_Init+0x1e4>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e002      	b.n	8001f34 <HAL_GPIO_Init+0x1e4>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_GPIO_Init+0x1e4>
 8001f32:	2300      	movs	r3, #0
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	2103      	movs	r1, #3
 8001f38:	400a      	ands	r2, r1
 8001f3a:	00d2      	lsls	r2, r2, #3
 8001f3c:	4093      	lsls	r3, r2
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001f44:	4936      	ldr	r1, [pc, #216]	; (8002020 <HAL_GPIO_Init+0x2d0>)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	089b      	lsrs	r3, r3, #2
 8001f4a:	3318      	adds	r3, #24
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001f52:	4a33      	ldr	r2, [pc, #204]	; (8002020 <HAL_GPIO_Init+0x2d0>)
 8001f54:	2380      	movs	r3, #128	; 0x80
 8001f56:	58d3      	ldr	r3, [r2, r3]
 8001f58:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	43da      	mvns	r2, r3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	4013      	ands	r3, r2
 8001f62:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	025b      	lsls	r3, r3, #9
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001f78:	4929      	ldr	r1, [pc, #164]	; (8002020 <HAL_GPIO_Init+0x2d0>)
 8001f7a:	2280      	movs	r2, #128	; 0x80
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001f80:	4a27      	ldr	r2, [pc, #156]	; (8002020 <HAL_GPIO_Init+0x2d0>)
 8001f82:	2384      	movs	r3, #132	; 0x84
 8001f84:	58d3      	ldr	r3, [r2, r3]
 8001f86:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	43da      	mvns	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	029b      	lsls	r3, r3, #10
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001fa6:	491e      	ldr	r1, [pc, #120]	; (8002020 <HAL_GPIO_Init+0x2d0>)
 8001fa8:	2284      	movs	r2, #132	; 0x84
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001fae:	4b1c      	ldr	r3, [pc, #112]	; (8002020 <HAL_GPIO_Init+0x2d0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	035b      	lsls	r3, r3, #13
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001fd2:	4b13      	ldr	r3, [pc, #76]	; (8002020 <HAL_GPIO_Init+0x2d0>)
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <HAL_GPIO_Init+0x2d0>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	43da      	mvns	r2, r3
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	039b      	lsls	r3, r3, #14
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <HAL_GPIO_Init+0x2d0>)
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	3301      	adds	r3, #1
 8002006:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	40da      	lsrs	r2, r3
 8002010:	1e13      	subs	r3, r2, #0
 8002012:	d000      	beq.n	8002016 <HAL_GPIO_Init+0x2c6>
 8002014:	e6a4      	b.n	8001d60 <HAL_GPIO_Init+0x10>
  }
}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	46c0      	nop			; (mov r8, r8)
 800201a:	46bd      	mov	sp, r7
 800201c:	b006      	add	sp, #24
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021800 	.word	0x40021800
 8002024:	50000400 	.word	0x50000400
 8002028:	50000800 	.word	0x50000800
 800202c:	50000c00 	.word	0x50000c00
 8002030:	50001400 	.word	0x50001400

08002034 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	000a      	movs	r2, r1
 800203e:	1cbb      	adds	r3, r7, #2
 8002040:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	1cba      	adds	r2, r7, #2
 8002048:	8812      	ldrh	r2, [r2, #0]
 800204a:	4013      	ands	r3, r2
 800204c:	d004      	beq.n	8002058 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800204e:	230f      	movs	r3, #15
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	2201      	movs	r2, #1
 8002054:	701a      	strb	r2, [r3, #0]
 8002056:	e003      	b.n	8002060 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002058:	230f      	movs	r3, #15
 800205a:	18fb      	adds	r3, r7, r3
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002060:	230f      	movs	r3, #15
 8002062:	18fb      	adds	r3, r7, r3
 8002064:	781b      	ldrb	r3, [r3, #0]
}
 8002066:	0018      	movs	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	b004      	add	sp, #16
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	0008      	movs	r0, r1
 8002078:	0011      	movs	r1, r2
 800207a:	1cbb      	adds	r3, r7, #2
 800207c:	1c02      	adds	r2, r0, #0
 800207e:	801a      	strh	r2, [r3, #0]
 8002080:	1c7b      	adds	r3, r7, #1
 8002082:	1c0a      	adds	r2, r1, #0
 8002084:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002086:	1c7b      	adds	r3, r7, #1
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d004      	beq.n	8002098 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800208e:	1cbb      	adds	r3, r7, #2
 8002090:	881a      	ldrh	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002096:	e003      	b.n	80020a0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002098:	1cbb      	adds	r3, r7, #2
 800209a:	881a      	ldrh	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020a0:	46c0      	nop			; (mov r8, r8)
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b002      	add	sp, #8
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	0002      	movs	r2, r0
 80020b0:	1dbb      	adds	r3, r7, #6
 80020b2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80020b4:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	1dba      	adds	r2, r7, #6
 80020ba:	8812      	ldrh	r2, [r2, #0]
 80020bc:	4013      	ands	r3, r2
 80020be:	d008      	beq.n	80020d2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80020c0:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80020c2:	1dba      	adds	r2, r7, #6
 80020c4:	8812      	ldrh	r2, [r2, #0]
 80020c6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80020c8:	1dbb      	adds	r3, r7, #6
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	0018      	movs	r0, r3
 80020ce:	f000 f815 	bl	80020fc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	1dba      	adds	r2, r7, #6
 80020d8:	8812      	ldrh	r2, [r2, #0]
 80020da:	4013      	ands	r3, r2
 80020dc:	d008      	beq.n	80020f0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80020e0:	1dba      	adds	r2, r7, #6
 80020e2:	8812      	ldrh	r2, [r2, #0]
 80020e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80020e6:	1dbb      	adds	r3, r7, #6
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	0018      	movs	r0, r3
 80020ec:	f000 f810 	bl	8002110 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80020f0:	46c0      	nop			; (mov r8, r8)
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b002      	add	sp, #8
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40021800 	.word	0x40021800

080020fc <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	0002      	movs	r2, r0
 8002104:	1dbb      	adds	r3, r7, #6
 8002106:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002108:	46c0      	nop			; (mov r8, r8)
 800210a:	46bd      	mov	sp, r7
 800210c:	b002      	add	sp, #8
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	0002      	movs	r2, r0
 8002118:	1dbb      	adds	r3, r7, #6
 800211a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800211c:	46c0      	nop			; (mov r8, r8)
 800211e:	46bd      	mov	sp, r7
 8002120:	b002      	add	sp, #8
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e08f      	b.n	8002256 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2241      	movs	r2, #65	; 0x41
 800213a:	5c9b      	ldrb	r3, [r3, r2]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d107      	bne.n	8002152 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2240      	movs	r2, #64	; 0x40
 8002146:	2100      	movs	r1, #0
 8002148:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	0018      	movs	r0, r3
 800214e:	f7ff fac1 	bl	80016d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2241      	movs	r2, #65	; 0x41
 8002156:	2124      	movs	r1, #36	; 0x24
 8002158:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2101      	movs	r1, #1
 8002166:	438a      	bics	r2, r1
 8002168:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	493b      	ldr	r1, [pc, #236]	; (8002260 <HAL_I2C_Init+0x13c>)
 8002174:	400a      	ands	r2, r1
 8002176:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4938      	ldr	r1, [pc, #224]	; (8002264 <HAL_I2C_Init+0x140>)
 8002184:	400a      	ands	r2, r1
 8002186:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d108      	bne.n	80021a2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2180      	movs	r1, #128	; 0x80
 800219a:	0209      	lsls	r1, r1, #8
 800219c:	430a      	orrs	r2, r1
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	e007      	b.n	80021b2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2184      	movs	r1, #132	; 0x84
 80021ac:	0209      	lsls	r1, r1, #8
 80021ae:	430a      	orrs	r2, r1
 80021b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d109      	bne.n	80021ce <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2180      	movs	r1, #128	; 0x80
 80021c6:	0109      	lsls	r1, r1, #4
 80021c8:	430a      	orrs	r2, r1
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	e007      	b.n	80021de <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4923      	ldr	r1, [pc, #140]	; (8002268 <HAL_I2C_Init+0x144>)
 80021da:	400a      	ands	r2, r1
 80021dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4920      	ldr	r1, [pc, #128]	; (800226c <HAL_I2C_Init+0x148>)
 80021ea:	430a      	orrs	r2, r1
 80021ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	491a      	ldr	r1, [pc, #104]	; (8002264 <HAL_I2C_Init+0x140>)
 80021fa:	400a      	ands	r2, r1
 80021fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691a      	ldr	r2, [r3, #16]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	431a      	orrs	r2, r3
 8002208:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69d9      	ldr	r1, [r3, #28]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a1a      	ldr	r2, [r3, #32]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2101      	movs	r1, #1
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2241      	movs	r2, #65	; 0x41
 8002242:	2120      	movs	r1, #32
 8002244:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2242      	movs	r2, #66	; 0x42
 8002250:	2100      	movs	r1, #0
 8002252:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	0018      	movs	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	b002      	add	sp, #8
 800225c:	bd80      	pop	{r7, pc}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	f0ffffff 	.word	0xf0ffffff
 8002264:	ffff7fff 	.word	0xffff7fff
 8002268:	fffff7ff 	.word	0xfffff7ff
 800226c:	02008000 	.word	0x02008000

08002270 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2241      	movs	r2, #65	; 0x41
 800227e:	5c9b      	ldrb	r3, [r3, r2]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b20      	cmp	r3, #32
 8002284:	d138      	bne.n	80022f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2240      	movs	r2, #64	; 0x40
 800228a:	5c9b      	ldrb	r3, [r3, r2]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002290:	2302      	movs	r3, #2
 8002292:	e032      	b.n	80022fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2240      	movs	r2, #64	; 0x40
 8002298:	2101      	movs	r1, #1
 800229a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2241      	movs	r2, #65	; 0x41
 80022a0:	2124      	movs	r1, #36	; 0x24
 80022a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2101      	movs	r1, #1
 80022b0:	438a      	bics	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4911      	ldr	r1, [pc, #68]	; (8002304 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80022c0:	400a      	ands	r2, r1
 80022c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6819      	ldr	r1, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2101      	movs	r1, #1
 80022e0:	430a      	orrs	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2241      	movs	r2, #65	; 0x41
 80022e8:	2120      	movs	r1, #32
 80022ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2240      	movs	r2, #64	; 0x40
 80022f0:	2100      	movs	r1, #0
 80022f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	e000      	b.n	80022fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022f8:	2302      	movs	r3, #2
  }
}
 80022fa:	0018      	movs	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b002      	add	sp, #8
 8002300:	bd80      	pop	{r7, pc}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	ffffefff 	.word	0xffffefff

08002308 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2241      	movs	r2, #65	; 0x41
 8002316:	5c9b      	ldrb	r3, [r3, r2]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b20      	cmp	r3, #32
 800231c:	d139      	bne.n	8002392 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2240      	movs	r2, #64	; 0x40
 8002322:	5c9b      	ldrb	r3, [r3, r2]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002328:	2302      	movs	r3, #2
 800232a:	e033      	b.n	8002394 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2240      	movs	r2, #64	; 0x40
 8002330:	2101      	movs	r1, #1
 8002332:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2241      	movs	r2, #65	; 0x41
 8002338:	2124      	movs	r1, #36	; 0x24
 800233a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2101      	movs	r1, #1
 8002348:	438a      	bics	r2, r1
 800234a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4a11      	ldr	r2, [pc, #68]	; (800239c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002358:	4013      	ands	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	021b      	lsls	r3, r3, #8
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	4313      	orrs	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2101      	movs	r1, #1
 800237a:	430a      	orrs	r2, r1
 800237c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2241      	movs	r2, #65	; 0x41
 8002382:	2120      	movs	r1, #32
 8002384:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2240      	movs	r2, #64	; 0x40
 800238a:	2100      	movs	r1, #0
 800238c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	e000      	b.n	8002394 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002392:	2302      	movs	r3, #2
  }
}
 8002394:	0018      	movs	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	b004      	add	sp, #16
 800239a:	bd80      	pop	{r7, pc}
 800239c:	fffff0ff 	.word	0xfffff0ff

080023a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e1d0      	b.n	8002754 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2201      	movs	r2, #1
 80023b8:	4013      	ands	r3, r2
 80023ba:	d100      	bne.n	80023be <HAL_RCC_OscConfig+0x1e>
 80023bc:	e069      	b.n	8002492 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023be:	4bc8      	ldr	r3, [pc, #800]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2238      	movs	r2, #56	; 0x38
 80023c4:	4013      	ands	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d105      	bne.n	80023da <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d15d      	bne.n	8002492 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e1bc      	b.n	8002754 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	025b      	lsls	r3, r3, #9
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d107      	bne.n	80023f6 <HAL_RCC_OscConfig+0x56>
 80023e6:	4bbe      	ldr	r3, [pc, #760]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	4bbd      	ldr	r3, [pc, #756]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 80023ec:	2180      	movs	r1, #128	; 0x80
 80023ee:	0249      	lsls	r1, r1, #9
 80023f0:	430a      	orrs	r2, r1
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	e020      	b.n	8002438 <HAL_RCC_OscConfig+0x98>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	23a0      	movs	r3, #160	; 0xa0
 80023fc:	02db      	lsls	r3, r3, #11
 80023fe:	429a      	cmp	r2, r3
 8002400:	d10e      	bne.n	8002420 <HAL_RCC_OscConfig+0x80>
 8002402:	4bb7      	ldr	r3, [pc, #732]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	4bb6      	ldr	r3, [pc, #728]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 8002408:	2180      	movs	r1, #128	; 0x80
 800240a:	02c9      	lsls	r1, r1, #11
 800240c:	430a      	orrs	r2, r1
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	4bb3      	ldr	r3, [pc, #716]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	4bb2      	ldr	r3, [pc, #712]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 8002416:	2180      	movs	r1, #128	; 0x80
 8002418:	0249      	lsls	r1, r1, #9
 800241a:	430a      	orrs	r2, r1
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	e00b      	b.n	8002438 <HAL_RCC_OscConfig+0x98>
 8002420:	4baf      	ldr	r3, [pc, #700]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4bae      	ldr	r3, [pc, #696]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 8002426:	49af      	ldr	r1, [pc, #700]	; (80026e4 <HAL_RCC_OscConfig+0x344>)
 8002428:	400a      	ands	r2, r1
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	4bac      	ldr	r3, [pc, #688]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4bab      	ldr	r3, [pc, #684]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 8002432:	49ad      	ldr	r1, [pc, #692]	; (80026e8 <HAL_RCC_OscConfig+0x348>)
 8002434:	400a      	ands	r2, r1
 8002436:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d014      	beq.n	800246a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002440:	f7ff fb7a 	bl	8001b38 <HAL_GetTick>
 8002444:	0003      	movs	r3, r0
 8002446:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800244a:	f7ff fb75 	bl	8001b38 <HAL_GetTick>
 800244e:	0002      	movs	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b64      	cmp	r3, #100	; 0x64
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e17b      	b.n	8002754 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800245c:	4ba0      	ldr	r3, [pc, #640]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	2380      	movs	r3, #128	; 0x80
 8002462:	029b      	lsls	r3, r3, #10
 8002464:	4013      	ands	r3, r2
 8002466:	d0f0      	beq.n	800244a <HAL_RCC_OscConfig+0xaa>
 8002468:	e013      	b.n	8002492 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246a:	f7ff fb65 	bl	8001b38 <HAL_GetTick>
 800246e:	0003      	movs	r3, r0
 8002470:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002474:	f7ff fb60 	bl	8001b38 <HAL_GetTick>
 8002478:	0002      	movs	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	; 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e166      	b.n	8002754 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002486:	4b96      	ldr	r3, [pc, #600]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	029b      	lsls	r3, r3, #10
 800248e:	4013      	ands	r3, r2
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2202      	movs	r2, #2
 8002498:	4013      	ands	r3, r2
 800249a:	d100      	bne.n	800249e <HAL_RCC_OscConfig+0xfe>
 800249c:	e086      	b.n	80025ac <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800249e:	4b90      	ldr	r3, [pc, #576]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2238      	movs	r2, #56	; 0x38
 80024a4:	4013      	ands	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d12f      	bne.n	800250e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e14c      	b.n	8002754 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ba:	4b89      	ldr	r3, [pc, #548]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	4a8b      	ldr	r2, [pc, #556]	; (80026ec <HAL_RCC_OscConfig+0x34c>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	0019      	movs	r1, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	021a      	lsls	r2, r3, #8
 80024ca:	4b85      	ldr	r3, [pc, #532]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 80024cc:	430a      	orrs	r2, r1
 80024ce:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d112      	bne.n	80024fc <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80024d6:	4b82      	ldr	r3, [pc, #520]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a85      	ldr	r2, [pc, #532]	; (80026f0 <HAL_RCC_OscConfig+0x350>)
 80024dc:	4013      	ands	r3, r2
 80024de:	0019      	movs	r1, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	4b7e      	ldr	r3, [pc, #504]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 80024e6:	430a      	orrs	r2, r1
 80024e8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80024ea:	4b7d      	ldr	r3, [pc, #500]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	0adb      	lsrs	r3, r3, #11
 80024f0:	2207      	movs	r2, #7
 80024f2:	4013      	ands	r3, r2
 80024f4:	4a7f      	ldr	r2, [pc, #508]	; (80026f4 <HAL_RCC_OscConfig+0x354>)
 80024f6:	40da      	lsrs	r2, r3
 80024f8:	4b7f      	ldr	r3, [pc, #508]	; (80026f8 <HAL_RCC_OscConfig+0x358>)
 80024fa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024fc:	4b7f      	ldr	r3, [pc, #508]	; (80026fc <HAL_RCC_OscConfig+0x35c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	0018      	movs	r0, r3
 8002502:	f7ff fabd 	bl	8001a80 <HAL_InitTick>
 8002506:	1e03      	subs	r3, r0, #0
 8002508:	d050      	beq.n	80025ac <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e122      	b.n	8002754 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d030      	beq.n	8002578 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002516:	4b72      	ldr	r3, [pc, #456]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a75      	ldr	r2, [pc, #468]	; (80026f0 <HAL_RCC_OscConfig+0x350>)
 800251c:	4013      	ands	r3, r2
 800251e:	0019      	movs	r1, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691a      	ldr	r2, [r3, #16]
 8002524:	4b6e      	ldr	r3, [pc, #440]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 8002526:	430a      	orrs	r2, r1
 8002528:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800252a:	4b6d      	ldr	r3, [pc, #436]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	4b6c      	ldr	r3, [pc, #432]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 8002530:	2180      	movs	r1, #128	; 0x80
 8002532:	0049      	lsls	r1, r1, #1
 8002534:	430a      	orrs	r2, r1
 8002536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7ff fafe 	bl	8001b38 <HAL_GetTick>
 800253c:	0003      	movs	r3, r0
 800253e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002542:	f7ff faf9 	bl	8001b38 <HAL_GetTick>
 8002546:	0002      	movs	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e0ff      	b.n	8002754 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002554:	4b62      	ldr	r3, [pc, #392]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4013      	ands	r3, r2
 800255e:	d0f0      	beq.n	8002542 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002560:	4b5f      	ldr	r3, [pc, #380]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	4a61      	ldr	r2, [pc, #388]	; (80026ec <HAL_RCC_OscConfig+0x34c>)
 8002566:	4013      	ands	r3, r2
 8002568:	0019      	movs	r1, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	021a      	lsls	r2, r3, #8
 8002570:	4b5b      	ldr	r3, [pc, #364]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 8002572:	430a      	orrs	r2, r1
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	e019      	b.n	80025ac <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002578:	4b59      	ldr	r3, [pc, #356]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b58      	ldr	r3, [pc, #352]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 800257e:	4960      	ldr	r1, [pc, #384]	; (8002700 <HAL_RCC_OscConfig+0x360>)
 8002580:	400a      	ands	r2, r1
 8002582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7ff fad8 	bl	8001b38 <HAL_GetTick>
 8002588:	0003      	movs	r3, r0
 800258a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800258e:	f7ff fad3 	bl	8001b38 <HAL_GetTick>
 8002592:	0002      	movs	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e0d9      	b.n	8002754 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025a0:	4b4f      	ldr	r3, [pc, #316]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4013      	ands	r3, r2
 80025aa:	d1f0      	bne.n	800258e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2208      	movs	r2, #8
 80025b2:	4013      	ands	r3, r2
 80025b4:	d042      	beq.n	800263c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80025b6:	4b4a      	ldr	r3, [pc, #296]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2238      	movs	r2, #56	; 0x38
 80025bc:	4013      	ands	r3, r2
 80025be:	2b18      	cmp	r3, #24
 80025c0:	d105      	bne.n	80025ce <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d138      	bne.n	800263c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e0c2      	b.n	8002754 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d019      	beq.n	800260a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80025d6:	4b42      	ldr	r3, [pc, #264]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 80025d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025da:	4b41      	ldr	r3, [pc, #260]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 80025dc:	2101      	movs	r1, #1
 80025de:	430a      	orrs	r2, r1
 80025e0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e2:	f7ff faa9 	bl	8001b38 <HAL_GetTick>
 80025e6:	0003      	movs	r3, r0
 80025e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80025ec:	f7ff faa4 	bl	8001b38 <HAL_GetTick>
 80025f0:	0002      	movs	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e0aa      	b.n	8002754 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80025fe:	4b38      	ldr	r3, [pc, #224]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 8002600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002602:	2202      	movs	r2, #2
 8002604:	4013      	ands	r3, r2
 8002606:	d0f1      	beq.n	80025ec <HAL_RCC_OscConfig+0x24c>
 8002608:	e018      	b.n	800263c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800260a:	4b35      	ldr	r3, [pc, #212]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 800260c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800260e:	4b34      	ldr	r3, [pc, #208]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 8002610:	2101      	movs	r1, #1
 8002612:	438a      	bics	r2, r1
 8002614:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002616:	f7ff fa8f 	bl	8001b38 <HAL_GetTick>
 800261a:	0003      	movs	r3, r0
 800261c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002620:	f7ff fa8a 	bl	8001b38 <HAL_GetTick>
 8002624:	0002      	movs	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e090      	b.n	8002754 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002632:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 8002634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002636:	2202      	movs	r2, #2
 8002638:	4013      	ands	r3, r2
 800263a:	d1f1      	bne.n	8002620 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2204      	movs	r2, #4
 8002642:	4013      	ands	r3, r2
 8002644:	d100      	bne.n	8002648 <HAL_RCC_OscConfig+0x2a8>
 8002646:	e084      	b.n	8002752 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002648:	230f      	movs	r3, #15
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002650:	4b23      	ldr	r3, [pc, #140]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2238      	movs	r2, #56	; 0x38
 8002656:	4013      	ands	r3, r2
 8002658:	2b20      	cmp	r3, #32
 800265a:	d106      	bne.n	800266a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d000      	beq.n	8002666 <HAL_RCC_OscConfig+0x2c6>
 8002664:	e075      	b.n	8002752 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e074      	b.n	8002754 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d106      	bne.n	8002680 <HAL_RCC_OscConfig+0x2e0>
 8002672:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 8002674:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002676:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 8002678:	2101      	movs	r1, #1
 800267a:	430a      	orrs	r2, r1
 800267c:	65da      	str	r2, [r3, #92]	; 0x5c
 800267e:	e01c      	b.n	80026ba <HAL_RCC_OscConfig+0x31a>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b05      	cmp	r3, #5
 8002686:	d10c      	bne.n	80026a2 <HAL_RCC_OscConfig+0x302>
 8002688:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 800268a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800268c:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 800268e:	2104      	movs	r1, #4
 8002690:	430a      	orrs	r2, r1
 8002692:	65da      	str	r2, [r3, #92]	; 0x5c
 8002694:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 8002696:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002698:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 800269a:	2101      	movs	r1, #1
 800269c:	430a      	orrs	r2, r1
 800269e:	65da      	str	r2, [r3, #92]	; 0x5c
 80026a0:	e00b      	b.n	80026ba <HAL_RCC_OscConfig+0x31a>
 80026a2:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 80026a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026a6:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 80026a8:	2101      	movs	r1, #1
 80026aa:	438a      	bics	r2, r1
 80026ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80026ae:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 80026b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026b2:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <HAL_RCC_OscConfig+0x340>)
 80026b4:	2104      	movs	r1, #4
 80026b6:	438a      	bics	r2, r1
 80026b8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d028      	beq.n	8002714 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c2:	f7ff fa39 	bl	8001b38 <HAL_GetTick>
 80026c6:	0003      	movs	r3, r0
 80026c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80026ca:	e01d      	b.n	8002708 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026cc:	f7ff fa34 	bl	8001b38 <HAL_GetTick>
 80026d0:	0002      	movs	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	4a0b      	ldr	r2, [pc, #44]	; (8002704 <HAL_RCC_OscConfig+0x364>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d915      	bls.n	8002708 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e039      	b.n	8002754 <HAL_RCC_OscConfig+0x3b4>
 80026e0:	40021000 	.word	0x40021000
 80026e4:	fffeffff 	.word	0xfffeffff
 80026e8:	fffbffff 	.word	0xfffbffff
 80026ec:	ffff80ff 	.word	0xffff80ff
 80026f0:	ffffc7ff 	.word	0xffffc7ff
 80026f4:	02dc6c00 	.word	0x02dc6c00
 80026f8:	20000004 	.word	0x20000004
 80026fc:	20000008 	.word	0x20000008
 8002700:	fffffeff 	.word	0xfffffeff
 8002704:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002708:	4b14      	ldr	r3, [pc, #80]	; (800275c <HAL_RCC_OscConfig+0x3bc>)
 800270a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270c:	2202      	movs	r2, #2
 800270e:	4013      	ands	r3, r2
 8002710:	d0dc      	beq.n	80026cc <HAL_RCC_OscConfig+0x32c>
 8002712:	e013      	b.n	800273c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002714:	f7ff fa10 	bl	8001b38 <HAL_GetTick>
 8002718:	0003      	movs	r3, r0
 800271a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800271c:	e009      	b.n	8002732 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800271e:	f7ff fa0b 	bl	8001b38 <HAL_GetTick>
 8002722:	0002      	movs	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	4a0d      	ldr	r2, [pc, #52]	; (8002760 <HAL_RCC_OscConfig+0x3c0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e010      	b.n	8002754 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002732:	4b0a      	ldr	r3, [pc, #40]	; (800275c <HAL_RCC_OscConfig+0x3bc>)
 8002734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002736:	2202      	movs	r2, #2
 8002738:	4013      	ands	r3, r2
 800273a:	d1f0      	bne.n	800271e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800273c:	230f      	movs	r3, #15
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d105      	bne.n	8002752 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_RCC_OscConfig+0x3bc>)
 8002748:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800274a:	4b04      	ldr	r3, [pc, #16]	; (800275c <HAL_RCC_OscConfig+0x3bc>)
 800274c:	4905      	ldr	r1, [pc, #20]	; (8002764 <HAL_RCC_OscConfig+0x3c4>)
 800274e:	400a      	ands	r2, r1
 8002750:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	0018      	movs	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	b006      	add	sp, #24
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000
 8002760:	00001388 	.word	0x00001388
 8002764:	efffffff 	.word	0xefffffff

08002768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0e9      	b.n	8002950 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800277c:	4b76      	ldr	r3, [pc, #472]	; (8002958 <HAL_RCC_ClockConfig+0x1f0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2207      	movs	r2, #7
 8002782:	4013      	ands	r3, r2
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d91e      	bls.n	80027c8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b73      	ldr	r3, [pc, #460]	; (8002958 <HAL_RCC_ClockConfig+0x1f0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2207      	movs	r2, #7
 8002790:	4393      	bics	r3, r2
 8002792:	0019      	movs	r1, r3
 8002794:	4b70      	ldr	r3, [pc, #448]	; (8002958 <HAL_RCC_ClockConfig+0x1f0>)
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800279c:	f7ff f9cc 	bl	8001b38 <HAL_GetTick>
 80027a0:	0003      	movs	r3, r0
 80027a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027a4:	e009      	b.n	80027ba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80027a6:	f7ff f9c7 	bl	8001b38 <HAL_GetTick>
 80027aa:	0002      	movs	r2, r0
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	4a6a      	ldr	r2, [pc, #424]	; (800295c <HAL_RCC_ClockConfig+0x1f4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e0ca      	b.n	8002950 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027ba:	4b67      	ldr	r3, [pc, #412]	; (8002958 <HAL_RCC_ClockConfig+0x1f0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2207      	movs	r2, #7
 80027c0:	4013      	ands	r3, r2
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d1ee      	bne.n	80027a6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2202      	movs	r2, #2
 80027ce:	4013      	ands	r3, r2
 80027d0:	d017      	beq.n	8002802 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2204      	movs	r2, #4
 80027d8:	4013      	ands	r3, r2
 80027da:	d008      	beq.n	80027ee <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80027dc:	4b60      	ldr	r3, [pc, #384]	; (8002960 <HAL_RCC_ClockConfig+0x1f8>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	4a60      	ldr	r2, [pc, #384]	; (8002964 <HAL_RCC_ClockConfig+0x1fc>)
 80027e2:	401a      	ands	r2, r3
 80027e4:	4b5e      	ldr	r3, [pc, #376]	; (8002960 <HAL_RCC_ClockConfig+0x1f8>)
 80027e6:	21b0      	movs	r1, #176	; 0xb0
 80027e8:	0109      	lsls	r1, r1, #4
 80027ea:	430a      	orrs	r2, r1
 80027ec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ee:	4b5c      	ldr	r3, [pc, #368]	; (8002960 <HAL_RCC_ClockConfig+0x1f8>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	4a5d      	ldr	r2, [pc, #372]	; (8002968 <HAL_RCC_ClockConfig+0x200>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	0019      	movs	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	4b58      	ldr	r3, [pc, #352]	; (8002960 <HAL_RCC_ClockConfig+0x1f8>)
 80027fe:	430a      	orrs	r2, r1
 8002800:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2201      	movs	r2, #1
 8002808:	4013      	ands	r3, r2
 800280a:	d055      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 800280c:	4b54      	ldr	r3, [pc, #336]	; (8002960 <HAL_RCC_ClockConfig+0x1f8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	221c      	movs	r2, #28
 8002812:	4393      	bics	r3, r2
 8002814:	0019      	movs	r1, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	4b51      	ldr	r3, [pc, #324]	; (8002960 <HAL_RCC_ClockConfig+0x1f8>)
 800281c:	430a      	orrs	r2, r1
 800281e:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d107      	bne.n	8002838 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002828:	4b4d      	ldr	r3, [pc, #308]	; (8002960 <HAL_RCC_ClockConfig+0x1f8>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	029b      	lsls	r3, r3, #10
 8002830:	4013      	ands	r3, r2
 8002832:	d11f      	bne.n	8002874 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e08b      	b.n	8002950 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d107      	bne.n	8002850 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002840:	4b47      	ldr	r3, [pc, #284]	; (8002960 <HAL_RCC_ClockConfig+0x1f8>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4013      	ands	r3, r2
 800284a:	d113      	bne.n	8002874 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e07f      	b.n	8002950 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b03      	cmp	r3, #3
 8002856:	d106      	bne.n	8002866 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002858:	4b41      	ldr	r3, [pc, #260]	; (8002960 <HAL_RCC_ClockConfig+0x1f8>)
 800285a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800285c:	2202      	movs	r2, #2
 800285e:	4013      	ands	r3, r2
 8002860:	d108      	bne.n	8002874 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e074      	b.n	8002950 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002866:	4b3e      	ldr	r3, [pc, #248]	; (8002960 <HAL_RCC_ClockConfig+0x1f8>)
 8002868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286a:	2202      	movs	r2, #2
 800286c:	4013      	ands	r3, r2
 800286e:	d101      	bne.n	8002874 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e06d      	b.n	8002950 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002874:	4b3a      	ldr	r3, [pc, #232]	; (8002960 <HAL_RCC_ClockConfig+0x1f8>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2207      	movs	r2, #7
 800287a:	4393      	bics	r3, r2
 800287c:	0019      	movs	r1, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	4b37      	ldr	r3, [pc, #220]	; (8002960 <HAL_RCC_ClockConfig+0x1f8>)
 8002884:	430a      	orrs	r2, r1
 8002886:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002888:	f7ff f956 	bl	8001b38 <HAL_GetTick>
 800288c:	0003      	movs	r3, r0
 800288e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002890:	e009      	b.n	80028a6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002892:	f7ff f951 	bl	8001b38 <HAL_GetTick>
 8002896:	0002      	movs	r2, r0
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	4a2f      	ldr	r2, [pc, #188]	; (800295c <HAL_RCC_ClockConfig+0x1f4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e054      	b.n	8002950 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a6:	4b2e      	ldr	r3, [pc, #184]	; (8002960 <HAL_RCC_ClockConfig+0x1f8>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2238      	movs	r2, #56	; 0x38
 80028ac:	401a      	ands	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d1ec      	bne.n	8002892 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028b8:	4b27      	ldr	r3, [pc, #156]	; (8002958 <HAL_RCC_ClockConfig+0x1f0>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2207      	movs	r2, #7
 80028be:	4013      	ands	r3, r2
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d21e      	bcs.n	8002904 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c6:	4b24      	ldr	r3, [pc, #144]	; (8002958 <HAL_RCC_ClockConfig+0x1f0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2207      	movs	r2, #7
 80028cc:	4393      	bics	r3, r2
 80028ce:	0019      	movs	r1, r3
 80028d0:	4b21      	ldr	r3, [pc, #132]	; (8002958 <HAL_RCC_ClockConfig+0x1f0>)
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028d8:	f7ff f92e 	bl	8001b38 <HAL_GetTick>
 80028dc:	0003      	movs	r3, r0
 80028de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028e0:	e009      	b.n	80028f6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80028e2:	f7ff f929 	bl	8001b38 <HAL_GetTick>
 80028e6:	0002      	movs	r2, r0
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	4a1b      	ldr	r2, [pc, #108]	; (800295c <HAL_RCC_ClockConfig+0x1f4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e02c      	b.n	8002950 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028f6:	4b18      	ldr	r3, [pc, #96]	; (8002958 <HAL_RCC_ClockConfig+0x1f0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2207      	movs	r2, #7
 80028fc:	4013      	ands	r3, r2
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d1ee      	bne.n	80028e2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2204      	movs	r2, #4
 800290a:	4013      	ands	r3, r2
 800290c:	d009      	beq.n	8002922 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800290e:	4b14      	ldr	r3, [pc, #80]	; (8002960 <HAL_RCC_ClockConfig+0x1f8>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	4a16      	ldr	r2, [pc, #88]	; (800296c <HAL_RCC_ClockConfig+0x204>)
 8002914:	4013      	ands	r3, r2
 8002916:	0019      	movs	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691a      	ldr	r2, [r3, #16]
 800291c:	4b10      	ldr	r3, [pc, #64]	; (8002960 <HAL_RCC_ClockConfig+0x1f8>)
 800291e:	430a      	orrs	r2, r1
 8002920:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002922:	f000 f82b 	bl	800297c <HAL_RCC_GetSysClockFreq>
 8002926:	0001      	movs	r1, r0
 8002928:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <HAL_RCC_ClockConfig+0x1f8>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	0a1b      	lsrs	r3, r3, #8
 800292e:	220f      	movs	r2, #15
 8002930:	401a      	ands	r2, r3
 8002932:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <HAL_RCC_ClockConfig+0x208>)
 8002934:	0092      	lsls	r2, r2, #2
 8002936:	58d3      	ldr	r3, [r2, r3]
 8002938:	221f      	movs	r2, #31
 800293a:	4013      	ands	r3, r2
 800293c:	000a      	movs	r2, r1
 800293e:	40da      	lsrs	r2, r3
 8002940:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <HAL_RCC_ClockConfig+0x20c>)
 8002942:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002944:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <HAL_RCC_ClockConfig+0x210>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	0018      	movs	r0, r3
 800294a:	f7ff f899 	bl	8001a80 <HAL_InitTick>
 800294e:	0003      	movs	r3, r0
}
 8002950:	0018      	movs	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	b004      	add	sp, #16
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40022000 	.word	0x40022000
 800295c:	00001388 	.word	0x00001388
 8002960:	40021000 	.word	0x40021000
 8002964:	ffff84ff 	.word	0xffff84ff
 8002968:	fffff0ff 	.word	0xfffff0ff
 800296c:	ffff8fff 	.word	0xffff8fff
 8002970:	08004ff8 	.word	0x08004ff8
 8002974:	20000004 	.word	0x20000004
 8002978:	20000008 	.word	0x20000008

0800297c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002982:	4b1c      	ldr	r3, [pc, #112]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x78>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2238      	movs	r2, #56	; 0x38
 8002988:	4013      	ands	r3, r2
 800298a:	d10f      	bne.n	80029ac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800298c:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x78>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	0adb      	lsrs	r3, r3, #11
 8002992:	2207      	movs	r2, #7
 8002994:	4013      	ands	r3, r2
 8002996:	2201      	movs	r2, #1
 8002998:	409a      	lsls	r2, r3
 800299a:	0013      	movs	r3, r2
 800299c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800299e:	6839      	ldr	r1, [r7, #0]
 80029a0:	4815      	ldr	r0, [pc, #84]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x7c>)
 80029a2:	f7fd fbc3 	bl	800012c <__udivsi3>
 80029a6:	0003      	movs	r3, r0
 80029a8:	607b      	str	r3, [r7, #4]
 80029aa:	e01e      	b.n	80029ea <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x78>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2238      	movs	r2, #56	; 0x38
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d102      	bne.n	80029be <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029b8:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x7c>)
 80029ba:	607b      	str	r3, [r7, #4]
 80029bc:	e015      	b.n	80029ea <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80029be:	4b0d      	ldr	r3, [pc, #52]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x78>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2238      	movs	r2, #56	; 0x38
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b20      	cmp	r3, #32
 80029c8:	d103      	bne.n	80029d2 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80029ca:	2380      	movs	r3, #128	; 0x80
 80029cc:	021b      	lsls	r3, r3, #8
 80029ce:	607b      	str	r3, [r7, #4]
 80029d0:	e00b      	b.n	80029ea <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80029d2:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x78>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2238      	movs	r2, #56	; 0x38
 80029d8:	4013      	ands	r3, r2
 80029da:	2b18      	cmp	r3, #24
 80029dc:	d103      	bne.n	80029e6 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80029de:	23fa      	movs	r3, #250	; 0xfa
 80029e0:	01db      	lsls	r3, r3, #7
 80029e2:	607b      	str	r3, [r7, #4]
 80029e4:	e001      	b.n	80029ea <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 80029ea:	687b      	ldr	r3, [r7, #4]
}
 80029ec:	0018      	movs	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b002      	add	sp, #8
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40021000 	.word	0x40021000
 80029f8:	02dc6c00 	.word	0x02dc6c00

080029fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a00:	4b02      	ldr	r3, [pc, #8]	; (8002a0c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a02:	681b      	ldr	r3, [r3, #0]
}
 8002a04:	0018      	movs	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	20000004 	.word	0x20000004

08002a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002a14:	f7ff fff2 	bl	80029fc <HAL_RCC_GetHCLKFreq>
 8002a18:	0001      	movs	r1, r0
 8002a1a:	4b07      	ldr	r3, [pc, #28]	; (8002a38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	0b1b      	lsrs	r3, r3, #12
 8002a20:	2207      	movs	r2, #7
 8002a22:	401a      	ands	r2, r3
 8002a24:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002a26:	0092      	lsls	r2, r2, #2
 8002a28:	58d3      	ldr	r3, [r2, r3]
 8002a2a:	221f      	movs	r2, #31
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	40d9      	lsrs	r1, r3
 8002a30:	000b      	movs	r3, r1
}
 8002a32:	0018      	movs	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	08005038 	.word	0x08005038

08002a40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002a48:	2313      	movs	r3, #19
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a50:	2312      	movs	r3, #18
 8002a52:	18fb      	adds	r3, r7, r3
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	029b      	lsls	r3, r3, #10
 8002a60:	4013      	ands	r3, r2
 8002a62:	d100      	bne.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002a64:	e079      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a66:	2011      	movs	r0, #17
 8002a68:	183b      	adds	r3, r7, r0
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6e:	4b64      	ldr	r3, [pc, #400]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a72:	2380      	movs	r3, #128	; 0x80
 8002a74:	055b      	lsls	r3, r3, #21
 8002a76:	4013      	ands	r3, r2
 8002a78:	d110      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7a:	4b61      	ldr	r3, [pc, #388]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002a7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a7e:	4b60      	ldr	r3, [pc, #384]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002a80:	2180      	movs	r1, #128	; 0x80
 8002a82:	0549      	lsls	r1, r1, #21
 8002a84:	430a      	orrs	r2, r1
 8002a86:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a88:	4b5d      	ldr	r3, [pc, #372]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002a8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a8c:	2380      	movs	r3, #128	; 0x80
 8002a8e:	055b      	lsls	r3, r3, #21
 8002a90:	4013      	ands	r3, r2
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a96:	183b      	adds	r3, r7, r0
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002a9c:	4b58      	ldr	r3, [pc, #352]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002a9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002aa0:	23c0      	movs	r3, #192	; 0xc0
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d019      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d014      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002ab8:	4b51      	ldr	r3, [pc, #324]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abc:	4a51      	ldr	r2, [pc, #324]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ac2:	4b4f      	ldr	r3, [pc, #316]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ac4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ac6:	4b4e      	ldr	r3, [pc, #312]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ac8:	2180      	movs	r1, #128	; 0x80
 8002aca:	0249      	lsls	r1, r1, #9
 8002acc:	430a      	orrs	r2, r1
 8002ace:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ad0:	4b4b      	ldr	r3, [pc, #300]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ad2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ad4:	4b4a      	ldr	r3, [pc, #296]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ad6:	494c      	ldr	r1, [pc, #304]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002ad8:	400a      	ands	r2, r1
 8002ada:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002adc:	4b48      	ldr	r3, [pc, #288]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d016      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aea:	f7ff f825 	bl	8001b38 <HAL_GetTick>
 8002aee:	0003      	movs	r3, r0
 8002af0:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002af2:	e00c      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af4:	f7ff f820 	bl	8001b38 <HAL_GetTick>
 8002af8:	0002      	movs	r2, r0
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	4a43      	ldr	r2, [pc, #268]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d904      	bls.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8002b04:	2313      	movs	r3, #19
 8002b06:	18fb      	adds	r3, r7, r3
 8002b08:	2203      	movs	r2, #3
 8002b0a:	701a      	strb	r2, [r3, #0]
          break;
 8002b0c:	e004      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002b0e:	4b3c      	ldr	r3, [pc, #240]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b12:	2202      	movs	r2, #2
 8002b14:	4013      	ands	r3, r2
 8002b16:	d0ed      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8002b18:	2313      	movs	r3, #19
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10a      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b22:	4b37      	ldr	r3, [pc, #220]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b26:	4a37      	ldr	r2, [pc, #220]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	0019      	movs	r1, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699a      	ldr	r2, [r3, #24]
 8002b30:	4b33      	ldr	r3, [pc, #204]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b32:	430a      	orrs	r2, r1
 8002b34:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b36:	e005      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b38:	2312      	movs	r3, #18
 8002b3a:	18fb      	adds	r3, r7, r3
 8002b3c:	2213      	movs	r2, #19
 8002b3e:	18ba      	adds	r2, r7, r2
 8002b40:	7812      	ldrb	r2, [r2, #0]
 8002b42:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b44:	2311      	movs	r3, #17
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d105      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b4e:	4b2c      	ldr	r3, [pc, #176]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b52:	4b2b      	ldr	r3, [pc, #172]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b54:	492e      	ldr	r1, [pc, #184]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b56:	400a      	ands	r2, r1
 8002b58:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	4013      	ands	r3, r2
 8002b62:	d009      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b64:	4b26      	ldr	r3, [pc, #152]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b68:	2203      	movs	r2, #3
 8002b6a:	4393      	bics	r3, r2
 8002b6c:	0019      	movs	r1, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	4b23      	ldr	r3, [pc, #140]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b74:	430a      	orrs	r2, r1
 8002b76:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2240      	movs	r2, #64	; 0x40
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d009      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b82:	4b1f      	ldr	r3, [pc, #124]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b86:	4a23      	ldr	r2, [pc, #140]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	0019      	movs	r1, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	4b1b      	ldr	r3, [pc, #108]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b92:	430a      	orrs	r2, r1
 8002b94:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	2380      	movs	r3, #128	; 0x80
 8002b9c:	01db      	lsls	r3, r3, #7
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d008      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ba2:	4b17      	ldr	r3, [pc, #92]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	0899      	lsrs	r1, r3, #2
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d009      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc4:	4a14      	ldr	r2, [pc, #80]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	0019      	movs	r1, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691a      	ldr	r2, [r3, #16]
 8002bce:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	da09      	bge.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002bdc:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	22e0      	movs	r2, #224	; 0xe0
 8002be2:	4393      	bics	r3, r2
 8002be4:	0019      	movs	r1, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002bec:	430a      	orrs	r2, r1
 8002bee:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002bf0:	2312      	movs	r3, #18
 8002bf2:	18fb      	adds	r3, r7, r3
 8002bf4:	781b      	ldrb	r3, [r3, #0]
}
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	b006      	add	sp, #24
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	40021000 	.word	0x40021000
 8002c04:	fffffcff 	.word	0xfffffcff
 8002c08:	fffeffff 	.word	0xfffeffff
 8002c0c:	00001388 	.word	0x00001388
 8002c10:	efffffff 	.word	0xefffffff
 8002c14:	ffffcfff 	.word	0xffffcfff
 8002c18:	ffff3fff 	.word	0xffff3fff

08002c1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e04a      	b.n	8002cc4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	223d      	movs	r2, #61	; 0x3d
 8002c32:	5c9b      	ldrb	r3, [r3, r2]
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d107      	bne.n	8002c4a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	223c      	movs	r2, #60	; 0x3c
 8002c3e:	2100      	movs	r1, #0
 8002c40:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	0018      	movs	r0, r3
 8002c46:	f7fe fda7 	bl	8001798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	223d      	movs	r2, #61	; 0x3d
 8002c4e:	2102      	movs	r1, #2
 8002c50:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	0019      	movs	r1, r3
 8002c5c:	0010      	movs	r0, r2
 8002c5e:	f000 fd8f 	bl	8003780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2248      	movs	r2, #72	; 0x48
 8002c66:	2101      	movs	r1, #1
 8002c68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	223e      	movs	r2, #62	; 0x3e
 8002c6e:	2101      	movs	r1, #1
 8002c70:	5499      	strb	r1, [r3, r2]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	223f      	movs	r2, #63	; 0x3f
 8002c76:	2101      	movs	r1, #1
 8002c78:	5499      	strb	r1, [r3, r2]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2240      	movs	r2, #64	; 0x40
 8002c7e:	2101      	movs	r1, #1
 8002c80:	5499      	strb	r1, [r3, r2]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2241      	movs	r2, #65	; 0x41
 8002c86:	2101      	movs	r1, #1
 8002c88:	5499      	strb	r1, [r3, r2]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2242      	movs	r2, #66	; 0x42
 8002c8e:	2101      	movs	r1, #1
 8002c90:	5499      	strb	r1, [r3, r2]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2243      	movs	r2, #67	; 0x43
 8002c96:	2101      	movs	r1, #1
 8002c98:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2244      	movs	r2, #68	; 0x44
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	5499      	strb	r1, [r3, r2]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2245      	movs	r2, #69	; 0x45
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	5499      	strb	r1, [r3, r2]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2246      	movs	r2, #70	; 0x46
 8002cae:	2101      	movs	r1, #1
 8002cb0:	5499      	strb	r1, [r3, r2]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2247      	movs	r2, #71	; 0x47
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	223d      	movs	r2, #61	; 0x3d
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	b002      	add	sp, #8
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	223d      	movs	r2, #61	; 0x3d
 8002cd8:	5c9b      	ldrb	r3, [r3, r2]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d001      	beq.n	8002ce4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e02f      	b.n	8002d44 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	223d      	movs	r2, #61	; 0x3d
 8002ce8:	2102      	movs	r1, #2
 8002cea:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a16      	ldr	r2, [pc, #88]	; (8002d4c <HAL_TIM_Base_Start+0x80>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d004      	beq.n	8002d00 <HAL_TIM_Base_Start+0x34>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a15      	ldr	r2, [pc, #84]	; (8002d50 <HAL_TIM_Base_Start+0x84>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d116      	bne.n	8002d2e <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	4a13      	ldr	r2, [pc, #76]	; (8002d54 <HAL_TIM_Base_Start+0x88>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2b06      	cmp	r3, #6
 8002d10:	d016      	beq.n	8002d40 <HAL_TIM_Base_Start+0x74>
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	2380      	movs	r3, #128	; 0x80
 8002d16:	025b      	lsls	r3, r3, #9
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d011      	beq.n	8002d40 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2101      	movs	r1, #1
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d2c:	e008      	b.n	8002d40 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2101      	movs	r1, #1
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	e000      	b.n	8002d42 <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d40:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b004      	add	sp, #16
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40012c00 	.word	0x40012c00
 8002d50:	40000400 	.word	0x40000400
 8002d54:	00010007 	.word	0x00010007

08002d58 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e04a      	b.n	8002e00 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	223d      	movs	r2, #61	; 0x3d
 8002d6e:	5c9b      	ldrb	r3, [r3, r2]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d107      	bne.n	8002d86 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	223c      	movs	r2, #60	; 0x3c
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	0018      	movs	r0, r3
 8002d82:	f000 f841 	bl	8002e08 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	223d      	movs	r2, #61	; 0x3d
 8002d8a:	2102      	movs	r1, #2
 8002d8c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3304      	adds	r3, #4
 8002d96:	0019      	movs	r1, r3
 8002d98:	0010      	movs	r0, r2
 8002d9a:	f000 fcf1 	bl	8003780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2248      	movs	r2, #72	; 0x48
 8002da2:	2101      	movs	r1, #1
 8002da4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	223e      	movs	r2, #62	; 0x3e
 8002daa:	2101      	movs	r1, #1
 8002dac:	5499      	strb	r1, [r3, r2]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	223f      	movs	r2, #63	; 0x3f
 8002db2:	2101      	movs	r1, #1
 8002db4:	5499      	strb	r1, [r3, r2]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2240      	movs	r2, #64	; 0x40
 8002dba:	2101      	movs	r1, #1
 8002dbc:	5499      	strb	r1, [r3, r2]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2241      	movs	r2, #65	; 0x41
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	5499      	strb	r1, [r3, r2]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2242      	movs	r2, #66	; 0x42
 8002dca:	2101      	movs	r1, #1
 8002dcc:	5499      	strb	r1, [r3, r2]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2243      	movs	r2, #67	; 0x43
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2244      	movs	r2, #68	; 0x44
 8002dda:	2101      	movs	r1, #1
 8002ddc:	5499      	strb	r1, [r3, r2]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2245      	movs	r2, #69	; 0x45
 8002de2:	2101      	movs	r1, #1
 8002de4:	5499      	strb	r1, [r3, r2]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2246      	movs	r2, #70	; 0x46
 8002dea:	2101      	movs	r1, #1
 8002dec:	5499      	strb	r1, [r3, r2]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2247      	movs	r2, #71	; 0x47
 8002df2:	2101      	movs	r1, #1
 8002df4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	223d      	movs	r2, #61	; 0x3d
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	0018      	movs	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b002      	add	sp, #8
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002e10:	46c0      	nop			; (mov r8, r8)
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b002      	add	sp, #8
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e22:	230f      	movs	r3, #15
 8002e24:	18fb      	adds	r3, r7, r3
 8002e26:	2200      	movs	r2, #0
 8002e28:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d104      	bne.n	8002e3a <HAL_TIM_IC_Start_IT+0x22>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	223e      	movs	r2, #62	; 0x3e
 8002e34:	5c9b      	ldrb	r3, [r3, r2]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	e023      	b.n	8002e82 <HAL_TIM_IC_Start_IT+0x6a>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d104      	bne.n	8002e4a <HAL_TIM_IC_Start_IT+0x32>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	223f      	movs	r2, #63	; 0x3f
 8002e44:	5c9b      	ldrb	r3, [r3, r2]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	e01b      	b.n	8002e82 <HAL_TIM_IC_Start_IT+0x6a>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d104      	bne.n	8002e5a <HAL_TIM_IC_Start_IT+0x42>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2240      	movs	r2, #64	; 0x40
 8002e54:	5c9b      	ldrb	r3, [r3, r2]
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	e013      	b.n	8002e82 <HAL_TIM_IC_Start_IT+0x6a>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2b0c      	cmp	r3, #12
 8002e5e:	d104      	bne.n	8002e6a <HAL_TIM_IC_Start_IT+0x52>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2241      	movs	r2, #65	; 0x41
 8002e64:	5c9b      	ldrb	r3, [r3, r2]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	e00b      	b.n	8002e82 <HAL_TIM_IC_Start_IT+0x6a>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b10      	cmp	r3, #16
 8002e6e:	d104      	bne.n	8002e7a <HAL_TIM_IC_Start_IT+0x62>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2242      	movs	r2, #66	; 0x42
 8002e74:	5c9b      	ldrb	r3, [r3, r2]
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	e003      	b.n	8002e82 <HAL_TIM_IC_Start_IT+0x6a>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2243      	movs	r2, #67	; 0x43
 8002e7e:	5c9b      	ldrb	r3, [r3, r2]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	220e      	movs	r2, #14
 8002e84:	18ba      	adds	r2, r7, r2
 8002e86:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d104      	bne.n	8002e98 <HAL_TIM_IC_Start_IT+0x80>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2244      	movs	r2, #68	; 0x44
 8002e92:	5c9b      	ldrb	r3, [r3, r2]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	e013      	b.n	8002ec0 <HAL_TIM_IC_Start_IT+0xa8>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d104      	bne.n	8002ea8 <HAL_TIM_IC_Start_IT+0x90>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2245      	movs	r2, #69	; 0x45
 8002ea2:	5c9b      	ldrb	r3, [r3, r2]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	e00b      	b.n	8002ec0 <HAL_TIM_IC_Start_IT+0xa8>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d104      	bne.n	8002eb8 <HAL_TIM_IC_Start_IT+0xa0>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2246      	movs	r2, #70	; 0x46
 8002eb2:	5c9b      	ldrb	r3, [r3, r2]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	e003      	b.n	8002ec0 <HAL_TIM_IC_Start_IT+0xa8>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2247      	movs	r2, #71	; 0x47
 8002ebc:	5c9b      	ldrb	r3, [r3, r2]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	210d      	movs	r1, #13
 8002ec2:	187a      	adds	r2, r7, r1
 8002ec4:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ec6:	230e      	movs	r3, #14
 8002ec8:	18fb      	adds	r3, r7, r3
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d103      	bne.n	8002ed8 <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ed0:	187b      	adds	r3, r7, r1
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d001      	beq.n	8002edc <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0bd      	b.n	8003058 <HAL_TIM_IC_Start_IT+0x240>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d104      	bne.n	8002eec <HAL_TIM_IC_Start_IT+0xd4>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	223e      	movs	r2, #62	; 0x3e
 8002ee6:	2102      	movs	r1, #2
 8002ee8:	5499      	strb	r1, [r3, r2]
 8002eea:	e023      	b.n	8002f34 <HAL_TIM_IC_Start_IT+0x11c>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d104      	bne.n	8002efc <HAL_TIM_IC_Start_IT+0xe4>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	223f      	movs	r2, #63	; 0x3f
 8002ef6:	2102      	movs	r1, #2
 8002ef8:	5499      	strb	r1, [r3, r2]
 8002efa:	e01b      	b.n	8002f34 <HAL_TIM_IC_Start_IT+0x11c>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d104      	bne.n	8002f0c <HAL_TIM_IC_Start_IT+0xf4>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2240      	movs	r2, #64	; 0x40
 8002f06:	2102      	movs	r1, #2
 8002f08:	5499      	strb	r1, [r3, r2]
 8002f0a:	e013      	b.n	8002f34 <HAL_TIM_IC_Start_IT+0x11c>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	2b0c      	cmp	r3, #12
 8002f10:	d104      	bne.n	8002f1c <HAL_TIM_IC_Start_IT+0x104>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2241      	movs	r2, #65	; 0x41
 8002f16:	2102      	movs	r1, #2
 8002f18:	5499      	strb	r1, [r3, r2]
 8002f1a:	e00b      	b.n	8002f34 <HAL_TIM_IC_Start_IT+0x11c>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2b10      	cmp	r3, #16
 8002f20:	d104      	bne.n	8002f2c <HAL_TIM_IC_Start_IT+0x114>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2242      	movs	r2, #66	; 0x42
 8002f26:	2102      	movs	r1, #2
 8002f28:	5499      	strb	r1, [r3, r2]
 8002f2a:	e003      	b.n	8002f34 <HAL_TIM_IC_Start_IT+0x11c>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2243      	movs	r2, #67	; 0x43
 8002f30:	2102      	movs	r1, #2
 8002f32:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d104      	bne.n	8002f44 <HAL_TIM_IC_Start_IT+0x12c>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2244      	movs	r2, #68	; 0x44
 8002f3e:	2102      	movs	r1, #2
 8002f40:	5499      	strb	r1, [r3, r2]
 8002f42:	e013      	b.n	8002f6c <HAL_TIM_IC_Start_IT+0x154>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d104      	bne.n	8002f54 <HAL_TIM_IC_Start_IT+0x13c>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2245      	movs	r2, #69	; 0x45
 8002f4e:	2102      	movs	r1, #2
 8002f50:	5499      	strb	r1, [r3, r2]
 8002f52:	e00b      	b.n	8002f6c <HAL_TIM_IC_Start_IT+0x154>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	d104      	bne.n	8002f64 <HAL_TIM_IC_Start_IT+0x14c>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2246      	movs	r2, #70	; 0x46
 8002f5e:	2102      	movs	r1, #2
 8002f60:	5499      	strb	r1, [r3, r2]
 8002f62:	e003      	b.n	8002f6c <HAL_TIM_IC_Start_IT+0x154>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2247      	movs	r2, #71	; 0x47
 8002f68:	2102      	movs	r1, #2
 8002f6a:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2b0c      	cmp	r3, #12
 8002f70:	d02a      	beq.n	8002fc8 <HAL_TIM_IC_Start_IT+0x1b0>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b0c      	cmp	r3, #12
 8002f76:	d830      	bhi.n	8002fda <HAL_TIM_IC_Start_IT+0x1c2>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d01b      	beq.n	8002fb6 <HAL_TIM_IC_Start_IT+0x19e>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d82a      	bhi.n	8002fda <HAL_TIM_IC_Start_IT+0x1c2>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_TIM_IC_Start_IT+0x17a>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d009      	beq.n	8002fa4 <HAL_TIM_IC_Start_IT+0x18c>
 8002f90:	e023      	b.n	8002fda <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2102      	movs	r1, #2
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	60da      	str	r2, [r3, #12]
      break;
 8002fa2:	e01f      	b.n	8002fe4 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2104      	movs	r1, #4
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	60da      	str	r2, [r3, #12]
      break;
 8002fb4:	e016      	b.n	8002fe4 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2108      	movs	r1, #8
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	60da      	str	r2, [r3, #12]
      break;
 8002fc6:	e00d      	b.n	8002fe4 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2110      	movs	r1, #16
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	60da      	str	r2, [r3, #12]
      break;
 8002fd8:	e004      	b.n	8002fe4 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 8002fda:	230f      	movs	r3, #15
 8002fdc:	18fb      	adds	r3, r7, r3
 8002fde:	2201      	movs	r2, #1
 8002fe0:	701a      	strb	r2, [r3, #0]
      break;
 8002fe2:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002fe4:	230f      	movs	r3, #15
 8002fe6:	18fb      	adds	r3, r7, r3
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d131      	bne.n	8003052 <HAL_TIM_IC_Start_IT+0x23a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6839      	ldr	r1, [r7, #0]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f000 fde4 	bl	8003bc4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a17      	ldr	r2, [pc, #92]	; (8003060 <HAL_TIM_IC_Start_IT+0x248>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d004      	beq.n	8003010 <HAL_TIM_IC_Start_IT+0x1f8>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a16      	ldr	r2, [pc, #88]	; (8003064 <HAL_TIM_IC_Start_IT+0x24c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d116      	bne.n	800303e <HAL_TIM_IC_Start_IT+0x226>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	4a14      	ldr	r2, [pc, #80]	; (8003068 <HAL_TIM_IC_Start_IT+0x250>)
 8003018:	4013      	ands	r3, r2
 800301a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b06      	cmp	r3, #6
 8003020:	d016      	beq.n	8003050 <HAL_TIM_IC_Start_IT+0x238>
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	025b      	lsls	r3, r3, #9
 8003028:	429a      	cmp	r2, r3
 800302a:	d011      	beq.n	8003050 <HAL_TIM_IC_Start_IT+0x238>
      {
        __HAL_TIM_ENABLE(htim);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2101      	movs	r1, #1
 8003038:	430a      	orrs	r2, r1
 800303a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800303c:	e008      	b.n	8003050 <HAL_TIM_IC_Start_IT+0x238>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2101      	movs	r1, #1
 800304a:	430a      	orrs	r2, r1
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	e000      	b.n	8003052 <HAL_TIM_IC_Start_IT+0x23a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003050:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8003052:	230f      	movs	r3, #15
 8003054:	18fb      	adds	r3, r7, r3
 8003056:	781b      	ldrb	r3, [r3, #0]
}
 8003058:	0018      	movs	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	b004      	add	sp, #16
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40012c00 	.word	0x40012c00
 8003064:	40000400 	.word	0x40000400
 8003068:	00010007 	.word	0x00010007

0800306c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003076:	230f      	movs	r3, #15
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b0c      	cmp	r3, #12
 8003082:	d02a      	beq.n	80030da <HAL_TIM_IC_Stop_IT+0x6e>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	2b0c      	cmp	r3, #12
 8003088:	d830      	bhi.n	80030ec <HAL_TIM_IC_Stop_IT+0x80>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b08      	cmp	r3, #8
 800308e:	d01b      	beq.n	80030c8 <HAL_TIM_IC_Stop_IT+0x5c>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2b08      	cmp	r3, #8
 8003094:	d82a      	bhi.n	80030ec <HAL_TIM_IC_Stop_IT+0x80>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_TIM_IC_Stop_IT+0x38>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d009      	beq.n	80030b6 <HAL_TIM_IC_Stop_IT+0x4a>
 80030a2:	e023      	b.n	80030ec <HAL_TIM_IC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2102      	movs	r1, #2
 80030b0:	438a      	bics	r2, r1
 80030b2:	60da      	str	r2, [r3, #12]
      break;
 80030b4:	e01f      	b.n	80030f6 <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2104      	movs	r1, #4
 80030c2:	438a      	bics	r2, r1
 80030c4:	60da      	str	r2, [r3, #12]
      break;
 80030c6:	e016      	b.n	80030f6 <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2108      	movs	r1, #8
 80030d4:	438a      	bics	r2, r1
 80030d6:	60da      	str	r2, [r3, #12]
      break;
 80030d8:	e00d      	b.n	80030f6 <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2110      	movs	r1, #16
 80030e6:	438a      	bics	r2, r1
 80030e8:	60da      	str	r2, [r3, #12]
      break;
 80030ea:	e004      	b.n	80030f6 <HAL_TIM_IC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 80030ec:	230f      	movs	r3, #15
 80030ee:	18fb      	adds	r3, r7, r3
 80030f0:	2201      	movs	r2, #1
 80030f2:	701a      	strb	r2, [r3, #0]
      break;
 80030f4:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80030f6:	230f      	movs	r3, #15
 80030f8:	18fb      	adds	r3, r7, r3
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d000      	beq.n	8003102 <HAL_TIM_IC_Stop_IT+0x96>
 8003100:	e062      	b.n	80031c8 <HAL_TIM_IC_Stop_IT+0x15c>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6839      	ldr	r1, [r7, #0]
 8003108:	2200      	movs	r2, #0
 800310a:	0018      	movs	r0, r3
 800310c:	f000 fd5a 	bl	8003bc4 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	4a30      	ldr	r2, [pc, #192]	; (80031d8 <HAL_TIM_IC_Stop_IT+0x16c>)
 8003118:	4013      	ands	r3, r2
 800311a:	d10d      	bne.n	8003138 <HAL_TIM_IC_Stop_IT+0xcc>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	4a2e      	ldr	r2, [pc, #184]	; (80031dc <HAL_TIM_IC_Stop_IT+0x170>)
 8003124:	4013      	ands	r3, r2
 8003126:	d107      	bne.n	8003138 <HAL_TIM_IC_Stop_IT+0xcc>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2101      	movs	r1, #1
 8003134:	438a      	bics	r2, r1
 8003136:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d104      	bne.n	8003148 <HAL_TIM_IC_Stop_IT+0xdc>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	223e      	movs	r2, #62	; 0x3e
 8003142:	2101      	movs	r1, #1
 8003144:	5499      	strb	r1, [r3, r2]
 8003146:	e023      	b.n	8003190 <HAL_TIM_IC_Stop_IT+0x124>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2b04      	cmp	r3, #4
 800314c:	d104      	bne.n	8003158 <HAL_TIM_IC_Stop_IT+0xec>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	223f      	movs	r2, #63	; 0x3f
 8003152:	2101      	movs	r1, #1
 8003154:	5499      	strb	r1, [r3, r2]
 8003156:	e01b      	b.n	8003190 <HAL_TIM_IC_Stop_IT+0x124>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2b08      	cmp	r3, #8
 800315c:	d104      	bne.n	8003168 <HAL_TIM_IC_Stop_IT+0xfc>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2240      	movs	r2, #64	; 0x40
 8003162:	2101      	movs	r1, #1
 8003164:	5499      	strb	r1, [r3, r2]
 8003166:	e013      	b.n	8003190 <HAL_TIM_IC_Stop_IT+0x124>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2b0c      	cmp	r3, #12
 800316c:	d104      	bne.n	8003178 <HAL_TIM_IC_Stop_IT+0x10c>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2241      	movs	r2, #65	; 0x41
 8003172:	2101      	movs	r1, #1
 8003174:	5499      	strb	r1, [r3, r2]
 8003176:	e00b      	b.n	8003190 <HAL_TIM_IC_Stop_IT+0x124>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	2b10      	cmp	r3, #16
 800317c:	d104      	bne.n	8003188 <HAL_TIM_IC_Stop_IT+0x11c>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2242      	movs	r2, #66	; 0x42
 8003182:	2101      	movs	r1, #1
 8003184:	5499      	strb	r1, [r3, r2]
 8003186:	e003      	b.n	8003190 <HAL_TIM_IC_Stop_IT+0x124>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2243      	movs	r2, #67	; 0x43
 800318c:	2101      	movs	r1, #1
 800318e:	5499      	strb	r1, [r3, r2]
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d104      	bne.n	80031a0 <HAL_TIM_IC_Stop_IT+0x134>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2244      	movs	r2, #68	; 0x44
 800319a:	2101      	movs	r1, #1
 800319c:	5499      	strb	r1, [r3, r2]
 800319e:	e013      	b.n	80031c8 <HAL_TIM_IC_Stop_IT+0x15c>
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d104      	bne.n	80031b0 <HAL_TIM_IC_Stop_IT+0x144>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2245      	movs	r2, #69	; 0x45
 80031aa:	2101      	movs	r1, #1
 80031ac:	5499      	strb	r1, [r3, r2]
 80031ae:	e00b      	b.n	80031c8 <HAL_TIM_IC_Stop_IT+0x15c>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d104      	bne.n	80031c0 <HAL_TIM_IC_Stop_IT+0x154>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2246      	movs	r2, #70	; 0x46
 80031ba:	2101      	movs	r1, #1
 80031bc:	5499      	strb	r1, [r3, r2]
 80031be:	e003      	b.n	80031c8 <HAL_TIM_IC_Stop_IT+0x15c>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2247      	movs	r2, #71	; 0x47
 80031c4:	2101      	movs	r1, #1
 80031c6:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80031c8:	230f      	movs	r3, #15
 80031ca:	18fb      	adds	r3, r7, r3
 80031cc:	781b      	ldrb	r3, [r3, #0]
}
 80031ce:	0018      	movs	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b004      	add	sp, #16
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	00001111 	.word	0x00001111
 80031dc:	00000444 	.word	0x00000444

080031e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2202      	movs	r2, #2
 80031fc:	4013      	ands	r3, r2
 80031fe:	d021      	beq.n	8003244 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2202      	movs	r2, #2
 8003204:	4013      	ands	r3, r2
 8003206:	d01d      	beq.n	8003244 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2203      	movs	r2, #3
 800320e:	4252      	negs	r2, r2
 8003210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	2203      	movs	r2, #3
 8003220:	4013      	ands	r3, r2
 8003222:	d004      	beq.n	800322e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	0018      	movs	r0, r3
 8003228:	f7fd fe78 	bl	8000f1c <HAL_TIM_IC_CaptureCallback>
 800322c:	e007      	b.n	800323e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	0018      	movs	r0, r3
 8003232:	f000 fa8d 	bl	8003750 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	0018      	movs	r0, r3
 800323a:	f000 fa91 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2204      	movs	r2, #4
 8003248:	4013      	ands	r3, r2
 800324a:	d022      	beq.n	8003292 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2204      	movs	r2, #4
 8003250:	4013      	ands	r3, r2
 8003252:	d01e      	beq.n	8003292 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2205      	movs	r2, #5
 800325a:	4252      	negs	r2, r2
 800325c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2202      	movs	r2, #2
 8003262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	23c0      	movs	r3, #192	; 0xc0
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4013      	ands	r3, r2
 8003270:	d004      	beq.n	800327c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	0018      	movs	r0, r3
 8003276:	f7fd fe51 	bl	8000f1c <HAL_TIM_IC_CaptureCallback>
 800327a:	e007      	b.n	800328c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	0018      	movs	r0, r3
 8003280:	f000 fa66 	bl	8003750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	0018      	movs	r0, r3
 8003288:	f000 fa6a 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2208      	movs	r2, #8
 8003296:	4013      	ands	r3, r2
 8003298:	d021      	beq.n	80032de <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2208      	movs	r2, #8
 800329e:	4013      	ands	r3, r2
 80032a0:	d01d      	beq.n	80032de <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2209      	movs	r2, #9
 80032a8:	4252      	negs	r2, r2
 80032aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2204      	movs	r2, #4
 80032b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	2203      	movs	r2, #3
 80032ba:	4013      	ands	r3, r2
 80032bc:	d004      	beq.n	80032c8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	0018      	movs	r0, r3
 80032c2:	f7fd fe2b 	bl	8000f1c <HAL_TIM_IC_CaptureCallback>
 80032c6:	e007      	b.n	80032d8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	0018      	movs	r0, r3
 80032cc:	f000 fa40 	bl	8003750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	0018      	movs	r0, r3
 80032d4:	f000 fa44 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2210      	movs	r2, #16
 80032e2:	4013      	ands	r3, r2
 80032e4:	d022      	beq.n	800332c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2210      	movs	r2, #16
 80032ea:	4013      	ands	r3, r2
 80032ec:	d01e      	beq.n	800332c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2211      	movs	r2, #17
 80032f4:	4252      	negs	r2, r2
 80032f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2208      	movs	r2, #8
 80032fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	23c0      	movs	r3, #192	; 0xc0
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4013      	ands	r3, r2
 800330a:	d004      	beq.n	8003316 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	0018      	movs	r0, r3
 8003310:	f7fd fe04 	bl	8000f1c <HAL_TIM_IC_CaptureCallback>
 8003314:	e007      	b.n	8003326 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	0018      	movs	r0, r3
 800331a:	f000 fa19 	bl	8003750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	0018      	movs	r0, r3
 8003322:	f000 fa1d 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2201      	movs	r2, #1
 8003330:	4013      	ands	r3, r2
 8003332:	d00c      	beq.n	800334e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2201      	movs	r2, #1
 8003338:	4013      	ands	r3, r2
 800333a:	d008      	beq.n	800334e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2202      	movs	r2, #2
 8003342:	4252      	negs	r2, r2
 8003344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	0018      	movs	r0, r3
 800334a:	f000 f9f9 	bl	8003740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2280      	movs	r2, #128	; 0x80
 8003352:	4013      	ands	r3, r2
 8003354:	d00c      	beq.n	8003370 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2280      	movs	r2, #128	; 0x80
 800335a:	4013      	ands	r3, r2
 800335c:	d008      	beq.n	8003370 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2281      	movs	r2, #129	; 0x81
 8003364:	4252      	negs	r2, r2
 8003366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	0018      	movs	r0, r3
 800336c:	f000 fcb8 	bl	8003ce0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	2380      	movs	r3, #128	; 0x80
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	4013      	ands	r3, r2
 8003378:	d00b      	beq.n	8003392 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2280      	movs	r2, #128	; 0x80
 800337e:	4013      	ands	r3, r2
 8003380:	d007      	beq.n	8003392 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a16      	ldr	r2, [pc, #88]	; (80033e0 <HAL_TIM_IRQHandler+0x200>)
 8003388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	0018      	movs	r0, r3
 800338e:	f000 fcaf 	bl	8003cf0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2240      	movs	r2, #64	; 0x40
 8003396:	4013      	ands	r3, r2
 8003398:	d00c      	beq.n	80033b4 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2240      	movs	r2, #64	; 0x40
 800339e:	4013      	ands	r3, r2
 80033a0:	d008      	beq.n	80033b4 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2241      	movs	r2, #65	; 0x41
 80033a8:	4252      	negs	r2, r2
 80033aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	0018      	movs	r0, r3
 80033b0:	f000 f9de 	bl	8003770 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2220      	movs	r2, #32
 80033b8:	4013      	ands	r3, r2
 80033ba:	d00c      	beq.n	80033d6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	4013      	ands	r3, r2
 80033c2:	d008      	beq.n	80033d6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2221      	movs	r2, #33	; 0x21
 80033ca:	4252      	negs	r2, r2
 80033cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	0018      	movs	r0, r3
 80033d2:	f000 fc7d 	bl	8003cd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	46bd      	mov	sp, r7
 80033da:	b004      	add	sp, #16
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	fffffeff 	.word	0xfffffeff

080033e4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033f0:	2317      	movs	r3, #23
 80033f2:	18fb      	adds	r3, r7, r3
 80033f4:	2200      	movs	r2, #0
 80033f6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	223c      	movs	r2, #60	; 0x3c
 80033fc:	5c9b      	ldrb	r3, [r3, r2]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <HAL_TIM_IC_ConfigChannel+0x22>
 8003402:	2302      	movs	r3, #2
 8003404:	e08c      	b.n	8003520 <HAL_TIM_IC_ConfigChannel+0x13c>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	223c      	movs	r2, #60	; 0x3c
 800340a:	2101      	movs	r1, #1
 800340c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d11b      	bne.n	800344c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003424:	f000 fa18 	bl	8003858 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699a      	ldr	r2, [r3, #24]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	210c      	movs	r1, #12
 8003434:	438a      	bics	r2, r1
 8003436:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6999      	ldr	r1, [r3, #24]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	619a      	str	r2, [r3, #24]
 800344a:	e062      	b.n	8003512 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b04      	cmp	r3, #4
 8003450:	d11c      	bne.n	800348c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003462:	f000 fa79 	bl	8003958 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	699a      	ldr	r2, [r3, #24]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	492d      	ldr	r1, [pc, #180]	; (8003528 <HAL_TIM_IC_ConfigChannel+0x144>)
 8003472:	400a      	ands	r2, r1
 8003474:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6999      	ldr	r1, [r3, #24]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	021a      	lsls	r2, r3, #8
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	619a      	str	r2, [r3, #24]
 800348a:	e042      	b.n	8003512 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b08      	cmp	r3, #8
 8003490:	d11b      	bne.n	80034ca <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80034a2:	f000 facd 	bl	8003a40 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	69da      	ldr	r2, [r3, #28]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	210c      	movs	r1, #12
 80034b2:	438a      	bics	r2, r1
 80034b4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	69d9      	ldr	r1, [r3, #28]
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	61da      	str	r2, [r3, #28]
 80034c8:	e023      	b.n	8003512 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b0c      	cmp	r3, #12
 80034ce:	d11c      	bne.n	800350a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80034e0:	f000 faee 	bl	8003ac0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	69da      	ldr	r2, [r3, #28]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	490e      	ldr	r1, [pc, #56]	; (8003528 <HAL_TIM_IC_ConfigChannel+0x144>)
 80034f0:	400a      	ands	r2, r1
 80034f2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69d9      	ldr	r1, [r3, #28]
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	021a      	lsls	r2, r3, #8
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	61da      	str	r2, [r3, #28]
 8003508:	e003      	b.n	8003512 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800350a:	2317      	movs	r3, #23
 800350c:	18fb      	adds	r3, r7, r3
 800350e:	2201      	movs	r2, #1
 8003510:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	223c      	movs	r2, #60	; 0x3c
 8003516:	2100      	movs	r1, #0
 8003518:	5499      	strb	r1, [r3, r2]

  return status;
 800351a:	2317      	movs	r3, #23
 800351c:	18fb      	adds	r3, r7, r3
 800351e:	781b      	ldrb	r3, [r3, #0]
}
 8003520:	0018      	movs	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	b006      	add	sp, #24
 8003526:	bd80      	pop	{r7, pc}
 8003528:	fffff3ff 	.word	0xfffff3ff

0800352c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003536:	230f      	movs	r3, #15
 8003538:	18fb      	adds	r3, r7, r3
 800353a:	2200      	movs	r2, #0
 800353c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	223c      	movs	r2, #60	; 0x3c
 8003542:	5c9b      	ldrb	r3, [r3, r2]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_TIM_ConfigClockSource+0x20>
 8003548:	2302      	movs	r3, #2
 800354a:	e0bc      	b.n	80036c6 <HAL_TIM_ConfigClockSource+0x19a>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	223c      	movs	r2, #60	; 0x3c
 8003550:	2101      	movs	r1, #1
 8003552:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	223d      	movs	r2, #61	; 0x3d
 8003558:	2102      	movs	r1, #2
 800355a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4a5a      	ldr	r2, [pc, #360]	; (80036d0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003568:	4013      	ands	r3, r2
 800356a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	4a59      	ldr	r2, [pc, #356]	; (80036d4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003570:	4013      	ands	r3, r2
 8003572:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2280      	movs	r2, #128	; 0x80
 8003582:	0192      	lsls	r2, r2, #6
 8003584:	4293      	cmp	r3, r2
 8003586:	d040      	beq.n	800360a <HAL_TIM_ConfigClockSource+0xde>
 8003588:	2280      	movs	r2, #128	; 0x80
 800358a:	0192      	lsls	r2, r2, #6
 800358c:	4293      	cmp	r3, r2
 800358e:	d900      	bls.n	8003592 <HAL_TIM_ConfigClockSource+0x66>
 8003590:	e088      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x178>
 8003592:	2280      	movs	r2, #128	; 0x80
 8003594:	0152      	lsls	r2, r2, #5
 8003596:	4293      	cmp	r3, r2
 8003598:	d100      	bne.n	800359c <HAL_TIM_ConfigClockSource+0x70>
 800359a:	e088      	b.n	80036ae <HAL_TIM_ConfigClockSource+0x182>
 800359c:	2280      	movs	r2, #128	; 0x80
 800359e:	0152      	lsls	r2, r2, #5
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d900      	bls.n	80035a6 <HAL_TIM_ConfigClockSource+0x7a>
 80035a4:	e07e      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x178>
 80035a6:	2b70      	cmp	r3, #112	; 0x70
 80035a8:	d018      	beq.n	80035dc <HAL_TIM_ConfigClockSource+0xb0>
 80035aa:	d900      	bls.n	80035ae <HAL_TIM_ConfigClockSource+0x82>
 80035ac:	e07a      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x178>
 80035ae:	2b60      	cmp	r3, #96	; 0x60
 80035b0:	d04f      	beq.n	8003652 <HAL_TIM_ConfigClockSource+0x126>
 80035b2:	d900      	bls.n	80035b6 <HAL_TIM_ConfigClockSource+0x8a>
 80035b4:	e076      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x178>
 80035b6:	2b50      	cmp	r3, #80	; 0x50
 80035b8:	d03b      	beq.n	8003632 <HAL_TIM_ConfigClockSource+0x106>
 80035ba:	d900      	bls.n	80035be <HAL_TIM_ConfigClockSource+0x92>
 80035bc:	e072      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x178>
 80035be:	2b40      	cmp	r3, #64	; 0x40
 80035c0:	d057      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x146>
 80035c2:	d900      	bls.n	80035c6 <HAL_TIM_ConfigClockSource+0x9a>
 80035c4:	e06e      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x178>
 80035c6:	2b30      	cmp	r3, #48	; 0x30
 80035c8:	d063      	beq.n	8003692 <HAL_TIM_ConfigClockSource+0x166>
 80035ca:	d86b      	bhi.n	80036a4 <HAL_TIM_ConfigClockSource+0x178>
 80035cc:	2b20      	cmp	r3, #32
 80035ce:	d060      	beq.n	8003692 <HAL_TIM_ConfigClockSource+0x166>
 80035d0:	d868      	bhi.n	80036a4 <HAL_TIM_ConfigClockSource+0x178>
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d05d      	beq.n	8003692 <HAL_TIM_ConfigClockSource+0x166>
 80035d6:	2b10      	cmp	r3, #16
 80035d8:	d05b      	beq.n	8003692 <HAL_TIM_ConfigClockSource+0x166>
 80035da:	e063      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035ec:	f000 faca 	bl	8003b84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2277      	movs	r2, #119	; 0x77
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	609a      	str	r2, [r3, #8]
      break;
 8003608:	e052      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800361a:	f000 fab3 	bl	8003b84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2180      	movs	r1, #128	; 0x80
 800362a:	01c9      	lsls	r1, r1, #7
 800362c:	430a      	orrs	r2, r1
 800362e:	609a      	str	r2, [r3, #8]
      break;
 8003630:	e03e      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800363e:	001a      	movs	r2, r3
 8003640:	f000 f95c 	bl	80038fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2150      	movs	r1, #80	; 0x50
 800364a:	0018      	movs	r0, r3
 800364c:	f000 fa7e 	bl	8003b4c <TIM_ITRx_SetConfig>
      break;
 8003650:	e02e      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800365e:	001a      	movs	r2, r3
 8003660:	f000 f9bc 	bl	80039dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2160      	movs	r1, #96	; 0x60
 800366a:	0018      	movs	r0, r3
 800366c:	f000 fa6e 	bl	8003b4c <TIM_ITRx_SetConfig>
      break;
 8003670:	e01e      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800367e:	001a      	movs	r2, r3
 8003680:	f000 f93c 	bl	80038fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2140      	movs	r1, #64	; 0x40
 800368a:	0018      	movs	r0, r3
 800368c:	f000 fa5e 	bl	8003b4c <TIM_ITRx_SetConfig>
      break;
 8003690:	e00e      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	0019      	movs	r1, r3
 800369c:	0010      	movs	r0, r2
 800369e:	f000 fa55 	bl	8003b4c <TIM_ITRx_SetConfig>
      break;
 80036a2:	e005      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80036a4:	230f      	movs	r3, #15
 80036a6:	18fb      	adds	r3, r7, r3
 80036a8:	2201      	movs	r2, #1
 80036aa:	701a      	strb	r2, [r3, #0]
      break;
 80036ac:	e000      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80036ae:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	223d      	movs	r2, #61	; 0x3d
 80036b4:	2101      	movs	r1, #1
 80036b6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	223c      	movs	r2, #60	; 0x3c
 80036bc:	2100      	movs	r1, #0
 80036be:	5499      	strb	r1, [r3, r2]

  return status;
 80036c0:	230f      	movs	r3, #15
 80036c2:	18fb      	adds	r3, r7, r3
 80036c4:	781b      	ldrb	r3, [r3, #0]
}
 80036c6:	0018      	movs	r0, r3
 80036c8:	46bd      	mov	sp, r7
 80036ca:	b004      	add	sp, #16
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	ffceff88 	.word	0xffceff88
 80036d4:	ffff00ff 	.word	0xffff00ff

080036d8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b0c      	cmp	r3, #12
 80036ea:	d01e      	beq.n	800372a <HAL_TIM_ReadCapturedValue+0x52>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	2b0c      	cmp	r3, #12
 80036f0:	d820      	bhi.n	8003734 <HAL_TIM_ReadCapturedValue+0x5c>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d013      	beq.n	8003720 <HAL_TIM_ReadCapturedValue+0x48>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d81a      	bhi.n	8003734 <HAL_TIM_ReadCapturedValue+0x5c>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_TIM_ReadCapturedValue+0x34>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2b04      	cmp	r3, #4
 8003708:	d005      	beq.n	8003716 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 800370a:	e013      	b.n	8003734 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003712:	60fb      	str	r3, [r7, #12]
      break;
 8003714:	e00f      	b.n	8003736 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371c:	60fb      	str	r3, [r7, #12]
      break;
 800371e:	e00a      	b.n	8003736 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003726:	60fb      	str	r3, [r7, #12]
      break;
 8003728:	e005      	b.n	8003736 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	60fb      	str	r3, [r7, #12]
      break;
 8003732:	e000      	b.n	8003736 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8003734:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 8003736:	68fb      	ldr	r3, [r7, #12]
}
 8003738:	0018      	movs	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	b004      	add	sp, #16
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003748:	46c0      	nop			; (mov r8, r8)
 800374a:	46bd      	mov	sp, r7
 800374c:	b002      	add	sp, #8
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003758:	46c0      	nop			; (mov r8, r8)
 800375a:	46bd      	mov	sp, r7
 800375c:	b002      	add	sp, #8
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003768:	46c0      	nop			; (mov r8, r8)
 800376a:	46bd      	mov	sp, r7
 800376c:	b002      	add	sp, #8
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003778:	46c0      	nop			; (mov r8, r8)
 800377a:	46bd      	mov	sp, r7
 800377c:	b002      	add	sp, #8
 800377e:	bd80      	pop	{r7, pc}

08003780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a2b      	ldr	r2, [pc, #172]	; (8003840 <TIM_Base_SetConfig+0xc0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d003      	beq.n	80037a0 <TIM_Base_SetConfig+0x20>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a2a      	ldr	r2, [pc, #168]	; (8003844 <TIM_Base_SetConfig+0xc4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d108      	bne.n	80037b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2270      	movs	r2, #112	; 0x70
 80037a4:	4393      	bics	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a22      	ldr	r2, [pc, #136]	; (8003840 <TIM_Base_SetConfig+0xc0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d00f      	beq.n	80037da <TIM_Base_SetConfig+0x5a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a21      	ldr	r2, [pc, #132]	; (8003844 <TIM_Base_SetConfig+0xc4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00b      	beq.n	80037da <TIM_Base_SetConfig+0x5a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a20      	ldr	r2, [pc, #128]	; (8003848 <TIM_Base_SetConfig+0xc8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d007      	beq.n	80037da <TIM_Base_SetConfig+0x5a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a1f      	ldr	r2, [pc, #124]	; (800384c <TIM_Base_SetConfig+0xcc>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d003      	beq.n	80037da <TIM_Base_SetConfig+0x5a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a1e      	ldr	r2, [pc, #120]	; (8003850 <TIM_Base_SetConfig+0xd0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d108      	bne.n	80037ec <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4a1d      	ldr	r2, [pc, #116]	; (8003854 <TIM_Base_SetConfig+0xd4>)
 80037de:	4013      	ands	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2280      	movs	r2, #128	; 0x80
 80037f0:	4393      	bics	r3, r2
 80037f2:	001a      	movs	r2, r3
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a0a      	ldr	r2, [pc, #40]	; (8003840 <TIM_Base_SetConfig+0xc0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d007      	beq.n	800382a <TIM_Base_SetConfig+0xaa>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a0b      	ldr	r2, [pc, #44]	; (800384c <TIM_Base_SetConfig+0xcc>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d003      	beq.n	800382a <TIM_Base_SetConfig+0xaa>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a0a      	ldr	r2, [pc, #40]	; (8003850 <TIM_Base_SetConfig+0xd0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d103      	bne.n	8003832 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	691a      	ldr	r2, [r3, #16]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	615a      	str	r2, [r3, #20]
}
 8003838:	46c0      	nop			; (mov r8, r8)
 800383a:	46bd      	mov	sp, r7
 800383c:	b004      	add	sp, #16
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40012c00 	.word	0x40012c00
 8003844:	40000400 	.word	0x40000400
 8003848:	40002000 	.word	0x40002000
 800384c:	40014400 	.word	0x40014400
 8003850:	40014800 	.word	0x40014800
 8003854:	fffffcff 	.word	0xfffffcff

08003858 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	2201      	movs	r2, #1
 8003872:	4393      	bics	r3, r2
 8003874:	001a      	movs	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4a1c      	ldr	r2, [pc, #112]	; (80038f4 <TIM_TI1_SetConfig+0x9c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d003      	beq.n	8003890 <TIM_TI1_SetConfig+0x38>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4a1b      	ldr	r2, [pc, #108]	; (80038f8 <TIM_TI1_SetConfig+0xa0>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d101      	bne.n	8003894 <TIM_TI1_SetConfig+0x3c>
 8003890:	2301      	movs	r3, #1
 8003892:	e000      	b.n	8003896 <TIM_TI1_SetConfig+0x3e>
 8003894:	2300      	movs	r3, #0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d008      	beq.n	80038ac <TIM_TI1_SetConfig+0x54>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2203      	movs	r2, #3
 800389e:	4393      	bics	r3, r2
 80038a0:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	e003      	b.n	80038b4 <TIM_TI1_SetConfig+0x5c>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2201      	movs	r2, #1
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	22f0      	movs	r2, #240	; 0xf0
 80038b8:	4393      	bics	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	22ff      	movs	r2, #255	; 0xff
 80038c2:	4013      	ands	r3, r2
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	220a      	movs	r2, #10
 80038ce:	4393      	bics	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	220a      	movs	r2, #10
 80038d6:	4013      	ands	r3, r2
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	621a      	str	r2, [r3, #32]
}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b006      	add	sp, #24
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	40012c00 	.word	0x40012c00
 80038f8:	40000400 	.word	0x40000400

080038fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	2201      	movs	r2, #1
 8003914:	4393      	bics	r3, r2
 8003916:	001a      	movs	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	22f0      	movs	r2, #240	; 0xf0
 8003926:	4393      	bics	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	220a      	movs	r2, #10
 8003938:	4393      	bics	r3, r2
 800393a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	621a      	str	r2, [r3, #32]
}
 8003950:	46c0      	nop			; (mov r8, r8)
 8003952:	46bd      	mov	sp, r7
 8003954:	b006      	add	sp, #24
 8003956:	bd80      	pop	{r7, pc}

08003958 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	2210      	movs	r2, #16
 8003972:	4393      	bics	r3, r2
 8003974:	001a      	movs	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4a14      	ldr	r2, [pc, #80]	; (80039d4 <TIM_TI2_SetConfig+0x7c>)
 8003984:	4013      	ands	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	021b      	lsls	r3, r3, #8
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4a10      	ldr	r2, [pc, #64]	; (80039d8 <TIM_TI2_SetConfig+0x80>)
 8003996:	4013      	ands	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	031b      	lsls	r3, r3, #12
 800399e:	041b      	lsls	r3, r3, #16
 80039a0:	0c1b      	lsrs	r3, r3, #16
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	22a0      	movs	r2, #160	; 0xa0
 80039ac:	4393      	bics	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	22a0      	movs	r2, #160	; 0xa0
 80039b6:	4013      	ands	r3, r2
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	621a      	str	r2, [r3, #32]
}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b006      	add	sp, #24
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	fffffcff 	.word	0xfffffcff
 80039d8:	ffff0fff 	.word	0xffff0fff

080039dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	2210      	movs	r2, #16
 80039f4:	4393      	bics	r3, r2
 80039f6:	001a      	movs	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4a0d      	ldr	r2, [pc, #52]	; (8003a3c <TIM_TI2_ConfigInputStage+0x60>)
 8003a06:	4013      	ands	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	031b      	lsls	r3, r3, #12
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	22a0      	movs	r2, #160	; 0xa0
 8003a18:	4393      	bics	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	621a      	str	r2, [r3, #32]
}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b006      	add	sp, #24
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	ffff0fff 	.word	0xffff0fff

08003a40 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	4a17      	ldr	r2, [pc, #92]	; (8003ab8 <TIM_TI3_SetConfig+0x78>)
 8003a5a:	401a      	ands	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	2203      	movs	r2, #3
 8003a6a:	4393      	bics	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	22f0      	movs	r2, #240	; 0xf0
 8003a7a:	4393      	bics	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	22ff      	movs	r2, #255	; 0xff
 8003a84:	4013      	ands	r3, r2
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	4a0b      	ldr	r2, [pc, #44]	; (8003abc <TIM_TI3_SetConfig+0x7c>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	021a      	lsls	r2, r3, #8
 8003a98:	23a0      	movs	r3, #160	; 0xa0
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	621a      	str	r2, [r3, #32]
}
 8003ab0:	46c0      	nop			; (mov r8, r8)
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b006      	add	sp, #24
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	fffffeff 	.word	0xfffffeff
 8003abc:	fffff5ff 	.word	0xfffff5ff

08003ac0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
 8003acc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	4a18      	ldr	r2, [pc, #96]	; (8003b3c <TIM_TI4_SetConfig+0x7c>)
 8003ada:	401a      	ands	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	4a15      	ldr	r2, [pc, #84]	; (8003b40 <TIM_TI4_SetConfig+0x80>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	021b      	lsls	r3, r3, #8
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4a12      	ldr	r2, [pc, #72]	; (8003b44 <TIM_TI4_SetConfig+0x84>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	031b      	lsls	r3, r3, #12
 8003b04:	041b      	lsls	r3, r3, #16
 8003b06:	0c1b      	lsrs	r3, r3, #16
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	4a0d      	ldr	r2, [pc, #52]	; (8003b48 <TIM_TI4_SetConfig+0x88>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	031a      	lsls	r2, r3, #12
 8003b1a:	23a0      	movs	r3, #160	; 0xa0
 8003b1c:	021b      	lsls	r3, r3, #8
 8003b1e:	4013      	ands	r3, r2
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	621a      	str	r2, [r3, #32]
}
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	46bd      	mov	sp, r7
 8003b36:	b006      	add	sp, #24
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	ffffefff 	.word	0xffffefff
 8003b40:	fffffcff 	.word	0xfffffcff
 8003b44:	ffff0fff 	.word	0xffff0fff
 8003b48:	ffff5fff 	.word	0xffff5fff

08003b4c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4a08      	ldr	r2, [pc, #32]	; (8003b80 <TIM_ITRx_SetConfig+0x34>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	2207      	movs	r2, #7
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	609a      	str	r2, [r3, #8]
}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b004      	add	sp, #16
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	46c0      	nop			; (mov r8, r8)
 8003b80:	ffcfff8f 	.word	0xffcfff8f

08003b84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	4a09      	ldr	r2, [pc, #36]	; (8003bc0 <TIM_ETR_SetConfig+0x3c>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	021a      	lsls	r2, r3, #8
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	609a      	str	r2, [r3, #8]
}
 8003bb8:	46c0      	nop			; (mov r8, r8)
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b006      	add	sp, #24
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	ffff00ff 	.word	0xffff00ff

08003bc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	221f      	movs	r2, #31
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	409a      	lsls	r2, r3
 8003bda:	0013      	movs	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	43d2      	mvns	r2, r2
 8003be6:	401a      	ands	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a1a      	ldr	r2, [r3, #32]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	211f      	movs	r1, #31
 8003bf4:	400b      	ands	r3, r1
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	4099      	lsls	r1, r3
 8003bfa:	000b      	movs	r3, r1
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	621a      	str	r2, [r3, #32]
}
 8003c02:	46c0      	nop			; (mov r8, r8)
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b006      	add	sp, #24
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	223c      	movs	r2, #60	; 0x3c
 8003c1a:	5c9b      	ldrb	r3, [r3, r2]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e04a      	b.n	8003cba <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	223c      	movs	r2, #60	; 0x3c
 8003c28:	2101      	movs	r1, #1
 8003c2a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	223d      	movs	r2, #61	; 0x3d
 8003c30:	2102      	movs	r1, #2
 8003c32:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a1e      	ldr	r2, [pc, #120]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d108      	bne.n	8003c60 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2270      	movs	r2, #112	; 0x70
 8003c64:	4393      	bics	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a11      	ldr	r2, [pc, #68]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d004      	beq.n	8003c8e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a10      	ldr	r2, [pc, #64]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d10c      	bne.n	8003ca8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2280      	movs	r2, #128	; 0x80
 8003c92:	4393      	bics	r3, r2
 8003c94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	223d      	movs	r2, #61	; 0x3d
 8003cac:	2101      	movs	r1, #1
 8003cae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	223c      	movs	r2, #60	; 0x3c
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	0018      	movs	r0, r3
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	b004      	add	sp, #16
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	40012c00 	.word	0x40012c00
 8003cc8:	ff0fffff 	.word	0xff0fffff
 8003ccc:	40000400 	.word	0x40000400

08003cd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cd8:	46c0      	nop			; (mov r8, r8)
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	b002      	add	sp, #8
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ce8:	46c0      	nop			; (mov r8, r8)
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b002      	add	sp, #8
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003cf8:	46c0      	nop			; (mov r8, r8)
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b002      	add	sp, #8
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e046      	b.n	8003da0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2288      	movs	r2, #136	; 0x88
 8003d16:	589b      	ldr	r3, [r3, r2]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d107      	bne.n	8003d2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2284      	movs	r2, #132	; 0x84
 8003d20:	2100      	movs	r1, #0
 8003d22:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	0018      	movs	r0, r3
 8003d28:	f7fd fda4 	bl	8001874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2288      	movs	r2, #136	; 0x88
 8003d30:	2124      	movs	r1, #36	; 0x24
 8003d32:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2101      	movs	r1, #1
 8003d40:	438a      	bics	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	0018      	movs	r0, r3
 8003d50:	f000 fa4e 	bl	80041f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	0018      	movs	r0, r3
 8003d58:	f000 f8cc 	bl	8003ef4 <UART_SetConfig>
 8003d5c:	0003      	movs	r3, r0
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e01c      	b.n	8003da0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	490d      	ldr	r1, [pc, #52]	; (8003da8 <HAL_UART_Init+0xa8>)
 8003d72:	400a      	ands	r2, r1
 8003d74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	212a      	movs	r1, #42	; 0x2a
 8003d82:	438a      	bics	r2, r1
 8003d84:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2101      	movs	r1, #1
 8003d92:	430a      	orrs	r2, r1
 8003d94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f000 fadd 	bl	8004358 <UART_CheckIdleState>
 8003d9e:	0003      	movs	r3, r0
}
 8003da0:	0018      	movs	r0, r3
 8003da2:	46bd      	mov	sp, r7
 8003da4:	b002      	add	sp, #8
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	ffffb7ff 	.word	0xffffb7ff

08003dac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08a      	sub	sp, #40	; 0x28
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	1dbb      	adds	r3, r7, #6
 8003dba:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2288      	movs	r2, #136	; 0x88
 8003dc0:	589b      	ldr	r3, [r3, r2]
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	d000      	beq.n	8003dc8 <HAL_UART_Transmit+0x1c>
 8003dc6:	e090      	b.n	8003eea <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_UART_Transmit+0x2a>
 8003dce:	1dbb      	adds	r3, r7, #6
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e088      	b.n	8003eec <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	2380      	movs	r3, #128	; 0x80
 8003de0:	015b      	lsls	r3, r3, #5
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d109      	bne.n	8003dfa <HAL_UART_Transmit+0x4e>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d105      	bne.n	8003dfa <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2201      	movs	r2, #1
 8003df2:	4013      	ands	r3, r2
 8003df4:	d001      	beq.n	8003dfa <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e078      	b.n	8003eec <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2290      	movs	r2, #144	; 0x90
 8003dfe:	2100      	movs	r1, #0
 8003e00:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2288      	movs	r2, #136	; 0x88
 8003e06:	2121      	movs	r1, #33	; 0x21
 8003e08:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e0a:	f7fd fe95 	bl	8001b38 <HAL_GetTick>
 8003e0e:	0003      	movs	r3, r0
 8003e10:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	1dba      	adds	r2, r7, #6
 8003e16:	2154      	movs	r1, #84	; 0x54
 8003e18:	8812      	ldrh	r2, [r2, #0]
 8003e1a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	1dba      	adds	r2, r7, #6
 8003e20:	2156      	movs	r1, #86	; 0x56
 8003e22:	8812      	ldrh	r2, [r2, #0]
 8003e24:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	2380      	movs	r3, #128	; 0x80
 8003e2c:	015b      	lsls	r3, r3, #5
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d108      	bne.n	8003e44 <HAL_UART_Transmit+0x98>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d104      	bne.n	8003e44 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	61bb      	str	r3, [r7, #24]
 8003e42:	e003      	b.n	8003e4c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e4c:	e030      	b.n	8003eb0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	0013      	movs	r3, r2
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2180      	movs	r1, #128	; 0x80
 8003e5c:	f000 fb26 	bl	80044ac <UART_WaitOnFlagUntilTimeout>
 8003e60:	1e03      	subs	r3, r0, #0
 8003e62:	d005      	beq.n	8003e70 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2288      	movs	r2, #136	; 0x88
 8003e68:	2120      	movs	r1, #32
 8003e6a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e03d      	b.n	8003eec <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10b      	bne.n	8003e8e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	001a      	movs	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	05d2      	lsls	r2, r2, #23
 8003e82:	0dd2      	lsrs	r2, r2, #23
 8003e84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	3302      	adds	r3, #2
 8003e8a:	61bb      	str	r3, [r7, #24]
 8003e8c:	e007      	b.n	8003e9e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	781a      	ldrb	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2256      	movs	r2, #86	; 0x56
 8003ea2:	5a9b      	ldrh	r3, [r3, r2]
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b299      	uxth	r1, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2256      	movs	r2, #86	; 0x56
 8003eae:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2256      	movs	r2, #86	; 0x56
 8003eb4:	5a9b      	ldrh	r3, [r3, r2]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1c8      	bne.n	8003e4e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	0013      	movs	r3, r2
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	2140      	movs	r1, #64	; 0x40
 8003eca:	f000 faef 	bl	80044ac <UART_WaitOnFlagUntilTimeout>
 8003ece:	1e03      	subs	r3, r0, #0
 8003ed0:	d005      	beq.n	8003ede <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2288      	movs	r2, #136	; 0x88
 8003ed6:	2120      	movs	r1, #32
 8003ed8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e006      	b.n	8003eec <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2288      	movs	r2, #136	; 0x88
 8003ee2:	2120      	movs	r1, #32
 8003ee4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	e000      	b.n	8003eec <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003eea:	2302      	movs	r3, #2
  }
}
 8003eec:	0018      	movs	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b008      	add	sp, #32
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003efc:	231e      	movs	r3, #30
 8003efe:	18fb      	adds	r3, r7, r3
 8003f00:	2200      	movs	r2, #0
 8003f02:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4aab      	ldr	r2, [pc, #684]	; (80041d0 <UART_SetConfig+0x2dc>)
 8003f24:	4013      	ands	r3, r2
 8003f26:	0019      	movs	r1, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	4aa6      	ldr	r2, [pc, #664]	; (80041d4 <UART_SetConfig+0x2e0>)
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	0019      	movs	r1, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	4a9d      	ldr	r2, [pc, #628]	; (80041d8 <UART_SetConfig+0x2e4>)
 8003f62:	4013      	ands	r3, r2
 8003f64:	0019      	movs	r1, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	220f      	movs	r2, #15
 8003f78:	4393      	bics	r3, r2
 8003f7a:	0019      	movs	r1, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a93      	ldr	r2, [pc, #588]	; (80041dc <UART_SetConfig+0x2e8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d127      	bne.n	8003fe2 <UART_SetConfig+0xee>
 8003f92:	4b93      	ldr	r3, [pc, #588]	; (80041e0 <UART_SetConfig+0x2ec>)
 8003f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f96:	2203      	movs	r2, #3
 8003f98:	4013      	ands	r3, r2
 8003f9a:	2b03      	cmp	r3, #3
 8003f9c:	d017      	beq.n	8003fce <UART_SetConfig+0xda>
 8003f9e:	d81b      	bhi.n	8003fd8 <UART_SetConfig+0xe4>
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d00a      	beq.n	8003fba <UART_SetConfig+0xc6>
 8003fa4:	d818      	bhi.n	8003fd8 <UART_SetConfig+0xe4>
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <UART_SetConfig+0xbc>
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d00a      	beq.n	8003fc4 <UART_SetConfig+0xd0>
 8003fae:	e013      	b.n	8003fd8 <UART_SetConfig+0xe4>
 8003fb0:	231f      	movs	r3, #31
 8003fb2:	18fb      	adds	r3, r7, r3
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	701a      	strb	r2, [r3, #0]
 8003fb8:	e021      	b.n	8003ffe <UART_SetConfig+0x10a>
 8003fba:	231f      	movs	r3, #31
 8003fbc:	18fb      	adds	r3, r7, r3
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	701a      	strb	r2, [r3, #0]
 8003fc2:	e01c      	b.n	8003ffe <UART_SetConfig+0x10a>
 8003fc4:	231f      	movs	r3, #31
 8003fc6:	18fb      	adds	r3, r7, r3
 8003fc8:	2204      	movs	r2, #4
 8003fca:	701a      	strb	r2, [r3, #0]
 8003fcc:	e017      	b.n	8003ffe <UART_SetConfig+0x10a>
 8003fce:	231f      	movs	r3, #31
 8003fd0:	18fb      	adds	r3, r7, r3
 8003fd2:	2208      	movs	r2, #8
 8003fd4:	701a      	strb	r2, [r3, #0]
 8003fd6:	e012      	b.n	8003ffe <UART_SetConfig+0x10a>
 8003fd8:	231f      	movs	r3, #31
 8003fda:	18fb      	adds	r3, r7, r3
 8003fdc:	2210      	movs	r2, #16
 8003fde:	701a      	strb	r2, [r3, #0]
 8003fe0:	e00d      	b.n	8003ffe <UART_SetConfig+0x10a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a7f      	ldr	r2, [pc, #508]	; (80041e4 <UART_SetConfig+0x2f0>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d104      	bne.n	8003ff6 <UART_SetConfig+0x102>
 8003fec:	231f      	movs	r3, #31
 8003fee:	18fb      	adds	r3, r7, r3
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]
 8003ff4:	e003      	b.n	8003ffe <UART_SetConfig+0x10a>
 8003ff6:	231f      	movs	r3, #31
 8003ff8:	18fb      	adds	r3, r7, r3
 8003ffa:	2210      	movs	r2, #16
 8003ffc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69da      	ldr	r2, [r3, #28]
 8004002:	2380      	movs	r3, #128	; 0x80
 8004004:	021b      	lsls	r3, r3, #8
 8004006:	429a      	cmp	r2, r3
 8004008:	d000      	beq.n	800400c <UART_SetConfig+0x118>
 800400a:	e06f      	b.n	80040ec <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800400c:	231f      	movs	r3, #31
 800400e:	18fb      	adds	r3, r7, r3
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	2b08      	cmp	r3, #8
 8004014:	d01f      	beq.n	8004056 <UART_SetConfig+0x162>
 8004016:	dc22      	bgt.n	800405e <UART_SetConfig+0x16a>
 8004018:	2b04      	cmp	r3, #4
 800401a:	d017      	beq.n	800404c <UART_SetConfig+0x158>
 800401c:	dc1f      	bgt.n	800405e <UART_SetConfig+0x16a>
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <UART_SetConfig+0x134>
 8004022:	2b02      	cmp	r3, #2
 8004024:	d005      	beq.n	8004032 <UART_SetConfig+0x13e>
 8004026:	e01a      	b.n	800405e <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004028:	f7fe fcf2 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 800402c:	0003      	movs	r3, r0
 800402e:	61bb      	str	r3, [r7, #24]
        break;
 8004030:	e01c      	b.n	800406c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004032:	4b6b      	ldr	r3, [pc, #428]	; (80041e0 <UART_SetConfig+0x2ec>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	2207      	movs	r2, #7
 800403a:	4013      	ands	r3, r2
 800403c:	3301      	adds	r3, #1
 800403e:	0019      	movs	r1, r3
 8004040:	4869      	ldr	r0, [pc, #420]	; (80041e8 <UART_SetConfig+0x2f4>)
 8004042:	f7fc f873 	bl	800012c <__udivsi3>
 8004046:	0003      	movs	r3, r0
 8004048:	61bb      	str	r3, [r7, #24]
        break;
 800404a:	e00f      	b.n	800406c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800404c:	f7fe fc96 	bl	800297c <HAL_RCC_GetSysClockFreq>
 8004050:	0003      	movs	r3, r0
 8004052:	61bb      	str	r3, [r7, #24]
        break;
 8004054:	e00a      	b.n	800406c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004056:	2380      	movs	r3, #128	; 0x80
 8004058:	021b      	lsls	r3, r3, #8
 800405a:	61bb      	str	r3, [r7, #24]
        break;
 800405c:	e006      	b.n	800406c <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004062:	231e      	movs	r3, #30
 8004064:	18fb      	adds	r3, r7, r3
 8004066:	2201      	movs	r2, #1
 8004068:	701a      	strb	r2, [r3, #0]
        break;
 800406a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d100      	bne.n	8004074 <UART_SetConfig+0x180>
 8004072:	e097      	b.n	80041a4 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004078:	4b5c      	ldr	r3, [pc, #368]	; (80041ec <UART_SetConfig+0x2f8>)
 800407a:	0052      	lsls	r2, r2, #1
 800407c:	5ad3      	ldrh	r3, [r2, r3]
 800407e:	0019      	movs	r1, r3
 8004080:	69b8      	ldr	r0, [r7, #24]
 8004082:	f7fc f853 	bl	800012c <__udivsi3>
 8004086:	0003      	movs	r3, r0
 8004088:	005a      	lsls	r2, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	085b      	lsrs	r3, r3, #1
 8004090:	18d2      	adds	r2, r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	0019      	movs	r1, r3
 8004098:	0010      	movs	r0, r2
 800409a:	f7fc f847 	bl	800012c <__udivsi3>
 800409e:	0003      	movs	r3, r0
 80040a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	2b0f      	cmp	r3, #15
 80040a6:	d91c      	bls.n	80040e2 <UART_SetConfig+0x1ee>
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	2380      	movs	r3, #128	; 0x80
 80040ac:	025b      	lsls	r3, r3, #9
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d217      	bcs.n	80040e2 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	200e      	movs	r0, #14
 80040b8:	183b      	adds	r3, r7, r0
 80040ba:	210f      	movs	r1, #15
 80040bc:	438a      	bics	r2, r1
 80040be:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	085b      	lsrs	r3, r3, #1
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2207      	movs	r2, #7
 80040c8:	4013      	ands	r3, r2
 80040ca:	b299      	uxth	r1, r3
 80040cc:	183b      	adds	r3, r7, r0
 80040ce:	183a      	adds	r2, r7, r0
 80040d0:	8812      	ldrh	r2, [r2, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	183a      	adds	r2, r7, r0
 80040dc:	8812      	ldrh	r2, [r2, #0]
 80040de:	60da      	str	r2, [r3, #12]
 80040e0:	e060      	b.n	80041a4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80040e2:	231e      	movs	r3, #30
 80040e4:	18fb      	adds	r3, r7, r3
 80040e6:	2201      	movs	r2, #1
 80040e8:	701a      	strb	r2, [r3, #0]
 80040ea:	e05b      	b.n	80041a4 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040ec:	231f      	movs	r3, #31
 80040ee:	18fb      	adds	r3, r7, r3
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2b08      	cmp	r3, #8
 80040f4:	d01f      	beq.n	8004136 <UART_SetConfig+0x242>
 80040f6:	dc22      	bgt.n	800413e <UART_SetConfig+0x24a>
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	d017      	beq.n	800412c <UART_SetConfig+0x238>
 80040fc:	dc1f      	bgt.n	800413e <UART_SetConfig+0x24a>
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <UART_SetConfig+0x214>
 8004102:	2b02      	cmp	r3, #2
 8004104:	d005      	beq.n	8004112 <UART_SetConfig+0x21e>
 8004106:	e01a      	b.n	800413e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004108:	f7fe fc82 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 800410c:	0003      	movs	r3, r0
 800410e:	61bb      	str	r3, [r7, #24]
        break;
 8004110:	e01c      	b.n	800414c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004112:	4b33      	ldr	r3, [pc, #204]	; (80041e0 <UART_SetConfig+0x2ec>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	2207      	movs	r2, #7
 800411a:	4013      	ands	r3, r2
 800411c:	3301      	adds	r3, #1
 800411e:	0019      	movs	r1, r3
 8004120:	4831      	ldr	r0, [pc, #196]	; (80041e8 <UART_SetConfig+0x2f4>)
 8004122:	f7fc f803 	bl	800012c <__udivsi3>
 8004126:	0003      	movs	r3, r0
 8004128:	61bb      	str	r3, [r7, #24]
        break;
 800412a:	e00f      	b.n	800414c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800412c:	f7fe fc26 	bl	800297c <HAL_RCC_GetSysClockFreq>
 8004130:	0003      	movs	r3, r0
 8004132:	61bb      	str	r3, [r7, #24]
        break;
 8004134:	e00a      	b.n	800414c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004136:	2380      	movs	r3, #128	; 0x80
 8004138:	021b      	lsls	r3, r3, #8
 800413a:	61bb      	str	r3, [r7, #24]
        break;
 800413c:	e006      	b.n	800414c <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004142:	231e      	movs	r3, #30
 8004144:	18fb      	adds	r3, r7, r3
 8004146:	2201      	movs	r2, #1
 8004148:	701a      	strb	r2, [r3, #0]
        break;
 800414a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d028      	beq.n	80041a4 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004156:	4b25      	ldr	r3, [pc, #148]	; (80041ec <UART_SetConfig+0x2f8>)
 8004158:	0052      	lsls	r2, r2, #1
 800415a:	5ad3      	ldrh	r3, [r2, r3]
 800415c:	0019      	movs	r1, r3
 800415e:	69b8      	ldr	r0, [r7, #24]
 8004160:	f7fb ffe4 	bl	800012c <__udivsi3>
 8004164:	0003      	movs	r3, r0
 8004166:	001a      	movs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	085b      	lsrs	r3, r3, #1
 800416e:	18d2      	adds	r2, r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	0019      	movs	r1, r3
 8004176:	0010      	movs	r0, r2
 8004178:	f7fb ffd8 	bl	800012c <__udivsi3>
 800417c:	0003      	movs	r3, r0
 800417e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	2b0f      	cmp	r3, #15
 8004184:	d90a      	bls.n	800419c <UART_SetConfig+0x2a8>
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	2380      	movs	r3, #128	; 0x80
 800418a:	025b      	lsls	r3, r3, #9
 800418c:	429a      	cmp	r2, r3
 800418e:	d205      	bcs.n	800419c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	b29a      	uxth	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60da      	str	r2, [r3, #12]
 800419a:	e003      	b.n	80041a4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800419c:	231e      	movs	r3, #30
 800419e:	18fb      	adds	r3, r7, r3
 80041a0:	2201      	movs	r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	226a      	movs	r2, #106	; 0x6a
 80041a8:	2101      	movs	r1, #1
 80041aa:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2268      	movs	r2, #104	; 0x68
 80041b0:	2101      	movs	r1, #1
 80041b2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80041c0:	231e      	movs	r3, #30
 80041c2:	18fb      	adds	r3, r7, r3
 80041c4:	781b      	ldrb	r3, [r3, #0]
}
 80041c6:	0018      	movs	r0, r3
 80041c8:	46bd      	mov	sp, r7
 80041ca:	b008      	add	sp, #32
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	cfff69f3 	.word	0xcfff69f3
 80041d4:	ffffcfff 	.word	0xffffcfff
 80041d8:	11fff4ff 	.word	0x11fff4ff
 80041dc:	40013800 	.word	0x40013800
 80041e0:	40021000 	.word	0x40021000
 80041e4:	40004400 	.word	0x40004400
 80041e8:	02dc6c00 	.word	0x02dc6c00
 80041ec:	08005058 	.word	0x08005058

080041f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	2208      	movs	r2, #8
 80041fe:	4013      	ands	r3, r2
 8004200:	d00b      	beq.n	800421a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	4a4a      	ldr	r2, [pc, #296]	; (8004334 <UART_AdvFeatureConfig+0x144>)
 800420a:	4013      	ands	r3, r2
 800420c:	0019      	movs	r1, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421e:	2201      	movs	r2, #1
 8004220:	4013      	ands	r3, r2
 8004222:	d00b      	beq.n	800423c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	4a43      	ldr	r2, [pc, #268]	; (8004338 <UART_AdvFeatureConfig+0x148>)
 800422c:	4013      	ands	r3, r2
 800422e:	0019      	movs	r1, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004240:	2202      	movs	r2, #2
 8004242:	4013      	ands	r3, r2
 8004244:	d00b      	beq.n	800425e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4a3b      	ldr	r2, [pc, #236]	; (800433c <UART_AdvFeatureConfig+0x14c>)
 800424e:	4013      	ands	r3, r2
 8004250:	0019      	movs	r1, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004262:	2204      	movs	r2, #4
 8004264:	4013      	ands	r3, r2
 8004266:	d00b      	beq.n	8004280 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	4a34      	ldr	r2, [pc, #208]	; (8004340 <UART_AdvFeatureConfig+0x150>)
 8004270:	4013      	ands	r3, r2
 8004272:	0019      	movs	r1, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004284:	2210      	movs	r2, #16
 8004286:	4013      	ands	r3, r2
 8004288:	d00b      	beq.n	80042a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	4a2c      	ldr	r2, [pc, #176]	; (8004344 <UART_AdvFeatureConfig+0x154>)
 8004292:	4013      	ands	r3, r2
 8004294:	0019      	movs	r1, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a6:	2220      	movs	r2, #32
 80042a8:	4013      	ands	r3, r2
 80042aa:	d00b      	beq.n	80042c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	4a25      	ldr	r2, [pc, #148]	; (8004348 <UART_AdvFeatureConfig+0x158>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	0019      	movs	r1, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c8:	2240      	movs	r2, #64	; 0x40
 80042ca:	4013      	ands	r3, r2
 80042cc:	d01d      	beq.n	800430a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	4a1d      	ldr	r2, [pc, #116]	; (800434c <UART_AdvFeatureConfig+0x15c>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	0019      	movs	r1, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042ea:	2380      	movs	r3, #128	; 0x80
 80042ec:	035b      	lsls	r3, r3, #13
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d10b      	bne.n	800430a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	4a15      	ldr	r2, [pc, #84]	; (8004350 <UART_AdvFeatureConfig+0x160>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	0019      	movs	r1, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430e:	2280      	movs	r2, #128	; 0x80
 8004310:	4013      	ands	r3, r2
 8004312:	d00b      	beq.n	800432c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	4a0e      	ldr	r2, [pc, #56]	; (8004354 <UART_AdvFeatureConfig+0x164>)
 800431c:	4013      	ands	r3, r2
 800431e:	0019      	movs	r1, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	605a      	str	r2, [r3, #4]
  }
}
 800432c:	46c0      	nop			; (mov r8, r8)
 800432e:	46bd      	mov	sp, r7
 8004330:	b002      	add	sp, #8
 8004332:	bd80      	pop	{r7, pc}
 8004334:	ffff7fff 	.word	0xffff7fff
 8004338:	fffdffff 	.word	0xfffdffff
 800433c:	fffeffff 	.word	0xfffeffff
 8004340:	fffbffff 	.word	0xfffbffff
 8004344:	ffffefff 	.word	0xffffefff
 8004348:	ffffdfff 	.word	0xffffdfff
 800434c:	ffefffff 	.word	0xffefffff
 8004350:	ff9fffff 	.word	0xff9fffff
 8004354:	fff7ffff 	.word	0xfff7ffff

08004358 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b092      	sub	sp, #72	; 0x48
 800435c:	af02      	add	r7, sp, #8
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2290      	movs	r2, #144	; 0x90
 8004364:	2100      	movs	r1, #0
 8004366:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004368:	f7fd fbe6 	bl	8001b38 <HAL_GetTick>
 800436c:	0003      	movs	r3, r0
 800436e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2208      	movs	r2, #8
 8004378:	4013      	ands	r3, r2
 800437a:	2b08      	cmp	r3, #8
 800437c:	d12d      	bne.n	80043da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800437e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004380:	2280      	movs	r2, #128	; 0x80
 8004382:	0391      	lsls	r1, r2, #14
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	4a47      	ldr	r2, [pc, #284]	; (80044a4 <UART_CheckIdleState+0x14c>)
 8004388:	9200      	str	r2, [sp, #0]
 800438a:	2200      	movs	r2, #0
 800438c:	f000 f88e 	bl	80044ac <UART_WaitOnFlagUntilTimeout>
 8004390:	1e03      	subs	r3, r0, #0
 8004392:	d022      	beq.n	80043da <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004394:	f3ef 8310 	mrs	r3, PRIMASK
 8004398:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800439c:	63bb      	str	r3, [r7, #56]	; 0x38
 800439e:	2301      	movs	r3, #1
 80043a0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a4:	f383 8810 	msr	PRIMASK, r3
}
 80043a8:	46c0      	nop			; (mov r8, r8)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2180      	movs	r1, #128	; 0x80
 80043b6:	438a      	bics	r2, r1
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c0:	f383 8810 	msr	PRIMASK, r3
}
 80043c4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2288      	movs	r2, #136	; 0x88
 80043ca:	2120      	movs	r1, #32
 80043cc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2284      	movs	r2, #132	; 0x84
 80043d2:	2100      	movs	r1, #0
 80043d4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e060      	b.n	800449c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2204      	movs	r2, #4
 80043e2:	4013      	ands	r3, r2
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d146      	bne.n	8004476 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ea:	2280      	movs	r2, #128	; 0x80
 80043ec:	03d1      	lsls	r1, r2, #15
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	4a2c      	ldr	r2, [pc, #176]	; (80044a4 <UART_CheckIdleState+0x14c>)
 80043f2:	9200      	str	r2, [sp, #0]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f000 f859 	bl	80044ac <UART_WaitOnFlagUntilTimeout>
 80043fa:	1e03      	subs	r3, r0, #0
 80043fc:	d03b      	beq.n	8004476 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004402:	60fb      	str	r3, [r7, #12]
  return(result);
 8004404:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004406:	637b      	str	r3, [r7, #52]	; 0x34
 8004408:	2301      	movs	r3, #1
 800440a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f383 8810 	msr	PRIMASK, r3
}
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4922      	ldr	r1, [pc, #136]	; (80044a8 <UART_CheckIdleState+0x150>)
 8004420:	400a      	ands	r2, r1
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004426:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f383 8810 	msr	PRIMASK, r3
}
 800442e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004430:	f3ef 8310 	mrs	r3, PRIMASK
 8004434:	61bb      	str	r3, [r7, #24]
  return(result);
 8004436:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004438:	633b      	str	r3, [r7, #48]	; 0x30
 800443a:	2301      	movs	r3, #1
 800443c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	f383 8810 	msr	PRIMASK, r3
}
 8004444:	46c0      	nop			; (mov r8, r8)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2101      	movs	r1, #1
 8004452:	438a      	bics	r2, r1
 8004454:	609a      	str	r2, [r3, #8]
 8004456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004458:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	f383 8810 	msr	PRIMASK, r3
}
 8004460:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	228c      	movs	r2, #140	; 0x8c
 8004466:	2120      	movs	r1, #32
 8004468:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2284      	movs	r2, #132	; 0x84
 800446e:	2100      	movs	r1, #0
 8004470:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e012      	b.n	800449c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2288      	movs	r2, #136	; 0x88
 800447a:	2120      	movs	r1, #32
 800447c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	228c      	movs	r2, #140	; 0x8c
 8004482:	2120      	movs	r1, #32
 8004484:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2284      	movs	r2, #132	; 0x84
 8004496:	2100      	movs	r1, #0
 8004498:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	0018      	movs	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	b010      	add	sp, #64	; 0x40
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	01ffffff 	.word	0x01ffffff
 80044a8:	fffffedf 	.word	0xfffffedf

080044ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	1dfb      	adds	r3, r7, #7
 80044ba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044bc:	e04b      	b.n	8004556 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	3301      	adds	r3, #1
 80044c2:	d048      	beq.n	8004556 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c4:	f7fd fb38 	bl	8001b38 <HAL_GetTick>
 80044c8:	0002      	movs	r2, r0
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d302      	bcc.n	80044da <UART_WaitOnFlagUntilTimeout+0x2e>
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e04b      	b.n	8004576 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2204      	movs	r2, #4
 80044e6:	4013      	ands	r3, r2
 80044e8:	d035      	beq.n	8004556 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	2208      	movs	r2, #8
 80044f2:	4013      	ands	r3, r2
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d111      	bne.n	800451c <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2208      	movs	r2, #8
 80044fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	0018      	movs	r0, r3
 8004504:	f000 f83c 	bl	8004580 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2290      	movs	r2, #144	; 0x90
 800450c:	2108      	movs	r1, #8
 800450e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2284      	movs	r2, #132	; 0x84
 8004514:	2100      	movs	r1, #0
 8004516:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e02c      	b.n	8004576 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	69da      	ldr	r2, [r3, #28]
 8004522:	2380      	movs	r3, #128	; 0x80
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	401a      	ands	r2, r3
 8004528:	2380      	movs	r3, #128	; 0x80
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	429a      	cmp	r2, r3
 800452e:	d112      	bne.n	8004556 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2280      	movs	r2, #128	; 0x80
 8004536:	0112      	lsls	r2, r2, #4
 8004538:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	0018      	movs	r0, r3
 800453e:	f000 f81f 	bl	8004580 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2290      	movs	r2, #144	; 0x90
 8004546:	2120      	movs	r1, #32
 8004548:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2284      	movs	r2, #132	; 0x84
 800454e:	2100      	movs	r1, #0
 8004550:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e00f      	b.n	8004576 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	4013      	ands	r3, r2
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	425a      	negs	r2, r3
 8004566:	4153      	adcs	r3, r2
 8004568:	b2db      	uxtb	r3, r3
 800456a:	001a      	movs	r2, r3
 800456c:	1dfb      	adds	r3, r7, #7
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d0a4      	beq.n	80044be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	0018      	movs	r0, r3
 8004578:	46bd      	mov	sp, r7
 800457a:	b004      	add	sp, #16
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08e      	sub	sp, #56	; 0x38
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004588:	f3ef 8310 	mrs	r3, PRIMASK
 800458c:	617b      	str	r3, [r7, #20]
  return(result);
 800458e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004590:	637b      	str	r3, [r7, #52]	; 0x34
 8004592:	2301      	movs	r3, #1
 8004594:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	f383 8810 	msr	PRIMASK, r3
}
 800459c:	46c0      	nop			; (mov r8, r8)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4926      	ldr	r1, [pc, #152]	; (8004644 <UART_EndRxTransfer+0xc4>)
 80045aa:	400a      	ands	r2, r1
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	f383 8810 	msr	PRIMASK, r3
}
 80045b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80045ba:	f3ef 8310 	mrs	r3, PRIMASK
 80045be:	623b      	str	r3, [r7, #32]
  return(result);
 80045c0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80045c2:	633b      	str	r3, [r7, #48]	; 0x30
 80045c4:	2301      	movs	r3, #1
 80045c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	f383 8810 	msr	PRIMASK, r3
}
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689a      	ldr	r2, [r3, #8]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	491b      	ldr	r1, [pc, #108]	; (8004648 <UART_EndRxTransfer+0xc8>)
 80045dc:	400a      	ands	r2, r1
 80045de:	609a      	str	r2, [r3, #8]
 80045e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e6:	f383 8810 	msr	PRIMASK, r3
}
 80045ea:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d118      	bne.n	8004626 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80045f4:	f3ef 8310 	mrs	r3, PRIMASK
 80045f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80045fa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045fe:	2301      	movs	r3, #1
 8004600:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f383 8810 	msr	PRIMASK, r3
}
 8004608:	46c0      	nop			; (mov r8, r8)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2110      	movs	r1, #16
 8004616:	438a      	bics	r2, r1
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f383 8810 	msr	PRIMASK, r3
}
 8004624:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	228c      	movs	r2, #140	; 0x8c
 800462a:	2120      	movs	r1, #32
 800462c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	675a      	str	r2, [r3, #116]	; 0x74
}
 800463a:	46c0      	nop			; (mov r8, r8)
 800463c:	46bd      	mov	sp, r7
 800463e:	b00e      	add	sp, #56	; 0x38
 8004640:	bd80      	pop	{r7, pc}
 8004642:	46c0      	nop			; (mov r8, r8)
 8004644:	fffffedf 	.word	0xfffffedf
 8004648:	effffffe 	.word	0xeffffffe

0800464c <siprintf>:
 800464c:	b40e      	push	{r1, r2, r3}
 800464e:	b500      	push	{lr}
 8004650:	490b      	ldr	r1, [pc, #44]	; (8004680 <siprintf+0x34>)
 8004652:	b09c      	sub	sp, #112	; 0x70
 8004654:	ab1d      	add	r3, sp, #116	; 0x74
 8004656:	9002      	str	r0, [sp, #8]
 8004658:	9006      	str	r0, [sp, #24]
 800465a:	9107      	str	r1, [sp, #28]
 800465c:	9104      	str	r1, [sp, #16]
 800465e:	4809      	ldr	r0, [pc, #36]	; (8004684 <siprintf+0x38>)
 8004660:	4909      	ldr	r1, [pc, #36]	; (8004688 <siprintf+0x3c>)
 8004662:	cb04      	ldmia	r3!, {r2}
 8004664:	9105      	str	r1, [sp, #20]
 8004666:	6800      	ldr	r0, [r0, #0]
 8004668:	a902      	add	r1, sp, #8
 800466a:	9301      	str	r3, [sp, #4]
 800466c:	f000 f9a2 	bl	80049b4 <_svfiprintf_r>
 8004670:	2200      	movs	r2, #0
 8004672:	9b02      	ldr	r3, [sp, #8]
 8004674:	701a      	strb	r2, [r3, #0]
 8004676:	b01c      	add	sp, #112	; 0x70
 8004678:	bc08      	pop	{r3}
 800467a:	b003      	add	sp, #12
 800467c:	4718      	bx	r3
 800467e:	46c0      	nop			; (mov r8, r8)
 8004680:	7fffffff 	.word	0x7fffffff
 8004684:	2000005c 	.word	0x2000005c
 8004688:	ffff0208 	.word	0xffff0208

0800468c <memset>:
 800468c:	0003      	movs	r3, r0
 800468e:	1882      	adds	r2, r0, r2
 8004690:	4293      	cmp	r3, r2
 8004692:	d100      	bne.n	8004696 <memset+0xa>
 8004694:	4770      	bx	lr
 8004696:	7019      	strb	r1, [r3, #0]
 8004698:	3301      	adds	r3, #1
 800469a:	e7f9      	b.n	8004690 <memset+0x4>

0800469c <__errno>:
 800469c:	4b01      	ldr	r3, [pc, #4]	; (80046a4 <__errno+0x8>)
 800469e:	6818      	ldr	r0, [r3, #0]
 80046a0:	4770      	bx	lr
 80046a2:	46c0      	nop			; (mov r8, r8)
 80046a4:	2000005c 	.word	0x2000005c

080046a8 <__libc_init_array>:
 80046a8:	b570      	push	{r4, r5, r6, lr}
 80046aa:	2600      	movs	r6, #0
 80046ac:	4c0c      	ldr	r4, [pc, #48]	; (80046e0 <__libc_init_array+0x38>)
 80046ae:	4d0d      	ldr	r5, [pc, #52]	; (80046e4 <__libc_init_array+0x3c>)
 80046b0:	1b64      	subs	r4, r4, r5
 80046b2:	10a4      	asrs	r4, r4, #2
 80046b4:	42a6      	cmp	r6, r4
 80046b6:	d109      	bne.n	80046cc <__libc_init_array+0x24>
 80046b8:	2600      	movs	r6, #0
 80046ba:	f000 fc6d 	bl	8004f98 <_init>
 80046be:	4c0a      	ldr	r4, [pc, #40]	; (80046e8 <__libc_init_array+0x40>)
 80046c0:	4d0a      	ldr	r5, [pc, #40]	; (80046ec <__libc_init_array+0x44>)
 80046c2:	1b64      	subs	r4, r4, r5
 80046c4:	10a4      	asrs	r4, r4, #2
 80046c6:	42a6      	cmp	r6, r4
 80046c8:	d105      	bne.n	80046d6 <__libc_init_array+0x2e>
 80046ca:	bd70      	pop	{r4, r5, r6, pc}
 80046cc:	00b3      	lsls	r3, r6, #2
 80046ce:	58eb      	ldr	r3, [r5, r3]
 80046d0:	4798      	blx	r3
 80046d2:	3601      	adds	r6, #1
 80046d4:	e7ee      	b.n	80046b4 <__libc_init_array+0xc>
 80046d6:	00b3      	lsls	r3, r6, #2
 80046d8:	58eb      	ldr	r3, [r5, r3]
 80046da:	4798      	blx	r3
 80046dc:	3601      	adds	r6, #1
 80046de:	e7f2      	b.n	80046c6 <__libc_init_array+0x1e>
 80046e0:	080050a4 	.word	0x080050a4
 80046e4:	080050a4 	.word	0x080050a4
 80046e8:	080050a8 	.word	0x080050a8
 80046ec:	080050a4 	.word	0x080050a4

080046f0 <__retarget_lock_acquire_recursive>:
 80046f0:	4770      	bx	lr

080046f2 <__retarget_lock_release_recursive>:
 80046f2:	4770      	bx	lr

080046f4 <_free_r>:
 80046f4:	b570      	push	{r4, r5, r6, lr}
 80046f6:	0005      	movs	r5, r0
 80046f8:	2900      	cmp	r1, #0
 80046fa:	d010      	beq.n	800471e <_free_r+0x2a>
 80046fc:	1f0c      	subs	r4, r1, #4
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	da00      	bge.n	8004706 <_free_r+0x12>
 8004704:	18e4      	adds	r4, r4, r3
 8004706:	0028      	movs	r0, r5
 8004708:	f000 f8e2 	bl	80048d0 <__malloc_lock>
 800470c:	4a1d      	ldr	r2, [pc, #116]	; (8004784 <_free_r+0x90>)
 800470e:	6813      	ldr	r3, [r2, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d105      	bne.n	8004720 <_free_r+0x2c>
 8004714:	6063      	str	r3, [r4, #4]
 8004716:	6014      	str	r4, [r2, #0]
 8004718:	0028      	movs	r0, r5
 800471a:	f000 f8e1 	bl	80048e0 <__malloc_unlock>
 800471e:	bd70      	pop	{r4, r5, r6, pc}
 8004720:	42a3      	cmp	r3, r4
 8004722:	d908      	bls.n	8004736 <_free_r+0x42>
 8004724:	6820      	ldr	r0, [r4, #0]
 8004726:	1821      	adds	r1, r4, r0
 8004728:	428b      	cmp	r3, r1
 800472a:	d1f3      	bne.n	8004714 <_free_r+0x20>
 800472c:	6819      	ldr	r1, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	1809      	adds	r1, r1, r0
 8004732:	6021      	str	r1, [r4, #0]
 8004734:	e7ee      	b.n	8004714 <_free_r+0x20>
 8004736:	001a      	movs	r2, r3
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <_free_r+0x4e>
 800473e:	42a3      	cmp	r3, r4
 8004740:	d9f9      	bls.n	8004736 <_free_r+0x42>
 8004742:	6811      	ldr	r1, [r2, #0]
 8004744:	1850      	adds	r0, r2, r1
 8004746:	42a0      	cmp	r0, r4
 8004748:	d10b      	bne.n	8004762 <_free_r+0x6e>
 800474a:	6820      	ldr	r0, [r4, #0]
 800474c:	1809      	adds	r1, r1, r0
 800474e:	1850      	adds	r0, r2, r1
 8004750:	6011      	str	r1, [r2, #0]
 8004752:	4283      	cmp	r3, r0
 8004754:	d1e0      	bne.n	8004718 <_free_r+0x24>
 8004756:	6818      	ldr	r0, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	1841      	adds	r1, r0, r1
 800475c:	6011      	str	r1, [r2, #0]
 800475e:	6053      	str	r3, [r2, #4]
 8004760:	e7da      	b.n	8004718 <_free_r+0x24>
 8004762:	42a0      	cmp	r0, r4
 8004764:	d902      	bls.n	800476c <_free_r+0x78>
 8004766:	230c      	movs	r3, #12
 8004768:	602b      	str	r3, [r5, #0]
 800476a:	e7d5      	b.n	8004718 <_free_r+0x24>
 800476c:	6820      	ldr	r0, [r4, #0]
 800476e:	1821      	adds	r1, r4, r0
 8004770:	428b      	cmp	r3, r1
 8004772:	d103      	bne.n	800477c <_free_r+0x88>
 8004774:	6819      	ldr	r1, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	1809      	adds	r1, r1, r0
 800477a:	6021      	str	r1, [r4, #0]
 800477c:	6063      	str	r3, [r4, #4]
 800477e:	6054      	str	r4, [r2, #4]
 8004780:	e7ca      	b.n	8004718 <_free_r+0x24>
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	20000354 	.word	0x20000354

08004788 <sbrk_aligned>:
 8004788:	b570      	push	{r4, r5, r6, lr}
 800478a:	4e0f      	ldr	r6, [pc, #60]	; (80047c8 <sbrk_aligned+0x40>)
 800478c:	000d      	movs	r5, r1
 800478e:	6831      	ldr	r1, [r6, #0]
 8004790:	0004      	movs	r4, r0
 8004792:	2900      	cmp	r1, #0
 8004794:	d102      	bne.n	800479c <sbrk_aligned+0x14>
 8004796:	f000 fba1 	bl	8004edc <_sbrk_r>
 800479a:	6030      	str	r0, [r6, #0]
 800479c:	0029      	movs	r1, r5
 800479e:	0020      	movs	r0, r4
 80047a0:	f000 fb9c 	bl	8004edc <_sbrk_r>
 80047a4:	1c43      	adds	r3, r0, #1
 80047a6:	d00a      	beq.n	80047be <sbrk_aligned+0x36>
 80047a8:	2303      	movs	r3, #3
 80047aa:	1cc5      	adds	r5, r0, #3
 80047ac:	439d      	bics	r5, r3
 80047ae:	42a8      	cmp	r0, r5
 80047b0:	d007      	beq.n	80047c2 <sbrk_aligned+0x3a>
 80047b2:	1a29      	subs	r1, r5, r0
 80047b4:	0020      	movs	r0, r4
 80047b6:	f000 fb91 	bl	8004edc <_sbrk_r>
 80047ba:	3001      	adds	r0, #1
 80047bc:	d101      	bne.n	80047c2 <sbrk_aligned+0x3a>
 80047be:	2501      	movs	r5, #1
 80047c0:	426d      	negs	r5, r5
 80047c2:	0028      	movs	r0, r5
 80047c4:	bd70      	pop	{r4, r5, r6, pc}
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	20000358 	.word	0x20000358

080047cc <_malloc_r>:
 80047cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047ce:	2203      	movs	r2, #3
 80047d0:	1ccb      	adds	r3, r1, #3
 80047d2:	4393      	bics	r3, r2
 80047d4:	3308      	adds	r3, #8
 80047d6:	0006      	movs	r6, r0
 80047d8:	001f      	movs	r7, r3
 80047da:	2b0c      	cmp	r3, #12
 80047dc:	d238      	bcs.n	8004850 <_malloc_r+0x84>
 80047de:	270c      	movs	r7, #12
 80047e0:	42b9      	cmp	r1, r7
 80047e2:	d837      	bhi.n	8004854 <_malloc_r+0x88>
 80047e4:	0030      	movs	r0, r6
 80047e6:	f000 f873 	bl	80048d0 <__malloc_lock>
 80047ea:	4b38      	ldr	r3, [pc, #224]	; (80048cc <_malloc_r+0x100>)
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	001c      	movs	r4, r3
 80047f2:	2c00      	cmp	r4, #0
 80047f4:	d133      	bne.n	800485e <_malloc_r+0x92>
 80047f6:	0039      	movs	r1, r7
 80047f8:	0030      	movs	r0, r6
 80047fa:	f7ff ffc5 	bl	8004788 <sbrk_aligned>
 80047fe:	0004      	movs	r4, r0
 8004800:	1c43      	adds	r3, r0, #1
 8004802:	d15e      	bne.n	80048c2 <_malloc_r+0xf6>
 8004804:	9b00      	ldr	r3, [sp, #0]
 8004806:	681c      	ldr	r4, [r3, #0]
 8004808:	0025      	movs	r5, r4
 800480a:	2d00      	cmp	r5, #0
 800480c:	d14e      	bne.n	80048ac <_malloc_r+0xe0>
 800480e:	2c00      	cmp	r4, #0
 8004810:	d051      	beq.n	80048b6 <_malloc_r+0xea>
 8004812:	6823      	ldr	r3, [r4, #0]
 8004814:	0029      	movs	r1, r5
 8004816:	18e3      	adds	r3, r4, r3
 8004818:	0030      	movs	r0, r6
 800481a:	9301      	str	r3, [sp, #4]
 800481c:	f000 fb5e 	bl	8004edc <_sbrk_r>
 8004820:	9b01      	ldr	r3, [sp, #4]
 8004822:	4283      	cmp	r3, r0
 8004824:	d147      	bne.n	80048b6 <_malloc_r+0xea>
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	0030      	movs	r0, r6
 800482a:	1aff      	subs	r7, r7, r3
 800482c:	0039      	movs	r1, r7
 800482e:	f7ff ffab 	bl	8004788 <sbrk_aligned>
 8004832:	3001      	adds	r0, #1
 8004834:	d03f      	beq.n	80048b6 <_malloc_r+0xea>
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	19db      	adds	r3, r3, r7
 800483a:	6023      	str	r3, [r4, #0]
 800483c:	9b00      	ldr	r3, [sp, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d040      	beq.n	80048c6 <_malloc_r+0xfa>
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	42a2      	cmp	r2, r4
 8004848:	d133      	bne.n	80048b2 <_malloc_r+0xe6>
 800484a:	2200      	movs	r2, #0
 800484c:	605a      	str	r2, [r3, #4]
 800484e:	e014      	b.n	800487a <_malloc_r+0xae>
 8004850:	2b00      	cmp	r3, #0
 8004852:	dac5      	bge.n	80047e0 <_malloc_r+0x14>
 8004854:	230c      	movs	r3, #12
 8004856:	2500      	movs	r5, #0
 8004858:	6033      	str	r3, [r6, #0]
 800485a:	0028      	movs	r0, r5
 800485c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800485e:	6821      	ldr	r1, [r4, #0]
 8004860:	1bc9      	subs	r1, r1, r7
 8004862:	d420      	bmi.n	80048a6 <_malloc_r+0xda>
 8004864:	290b      	cmp	r1, #11
 8004866:	d918      	bls.n	800489a <_malloc_r+0xce>
 8004868:	19e2      	adds	r2, r4, r7
 800486a:	6027      	str	r7, [r4, #0]
 800486c:	42a3      	cmp	r3, r4
 800486e:	d112      	bne.n	8004896 <_malloc_r+0xca>
 8004870:	9b00      	ldr	r3, [sp, #0]
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	6863      	ldr	r3, [r4, #4]
 8004876:	6011      	str	r1, [r2, #0]
 8004878:	6053      	str	r3, [r2, #4]
 800487a:	0030      	movs	r0, r6
 800487c:	0025      	movs	r5, r4
 800487e:	f000 f82f 	bl	80048e0 <__malloc_unlock>
 8004882:	2207      	movs	r2, #7
 8004884:	350b      	adds	r5, #11
 8004886:	1d23      	adds	r3, r4, #4
 8004888:	4395      	bics	r5, r2
 800488a:	1aea      	subs	r2, r5, r3
 800488c:	429d      	cmp	r5, r3
 800488e:	d0e4      	beq.n	800485a <_malloc_r+0x8e>
 8004890:	1b5b      	subs	r3, r3, r5
 8004892:	50a3      	str	r3, [r4, r2]
 8004894:	e7e1      	b.n	800485a <_malloc_r+0x8e>
 8004896:	605a      	str	r2, [r3, #4]
 8004898:	e7ec      	b.n	8004874 <_malloc_r+0xa8>
 800489a:	6862      	ldr	r2, [r4, #4]
 800489c:	42a3      	cmp	r3, r4
 800489e:	d1d5      	bne.n	800484c <_malloc_r+0x80>
 80048a0:	9b00      	ldr	r3, [sp, #0]
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	e7e9      	b.n	800487a <_malloc_r+0xae>
 80048a6:	0023      	movs	r3, r4
 80048a8:	6864      	ldr	r4, [r4, #4]
 80048aa:	e7a2      	b.n	80047f2 <_malloc_r+0x26>
 80048ac:	002c      	movs	r4, r5
 80048ae:	686d      	ldr	r5, [r5, #4]
 80048b0:	e7ab      	b.n	800480a <_malloc_r+0x3e>
 80048b2:	0013      	movs	r3, r2
 80048b4:	e7c4      	b.n	8004840 <_malloc_r+0x74>
 80048b6:	230c      	movs	r3, #12
 80048b8:	0030      	movs	r0, r6
 80048ba:	6033      	str	r3, [r6, #0]
 80048bc:	f000 f810 	bl	80048e0 <__malloc_unlock>
 80048c0:	e7cb      	b.n	800485a <_malloc_r+0x8e>
 80048c2:	6027      	str	r7, [r4, #0]
 80048c4:	e7d9      	b.n	800487a <_malloc_r+0xae>
 80048c6:	605b      	str	r3, [r3, #4]
 80048c8:	deff      	udf	#255	; 0xff
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	20000354 	.word	0x20000354

080048d0 <__malloc_lock>:
 80048d0:	b510      	push	{r4, lr}
 80048d2:	4802      	ldr	r0, [pc, #8]	; (80048dc <__malloc_lock+0xc>)
 80048d4:	f7ff ff0c 	bl	80046f0 <__retarget_lock_acquire_recursive>
 80048d8:	bd10      	pop	{r4, pc}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	20000350 	.word	0x20000350

080048e0 <__malloc_unlock>:
 80048e0:	b510      	push	{r4, lr}
 80048e2:	4802      	ldr	r0, [pc, #8]	; (80048ec <__malloc_unlock+0xc>)
 80048e4:	f7ff ff05 	bl	80046f2 <__retarget_lock_release_recursive>
 80048e8:	bd10      	pop	{r4, pc}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	20000350 	.word	0x20000350

080048f0 <__ssputs_r>:
 80048f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048f2:	b085      	sub	sp, #20
 80048f4:	9301      	str	r3, [sp, #4]
 80048f6:	9203      	str	r2, [sp, #12]
 80048f8:	688e      	ldr	r6, [r1, #8]
 80048fa:	9a01      	ldr	r2, [sp, #4]
 80048fc:	0007      	movs	r7, r0
 80048fe:	000c      	movs	r4, r1
 8004900:	680b      	ldr	r3, [r1, #0]
 8004902:	4296      	cmp	r6, r2
 8004904:	d831      	bhi.n	800496a <__ssputs_r+0x7a>
 8004906:	898a      	ldrh	r2, [r1, #12]
 8004908:	2190      	movs	r1, #144	; 0x90
 800490a:	00c9      	lsls	r1, r1, #3
 800490c:	420a      	tst	r2, r1
 800490e:	d029      	beq.n	8004964 <__ssputs_r+0x74>
 8004910:	2003      	movs	r0, #3
 8004912:	6921      	ldr	r1, [r4, #16]
 8004914:	1a5b      	subs	r3, r3, r1
 8004916:	9302      	str	r3, [sp, #8]
 8004918:	6963      	ldr	r3, [r4, #20]
 800491a:	4343      	muls	r3, r0
 800491c:	0fdd      	lsrs	r5, r3, #31
 800491e:	18ed      	adds	r5, r5, r3
 8004920:	9b01      	ldr	r3, [sp, #4]
 8004922:	9802      	ldr	r0, [sp, #8]
 8004924:	3301      	adds	r3, #1
 8004926:	181b      	adds	r3, r3, r0
 8004928:	106d      	asrs	r5, r5, #1
 800492a:	42ab      	cmp	r3, r5
 800492c:	d900      	bls.n	8004930 <__ssputs_r+0x40>
 800492e:	001d      	movs	r5, r3
 8004930:	0552      	lsls	r2, r2, #21
 8004932:	d529      	bpl.n	8004988 <__ssputs_r+0x98>
 8004934:	0029      	movs	r1, r5
 8004936:	0038      	movs	r0, r7
 8004938:	f7ff ff48 	bl	80047cc <_malloc_r>
 800493c:	1e06      	subs	r6, r0, #0
 800493e:	d02d      	beq.n	800499c <__ssputs_r+0xac>
 8004940:	9a02      	ldr	r2, [sp, #8]
 8004942:	6921      	ldr	r1, [r4, #16]
 8004944:	f000 fae7 	bl	8004f16 <memcpy>
 8004948:	89a2      	ldrh	r2, [r4, #12]
 800494a:	4b19      	ldr	r3, [pc, #100]	; (80049b0 <__ssputs_r+0xc0>)
 800494c:	401a      	ands	r2, r3
 800494e:	2380      	movs	r3, #128	; 0x80
 8004950:	4313      	orrs	r3, r2
 8004952:	81a3      	strh	r3, [r4, #12]
 8004954:	9b02      	ldr	r3, [sp, #8]
 8004956:	6126      	str	r6, [r4, #16]
 8004958:	18f6      	adds	r6, r6, r3
 800495a:	6026      	str	r6, [r4, #0]
 800495c:	6165      	str	r5, [r4, #20]
 800495e:	9e01      	ldr	r6, [sp, #4]
 8004960:	1aed      	subs	r5, r5, r3
 8004962:	60a5      	str	r5, [r4, #8]
 8004964:	9b01      	ldr	r3, [sp, #4]
 8004966:	429e      	cmp	r6, r3
 8004968:	d900      	bls.n	800496c <__ssputs_r+0x7c>
 800496a:	9e01      	ldr	r6, [sp, #4]
 800496c:	0032      	movs	r2, r6
 800496e:	9903      	ldr	r1, [sp, #12]
 8004970:	6820      	ldr	r0, [r4, #0]
 8004972:	f000 fa9f 	bl	8004eb4 <memmove>
 8004976:	2000      	movs	r0, #0
 8004978:	68a3      	ldr	r3, [r4, #8]
 800497a:	1b9b      	subs	r3, r3, r6
 800497c:	60a3      	str	r3, [r4, #8]
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	199b      	adds	r3, r3, r6
 8004982:	6023      	str	r3, [r4, #0]
 8004984:	b005      	add	sp, #20
 8004986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004988:	002a      	movs	r2, r5
 800498a:	0038      	movs	r0, r7
 800498c:	f000 facc 	bl	8004f28 <_realloc_r>
 8004990:	1e06      	subs	r6, r0, #0
 8004992:	d1df      	bne.n	8004954 <__ssputs_r+0x64>
 8004994:	0038      	movs	r0, r7
 8004996:	6921      	ldr	r1, [r4, #16]
 8004998:	f7ff feac 	bl	80046f4 <_free_r>
 800499c:	230c      	movs	r3, #12
 800499e:	2001      	movs	r0, #1
 80049a0:	603b      	str	r3, [r7, #0]
 80049a2:	89a2      	ldrh	r2, [r4, #12]
 80049a4:	3334      	adds	r3, #52	; 0x34
 80049a6:	4313      	orrs	r3, r2
 80049a8:	81a3      	strh	r3, [r4, #12]
 80049aa:	4240      	negs	r0, r0
 80049ac:	e7ea      	b.n	8004984 <__ssputs_r+0x94>
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	fffffb7f 	.word	0xfffffb7f

080049b4 <_svfiprintf_r>:
 80049b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049b6:	b0a1      	sub	sp, #132	; 0x84
 80049b8:	9003      	str	r0, [sp, #12]
 80049ba:	001d      	movs	r5, r3
 80049bc:	898b      	ldrh	r3, [r1, #12]
 80049be:	000f      	movs	r7, r1
 80049c0:	0016      	movs	r6, r2
 80049c2:	061b      	lsls	r3, r3, #24
 80049c4:	d511      	bpl.n	80049ea <_svfiprintf_r+0x36>
 80049c6:	690b      	ldr	r3, [r1, #16]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10e      	bne.n	80049ea <_svfiprintf_r+0x36>
 80049cc:	2140      	movs	r1, #64	; 0x40
 80049ce:	f7ff fefd 	bl	80047cc <_malloc_r>
 80049d2:	6038      	str	r0, [r7, #0]
 80049d4:	6138      	str	r0, [r7, #16]
 80049d6:	2800      	cmp	r0, #0
 80049d8:	d105      	bne.n	80049e6 <_svfiprintf_r+0x32>
 80049da:	230c      	movs	r3, #12
 80049dc:	9a03      	ldr	r2, [sp, #12]
 80049de:	3801      	subs	r0, #1
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	b021      	add	sp, #132	; 0x84
 80049e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049e6:	2340      	movs	r3, #64	; 0x40
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	2300      	movs	r3, #0
 80049ec:	ac08      	add	r4, sp, #32
 80049ee:	6163      	str	r3, [r4, #20]
 80049f0:	3320      	adds	r3, #32
 80049f2:	7663      	strb	r3, [r4, #25]
 80049f4:	3310      	adds	r3, #16
 80049f6:	76a3      	strb	r3, [r4, #26]
 80049f8:	9507      	str	r5, [sp, #28]
 80049fa:	0035      	movs	r5, r6
 80049fc:	782b      	ldrb	r3, [r5, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <_svfiprintf_r+0x52>
 8004a02:	2b25      	cmp	r3, #37	; 0x25
 8004a04:	d148      	bne.n	8004a98 <_svfiprintf_r+0xe4>
 8004a06:	1bab      	subs	r3, r5, r6
 8004a08:	9305      	str	r3, [sp, #20]
 8004a0a:	42b5      	cmp	r5, r6
 8004a0c:	d00b      	beq.n	8004a26 <_svfiprintf_r+0x72>
 8004a0e:	0032      	movs	r2, r6
 8004a10:	0039      	movs	r1, r7
 8004a12:	9803      	ldr	r0, [sp, #12]
 8004a14:	f7ff ff6c 	bl	80048f0 <__ssputs_r>
 8004a18:	3001      	adds	r0, #1
 8004a1a:	d100      	bne.n	8004a1e <_svfiprintf_r+0x6a>
 8004a1c:	e0af      	b.n	8004b7e <_svfiprintf_r+0x1ca>
 8004a1e:	6963      	ldr	r3, [r4, #20]
 8004a20:	9a05      	ldr	r2, [sp, #20]
 8004a22:	189b      	adds	r3, r3, r2
 8004a24:	6163      	str	r3, [r4, #20]
 8004a26:	782b      	ldrb	r3, [r5, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d100      	bne.n	8004a2e <_svfiprintf_r+0x7a>
 8004a2c:	e0a7      	b.n	8004b7e <_svfiprintf_r+0x1ca>
 8004a2e:	2201      	movs	r2, #1
 8004a30:	2300      	movs	r3, #0
 8004a32:	4252      	negs	r2, r2
 8004a34:	6062      	str	r2, [r4, #4]
 8004a36:	a904      	add	r1, sp, #16
 8004a38:	3254      	adds	r2, #84	; 0x54
 8004a3a:	1852      	adds	r2, r2, r1
 8004a3c:	1c6e      	adds	r6, r5, #1
 8004a3e:	6023      	str	r3, [r4, #0]
 8004a40:	60e3      	str	r3, [r4, #12]
 8004a42:	60a3      	str	r3, [r4, #8]
 8004a44:	7013      	strb	r3, [r2, #0]
 8004a46:	65a3      	str	r3, [r4, #88]	; 0x58
 8004a48:	4b55      	ldr	r3, [pc, #340]	; (8004ba0 <_svfiprintf_r+0x1ec>)
 8004a4a:	2205      	movs	r2, #5
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	7831      	ldrb	r1, [r6, #0]
 8004a50:	9305      	str	r3, [sp, #20]
 8004a52:	f000 fa55 	bl	8004f00 <memchr>
 8004a56:	1c75      	adds	r5, r6, #1
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	d11f      	bne.n	8004a9c <_svfiprintf_r+0xe8>
 8004a5c:	6822      	ldr	r2, [r4, #0]
 8004a5e:	06d3      	lsls	r3, r2, #27
 8004a60:	d504      	bpl.n	8004a6c <_svfiprintf_r+0xb8>
 8004a62:	2353      	movs	r3, #83	; 0x53
 8004a64:	a904      	add	r1, sp, #16
 8004a66:	185b      	adds	r3, r3, r1
 8004a68:	2120      	movs	r1, #32
 8004a6a:	7019      	strb	r1, [r3, #0]
 8004a6c:	0713      	lsls	r3, r2, #28
 8004a6e:	d504      	bpl.n	8004a7a <_svfiprintf_r+0xc6>
 8004a70:	2353      	movs	r3, #83	; 0x53
 8004a72:	a904      	add	r1, sp, #16
 8004a74:	185b      	adds	r3, r3, r1
 8004a76:	212b      	movs	r1, #43	; 0x2b
 8004a78:	7019      	strb	r1, [r3, #0]
 8004a7a:	7833      	ldrb	r3, [r6, #0]
 8004a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a7e:	d016      	beq.n	8004aae <_svfiprintf_r+0xfa>
 8004a80:	0035      	movs	r5, r6
 8004a82:	2100      	movs	r1, #0
 8004a84:	200a      	movs	r0, #10
 8004a86:	68e3      	ldr	r3, [r4, #12]
 8004a88:	782a      	ldrb	r2, [r5, #0]
 8004a8a:	1c6e      	adds	r6, r5, #1
 8004a8c:	3a30      	subs	r2, #48	; 0x30
 8004a8e:	2a09      	cmp	r2, #9
 8004a90:	d94e      	bls.n	8004b30 <_svfiprintf_r+0x17c>
 8004a92:	2900      	cmp	r1, #0
 8004a94:	d111      	bne.n	8004aba <_svfiprintf_r+0x106>
 8004a96:	e017      	b.n	8004ac8 <_svfiprintf_r+0x114>
 8004a98:	3501      	adds	r5, #1
 8004a9a:	e7af      	b.n	80049fc <_svfiprintf_r+0x48>
 8004a9c:	9b05      	ldr	r3, [sp, #20]
 8004a9e:	6822      	ldr	r2, [r4, #0]
 8004aa0:	1ac0      	subs	r0, r0, r3
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	4083      	lsls	r3, r0
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	002e      	movs	r6, r5
 8004aaa:	6023      	str	r3, [r4, #0]
 8004aac:	e7cc      	b.n	8004a48 <_svfiprintf_r+0x94>
 8004aae:	9b07      	ldr	r3, [sp, #28]
 8004ab0:	1d19      	adds	r1, r3, #4
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	9107      	str	r1, [sp, #28]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	db01      	blt.n	8004abe <_svfiprintf_r+0x10a>
 8004aba:	930b      	str	r3, [sp, #44]	; 0x2c
 8004abc:	e004      	b.n	8004ac8 <_svfiprintf_r+0x114>
 8004abe:	425b      	negs	r3, r3
 8004ac0:	60e3      	str	r3, [r4, #12]
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	6023      	str	r3, [r4, #0]
 8004ac8:	782b      	ldrb	r3, [r5, #0]
 8004aca:	2b2e      	cmp	r3, #46	; 0x2e
 8004acc:	d10a      	bne.n	8004ae4 <_svfiprintf_r+0x130>
 8004ace:	786b      	ldrb	r3, [r5, #1]
 8004ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ad2:	d135      	bne.n	8004b40 <_svfiprintf_r+0x18c>
 8004ad4:	9b07      	ldr	r3, [sp, #28]
 8004ad6:	3502      	adds	r5, #2
 8004ad8:	1d1a      	adds	r2, r3, #4
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	9207      	str	r2, [sp, #28]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	db2b      	blt.n	8004b3a <_svfiprintf_r+0x186>
 8004ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ae4:	4e2f      	ldr	r6, [pc, #188]	; (8004ba4 <_svfiprintf_r+0x1f0>)
 8004ae6:	2203      	movs	r2, #3
 8004ae8:	0030      	movs	r0, r6
 8004aea:	7829      	ldrb	r1, [r5, #0]
 8004aec:	f000 fa08 	bl	8004f00 <memchr>
 8004af0:	2800      	cmp	r0, #0
 8004af2:	d006      	beq.n	8004b02 <_svfiprintf_r+0x14e>
 8004af4:	2340      	movs	r3, #64	; 0x40
 8004af6:	1b80      	subs	r0, r0, r6
 8004af8:	4083      	lsls	r3, r0
 8004afa:	6822      	ldr	r2, [r4, #0]
 8004afc:	3501      	adds	r5, #1
 8004afe:	4313      	orrs	r3, r2
 8004b00:	6023      	str	r3, [r4, #0]
 8004b02:	7829      	ldrb	r1, [r5, #0]
 8004b04:	2206      	movs	r2, #6
 8004b06:	4828      	ldr	r0, [pc, #160]	; (8004ba8 <_svfiprintf_r+0x1f4>)
 8004b08:	1c6e      	adds	r6, r5, #1
 8004b0a:	7621      	strb	r1, [r4, #24]
 8004b0c:	f000 f9f8 	bl	8004f00 <memchr>
 8004b10:	2800      	cmp	r0, #0
 8004b12:	d03c      	beq.n	8004b8e <_svfiprintf_r+0x1da>
 8004b14:	4b25      	ldr	r3, [pc, #148]	; (8004bac <_svfiprintf_r+0x1f8>)
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d125      	bne.n	8004b66 <_svfiprintf_r+0x1b2>
 8004b1a:	2207      	movs	r2, #7
 8004b1c:	9b07      	ldr	r3, [sp, #28]
 8004b1e:	3307      	adds	r3, #7
 8004b20:	4393      	bics	r3, r2
 8004b22:	3308      	adds	r3, #8
 8004b24:	9307      	str	r3, [sp, #28]
 8004b26:	6963      	ldr	r3, [r4, #20]
 8004b28:	9a04      	ldr	r2, [sp, #16]
 8004b2a:	189b      	adds	r3, r3, r2
 8004b2c:	6163      	str	r3, [r4, #20]
 8004b2e:	e764      	b.n	80049fa <_svfiprintf_r+0x46>
 8004b30:	4343      	muls	r3, r0
 8004b32:	0035      	movs	r5, r6
 8004b34:	2101      	movs	r1, #1
 8004b36:	189b      	adds	r3, r3, r2
 8004b38:	e7a6      	b.n	8004a88 <_svfiprintf_r+0xd4>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	425b      	negs	r3, r3
 8004b3e:	e7d0      	b.n	8004ae2 <_svfiprintf_r+0x12e>
 8004b40:	2300      	movs	r3, #0
 8004b42:	200a      	movs	r0, #10
 8004b44:	001a      	movs	r2, r3
 8004b46:	3501      	adds	r5, #1
 8004b48:	6063      	str	r3, [r4, #4]
 8004b4a:	7829      	ldrb	r1, [r5, #0]
 8004b4c:	1c6e      	adds	r6, r5, #1
 8004b4e:	3930      	subs	r1, #48	; 0x30
 8004b50:	2909      	cmp	r1, #9
 8004b52:	d903      	bls.n	8004b5c <_svfiprintf_r+0x1a8>
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0c5      	beq.n	8004ae4 <_svfiprintf_r+0x130>
 8004b58:	9209      	str	r2, [sp, #36]	; 0x24
 8004b5a:	e7c3      	b.n	8004ae4 <_svfiprintf_r+0x130>
 8004b5c:	4342      	muls	r2, r0
 8004b5e:	0035      	movs	r5, r6
 8004b60:	2301      	movs	r3, #1
 8004b62:	1852      	adds	r2, r2, r1
 8004b64:	e7f1      	b.n	8004b4a <_svfiprintf_r+0x196>
 8004b66:	aa07      	add	r2, sp, #28
 8004b68:	9200      	str	r2, [sp, #0]
 8004b6a:	0021      	movs	r1, r4
 8004b6c:	003a      	movs	r2, r7
 8004b6e:	4b10      	ldr	r3, [pc, #64]	; (8004bb0 <_svfiprintf_r+0x1fc>)
 8004b70:	9803      	ldr	r0, [sp, #12]
 8004b72:	e000      	b.n	8004b76 <_svfiprintf_r+0x1c2>
 8004b74:	bf00      	nop
 8004b76:	9004      	str	r0, [sp, #16]
 8004b78:	9b04      	ldr	r3, [sp, #16]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	d1d3      	bne.n	8004b26 <_svfiprintf_r+0x172>
 8004b7e:	89bb      	ldrh	r3, [r7, #12]
 8004b80:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004b82:	065b      	lsls	r3, r3, #25
 8004b84:	d400      	bmi.n	8004b88 <_svfiprintf_r+0x1d4>
 8004b86:	e72c      	b.n	80049e2 <_svfiprintf_r+0x2e>
 8004b88:	2001      	movs	r0, #1
 8004b8a:	4240      	negs	r0, r0
 8004b8c:	e729      	b.n	80049e2 <_svfiprintf_r+0x2e>
 8004b8e:	aa07      	add	r2, sp, #28
 8004b90:	9200      	str	r2, [sp, #0]
 8004b92:	0021      	movs	r1, r4
 8004b94:	003a      	movs	r2, r7
 8004b96:	4b06      	ldr	r3, [pc, #24]	; (8004bb0 <_svfiprintf_r+0x1fc>)
 8004b98:	9803      	ldr	r0, [sp, #12]
 8004b9a:	f000 f87b 	bl	8004c94 <_printf_i>
 8004b9e:	e7ea      	b.n	8004b76 <_svfiprintf_r+0x1c2>
 8004ba0:	08005070 	.word	0x08005070
 8004ba4:	08005076 	.word	0x08005076
 8004ba8:	0800507a 	.word	0x0800507a
 8004bac:	00000000 	.word	0x00000000
 8004bb0:	080048f1 	.word	0x080048f1

08004bb4 <_printf_common>:
 8004bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bb6:	0016      	movs	r6, r2
 8004bb8:	9301      	str	r3, [sp, #4]
 8004bba:	688a      	ldr	r2, [r1, #8]
 8004bbc:	690b      	ldr	r3, [r1, #16]
 8004bbe:	000c      	movs	r4, r1
 8004bc0:	9000      	str	r0, [sp, #0]
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	da00      	bge.n	8004bc8 <_printf_common+0x14>
 8004bc6:	0013      	movs	r3, r2
 8004bc8:	0022      	movs	r2, r4
 8004bca:	6033      	str	r3, [r6, #0]
 8004bcc:	3243      	adds	r2, #67	; 0x43
 8004bce:	7812      	ldrb	r2, [r2, #0]
 8004bd0:	2a00      	cmp	r2, #0
 8004bd2:	d001      	beq.n	8004bd8 <_printf_common+0x24>
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	6033      	str	r3, [r6, #0]
 8004bd8:	6823      	ldr	r3, [r4, #0]
 8004bda:	069b      	lsls	r3, r3, #26
 8004bdc:	d502      	bpl.n	8004be4 <_printf_common+0x30>
 8004bde:	6833      	ldr	r3, [r6, #0]
 8004be0:	3302      	adds	r3, #2
 8004be2:	6033      	str	r3, [r6, #0]
 8004be4:	6822      	ldr	r2, [r4, #0]
 8004be6:	2306      	movs	r3, #6
 8004be8:	0015      	movs	r5, r2
 8004bea:	401d      	ands	r5, r3
 8004bec:	421a      	tst	r2, r3
 8004bee:	d027      	beq.n	8004c40 <_printf_common+0x8c>
 8004bf0:	0023      	movs	r3, r4
 8004bf2:	3343      	adds	r3, #67	; 0x43
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	1e5a      	subs	r2, r3, #1
 8004bf8:	4193      	sbcs	r3, r2
 8004bfa:	6822      	ldr	r2, [r4, #0]
 8004bfc:	0692      	lsls	r2, r2, #26
 8004bfe:	d430      	bmi.n	8004c62 <_printf_common+0xae>
 8004c00:	0022      	movs	r2, r4
 8004c02:	9901      	ldr	r1, [sp, #4]
 8004c04:	9800      	ldr	r0, [sp, #0]
 8004c06:	9d08      	ldr	r5, [sp, #32]
 8004c08:	3243      	adds	r2, #67	; 0x43
 8004c0a:	47a8      	blx	r5
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	d025      	beq.n	8004c5c <_printf_common+0xa8>
 8004c10:	2206      	movs	r2, #6
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	2500      	movs	r5, #0
 8004c16:	4013      	ands	r3, r2
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d105      	bne.n	8004c28 <_printf_common+0x74>
 8004c1c:	6833      	ldr	r3, [r6, #0]
 8004c1e:	68e5      	ldr	r5, [r4, #12]
 8004c20:	1aed      	subs	r5, r5, r3
 8004c22:	43eb      	mvns	r3, r5
 8004c24:	17db      	asrs	r3, r3, #31
 8004c26:	401d      	ands	r5, r3
 8004c28:	68a3      	ldr	r3, [r4, #8]
 8004c2a:	6922      	ldr	r2, [r4, #16]
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	dd01      	ble.n	8004c34 <_printf_common+0x80>
 8004c30:	1a9b      	subs	r3, r3, r2
 8004c32:	18ed      	adds	r5, r5, r3
 8004c34:	2600      	movs	r6, #0
 8004c36:	42b5      	cmp	r5, r6
 8004c38:	d120      	bne.n	8004c7c <_printf_common+0xc8>
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	e010      	b.n	8004c60 <_printf_common+0xac>
 8004c3e:	3501      	adds	r5, #1
 8004c40:	68e3      	ldr	r3, [r4, #12]
 8004c42:	6832      	ldr	r2, [r6, #0]
 8004c44:	1a9b      	subs	r3, r3, r2
 8004c46:	42ab      	cmp	r3, r5
 8004c48:	ddd2      	ble.n	8004bf0 <_printf_common+0x3c>
 8004c4a:	0022      	movs	r2, r4
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	9901      	ldr	r1, [sp, #4]
 8004c50:	9800      	ldr	r0, [sp, #0]
 8004c52:	9f08      	ldr	r7, [sp, #32]
 8004c54:	3219      	adds	r2, #25
 8004c56:	47b8      	blx	r7
 8004c58:	3001      	adds	r0, #1
 8004c5a:	d1f0      	bne.n	8004c3e <_printf_common+0x8a>
 8004c5c:	2001      	movs	r0, #1
 8004c5e:	4240      	negs	r0, r0
 8004c60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c62:	2030      	movs	r0, #48	; 0x30
 8004c64:	18e1      	adds	r1, r4, r3
 8004c66:	3143      	adds	r1, #67	; 0x43
 8004c68:	7008      	strb	r0, [r1, #0]
 8004c6a:	0021      	movs	r1, r4
 8004c6c:	1c5a      	adds	r2, r3, #1
 8004c6e:	3145      	adds	r1, #69	; 0x45
 8004c70:	7809      	ldrb	r1, [r1, #0]
 8004c72:	18a2      	adds	r2, r4, r2
 8004c74:	3243      	adds	r2, #67	; 0x43
 8004c76:	3302      	adds	r3, #2
 8004c78:	7011      	strb	r1, [r2, #0]
 8004c7a:	e7c1      	b.n	8004c00 <_printf_common+0x4c>
 8004c7c:	0022      	movs	r2, r4
 8004c7e:	2301      	movs	r3, #1
 8004c80:	9901      	ldr	r1, [sp, #4]
 8004c82:	9800      	ldr	r0, [sp, #0]
 8004c84:	9f08      	ldr	r7, [sp, #32]
 8004c86:	321a      	adds	r2, #26
 8004c88:	47b8      	blx	r7
 8004c8a:	3001      	adds	r0, #1
 8004c8c:	d0e6      	beq.n	8004c5c <_printf_common+0xa8>
 8004c8e:	3601      	adds	r6, #1
 8004c90:	e7d1      	b.n	8004c36 <_printf_common+0x82>
	...

08004c94 <_printf_i>:
 8004c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c96:	b08b      	sub	sp, #44	; 0x2c
 8004c98:	9206      	str	r2, [sp, #24]
 8004c9a:	000a      	movs	r2, r1
 8004c9c:	3243      	adds	r2, #67	; 0x43
 8004c9e:	9307      	str	r3, [sp, #28]
 8004ca0:	9005      	str	r0, [sp, #20]
 8004ca2:	9204      	str	r2, [sp, #16]
 8004ca4:	7e0a      	ldrb	r2, [r1, #24]
 8004ca6:	000c      	movs	r4, r1
 8004ca8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004caa:	2a78      	cmp	r2, #120	; 0x78
 8004cac:	d809      	bhi.n	8004cc2 <_printf_i+0x2e>
 8004cae:	2a62      	cmp	r2, #98	; 0x62
 8004cb0:	d80b      	bhi.n	8004cca <_printf_i+0x36>
 8004cb2:	2a00      	cmp	r2, #0
 8004cb4:	d100      	bne.n	8004cb8 <_printf_i+0x24>
 8004cb6:	e0be      	b.n	8004e36 <_printf_i+0x1a2>
 8004cb8:	497c      	ldr	r1, [pc, #496]	; (8004eac <_printf_i+0x218>)
 8004cba:	9103      	str	r1, [sp, #12]
 8004cbc:	2a58      	cmp	r2, #88	; 0x58
 8004cbe:	d100      	bne.n	8004cc2 <_printf_i+0x2e>
 8004cc0:	e093      	b.n	8004dea <_printf_i+0x156>
 8004cc2:	0026      	movs	r6, r4
 8004cc4:	3642      	adds	r6, #66	; 0x42
 8004cc6:	7032      	strb	r2, [r6, #0]
 8004cc8:	e022      	b.n	8004d10 <_printf_i+0x7c>
 8004cca:	0010      	movs	r0, r2
 8004ccc:	3863      	subs	r0, #99	; 0x63
 8004cce:	2815      	cmp	r0, #21
 8004cd0:	d8f7      	bhi.n	8004cc2 <_printf_i+0x2e>
 8004cd2:	f7fb fa21 	bl	8000118 <__gnu_thumb1_case_shi>
 8004cd6:	0016      	.short	0x0016
 8004cd8:	fff6001f 	.word	0xfff6001f
 8004cdc:	fff6fff6 	.word	0xfff6fff6
 8004ce0:	001ffff6 	.word	0x001ffff6
 8004ce4:	fff6fff6 	.word	0xfff6fff6
 8004ce8:	fff6fff6 	.word	0xfff6fff6
 8004cec:	003600a3 	.word	0x003600a3
 8004cf0:	fff60083 	.word	0xfff60083
 8004cf4:	00b4fff6 	.word	0x00b4fff6
 8004cf8:	0036fff6 	.word	0x0036fff6
 8004cfc:	fff6fff6 	.word	0xfff6fff6
 8004d00:	0087      	.short	0x0087
 8004d02:	0026      	movs	r6, r4
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	3642      	adds	r6, #66	; 0x42
 8004d08:	1d11      	adds	r1, r2, #4
 8004d0a:	6019      	str	r1, [r3, #0]
 8004d0c:	6813      	ldr	r3, [r2, #0]
 8004d0e:	7033      	strb	r3, [r6, #0]
 8004d10:	2301      	movs	r3, #1
 8004d12:	e0a2      	b.n	8004e5a <_printf_i+0x1c6>
 8004d14:	6818      	ldr	r0, [r3, #0]
 8004d16:	6809      	ldr	r1, [r1, #0]
 8004d18:	1d02      	adds	r2, r0, #4
 8004d1a:	060d      	lsls	r5, r1, #24
 8004d1c:	d50b      	bpl.n	8004d36 <_printf_i+0xa2>
 8004d1e:	6805      	ldr	r5, [r0, #0]
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	2d00      	cmp	r5, #0
 8004d24:	da03      	bge.n	8004d2e <_printf_i+0x9a>
 8004d26:	232d      	movs	r3, #45	; 0x2d
 8004d28:	9a04      	ldr	r2, [sp, #16]
 8004d2a:	426d      	negs	r5, r5
 8004d2c:	7013      	strb	r3, [r2, #0]
 8004d2e:	4b5f      	ldr	r3, [pc, #380]	; (8004eac <_printf_i+0x218>)
 8004d30:	270a      	movs	r7, #10
 8004d32:	9303      	str	r3, [sp, #12]
 8004d34:	e01b      	b.n	8004d6e <_printf_i+0xda>
 8004d36:	6805      	ldr	r5, [r0, #0]
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	0649      	lsls	r1, r1, #25
 8004d3c:	d5f1      	bpl.n	8004d22 <_printf_i+0x8e>
 8004d3e:	b22d      	sxth	r5, r5
 8004d40:	e7ef      	b.n	8004d22 <_printf_i+0x8e>
 8004d42:	680d      	ldr	r5, [r1, #0]
 8004d44:	6819      	ldr	r1, [r3, #0]
 8004d46:	1d08      	adds	r0, r1, #4
 8004d48:	6018      	str	r0, [r3, #0]
 8004d4a:	062e      	lsls	r6, r5, #24
 8004d4c:	d501      	bpl.n	8004d52 <_printf_i+0xbe>
 8004d4e:	680d      	ldr	r5, [r1, #0]
 8004d50:	e003      	b.n	8004d5a <_printf_i+0xc6>
 8004d52:	066d      	lsls	r5, r5, #25
 8004d54:	d5fb      	bpl.n	8004d4e <_printf_i+0xba>
 8004d56:	680d      	ldr	r5, [r1, #0]
 8004d58:	b2ad      	uxth	r5, r5
 8004d5a:	4b54      	ldr	r3, [pc, #336]	; (8004eac <_printf_i+0x218>)
 8004d5c:	2708      	movs	r7, #8
 8004d5e:	9303      	str	r3, [sp, #12]
 8004d60:	2a6f      	cmp	r2, #111	; 0x6f
 8004d62:	d000      	beq.n	8004d66 <_printf_i+0xd2>
 8004d64:	3702      	adds	r7, #2
 8004d66:	0023      	movs	r3, r4
 8004d68:	2200      	movs	r2, #0
 8004d6a:	3343      	adds	r3, #67	; 0x43
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	6863      	ldr	r3, [r4, #4]
 8004d70:	60a3      	str	r3, [r4, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	db03      	blt.n	8004d7e <_printf_i+0xea>
 8004d76:	2104      	movs	r1, #4
 8004d78:	6822      	ldr	r2, [r4, #0]
 8004d7a:	438a      	bics	r2, r1
 8004d7c:	6022      	str	r2, [r4, #0]
 8004d7e:	2d00      	cmp	r5, #0
 8004d80:	d102      	bne.n	8004d88 <_printf_i+0xf4>
 8004d82:	9e04      	ldr	r6, [sp, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00c      	beq.n	8004da2 <_printf_i+0x10e>
 8004d88:	9e04      	ldr	r6, [sp, #16]
 8004d8a:	0028      	movs	r0, r5
 8004d8c:	0039      	movs	r1, r7
 8004d8e:	f7fb fa53 	bl	8000238 <__aeabi_uidivmod>
 8004d92:	9b03      	ldr	r3, [sp, #12]
 8004d94:	3e01      	subs	r6, #1
 8004d96:	5c5b      	ldrb	r3, [r3, r1]
 8004d98:	7033      	strb	r3, [r6, #0]
 8004d9a:	002b      	movs	r3, r5
 8004d9c:	0005      	movs	r5, r0
 8004d9e:	429f      	cmp	r7, r3
 8004da0:	d9f3      	bls.n	8004d8a <_printf_i+0xf6>
 8004da2:	2f08      	cmp	r7, #8
 8004da4:	d109      	bne.n	8004dba <_printf_i+0x126>
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	07db      	lsls	r3, r3, #31
 8004daa:	d506      	bpl.n	8004dba <_printf_i+0x126>
 8004dac:	6862      	ldr	r2, [r4, #4]
 8004dae:	6923      	ldr	r3, [r4, #16]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	dc02      	bgt.n	8004dba <_printf_i+0x126>
 8004db4:	2330      	movs	r3, #48	; 0x30
 8004db6:	3e01      	subs	r6, #1
 8004db8:	7033      	strb	r3, [r6, #0]
 8004dba:	9b04      	ldr	r3, [sp, #16]
 8004dbc:	1b9b      	subs	r3, r3, r6
 8004dbe:	6123      	str	r3, [r4, #16]
 8004dc0:	9b07      	ldr	r3, [sp, #28]
 8004dc2:	0021      	movs	r1, r4
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	9805      	ldr	r0, [sp, #20]
 8004dc8:	9b06      	ldr	r3, [sp, #24]
 8004dca:	aa09      	add	r2, sp, #36	; 0x24
 8004dcc:	f7ff fef2 	bl	8004bb4 <_printf_common>
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	d147      	bne.n	8004e64 <_printf_i+0x1d0>
 8004dd4:	2001      	movs	r0, #1
 8004dd6:	4240      	negs	r0, r0
 8004dd8:	b00b      	add	sp, #44	; 0x2c
 8004dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ddc:	2220      	movs	r2, #32
 8004dde:	6809      	ldr	r1, [r1, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	6022      	str	r2, [r4, #0]
 8004de4:	2278      	movs	r2, #120	; 0x78
 8004de6:	4932      	ldr	r1, [pc, #200]	; (8004eb0 <_printf_i+0x21c>)
 8004de8:	9103      	str	r1, [sp, #12]
 8004dea:	0021      	movs	r1, r4
 8004dec:	3145      	adds	r1, #69	; 0x45
 8004dee:	700a      	strb	r2, [r1, #0]
 8004df0:	6819      	ldr	r1, [r3, #0]
 8004df2:	6822      	ldr	r2, [r4, #0]
 8004df4:	c920      	ldmia	r1!, {r5}
 8004df6:	0610      	lsls	r0, r2, #24
 8004df8:	d402      	bmi.n	8004e00 <_printf_i+0x16c>
 8004dfa:	0650      	lsls	r0, r2, #25
 8004dfc:	d500      	bpl.n	8004e00 <_printf_i+0x16c>
 8004dfe:	b2ad      	uxth	r5, r5
 8004e00:	6019      	str	r1, [r3, #0]
 8004e02:	07d3      	lsls	r3, r2, #31
 8004e04:	d502      	bpl.n	8004e0c <_printf_i+0x178>
 8004e06:	2320      	movs	r3, #32
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	6023      	str	r3, [r4, #0]
 8004e0c:	2710      	movs	r7, #16
 8004e0e:	2d00      	cmp	r5, #0
 8004e10:	d1a9      	bne.n	8004d66 <_printf_i+0xd2>
 8004e12:	2220      	movs	r2, #32
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	4393      	bics	r3, r2
 8004e18:	6023      	str	r3, [r4, #0]
 8004e1a:	e7a4      	b.n	8004d66 <_printf_i+0xd2>
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	680d      	ldr	r5, [r1, #0]
 8004e20:	1d10      	adds	r0, r2, #4
 8004e22:	6949      	ldr	r1, [r1, #20]
 8004e24:	6018      	str	r0, [r3, #0]
 8004e26:	6813      	ldr	r3, [r2, #0]
 8004e28:	062e      	lsls	r6, r5, #24
 8004e2a:	d501      	bpl.n	8004e30 <_printf_i+0x19c>
 8004e2c:	6019      	str	r1, [r3, #0]
 8004e2e:	e002      	b.n	8004e36 <_printf_i+0x1a2>
 8004e30:	066d      	lsls	r5, r5, #25
 8004e32:	d5fb      	bpl.n	8004e2c <_printf_i+0x198>
 8004e34:	8019      	strh	r1, [r3, #0]
 8004e36:	2300      	movs	r3, #0
 8004e38:	9e04      	ldr	r6, [sp, #16]
 8004e3a:	6123      	str	r3, [r4, #16]
 8004e3c:	e7c0      	b.n	8004dc0 <_printf_i+0x12c>
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	1d11      	adds	r1, r2, #4
 8004e42:	6019      	str	r1, [r3, #0]
 8004e44:	6816      	ldr	r6, [r2, #0]
 8004e46:	2100      	movs	r1, #0
 8004e48:	0030      	movs	r0, r6
 8004e4a:	6862      	ldr	r2, [r4, #4]
 8004e4c:	f000 f858 	bl	8004f00 <memchr>
 8004e50:	2800      	cmp	r0, #0
 8004e52:	d001      	beq.n	8004e58 <_printf_i+0x1c4>
 8004e54:	1b80      	subs	r0, r0, r6
 8004e56:	6060      	str	r0, [r4, #4]
 8004e58:	6863      	ldr	r3, [r4, #4]
 8004e5a:	6123      	str	r3, [r4, #16]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	9a04      	ldr	r2, [sp, #16]
 8004e60:	7013      	strb	r3, [r2, #0]
 8004e62:	e7ad      	b.n	8004dc0 <_printf_i+0x12c>
 8004e64:	0032      	movs	r2, r6
 8004e66:	6923      	ldr	r3, [r4, #16]
 8004e68:	9906      	ldr	r1, [sp, #24]
 8004e6a:	9805      	ldr	r0, [sp, #20]
 8004e6c:	9d07      	ldr	r5, [sp, #28]
 8004e6e:	47a8      	blx	r5
 8004e70:	3001      	adds	r0, #1
 8004e72:	d0af      	beq.n	8004dd4 <_printf_i+0x140>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	079b      	lsls	r3, r3, #30
 8004e78:	d415      	bmi.n	8004ea6 <_printf_i+0x212>
 8004e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e7c:	68e0      	ldr	r0, [r4, #12]
 8004e7e:	4298      	cmp	r0, r3
 8004e80:	daaa      	bge.n	8004dd8 <_printf_i+0x144>
 8004e82:	0018      	movs	r0, r3
 8004e84:	e7a8      	b.n	8004dd8 <_printf_i+0x144>
 8004e86:	0022      	movs	r2, r4
 8004e88:	2301      	movs	r3, #1
 8004e8a:	9906      	ldr	r1, [sp, #24]
 8004e8c:	9805      	ldr	r0, [sp, #20]
 8004e8e:	9e07      	ldr	r6, [sp, #28]
 8004e90:	3219      	adds	r2, #25
 8004e92:	47b0      	blx	r6
 8004e94:	3001      	adds	r0, #1
 8004e96:	d09d      	beq.n	8004dd4 <_printf_i+0x140>
 8004e98:	3501      	adds	r5, #1
 8004e9a:	68e3      	ldr	r3, [r4, #12]
 8004e9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e9e:	1a9b      	subs	r3, r3, r2
 8004ea0:	42ab      	cmp	r3, r5
 8004ea2:	dcf0      	bgt.n	8004e86 <_printf_i+0x1f2>
 8004ea4:	e7e9      	b.n	8004e7a <_printf_i+0x1e6>
 8004ea6:	2500      	movs	r5, #0
 8004ea8:	e7f7      	b.n	8004e9a <_printf_i+0x206>
 8004eaa:	46c0      	nop			; (mov r8, r8)
 8004eac:	08005081 	.word	0x08005081
 8004eb0:	08005092 	.word	0x08005092

08004eb4 <memmove>:
 8004eb4:	b510      	push	{r4, lr}
 8004eb6:	4288      	cmp	r0, r1
 8004eb8:	d902      	bls.n	8004ec0 <memmove+0xc>
 8004eba:	188b      	adds	r3, r1, r2
 8004ebc:	4298      	cmp	r0, r3
 8004ebe:	d303      	bcc.n	8004ec8 <memmove+0x14>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	e007      	b.n	8004ed4 <memmove+0x20>
 8004ec4:	5c8b      	ldrb	r3, [r1, r2]
 8004ec6:	5483      	strb	r3, [r0, r2]
 8004ec8:	3a01      	subs	r2, #1
 8004eca:	d2fb      	bcs.n	8004ec4 <memmove+0x10>
 8004ecc:	bd10      	pop	{r4, pc}
 8004ece:	5ccc      	ldrb	r4, [r1, r3]
 8004ed0:	54c4      	strb	r4, [r0, r3]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d1fa      	bne.n	8004ece <memmove+0x1a>
 8004ed8:	e7f8      	b.n	8004ecc <memmove+0x18>
	...

08004edc <_sbrk_r>:
 8004edc:	2300      	movs	r3, #0
 8004ede:	b570      	push	{r4, r5, r6, lr}
 8004ee0:	4d06      	ldr	r5, [pc, #24]	; (8004efc <_sbrk_r+0x20>)
 8004ee2:	0004      	movs	r4, r0
 8004ee4:	0008      	movs	r0, r1
 8004ee6:	602b      	str	r3, [r5, #0]
 8004ee8:	f7fc fd48 	bl	800197c <_sbrk>
 8004eec:	1c43      	adds	r3, r0, #1
 8004eee:	d103      	bne.n	8004ef8 <_sbrk_r+0x1c>
 8004ef0:	682b      	ldr	r3, [r5, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d000      	beq.n	8004ef8 <_sbrk_r+0x1c>
 8004ef6:	6023      	str	r3, [r4, #0]
 8004ef8:	bd70      	pop	{r4, r5, r6, pc}
 8004efa:	46c0      	nop			; (mov r8, r8)
 8004efc:	2000034c 	.word	0x2000034c

08004f00 <memchr>:
 8004f00:	b2c9      	uxtb	r1, r1
 8004f02:	1882      	adds	r2, r0, r2
 8004f04:	4290      	cmp	r0, r2
 8004f06:	d101      	bne.n	8004f0c <memchr+0xc>
 8004f08:	2000      	movs	r0, #0
 8004f0a:	4770      	bx	lr
 8004f0c:	7803      	ldrb	r3, [r0, #0]
 8004f0e:	428b      	cmp	r3, r1
 8004f10:	d0fb      	beq.n	8004f0a <memchr+0xa>
 8004f12:	3001      	adds	r0, #1
 8004f14:	e7f6      	b.n	8004f04 <memchr+0x4>

08004f16 <memcpy>:
 8004f16:	2300      	movs	r3, #0
 8004f18:	b510      	push	{r4, lr}
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d100      	bne.n	8004f20 <memcpy+0xa>
 8004f1e:	bd10      	pop	{r4, pc}
 8004f20:	5ccc      	ldrb	r4, [r1, r3]
 8004f22:	54c4      	strb	r4, [r0, r3]
 8004f24:	3301      	adds	r3, #1
 8004f26:	e7f8      	b.n	8004f1a <memcpy+0x4>

08004f28 <_realloc_r>:
 8004f28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f2a:	0007      	movs	r7, r0
 8004f2c:	000e      	movs	r6, r1
 8004f2e:	0014      	movs	r4, r2
 8004f30:	2900      	cmp	r1, #0
 8004f32:	d105      	bne.n	8004f40 <_realloc_r+0x18>
 8004f34:	0011      	movs	r1, r2
 8004f36:	f7ff fc49 	bl	80047cc <_malloc_r>
 8004f3a:	0005      	movs	r5, r0
 8004f3c:	0028      	movs	r0, r5
 8004f3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f40:	2a00      	cmp	r2, #0
 8004f42:	d103      	bne.n	8004f4c <_realloc_r+0x24>
 8004f44:	f7ff fbd6 	bl	80046f4 <_free_r>
 8004f48:	0025      	movs	r5, r4
 8004f4a:	e7f7      	b.n	8004f3c <_realloc_r+0x14>
 8004f4c:	f000 f81b 	bl	8004f86 <_malloc_usable_size_r>
 8004f50:	9001      	str	r0, [sp, #4]
 8004f52:	4284      	cmp	r4, r0
 8004f54:	d803      	bhi.n	8004f5e <_realloc_r+0x36>
 8004f56:	0035      	movs	r5, r6
 8004f58:	0843      	lsrs	r3, r0, #1
 8004f5a:	42a3      	cmp	r3, r4
 8004f5c:	d3ee      	bcc.n	8004f3c <_realloc_r+0x14>
 8004f5e:	0021      	movs	r1, r4
 8004f60:	0038      	movs	r0, r7
 8004f62:	f7ff fc33 	bl	80047cc <_malloc_r>
 8004f66:	1e05      	subs	r5, r0, #0
 8004f68:	d0e8      	beq.n	8004f3c <_realloc_r+0x14>
 8004f6a:	9b01      	ldr	r3, [sp, #4]
 8004f6c:	0022      	movs	r2, r4
 8004f6e:	429c      	cmp	r4, r3
 8004f70:	d900      	bls.n	8004f74 <_realloc_r+0x4c>
 8004f72:	001a      	movs	r2, r3
 8004f74:	0031      	movs	r1, r6
 8004f76:	0028      	movs	r0, r5
 8004f78:	f7ff ffcd 	bl	8004f16 <memcpy>
 8004f7c:	0031      	movs	r1, r6
 8004f7e:	0038      	movs	r0, r7
 8004f80:	f7ff fbb8 	bl	80046f4 <_free_r>
 8004f84:	e7da      	b.n	8004f3c <_realloc_r+0x14>

08004f86 <_malloc_usable_size_r>:
 8004f86:	1f0b      	subs	r3, r1, #4
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	1f18      	subs	r0, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	da01      	bge.n	8004f94 <_malloc_usable_size_r+0xe>
 8004f90:	580b      	ldr	r3, [r1, r0]
 8004f92:	18c0      	adds	r0, r0, r3
 8004f94:	4770      	bx	lr
	...

08004f98 <_init>:
 8004f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9a:	46c0      	nop			; (mov r8, r8)
 8004f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f9e:	bc08      	pop	{r3}
 8004fa0:	469e      	mov	lr, r3
 8004fa2:	4770      	bx	lr

08004fa4 <_fini>:
 8004fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa6:	46c0      	nop			; (mov r8, r8)
 8004fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004faa:	bc08      	pop	{r3}
 8004fac:	469e      	mov	lr, r3
 8004fae:	4770      	bx	lr
